
LED_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ba8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08005d78  08005d78  00006d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e38  08005e38  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005e38  08005e38  00006e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e40  08005e40  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e40  08005e40  00006e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e44  08005e44  00006e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005e48  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001178  20000060  08005ea8  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011d8  08005ea8  000071d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9b4  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fa2  00000000  00000000  00013a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  000159e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b7  00000000  00000000  00016680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022263  00000000  00000000  00017037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e80a  00000000  00000000  0003929a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1eb9  00000000  00000000  00047aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011995d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039f0  00000000  00000000  001199a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  0011d390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005d60 	.word	0x08005d60

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08005d60 	.word	0x08005d60

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <HAL_TIM_PWM_PulseFinishedCallback>:

volatile uint8_t datasentflag   = 1;
volatile uint8_t state_changed = 0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a08      	ldr	r2, [pc, #32]	@ (800060c <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d10a      	bne.n	8000604 <HAL_TIM_PWM_PulseFinishedCallback+0x28>
	    {
	        HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80005ee:	2100      	movs	r1, #0
 80005f0:	4807      	ldr	r0, [pc, #28]	@ (8000610 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 80005f2:	f003 fecf 	bl	8004394 <HAL_TIM_PWM_Stop_DMA>
	        HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
 80005f6:	2104      	movs	r1, #4
 80005f8:	4805      	ldr	r0, [pc, #20]	@ (8000610 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 80005fa:	f003 fecb 	bl	8004394 <HAL_TIM_PWM_Stop_DMA>
	        datasentflag = 1;              // allow next frame
 80005fe:	4b05      	ldr	r3, [pc, #20]	@ (8000614 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8000600:	2201      	movs	r2, #1
 8000602:	701a      	strb	r2, [r3, #0]
	    }
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40010000 	.word	0x40010000
 8000610:	200000a4 	.word	0x200000a4
 8000614:	20000000 	.word	0x20000000

08000618 <Set_LED>:

void Set_LED(int LEDnum, int Red, int Green, int Blue)
{
 8000618:	b480      	push	{r7}
 800061a:	b089      	sub	sp, #36	@ 0x24
 800061c:	af00      	add	r7, sp, #0
 800061e:	6178      	str	r0, [r7, #20]
 8000620:	6139      	str	r1, [r7, #16]
 8000622:	60fa      	str	r2, [r7, #12]
 8000624:	60bb      	str	r3, [r7, #8]
    float brightness_scale = 0.4f;  // 40% brightness
 8000626:	4b25      	ldr	r3, [pc, #148]	@ (80006bc <Set_LED+0xa4>)
 8000628:	61fb      	str	r3, [r7, #28]

    LED_Data[LEDnum][0] = LEDnum;
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	b2d9      	uxtb	r1, r3
 800062e:	4a24      	ldr	r2, [pc, #144]	@ (80006c0 <Set_LED+0xa8>)
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
    LED_Data[LEDnum][1] = (int)(Green * brightness_scale);
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	ee07 3a90 	vmov	s15, r3
 800063c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000640:	edd7 7a07 	vldr	s15, [r7, #28]
 8000644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000648:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800064c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000650:	7939      	ldrb	r1, [r7, #4]
 8000652:	4a1b      	ldr	r2, [pc, #108]	@ (80006c0 <Set_LED+0xa8>)
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	4413      	add	r3, r2
 800065a:	460a      	mov	r2, r1
 800065c:	705a      	strb	r2, [r3, #1]
    LED_Data[LEDnum][2] = (int)(Red * brightness_scale);
 800065e:	693b      	ldr	r3, [r7, #16]
 8000660:	ee07 3a90 	vmov	s15, r3
 8000664:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000668:	edd7 7a07 	vldr	s15, [r7, #28]
 800066c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000670:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000674:	edc7 7a01 	vstr	s15, [r7, #4]
 8000678:	7939      	ldrb	r1, [r7, #4]
 800067a:	4a11      	ldr	r2, [pc, #68]	@ (80006c0 <Set_LED+0xa8>)
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	4413      	add	r3, r2
 8000682:	460a      	mov	r2, r1
 8000684:	709a      	strb	r2, [r3, #2]
    LED_Data[LEDnum][3] = (int)(Blue * brightness_scale);
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	ee07 3a90 	vmov	s15, r3
 800068c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000690:	edd7 7a07 	vldr	s15, [r7, #28]
 8000694:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000698:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800069c:	edc7 7a01 	vstr	s15, [r7, #4]
 80006a0:	7939      	ldrb	r1, [r7, #4]
 80006a2:	4a07      	ldr	r2, [pc, #28]	@ (80006c0 <Set_LED+0xa8>)
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	4413      	add	r3, r2
 80006aa:	460a      	mov	r2, r1
 80006ac:	70da      	strb	r2, [r3, #3]
}
 80006ae:	bf00      	nop
 80006b0:	3724      	adds	r7, #36	@ 0x24
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	3ecccccd 	.word	0x3ecccccd
 80006c0:	2000031c 	.word	0x2000031c

080006c4 <WS2812_Send>:
}

uint16_t pwmData[(24*MAX_LED)+50];

void WS2812_Send (void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
	if (!datasentflag) return;
 80006ca:	4b35      	ldr	r3, [pc, #212]	@ (80007a0 <WS2812_Send+0xdc>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d061      	beq.n	8000798 <WS2812_Send+0xd4>
	    datasentflag = 0;
 80006d4:	4b32      	ldr	r3, [pc, #200]	@ (80007a0 <WS2812_Send+0xdc>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
	uint32_t indx=0;
 80006da:	2300      	movs	r3, #0
 80006dc:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
 80006e2:	e036      	b.n	8000752 <WS2812_Send+0x8e>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 80006e4:	4a2f      	ldr	r2, [pc, #188]	@ (80007a4 <WS2812_Send+0xe0>)
 80006e6:	693b      	ldr	r3, [r7, #16]
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	4413      	add	r3, r2
 80006ec:	785b      	ldrb	r3, [r3, #1]
 80006ee:	041a      	lsls	r2, r3, #16
 80006f0:	492c      	ldr	r1, [pc, #176]	@ (80007a4 <WS2812_Send+0xe0>)
 80006f2:	693b      	ldr	r3, [r7, #16]
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	440b      	add	r3, r1
 80006f8:	789b      	ldrb	r3, [r3, #2]
 80006fa:	021b      	lsls	r3, r3, #8
 80006fc:	431a      	orrs	r2, r3
 80006fe:	4929      	ldr	r1, [pc, #164]	@ (80007a4 <WS2812_Send+0xe0>)
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	440b      	add	r3, r1
 8000706:	78db      	ldrb	r3, [r3, #3]
 8000708:	4313      	orrs	r3, r2
 800070a:	607b      	str	r3, [r7, #4]
#endif

		for (int i=23; i>=0; i--)
 800070c:	2317      	movs	r3, #23
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	e019      	b.n	8000746 <WS2812_Send+0x82>
//				pwmData[indx] = 60;  // 2/3 of 90
//			}
//
//			else pwmData[indx] = 30;  // 1/3 of 90

			if (color & (1 << i))
 8000712:	2201      	movs	r2, #1
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	fa02 f303 	lsl.w	r3, r2, r3
 800071a:	461a      	mov	r2, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4013      	ands	r3, r2
 8000720:	2b00      	cmp	r3, #0
 8000722:	d005      	beq.n	8000730 <WS2812_Send+0x6c>
			    pwmData[indx] = 42;  // 2/3 of 63
 8000724:	4a20      	ldr	r2, [pc, #128]	@ (80007a8 <WS2812_Send+0xe4>)
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	212a      	movs	r1, #42	@ 0x2a
 800072a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800072e:	e004      	b.n	800073a <WS2812_Send+0x76>
			else
			    pwmData[indx] = 21;  // 1/3 of 63
 8000730:	4a1d      	ldr	r2, [pc, #116]	@ (80007a8 <WS2812_Send+0xe4>)
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	2115      	movs	r1, #21
 8000736:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]


			indx++;
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	3301      	adds	r3, #1
 800073e:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	3b01      	subs	r3, #1
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	2b00      	cmp	r3, #0
 800074a:	dae2      	bge.n	8000712 <WS2812_Send+0x4e>
	for (int i= 0; i<MAX_LED; i++)
 800074c:	693b      	ldr	r3, [r7, #16]
 800074e:	3301      	adds	r3, #1
 8000750:	613b      	str	r3, [r7, #16]
 8000752:	693b      	ldr	r3, [r7, #16]
 8000754:	2b3f      	cmp	r3, #63	@ 0x3f
 8000756:	ddc5      	ble.n	80006e4 <WS2812_Send+0x20>
		}

	}

	for (int i=0; i<50; i++)
 8000758:	2300      	movs	r3, #0
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	e00a      	b.n	8000774 <WS2812_Send+0xb0>
	{
		pwmData[indx] = 0;
 800075e:	4a12      	ldr	r2, [pc, #72]	@ (80007a8 <WS2812_Send+0xe4>)
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	2100      	movs	r1, #0
 8000764:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	3301      	adds	r3, #1
 800076c:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	3301      	adds	r3, #1
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	2b31      	cmp	r3, #49	@ 0x31
 8000778:	ddf1      	ble.n	800075e <WS2812_Send+0x9a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 800077a:	697b      	ldr	r3, [r7, #20]
 800077c:	b29b      	uxth	r3, r3
 800077e:	4a0a      	ldr	r2, [pc, #40]	@ (80007a8 <WS2812_Send+0xe4>)
 8000780:	2100      	movs	r1, #0
 8000782:	480a      	ldr	r0, [pc, #40]	@ (80007ac <WS2812_Send+0xe8>)
 8000784:	f003 fc3e 	bl	8004004 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2, (uint32_t *)pwmData, indx);
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	b29b      	uxth	r3, r3
 800078c:	4a06      	ldr	r2, [pc, #24]	@ (80007a8 <WS2812_Send+0xe4>)
 800078e:	2104      	movs	r1, #4
 8000790:	4806      	ldr	r0, [pc, #24]	@ (80007ac <WS2812_Send+0xe8>)
 8000792:	f003 fc37 	bl	8004004 <HAL_TIM_PWM_Start_DMA>
 8000796:	e000      	b.n	800079a <WS2812_Send+0xd6>
	if (!datasentflag) return;
 8000798:	bf00      	nop
//	while (!datasentflag){};
//	datasentflag = 0;
}
 800079a:	3718      	adds	r7, #24
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000000 	.word	0x20000000
 80007a4:	2000031c 	.word	0x2000031c
 80007a8:	20000420 	.word	0x20000420
 80007ac:	200000a4 	.word	0x200000a4

080007b0 <Reset_LED>:

void Reset_LED (void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
	for (int i=0; i<MAX_LED; i++)
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	e01a      	b.n	80007f2 <Reset_LED+0x42>
	{
		LED_Data[i][0] = i;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	b2d9      	uxtb	r1, r3
 80007c0:	4a11      	ldr	r2, [pc, #68]	@ (8000808 <Reset_LED+0x58>)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		LED_Data[i][1] = 0;
 80007c8:	4a0f      	ldr	r2, [pc, #60]	@ (8000808 <Reset_LED+0x58>)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	4413      	add	r3, r2
 80007d0:	2200      	movs	r2, #0
 80007d2:	705a      	strb	r2, [r3, #1]
		LED_Data[i][2] = 0;
 80007d4:	4a0c      	ldr	r2, [pc, #48]	@ (8000808 <Reset_LED+0x58>)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	4413      	add	r3, r2
 80007dc:	2200      	movs	r2, #0
 80007de:	709a      	strb	r2, [r3, #2]
		LED_Data[i][3] = 0;
 80007e0:	4a09      	ldr	r2, [pc, #36]	@ (8000808 <Reset_LED+0x58>)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	4413      	add	r3, r2
 80007e8:	2200      	movs	r2, #0
 80007ea:	70da      	strb	r2, [r3, #3]
	for (int i=0; i<MAX_LED; i++)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3301      	adds	r3, #1
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2b3f      	cmp	r3, #63	@ 0x3f
 80007f6:	dde1      	ble.n	80007bc <Reset_LED+0xc>
	}
}
 80007f8:	bf00      	nop
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	2000031c 	.word	0x2000031c

0800080c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000810:	f000 ffd2 	bl	80017b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config_HSE(50);
 8000814:	2032      	movs	r0, #50	@ 0x32
 8000816:	f000 f841 	bl	800089c <SystemClock_Config_HSE>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081a:	f000 fab7 	bl	8000d8c <MX_GPIO_Init>
  MX_DMA_Init();
 800081e:	f000 fa6f 	bl	8000d00 <MX_DMA_Init>
  MX_TIM1_Init();
 8000822:	f000 f90b 	bl	8000a3c <MX_TIM1_Init>
  MX_CAN1_Init();
 8000826:	f000 f8d3 	bl	80009d0 <MX_CAN1_Init>
  MX_TIM6_Init();
 800082a:	f000 fa33 	bl	8000c94 <MX_TIM6_Init>
  MX_TIM2_Init();
 800082e:	f000 f9b1 	bl	8000b94 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  CAN_Filter_Config();
 8000832:	f000 fbf7 	bl	8001024 <CAN_Filter_Config>
  CAN1_Tx();
 8000836:	f000 fbcb 	bl	8000fd0 <CAN1_Tx>

	if(HAL_CAN_ActivateNotification(&hcan1,CAN_IT_TX_MAILBOX_EMPTY|CAN_IT_RX_FIFO0_MSG_PENDING|CAN_IT_BUSOFF)!= HAL_OK)
 800083a:	f240 4103 	movw	r1, #1027	@ 0x403
 800083e:	4814      	ldr	r0, [pc, #80]	@ (8000890 <main+0x84>)
 8000840:	f001 fc60 	bl	8002104 <HAL_CAN_ActivateNotification>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <main+0x42>
	{
	  Error_Handler();
 800084a:	f000 fca7 	bl	800119c <Error_Handler>
	}

	if( HAL_CAN_Start(&hcan1) != HAL_OK)
 800084e:	4810      	ldr	r0, [pc, #64]	@ (8000890 <main+0x84>)
 8000850:	f001 fa22 	bl	8001c98 <HAL_CAN_Start>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <main+0x52>
	{
	  Error_Handler();
 800085a:	f000 fc9f 	bl	800119c <Error_Handler>
	}
	// Start the TIMER interrupt
	HAL_TIM_Base_Start_IT(&htim6);
 800085e:	480d      	ldr	r0, [pc, #52]	@ (8000894 <main+0x88>)
 8000860:	f003 fb06 	bl	8003e70 <HAL_TIM_Base_Start_IT>

	HAL_Delay(1000);
 8000864:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000868:	f001 f818 	bl	800189c <HAL_Delay>

	Reset_LED();          // give LED_Data something valid
 800086c:	f7ff ffa0 	bl	80007b0 <Reset_LED>
	Set_LEDs_ByState();   // first frame (state 0, red comet)
 8000870:	f000 fac0 	bl	8000df4 <Set_LEDs_ByState>
	  //	            last_change_time = HAL_GetTick();
	  //	        }

//	  HAL_Delay(30);

	  effStep++;                               // animation cursor
 8000874:	4b08      	ldr	r3, [pc, #32]	@ (8000898 <main+0x8c>)
 8000876:	881b      	ldrh	r3, [r3, #0]
 8000878:	3301      	adds	r3, #1
 800087a:	b29a      	uxth	r2, r3
 800087c:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <main+0x8c>)
 800087e:	801a      	strh	r2, [r3, #0]
//	     if (state_changed)                       // repaint only when needed
//	     {
//	         state_changed = 0;
//	                          // builds colour table + WS2812_Send()
//	     }
	     Set_LEDs_ByState();
 8000880:	f000 fab8 	bl	8000df4 <Set_LEDs_ByState>

	     HAL_Delay(30);
 8000884:	201e      	movs	r0, #30
 8000886:	f001 f809 	bl	800189c <HAL_Delay>
	  effStep++;                               // animation cursor
 800088a:	bf00      	nop
 800088c:	e7f2      	b.n	8000874 <main+0x68>
 800088e:	bf00      	nop
 8000890:	2000007c 	.word	0x2000007c
 8000894:	20000134 	.word	0x20000134
 8000898:	20001084 	.word	0x20001084

0800089c <SystemClock_Config_HSE>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config_HSE(uint8_t clock_freq)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b096      	sub	sp, #88	@ 0x58
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
  RCC_OscInitTypeDef Osc_Init;
  RCC_ClkInitTypeDef Clock_Init;
  uint8_t flash_latency=0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

  Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSE ;
 80008ac:	2301      	movs	r3, #1
 80008ae:	61fb      	str	r3, [r7, #28]
  Osc_Init.HSEState = RCC_HSE_ON;
 80008b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008b4:	623b      	str	r3, [r7, #32]
  Osc_Init.PLL.PLLState = RCC_PLL_ON;
 80008b6:	2302      	movs	r3, #2
 80008b8:	637b      	str	r3, [r7, #52]	@ 0x34
  Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008be:	63bb      	str	r3, [r7, #56]	@ 0x38

  switch(clock_freq) {
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	2b78      	cmp	r3, #120	@ 0x78
 80008c4:	d038      	beq.n	8000938 <SystemClock_Config_HSE+0x9c>
 80008c6:	2b78      	cmp	r3, #120	@ 0x78
 80008c8:	dc7c      	bgt.n	80009c4 <SystemClock_Config_HSE+0x128>
 80008ca:	2b32      	cmp	r3, #50	@ 0x32
 80008cc:	d002      	beq.n	80008d4 <SystemClock_Config_HSE+0x38>
 80008ce:	2b54      	cmp	r3, #84	@ 0x54
 80008d0:	d019      	beq.n	8000906 <SystemClock_Config_HSE+0x6a>
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
    flash_latency = 3;
    break;

  default:
    return ;
 80008d2:	e077      	b.n	80009c4 <SystemClock_Config_HSE+0x128>
    Osc_Init.PLL.PLLM = 4;
 80008d4:	2304      	movs	r3, #4
 80008d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    Osc_Init.PLL.PLLN = 50;
 80008d8:	2332      	movs	r3, #50	@ 0x32
 80008da:	643b      	str	r3, [r7, #64]	@ 0x40
    Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80008dc:	2302      	movs	r3, #2
 80008de:	647b      	str	r3, [r7, #68]	@ 0x44
    Osc_Init.PLL.PLLQ = 2;
 80008e0:	2302      	movs	r3, #2
 80008e2:	64bb      	str	r3, [r7, #72]	@ 0x48
    Osc_Init.PLL.PLLR = 2;
 80008e4:	2302      	movs	r3, #2
 80008e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 80008e8:	230f      	movs	r3, #15
 80008ea:	60bb      	str	r3, [r7, #8]
    Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ec:	2302      	movs	r3, #2
 80008ee:	60fb      	str	r3, [r7, #12]
    Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	613b      	str	r3, [r7, #16]
    Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80008f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008f8:	617b      	str	r3, [r7, #20]
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
    flash_latency = 1;
 80008fe:	2301      	movs	r3, #1
 8000900:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    break;
 8000904:	e032      	b.n	800096c <SystemClock_Config_HSE+0xd0>
    Osc_Init.PLL.PLLM = 4;
 8000906:	2304      	movs	r3, #4
 8000908:	63fb      	str	r3, [r7, #60]	@ 0x3c
    Osc_Init.PLL.PLLN = 84;
 800090a:	2354      	movs	r3, #84	@ 0x54
 800090c:	643b      	str	r3, [r7, #64]	@ 0x40
    Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 800090e:	2302      	movs	r3, #2
 8000910:	647b      	str	r3, [r7, #68]	@ 0x44
    Osc_Init.PLL.PLLQ = 2;
 8000912:	2302      	movs	r3, #2
 8000914:	64bb      	str	r3, [r7, #72]	@ 0x48
    Osc_Init.PLL.PLLR = 2;
 8000916:	2302      	movs	r3, #2
 8000918:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 800091a:	230f      	movs	r3, #15
 800091c:	60bb      	str	r3, [r7, #8]
    Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091e:	2302      	movs	r3, #2
 8000920:	60fb      	str	r3, [r7, #12]
    Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
    Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000926:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800092a:	617b      	str	r3, [r7, #20]
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	61bb      	str	r3, [r7, #24]
    flash_latency = 2;
 8000930:	2302      	movs	r3, #2
 8000932:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    break;
 8000936:	e019      	b.n	800096c <SystemClock_Config_HSE+0xd0>
    Osc_Init.PLL.PLLM = 4;
 8000938:	2304      	movs	r3, #4
 800093a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    Osc_Init.PLL.PLLN = 120;
 800093c:	2378      	movs	r3, #120	@ 0x78
 800093e:	643b      	str	r3, [r7, #64]	@ 0x40
    Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000940:	2302      	movs	r3, #2
 8000942:	647b      	str	r3, [r7, #68]	@ 0x44
    Osc_Init.PLL.PLLQ = 2;
 8000944:	2302      	movs	r3, #2
 8000946:	64bb      	str	r3, [r7, #72]	@ 0x48
    Osc_Init.PLL.PLLR = 2;
 8000948:	2302      	movs	r3, #2
 800094a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 800094c:	230f      	movs	r3, #15
 800094e:	60bb      	str	r3, [r7, #8]
    Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000950:	2302      	movs	r3, #2
 8000952:	60fb      	str	r3, [r7, #12]
    Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000954:	2300      	movs	r3, #0
 8000956:	613b      	str	r3, [r7, #16]
    Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 8000958:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800095c:	617b      	str	r3, [r7, #20]
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 800095e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000962:	61bb      	str	r3, [r7, #24]
    flash_latency = 3;
 8000964:	2303      	movs	r3, #3
 8000966:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    break;
 800096a:	bf00      	nop
  }

  if (HAL_RCC_OscConfig(&Osc_Init) != HAL_OK)
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4618      	mov	r0, r3
 8000972:	f002 ff8f 	bl	8003894 <HAL_RCC_OscConfig>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <SystemClock_Config_HSE+0xe4>
  {
    Error_Handler();
 800097c:	f000 fc0e 	bl	800119c <Error_Handler>
  }

  if (HAL_RCC_ClockConfig(&Clock_Init, flash_latency) != HAL_OK)
 8000980:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8000984:	f107 0308 	add.w	r3, r7, #8
 8000988:	4611      	mov	r1, r2
 800098a:	4618      	mov	r0, r3
 800098c:	f002 fc60 	bl	8003250 <HAL_RCC_ClockConfig>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <SystemClock_Config_HSE+0xfe>
  {
    Error_Handler();
 8000996:	f000 fc01 	bl	800119c <Error_Handler>
  }

  /*Configure the systick timer interrupt frequency (for every 1 ms) */
  uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 800099a:	f002 fd3f 	bl	800341c <HAL_RCC_GetHCLKFreq>
 800099e:	6538      	str	r0, [r7, #80]	@ 0x50
  HAL_SYSTICK_Config(hclk_freq/1000);
 80009a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80009a2:	4a0a      	ldr	r2, [pc, #40]	@ (80009cc <SystemClock_Config_HSE+0x130>)
 80009a4:	fba2 2303 	umull	r2, r3, r2, r3
 80009a8:	099b      	lsrs	r3, r3, #6
 80009aa:	4618      	mov	r0, r3
 80009ac:	f001 fee7 	bl	800277e <HAL_SYSTICK_Config>

  /**Configure the Systick
  */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80009b0:	2004      	movs	r0, #4
 80009b2:	f001 fef1 	bl	8002798 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2100      	movs	r1, #0
 80009ba:	f04f 30ff 	mov.w	r0, #4294967295
 80009be:	f001 feb4 	bl	800272a <HAL_NVIC_SetPriority>
 80009c2:	e000      	b.n	80009c6 <SystemClock_Config_HSE+0x12a>
    return ;
 80009c4:	bf00      	nop
}
 80009c6:	3758      	adds	r7, #88	@ 0x58
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	10624dd3 	.word	0x10624dd3

080009d0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80009d4:	4b17      	ldr	r3, [pc, #92]	@ (8000a34 <MX_CAN1_Init+0x64>)
 80009d6:	4a18      	ldr	r2, [pc, #96]	@ (8000a38 <MX_CAN1_Init+0x68>)
 80009d8:	601a      	str	r2, [r3, #0]
//  hcan1.Init.Prescaler = 16;
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009da:	4b16      	ldr	r3, [pc, #88]	@ (8000a34 <MX_CAN1_Init+0x64>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
//  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
//  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
//  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;

  hcan1.Init.Prescaler = 10;
 80009e0:	4b14      	ldr	r3, [pc, #80]	@ (8000a34 <MX_CAN1_Init+0x64>)
 80009e2:	220a      	movs	r2, #10
 80009e4:	605a      	str	r2, [r3, #4]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009e6:	4b13      	ldr	r3, [pc, #76]	@ (8000a34 <MX_CAN1_Init+0x64>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 80009ec:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <MX_CAN1_Init+0x64>)
 80009ee:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80009f2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a34 <MX_CAN1_Init+0x64>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	615a      	str	r2, [r3, #20]

  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000a34 <MX_CAN1_Init+0x64>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	@ (8000a34 <MX_CAN1_Init+0x64>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	@ (8000a34 <MX_CAN1_Init+0x64>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <MX_CAN1_Init+0x64>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a12:	4b08      	ldr	r3, [pc, #32]	@ (8000a34 <MX_CAN1_Init+0x64>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a18:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <MX_CAN1_Init+0x64>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	@ (8000a34 <MX_CAN1_Init+0x64>)
 8000a20:	f000 ff60 	bl	80018e4 <HAL_CAN_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000a2a:	f000 fbb7 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	2000007c 	.word	0x2000007c
 8000a38:	40006400 	.word	0x40006400

08000a3c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b096      	sub	sp, #88	@ 0x58
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a42:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a50:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
 8000a68:	611a      	str	r2, [r3, #16]
 8000a6a:	615a      	str	r2, [r3, #20]
 8000a6c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	2220      	movs	r2, #32
 8000a72:	2100      	movs	r1, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f004 fcf5 	bl	8005464 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a7a:	4b44      	ldr	r3, [pc, #272]	@ (8000b8c <MX_TIM1_Init+0x150>)
 8000a7c:	4a44      	ldr	r2, [pc, #272]	@ (8000b90 <MX_TIM1_Init+0x154>)
 8000a7e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a80:	4b42      	ldr	r3, [pc, #264]	@ (8000b8c <MX_TIM1_Init+0x150>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a86:	4b41      	ldr	r3, [pc, #260]	@ (8000b8c <MX_TIM1_Init+0x150>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8000a8c:	4b3f      	ldr	r3, [pc, #252]	@ (8000b8c <MX_TIM1_Init+0x150>)
 8000a8e:	2259      	movs	r2, #89	@ 0x59
 8000a90:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a92:	4b3e      	ldr	r3, [pc, #248]	@ (8000b8c <MX_TIM1_Init+0x150>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a98:	4b3c      	ldr	r3, [pc, #240]	@ (8000b8c <MX_TIM1_Init+0x150>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a9e:	4b3b      	ldr	r3, [pc, #236]	@ (8000b8c <MX_TIM1_Init+0x150>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000aa4:	4839      	ldr	r0, [pc, #228]	@ (8000b8c <MX_TIM1_Init+0x150>)
 8000aa6:	f003 f993 	bl	8003dd0 <HAL_TIM_Base_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000ab0:	f000 fb74 	bl	800119c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ab4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ab8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000aba:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4832      	ldr	r0, [pc, #200]	@ (8000b8c <MX_TIM1_Init+0x150>)
 8000ac2:	f003 feeb 	bl	800489c <HAL_TIM_ConfigClockSource>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000acc:	f000 fb66 	bl	800119c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ad0:	482e      	ldr	r0, [pc, #184]	@ (8000b8c <MX_TIM1_Init+0x150>)
 8000ad2:	f003 fa3d 	bl	8003f50 <HAL_TIM_PWM_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000adc:	f000 fb5e 	bl	800119c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ae8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000aec:	4619      	mov	r1, r3
 8000aee:	4827      	ldr	r0, [pc, #156]	@ (8000b8c <MX_TIM1_Init+0x150>)
 8000af0:	f004 fbb4 	bl	800525c <HAL_TIMEx_MasterConfigSynchronization>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000afa:	f000 fb4f 	bl	800119c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000afe:	2360      	movs	r3, #96	@ 0x60
 8000b00:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b12:	2300      	movs	r3, #0
 8000b14:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b16:	2300      	movs	r3, #0
 8000b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b1e:	2200      	movs	r2, #0
 8000b20:	4619      	mov	r1, r3
 8000b22:	481a      	ldr	r0, [pc, #104]	@ (8000b8c <MX_TIM1_Init+0x150>)
 8000b24:	f003 fdf8 	bl	8004718 <HAL_TIM_PWM_ConfigChannel>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000b2e:	f000 fb35 	bl	800119c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b36:	2204      	movs	r2, #4
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4814      	ldr	r0, [pc, #80]	@ (8000b8c <MX_TIM1_Init+0x150>)
 8000b3c:	f003 fdec 	bl	8004718 <HAL_TIM_PWM_ConfigChannel>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000b46:	f000 fb29 	bl	800119c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b62:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b64:	2300      	movs	r3, #0
 8000b66:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4807      	ldr	r0, [pc, #28]	@ (8000b8c <MX_TIM1_Init+0x150>)
 8000b6e:	f004 fbf1 	bl	8005354 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000b78:	f000 fb10 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b7c:	4803      	ldr	r0, [pc, #12]	@ (8000b8c <MX_TIM1_Init+0x150>)
 8000b7e:	f000 fccb 	bl	8001518 <HAL_TIM_MspPostInit>

}
 8000b82:	bf00      	nop
 8000b84:	3758      	adds	r7, #88	@ 0x58
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200000a4 	.word	0x200000a4
 8000b90:	40010000 	.word	0x40010000

08000b94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08e      	sub	sp, #56	@ 0x38
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b9a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba8:	f107 0320 	add.w	r3, r7, #32
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
 8000bc0:	615a      	str	r2, [r3, #20]
 8000bc2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bc4:	4b32      	ldr	r3, [pc, #200]	@ (8000c90 <MX_TIM2_Init+0xfc>)
 8000bc6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000bcc:	4b30      	ldr	r3, [pc, #192]	@ (8000c90 <MX_TIM2_Init+0xfc>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd2:	4b2f      	ldr	r3, [pc, #188]	@ (8000c90 <MX_TIM2_Init+0xfc>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000bd8:	4b2d      	ldr	r3, [pc, #180]	@ (8000c90 <MX_TIM2_Init+0xfc>)
 8000bda:	f04f 32ff 	mov.w	r2, #4294967295
 8000bde:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be0:	4b2b      	ldr	r3, [pc, #172]	@ (8000c90 <MX_TIM2_Init+0xfc>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be6:	4b2a      	ldr	r3, [pc, #168]	@ (8000c90 <MX_TIM2_Init+0xfc>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bec:	4828      	ldr	r0, [pc, #160]	@ (8000c90 <MX_TIM2_Init+0xfc>)
 8000bee:	f003 f8ef 	bl	8003dd0 <HAL_TIM_Base_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000bf8:	f000 fad0 	bl	800119c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c00:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c06:	4619      	mov	r1, r3
 8000c08:	4821      	ldr	r0, [pc, #132]	@ (8000c90 <MX_TIM2_Init+0xfc>)
 8000c0a:	f003 fe47 	bl	800489c <HAL_TIM_ConfigClockSource>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000c14:	f000 fac2 	bl	800119c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c18:	481d      	ldr	r0, [pc, #116]	@ (8000c90 <MX_TIM2_Init+0xfc>)
 8000c1a:	f003 f999 	bl	8003f50 <HAL_TIM_PWM_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000c24:	f000 faba 	bl	800119c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c30:	f107 0320 	add.w	r3, r7, #32
 8000c34:	4619      	mov	r1, r3
 8000c36:	4816      	ldr	r0, [pc, #88]	@ (8000c90 <MX_TIM2_Init+0xfc>)
 8000c38:	f004 fb10 	bl	800525c <HAL_TIMEx_MasterConfigSynchronization>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000c42:	f000 faab 	bl	800119c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c46:	2360      	movs	r3, #96	@ 0x60
 8000c48:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	480c      	ldr	r0, [pc, #48]	@ (8000c90 <MX_TIM2_Init+0xfc>)
 8000c5e:	f003 fd5b 	bl	8004718 <HAL_TIM_PWM_ConfigChannel>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000c68:	f000 fa98 	bl	800119c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	2204      	movs	r2, #4
 8000c70:	4619      	mov	r1, r3
 8000c72:	4807      	ldr	r0, [pc, #28]	@ (8000c90 <MX_TIM2_Init+0xfc>)
 8000c74:	f003 fd50 	bl	8004718 <HAL_TIM_PWM_ConfigChannel>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000c7e:	f000 fa8d 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c82:	4803      	ldr	r0, [pc, #12]	@ (8000c90 <MX_TIM2_Init+0xfc>)
 8000c84:	f000 fc48 	bl	8001518 <HAL_TIM_MspPostInit>

}
 8000c88:	bf00      	nop
 8000c8a:	3738      	adds	r7, #56	@ 0x38
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	200000ec 	.word	0x200000ec

08000c94 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c9a:	463b      	mov	r3, r7
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ca2:	4b15      	ldr	r3, [pc, #84]	@ (8000cf8 <MX_TIM6_Init+0x64>)
 8000ca4:	4a15      	ldr	r2, [pc, #84]	@ (8000cfc <MX_TIM6_Init+0x68>)
 8000ca6:	601a      	str	r2, [r3, #0]
//  htim6.Init.Prescaler = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca8:	4b13      	ldr	r3, [pc, #76]	@ (8000cf8 <MX_TIM6_Init+0x64>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
//  htim6.Init.Period = 65535;
  htim6.Init.Prescaler = 49999;  // Divides 50MHz to 1kHz
 8000cae:	4b12      	ldr	r3, [pc, #72]	@ (8000cf8 <MX_TIM6_Init+0x64>)
 8000cb0:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000cb4:	605a      	str	r2, [r3, #4]
  htim6.Init.Period = 4999;      // 1kHz → 5s interrupt
 8000cb6:	4b10      	ldr	r3, [pc, #64]	@ (8000cf8 <MX_TIM6_Init+0x64>)
 8000cb8:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000cbc:	60da      	str	r2, [r3, #12]

  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf8 <MX_TIM6_Init+0x64>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000cc4:	480c      	ldr	r0, [pc, #48]	@ (8000cf8 <MX_TIM6_Init+0x64>)
 8000cc6:	f003 f883 	bl	8003dd0 <HAL_TIM_Base_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000cd0:	f000 fa64 	bl	800119c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000cdc:	463b      	mov	r3, r7
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4805      	ldr	r0, [pc, #20]	@ (8000cf8 <MX_TIM6_Init+0x64>)
 8000ce2:	f004 fabb 	bl	800525c <HAL_TIMEx_MasterConfigSynchronization>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000cec:	f000 fa56 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000134 	.word	0x20000134
 8000cfc:	40001000 	.word	0x40001000

08000d00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000d88 <MX_DMA_Init+0x88>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	4a1e      	ldr	r2, [pc, #120]	@ (8000d88 <MX_DMA_Init+0x88>)
 8000d10:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d16:	4b1c      	ldr	r3, [pc, #112]	@ (8000d88 <MX_DMA_Init+0x88>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	603b      	str	r3, [r7, #0]
 8000d26:	4b18      	ldr	r3, [pc, #96]	@ (8000d88 <MX_DMA_Init+0x88>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	4a17      	ldr	r2, [pc, #92]	@ (8000d88 <MX_DMA_Init+0x88>)
 8000d2c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d32:	4b15      	ldr	r3, [pc, #84]	@ (8000d88 <MX_DMA_Init+0x88>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2100      	movs	r1, #0
 8000d42:	2010      	movs	r0, #16
 8000d44:	f001 fcf1 	bl	800272a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d48:	2010      	movs	r0, #16
 8000d4a:	f001 fd0a 	bl	8002762 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2100      	movs	r1, #0
 8000d52:	2011      	movs	r0, #17
 8000d54:	f001 fce9 	bl	800272a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d58:	2011      	movs	r0, #17
 8000d5a:	f001 fd02 	bl	8002762 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2100      	movs	r1, #0
 8000d62:	2039      	movs	r0, #57	@ 0x39
 8000d64:	f001 fce1 	bl	800272a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000d68:	2039      	movs	r0, #57	@ 0x39
 8000d6a:	f001 fcfa 	bl	8002762 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2100      	movs	r1, #0
 8000d72:	203a      	movs	r0, #58	@ 0x3a
 8000d74:	f001 fcd9 	bl	800272a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000d78:	203a      	movs	r0, #58	@ 0x3a
 8000d7a:	f001 fcf2 	bl	8002762 <HAL_NVIC_EnableIRQ>

}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40023800 	.word	0x40023800

08000d8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	4b15      	ldr	r3, [pc, #84]	@ (8000dec <MX_GPIO_Init+0x60>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	4a14      	ldr	r2, [pc, #80]	@ (8000dec <MX_GPIO_Init+0x60>)
 8000d9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da2:	4b12      	ldr	r3, [pc, #72]	@ (8000dec <MX_GPIO_Init+0x60>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000daa:	60bb      	str	r3, [r7, #8]
 8000dac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	607b      	str	r3, [r7, #4]
 8000db2:	4b0e      	ldr	r3, [pc, #56]	@ (8000dec <MX_GPIO_Init+0x60>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	4a0d      	ldr	r2, [pc, #52]	@ (8000dec <MX_GPIO_Init+0x60>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000dec <MX_GPIO_Init+0x60>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  // configure GPIOs
    GPIO_InitTypeDef ledgpio;
    ledgpio.Pin = GPIO_PIN_5;
 8000dca:	2320      	movs	r3, #32
 8000dcc:	60fb      	str	r3, [r7, #12]
    ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	613b      	str	r3, [r7, #16]
    ledgpio.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA,&ledgpio);
 8000dd6:	f107 030c 	add.w	r3, r7, #12
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4804      	ldr	r0, [pc, #16]	@ (8000df0 <MX_GPIO_Init+0x64>)
 8000dde:	f002 f889 	bl	8002ef4 <HAL_GPIO_Init>
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000de2:	bf00      	nop
 8000de4:	3720      	adds	r7, #32
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40020000 	.word	0x40020000

08000df4 <Set_LEDs_ByState>:

/* USER CODE BEGIN 4 */
/* === LED pattern generator  (internal WS2812_Send() removed) ============ */
void Set_LEDs_ByState(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
    uint8_t  trail_len = MAX_LED / 2;
 8000dfa:	2320      	movs	r3, #32
 8000dfc:	737b      	strb	r3, [r7, #13]
    uint16_t head      = effStep % MAX_LED;
 8000dfe:	4b71      	ldr	r3, [pc, #452]	@ (8000fc4 <Set_LEDs_ByState+0x1d0>)
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000e06:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < MAX_LED; ++i) {
 8000e08:	2300      	movs	r3, #0
 8000e0a:	81fb      	strh	r3, [r7, #14]
 8000e0c:	e0d0      	b.n	8000fb0 <Set_LEDs_ByState+0x1bc>
        uint16_t distance = (i + MAX_LED - head) % MAX_LED;
 8000e0e:	89fb      	ldrh	r3, [r7, #14]
 8000e10:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8000e14:	897b      	ldrh	r3, [r7, #10]
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	425a      	negs	r2, r3
 8000e1a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000e1e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000e22:	bf58      	it	pl
 8000e24:	4253      	negpl	r3, r2
 8000e26:	813b      	strh	r3, [r7, #8]

        switch (fsm_state) {
 8000e28:	4b67      	ldr	r3, [pc, #412]	@ (8000fc8 <Set_LEDs_ByState+0x1d4>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b06      	cmp	r3, #6
 8000e2e:	f200 80bc 	bhi.w	8000faa <Set_LEDs_ByState+0x1b6>
 8000e32:	a201      	add	r2, pc, #4	@ (adr r2, 8000e38 <Set_LEDs_ByState+0x44>)
 8000e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e38:	08000e55 	.word	0x08000e55
 8000e3c:	08000e71 	.word	0x08000e71
 8000e40:	08000e8d 	.word	0x08000e8d
 8000e44:	08000ea9 	.word	0x08000ea9
 8000e48:	08000eb7 	.word	0x08000eb7
 8000e4c:	08000f07 	.word	0x08000f07
 8000e50:	08000f6f 	.word	0x08000f6f
        case 0:  Set_LED(i, distance < trail_len ? 255 : 0, 0, 0);                break;
 8000e54:	89f8      	ldrh	r0, [r7, #14]
 8000e56:	7b7b      	ldrb	r3, [r7, #13]
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	893a      	ldrh	r2, [r7, #8]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d201      	bcs.n	8000e64 <Set_LEDs_ByState+0x70>
 8000e60:	21ff      	movs	r1, #255	@ 0xff
 8000e62:	e000      	b.n	8000e66 <Set_LEDs_ByState+0x72>
 8000e64:	2100      	movs	r1, #0
 8000e66:	2300      	movs	r3, #0
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f7ff fbd5 	bl	8000618 <Set_LED>
 8000e6e:	e09c      	b.n	8000faa <Set_LEDs_ByState+0x1b6>
        case 1:  Set_LED(i, 0, distance < trail_len ? 255 : 0, 0);                break;
 8000e70:	89f8      	ldrh	r0, [r7, #14]
 8000e72:	7b7b      	ldrb	r3, [r7, #13]
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	893a      	ldrh	r2, [r7, #8]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d201      	bcs.n	8000e80 <Set_LEDs_ByState+0x8c>
 8000e7c:	22ff      	movs	r2, #255	@ 0xff
 8000e7e:	e000      	b.n	8000e82 <Set_LEDs_ByState+0x8e>
 8000e80:	2200      	movs	r2, #0
 8000e82:	2300      	movs	r3, #0
 8000e84:	2100      	movs	r1, #0
 8000e86:	f7ff fbc7 	bl	8000618 <Set_LED>
 8000e8a:	e08e      	b.n	8000faa <Set_LEDs_ByState+0x1b6>
        case 2:  Set_LED(i, 0, 0, distance < trail_len ? 255 : 0);                break;
 8000e8c:	89f8      	ldrh	r0, [r7, #14]
 8000e8e:	7b7b      	ldrb	r3, [r7, #13]
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	893a      	ldrh	r2, [r7, #8]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d201      	bcs.n	8000e9c <Set_LEDs_ByState+0xa8>
 8000e98:	23ff      	movs	r3, #255	@ 0xff
 8000e9a:	e000      	b.n	8000e9e <Set_LEDs_ByState+0xaa>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	f7ff fbb9 	bl	8000618 <Set_LED>
 8000ea6:	e080      	b.n	8000faa <Set_LEDs_ByState+0x1b6>
        case 3:  Set_LED(i, 0, 0, 0);                                             break;
 8000ea8:	89f8      	ldrh	r0, [r7, #14]
 8000eaa:	2300      	movs	r3, #0
 8000eac:	2200      	movs	r2, #0
 8000eae:	2100      	movs	r1, #0
 8000eb0:	f7ff fbb2 	bl	8000618 <Set_LED>
 8000eb4:	e079      	b.n	8000faa <Set_LEDs_ByState+0x1b6>

        case 4: {                              /* moving split blue / yellow   */
            uint16_t half  = MAX_LED / 2;
 8000eb6:	2320      	movs	r3, #32
 8000eb8:	80fb      	strh	r3, [r7, #6]
            uint16_t start = effStep % MAX_LED;
 8000eba:	4b42      	ldr	r3, [pc, #264]	@ (8000fc4 <Set_LEDs_ByState+0x1d0>)
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000ec2:	80bb      	strh	r3, [r7, #4]
            uint16_t blue  = (start            + i) % MAX_LED;
 8000ec4:	88ba      	ldrh	r2, [r7, #4]
 8000ec6:	89fb      	ldrh	r3, [r7, #14]
 8000ec8:	4413      	add	r3, r2
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000ed0:	807b      	strh	r3, [r7, #2]
            uint16_t yel   = (start + half     + i) % MAX_LED;
 8000ed2:	88ba      	ldrh	r2, [r7, #4]
 8000ed4:	88fb      	ldrh	r3, [r7, #6]
 8000ed6:	441a      	add	r2, r3
 8000ed8:	89fb      	ldrh	r3, [r7, #14]
 8000eda:	4413      	add	r3, r2
 8000edc:	425a      	negs	r2, r3
 8000ede:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000ee2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000ee6:	bf58      	it	pl
 8000ee8:	4253      	negpl	r3, r2
 8000eea:	803b      	strh	r3, [r7, #0]
            Set_LED(blue, 0, 0, 255);
 8000eec:	8878      	ldrh	r0, [r7, #2]
 8000eee:	23ff      	movs	r3, #255	@ 0xff
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	f7ff fb90 	bl	8000618 <Set_LED>
            Set_LED(yel , 255, 255, 0);
 8000ef8:	8838      	ldrh	r0, [r7, #0]
 8000efa:	2300      	movs	r3, #0
 8000efc:	22ff      	movs	r2, #255	@ 0xff
 8000efe:	21ff      	movs	r1, #255	@ 0xff
 8000f00:	f7ff fb8a 	bl	8000618 <Set_LED>
        } break;
 8000f04:	e051      	b.n	8000faa <Set_LEDs_ByState+0x1b6>

        case 5:                                /* blinking blue / yellow comet */
            if ((effStep / 20) & 1) { Set_LED(i,0,0,0); break; }
 8000f06:	4b2f      	ldr	r3, [pc, #188]	@ (8000fc4 <Set_LEDs_ByState+0x1d0>)
 8000f08:	881b      	ldrh	r3, [r3, #0]
 8000f0a:	4a30      	ldr	r2, [pc, #192]	@ (8000fcc <Set_LEDs_ByState+0x1d8>)
 8000f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f10:	091b      	lsrs	r3, r3, #4
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d006      	beq.n	8000f2a <Set_LEDs_ByState+0x136>
 8000f1c:	89f8      	ldrh	r0, [r7, #14]
 8000f1e:	2300      	movs	r3, #0
 8000f20:	2200      	movs	r2, #0
 8000f22:	2100      	movs	r1, #0
 8000f24:	f7ff fb78 	bl	8000618 <Set_LED>
 8000f28:	e03f      	b.n	8000faa <Set_LEDs_ByState+0x1b6>
            if (distance < trail_len)
 8000f2a:	7b7b      	ldrb	r3, [r7, #13]
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	893a      	ldrh	r2, [r7, #8]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d215      	bcs.n	8000f60 <Set_LEDs_ByState+0x16c>
                Set_LED(i, (i < MAX_LED/2) ? 0 : 255,
 8000f34:	89f8      	ldrh	r0, [r7, #14]
 8000f36:	89fb      	ldrh	r3, [r7, #14]
 8000f38:	2b1f      	cmp	r3, #31
 8000f3a:	d801      	bhi.n	8000f40 <Set_LEDs_ByState+0x14c>
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	e000      	b.n	8000f42 <Set_LEDs_ByState+0x14e>
 8000f40:	21ff      	movs	r1, #255	@ 0xff
 8000f42:	89fb      	ldrh	r3, [r7, #14]
 8000f44:	2b1f      	cmp	r3, #31
 8000f46:	d801      	bhi.n	8000f4c <Set_LEDs_ByState+0x158>
 8000f48:	2200      	movs	r2, #0
 8000f4a:	e000      	b.n	8000f4e <Set_LEDs_ByState+0x15a>
 8000f4c:	22ff      	movs	r2, #255	@ 0xff
 8000f4e:	89fb      	ldrh	r3, [r7, #14]
 8000f50:	2b1f      	cmp	r3, #31
 8000f52:	d801      	bhi.n	8000f58 <Set_LEDs_ByState+0x164>
 8000f54:	23ff      	movs	r3, #255	@ 0xff
 8000f56:	e000      	b.n	8000f5a <Set_LEDs_ByState+0x166>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	f7ff fb5d 	bl	8000618 <Set_LED>
                           (i < MAX_LED/2) ? 0 : 255,
                           (i < MAX_LED/2) ? 255 : 0);
            else Set_LED(i,0,0,0);
            break;
 8000f5e:	e024      	b.n	8000faa <Set_LEDs_ByState+0x1b6>
            else Set_LED(i,0,0,0);
 8000f60:	89f8      	ldrh	r0, [r7, #14]
 8000f62:	2300      	movs	r3, #0
 8000f64:	2200      	movs	r2, #0
 8000f66:	2100      	movs	r1, #0
 8000f68:	f7ff fb56 	bl	8000618 <Set_LED>
            break;
 8000f6c:	e01d      	b.n	8000faa <Set_LEDs_ByState+0x1b6>

        case 6:                                /* blinking yellow comet        */
            if ((effStep / 20) & 1 || distance >= trail_len)
 8000f6e:	4b15      	ldr	r3, [pc, #84]	@ (8000fc4 <Set_LEDs_ByState+0x1d0>)
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	4a16      	ldr	r2, [pc, #88]	@ (8000fcc <Set_LEDs_ByState+0x1d8>)
 8000f74:	fba2 2303 	umull	r2, r3, r2, r3
 8000f78:	091b      	lsrs	r3, r3, #4
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d104      	bne.n	8000f8e <Set_LEDs_ByState+0x19a>
 8000f84:	7b7b      	ldrb	r3, [r7, #13]
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	893a      	ldrh	r2, [r7, #8]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d306      	bcc.n	8000f9c <Set_LEDs_ByState+0x1a8>
                Set_LED(i,0,0,0);
 8000f8e:	89f8      	ldrh	r0, [r7, #14]
 8000f90:	2300      	movs	r3, #0
 8000f92:	2200      	movs	r2, #0
 8000f94:	2100      	movs	r1, #0
 8000f96:	f7ff fb3f 	bl	8000618 <Set_LED>
            else
                Set_LED(i,255,255,0);
            break;
 8000f9a:	e005      	b.n	8000fa8 <Set_LEDs_ByState+0x1b4>
                Set_LED(i,255,255,0);
 8000f9c:	89f8      	ldrh	r0, [r7, #14]
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	22ff      	movs	r2, #255	@ 0xff
 8000fa2:	21ff      	movs	r1, #255	@ 0xff
 8000fa4:	f7ff fb38 	bl	8000618 <Set_LED>
            break;
 8000fa8:	bf00      	nop
    for (uint16_t i = 0; i < MAX_LED; ++i) {
 8000faa:	89fb      	ldrh	r3, [r7, #14]
 8000fac:	3301      	adds	r3, #1
 8000fae:	81fb      	strh	r3, [r7, #14]
 8000fb0:	89fb      	ldrh	r3, [r7, #14]
 8000fb2:	2b3f      	cmp	r3, #63	@ 0x3f
 8000fb4:	f67f af2b 	bls.w	8000e0e <Set_LEDs_ByState+0x1a>
        }
    }
    WS2812_Send();      /* single call for all states */
 8000fb8:	f7ff fb84 	bl	80006c4 <WS2812_Send>
}
 8000fbc:	bf00      	nop
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20001084 	.word	0x20001084
 8000fc8:	200002fc 	.word	0x200002fc
 8000fcc:	cccccccd 	.word	0xcccccccd

08000fd0 <CAN1_Tx>:
/**
  * @brief  Transmit a message via CAN1.
  * @retval None
  */
void CAN1_Tx()
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af00      	add	r7, sp, #0
  CAN_TxHeaderTypeDef TxHeader;
  uint32_t TxMailbox;
  uint8_t message;

  TxHeader.DLC = 1;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	61bb      	str	r3, [r7, #24]
  TxHeader.StdId = 0x499;
 8000fda:	f240 4399 	movw	r3, #1177	@ 0x499
 8000fde:	60bb      	str	r3, [r7, #8]
  TxHeader.IDE   = CAN_ID_STD;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	613b      	str	r3, [r7, #16]

  TxHeader.RTR = CAN_RTR_DATA;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]

  message = fsm_state;
 8000fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8001018 <CAN1_Tx+0x48>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	70fb      	strb	r3, [r7, #3]

  // board led blinks on tx
  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8000fee:	2120      	movs	r1, #32
 8000ff0:	480a      	ldr	r0, [pc, #40]	@ (800101c <CAN1_Tx+0x4c>)
 8000ff2:	f002 f913 	bl	800321c <HAL_GPIO_TogglePin>
  // send the message

  if( HAL_CAN_AddTxMessage(&hcan1,&TxHeader,&message,&TxMailbox) != HAL_OK)
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	1cfa      	adds	r2, r7, #3
 8000ffa:	f107 0108 	add.w	r1, r7, #8
 8000ffe:	4808      	ldr	r0, [pc, #32]	@ (8001020 <CAN1_Tx+0x50>)
 8001000:	f000 fe8e 	bl	8001d20 <HAL_CAN_AddTxMessage>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <CAN1_Tx+0x3e>
  {
    Error_Handler();
 800100a:	f000 f8c7 	bl	800119c <Error_Handler>
  }
}
 800100e:	bf00      	nop
 8001010:	3720      	adds	r7, #32
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200002fc 	.word	0x200002fc
 800101c:	40020000 	.word	0x40020000
 8001020:	2000007c 	.word	0x2000007c

08001024 <CAN_Filter_Config>:
/**
  * @brief  Configures the CAN filter.
  * @retval None
  */
void CAN_Filter_Config(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	@ 0x28
 8001028:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef can1_filter_init;

  can1_filter_init.FilterActivation = ENABLE;
 800102a:	2301      	movs	r3, #1
 800102c:	623b      	str	r3, [r7, #32]
  can1_filter_init.FilterBank  = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
  can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
  can1_filter_init.FilterIdHigh = 0x0000;
 8001036:	2300      	movs	r3, #0
 8001038:	603b      	str	r3, [r7, #0]
  can1_filter_init.FilterIdLow = 0x0000;
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
  can1_filter_init.FilterMaskIdHigh = 0X0000;
 800103e:	2300      	movs	r3, #0
 8001040:	60bb      	str	r3, [r7, #8]
  can1_filter_init.FilterMaskIdLow = 0x0000;
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
  can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 8001046:	2300      	movs	r3, #0
 8001048:	61bb      	str	r3, [r7, #24]
  can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 800104a:	2301      	movs	r3, #1
 800104c:	61fb      	str	r3, [r7, #28]

  if( HAL_CAN_ConfigFilter(&hcan1,&can1_filter_init) != HAL_OK)
 800104e:	463b      	mov	r3, r7
 8001050:	4619      	mov	r1, r3
 8001052:	4806      	ldr	r0, [pc, #24]	@ (800106c <CAN_Filter_Config+0x48>)
 8001054:	f000 fd42 	bl	8001adc <HAL_CAN_ConfigFilter>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <CAN_Filter_Config+0x3e>
  {
    Error_Handler();
 800105e:	f000 f89d 	bl	800119c <Error_Handler>
  }
}
 8001062:	bf00      	nop
 8001064:	3728      	adds	r7, #40	@ 0x28
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	2000007c 	.word	0x2000007c

08001070 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b090      	sub	sp, #64	@ 0x40
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  char msg[50];
  sprintf(msg,"Message Transmitted:M0\r\n");
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	4903      	ldr	r1, [pc, #12]	@ (800108c <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 800107e:	4618      	mov	r0, r3
 8001080:	f004 f9ce 	bl	8005420 <siprintf>
//  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
}
 8001084:	bf00      	nop
 8001086:	3740      	adds	r7, #64	@ 0x40
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	08005d78 	.word	0x08005d78

08001090 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b090      	sub	sp, #64	@ 0x40
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  char msg[50];
  sprintf(msg,"Message Transmitted:M1\r\n");
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	4903      	ldr	r1, [pc, #12]	@ (80010ac <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 800109e:	4618      	mov	r0, r3
 80010a0:	f004 f9be 	bl	8005420 <siprintf>
//  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
}
 80010a4:	bf00      	nop
 80010a6:	3740      	adds	r7, #64	@ 0x40
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	08005d94 	.word	0x08005d94

080010b0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b090      	sub	sp, #64	@ 0x40
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  char msg[50];
  sprintf(msg,"Message Transmitted:M2\r\n");
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	4903      	ldr	r1, [pc, #12]	@ (80010cc <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 80010be:	4618      	mov	r0, r3
 80010c0:	f004 f9ae 	bl	8005420 <siprintf>
//  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
}
 80010c4:	bf00      	nop
 80010c6:	3740      	adds	r7, #64	@ 0x40
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	08005db0 	.word	0x08005db0

080010d0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b0a2      	sub	sp, #136	@ 0x88
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  	uint8_t rcvd_msg[8];
	char dbg_rx[64];
	sprintf(dbg_rx, "Rx: ID=0x%03lX, Data[0]=%d\r\n", RxHeader.StdId, rcvd_msg[0]);
 80010d8:	4b27      	ldr	r3, [pc, #156]	@ (8001178 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 80010e0:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80010e4:	4925      	ldr	r1, [pc, #148]	@ (800117c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80010e6:	f004 f99b 	bl	8005420 <siprintf>
//	HAL_UART_Transmit(&huart2, (uint8_t*)dbg_rx, strlen(dbg_rx), HAL_MAX_DELAY);


  char msg[50];

  if(HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,&RxHeader,rcvd_msg) != HAL_OK)
 80010ea:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80010ee:	4a22      	ldr	r2, [pc, #136]	@ (8001178 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 80010f0:	2100      	movs	r1, #0
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f000 fee4 	bl	8001ec0 <HAL_CAN_GetRxMessage>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
  {
    Error_Handler();
 80010fe:	f000 f84d 	bl	800119c <Error_Handler>
  }

  switch (RxHeader.StdId)
 8001102:	4b1d      	ldr	r3, [pc, #116]	@ (8001178 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 800110a:	2b06      	cmp	r3, #6
 800110c:	d830      	bhi.n	8001170 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>
 800110e:	a201      	add	r2, pc, #4	@ (adr r2, 8001114 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001114:	08001131 	.word	0x08001131
 8001118:	08001139 	.word	0x08001139
 800111c:	08001141 	.word	0x08001141
 8001120:	08001149 	.word	0x08001149
 8001124:	08001151 	.word	0x08001151
 8001128:	08001159 	.word	0x08001159
 800112c:	08001161 	.word	0x08001161
      {
          case 0x401:  fsm_state = 0; break;   // FAULT
 8001130:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
 8001136:	e017      	b.n	8001168 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>
          case 0x402:  fsm_state = 1; break;   // SAFE‑TO‑APPROACH
 8001138:	4b11      	ldr	r3, [pc, #68]	@ (8001180 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 800113a:	2201      	movs	r2, #1
 800113c:	701a      	strb	r2, [r3, #0]
 800113e:	e013      	b.n	8001168 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>
          case 0x403:  fsm_state = 2; break;   // READY‑TO‑LAUNCH
 8001140:	4b0f      	ldr	r3, [pc, #60]	@ (8001180 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8001142:	2202      	movs	r2, #2
 8001144:	701a      	strb	r2, [r3, #0]
 8001146:	e00f      	b.n	8001168 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>
          case 0x404:  fsm_state = 3; break;   // LAUNCH (unused)
 8001148:	4b0d      	ldr	r3, [pc, #52]	@ (8001180 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 800114a:	2203      	movs	r2, #3
 800114c:	701a      	strb	r2, [r3, #0]
 800114e:	e00b      	b.n	8001168 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>
          case 0x405:  fsm_state = 4; break;   // CRAWLING
 8001150:	4b0b      	ldr	r3, [pc, #44]	@ (8001180 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8001152:	2204      	movs	r2, #4
 8001154:	701a      	strb	r2, [r3, #0]
 8001156:	e007      	b.n	8001168 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>
          case 0x406:  fsm_state = 5; break;   // BRAKING
 8001158:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 800115a:	2205      	movs	r2, #5
 800115c:	701a      	strb	r2, [r3, #0]
 800115e:	e003      	b.n	8001168 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>
          case 0x407:  fsm_state = 6; break;   // DEBUG
 8001160:	4b07      	ldr	r3, [pc, #28]	@ (8001180 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8001162:	2206      	movs	r2, #6
 8001164:	701a      	strb	r2, [r3, #0]
 8001166:	bf00      	nop
          default: return;                     // ignore everything else
      }
      state_changed = 1;                       // tell main loop to repaint
 8001168:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 800116a:	2201      	movs	r2, #1
 800116c:	701a      	strb	r2, [r3, #0]
 800116e:	e000      	b.n	8001172 <HAL_CAN_RxFifo0MsgPendingCallback+0xa2>
          default: return;                     // ignore everything else
 8001170:	bf00      	nop
}
 8001172:	3788      	adds	r7, #136	@ 0x88
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000300 	.word	0x20000300
 800117c:	08005dcc 	.word	0x08005dcc
 8001180:	200002fc 	.word	0x200002fc
 8001184:	2000041c 	.word	0x2000041c

08001188 <HAL_TIM_PeriodElapsedCallback>:
  * We will send the heartbeat signal from this function
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{ // broadcasts heartbeat signal
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  CAN1_Tx();
 8001190:	f7ff ff1e 	bl	8000fd0 <CAN1_Tx>
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a0:	b672      	cpsid	i
}
 80011a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a4:	bf00      	nop
 80011a6:	e7fd      	b.n	80011a4 <Error_Handler+0x8>

080011a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	4b10      	ldr	r3, [pc, #64]	@ (80011f4 <HAL_MspInit+0x4c>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b6:	4a0f      	ldr	r2, [pc, #60]	@ (80011f4 <HAL_MspInit+0x4c>)
 80011b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80011be:	4b0d      	ldr	r3, [pc, #52]	@ (80011f4 <HAL_MspInit+0x4c>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	603b      	str	r3, [r7, #0]
 80011ce:	4b09      	ldr	r3, [pc, #36]	@ (80011f4 <HAL_MspInit+0x4c>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d2:	4a08      	ldr	r2, [pc, #32]	@ (80011f4 <HAL_MspInit+0x4c>)
 80011d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011da:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <HAL_MspInit+0x4c>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011e6:	2007      	movs	r0, #7
 80011e8:	f001 fa94 	bl	8002714 <HAL_NVIC_SetPriorityGrouping>

  /* USER CODE END MspInit 1 */
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40023800 	.word	0x40023800

080011f8 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	@ 0x28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a29      	ldr	r2, [pc, #164]	@ (80012bc <HAL_CAN_MspInit+0xc4>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d14c      	bne.n	80012b4 <HAL_CAN_MspInit+0xbc>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	4b28      	ldr	r3, [pc, #160]	@ (80012c0 <HAL_CAN_MspInit+0xc8>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001222:	4a27      	ldr	r2, [pc, #156]	@ (80012c0 <HAL_CAN_MspInit+0xc8>)
 8001224:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001228:	6413      	str	r3, [r2, #64]	@ 0x40
 800122a:	4b25      	ldr	r3, [pc, #148]	@ (80012c0 <HAL_CAN_MspInit+0xc8>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	4b21      	ldr	r3, [pc, #132]	@ (80012c0 <HAL_CAN_MspInit+0xc8>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	4a20      	ldr	r2, [pc, #128]	@ (80012c0 <HAL_CAN_MspInit+0xc8>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6313      	str	r3, [r2, #48]	@ 0x30
 8001246:	4b1e      	ldr	r3, [pc, #120]	@ (80012c0 <HAL_CAN_MspInit+0xc8>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001252:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001264:	2309      	movs	r3, #9
 8001266:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4619      	mov	r1, r3
 800126e:	4815      	ldr	r0, [pc, #84]	@ (80012c4 <HAL_CAN_MspInit+0xcc>)
 8001270:	f001 fe40 	bl	8002ef4 <HAL_GPIO_Init>

    /* USER CODE BEGIN CAN1_MspInit 1 */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn,15,0);
 8001274:	2200      	movs	r2, #0
 8001276:	210f      	movs	r1, #15
 8001278:	2013      	movs	r0, #19
 800127a:	f001 fa56 	bl	800272a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX0_IRQn,15,0);
 800127e:	2200      	movs	r2, #0
 8001280:	210f      	movs	r1, #15
 8001282:	2014      	movs	r0, #20
 8001284:	f001 fa51 	bl	800272a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX1_IRQn,15,0);
 8001288:	2200      	movs	r2, #0
 800128a:	210f      	movs	r1, #15
 800128c:	2015      	movs	r0, #21
 800128e:	f001 fa4c 	bl	800272a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_SCE_IRQn,15,0);
 8001292:	2200      	movs	r2, #0
 8001294:	210f      	movs	r1, #15
 8001296:	2016      	movs	r0, #22
 8001298:	f001 fa47 	bl	800272a <HAL_NVIC_SetPriority>

	HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800129c:	2013      	movs	r0, #19
 800129e:	f001 fa60 	bl	8002762 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80012a2:	2014      	movs	r0, #20
 80012a4:	f001 fa5d 	bl	8002762 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80012a8:	2015      	movs	r0, #21
 80012aa:	f001 fa5a 	bl	8002762 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80012ae:	2016      	movs	r0, #22
 80012b0:	f001 fa57 	bl	8002762 <HAL_NVIC_EnableIRQ>
    /* USER CODE END CAN1_MspInit 1 */

  }

}
 80012b4:	bf00      	nop
 80012b6:	3728      	adds	r7, #40	@ 0x28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40006400 	.word	0x40006400
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40020000 	.word	0x40020000

080012c8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a85      	ldr	r2, [pc, #532]	@ (80014ec <HAL_TIM_Base_MspInit+0x224>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d16e      	bne.n	80013b8 <HAL_TIM_Base_MspInit+0xf0>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	4b84      	ldr	r3, [pc, #528]	@ (80014f0 <HAL_TIM_Base_MspInit+0x228>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e2:	4a83      	ldr	r2, [pc, #524]	@ (80014f0 <HAL_TIM_Base_MspInit+0x228>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ea:	4b81      	ldr	r3, [pc, #516]	@ (80014f0 <HAL_TIM_Base_MspInit+0x228>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80012f6:	4b7f      	ldr	r3, [pc, #508]	@ (80014f4 <HAL_TIM_Base_MspInit+0x22c>)
 80012f8:	4a7f      	ldr	r2, [pc, #508]	@ (80014f8 <HAL_TIM_Base_MspInit+0x230>)
 80012fa:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80012fc:	4b7d      	ldr	r3, [pc, #500]	@ (80014f4 <HAL_TIM_Base_MspInit+0x22c>)
 80012fe:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8001302:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001304:	4b7b      	ldr	r3, [pc, #492]	@ (80014f4 <HAL_TIM_Base_MspInit+0x22c>)
 8001306:	2240      	movs	r2, #64	@ 0x40
 8001308:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800130a:	4b7a      	ldr	r3, [pc, #488]	@ (80014f4 <HAL_TIM_Base_MspInit+0x22c>)
 800130c:	2200      	movs	r2, #0
 800130e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001310:	4b78      	ldr	r3, [pc, #480]	@ (80014f4 <HAL_TIM_Base_MspInit+0x22c>)
 8001312:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001316:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001318:	4b76      	ldr	r3, [pc, #472]	@ (80014f4 <HAL_TIM_Base_MspInit+0x22c>)
 800131a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800131e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001320:	4b74      	ldr	r3, [pc, #464]	@ (80014f4 <HAL_TIM_Base_MspInit+0x22c>)
 8001322:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001326:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001328:	4b72      	ldr	r3, [pc, #456]	@ (80014f4 <HAL_TIM_Base_MspInit+0x22c>)
 800132a:	2200      	movs	r2, #0
 800132c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800132e:	4b71      	ldr	r3, [pc, #452]	@ (80014f4 <HAL_TIM_Base_MspInit+0x22c>)
 8001330:	2200      	movs	r2, #0
 8001332:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001334:	4b6f      	ldr	r3, [pc, #444]	@ (80014f4 <HAL_TIM_Base_MspInit+0x22c>)
 8001336:	2200      	movs	r2, #0
 8001338:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800133a:	486e      	ldr	r0, [pc, #440]	@ (80014f4 <HAL_TIM_Base_MspInit+0x22c>)
 800133c:	f001 fa48 	bl	80027d0 <HAL_DMA_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001346:	f7ff ff29 	bl	800119c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a69      	ldr	r2, [pc, #420]	@ (80014f4 <HAL_TIM_Base_MspInit+0x22c>)
 800134e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001350:	4a68      	ldr	r2, [pc, #416]	@ (80014f4 <HAL_TIM_Base_MspInit+0x22c>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA2_Stream2;
 8001356:	4b69      	ldr	r3, [pc, #420]	@ (80014fc <HAL_TIM_Base_MspInit+0x234>)
 8001358:	4a69      	ldr	r2, [pc, #420]	@ (8001500 <HAL_TIM_Base_MspInit+0x238>)
 800135a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Channel = DMA_CHANNEL_6;
 800135c:	4b67      	ldr	r3, [pc, #412]	@ (80014fc <HAL_TIM_Base_MspInit+0x234>)
 800135e:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8001362:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001364:	4b65      	ldr	r3, [pc, #404]	@ (80014fc <HAL_TIM_Base_MspInit+0x234>)
 8001366:	2240      	movs	r2, #64	@ 0x40
 8001368:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800136a:	4b64      	ldr	r3, [pc, #400]	@ (80014fc <HAL_TIM_Base_MspInit+0x234>)
 800136c:	2200      	movs	r2, #0
 800136e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001370:	4b62      	ldr	r3, [pc, #392]	@ (80014fc <HAL_TIM_Base_MspInit+0x234>)
 8001372:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001376:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001378:	4b60      	ldr	r3, [pc, #384]	@ (80014fc <HAL_TIM_Base_MspInit+0x234>)
 800137a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800137e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001380:	4b5e      	ldr	r3, [pc, #376]	@ (80014fc <HAL_TIM_Base_MspInit+0x234>)
 8001382:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001386:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 8001388:	4b5c      	ldr	r3, [pc, #368]	@ (80014fc <HAL_TIM_Base_MspInit+0x234>)
 800138a:	2200      	movs	r2, #0
 800138c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800138e:	4b5b      	ldr	r3, [pc, #364]	@ (80014fc <HAL_TIM_Base_MspInit+0x234>)
 8001390:	2200      	movs	r2, #0
 8001392:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001394:	4b59      	ldr	r3, [pc, #356]	@ (80014fc <HAL_TIM_Base_MspInit+0x234>)
 8001396:	2200      	movs	r2, #0
 8001398:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 800139a:	4858      	ldr	r0, [pc, #352]	@ (80014fc <HAL_TIM_Base_MspInit+0x234>)
 800139c:	f001 fa18 	bl	80027d0 <HAL_DMA_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_TIM_Base_MspInit+0xe2>
    {
      Error_Handler();
 80013a6:	f7ff fef9 	bl	800119c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a53      	ldr	r2, [pc, #332]	@ (80014fc <HAL_TIM_Base_MspInit+0x234>)
 80013ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80013b0:	4a52      	ldr	r2, [pc, #328]	@ (80014fc <HAL_TIM_Base_MspInit+0x234>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6393      	str	r3, [r2, #56]	@ 0x38
    //3. setup the priority for TIM6_DAC_IRQn
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn,15,0);
    /* USER CODE END TIM6_MspInit 1 */
  }

}
 80013b6:	e094      	b.n	80014e2 <HAL_TIM_Base_MspInit+0x21a>
  else if(htim_base->Instance==TIM2)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013c0:	d174      	bne.n	80014ac <HAL_TIM_Base_MspInit+0x1e4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	4b4a      	ldr	r3, [pc, #296]	@ (80014f0 <HAL_TIM_Base_MspInit+0x228>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ca:	4a49      	ldr	r2, [pc, #292]	@ (80014f0 <HAL_TIM_Base_MspInit+0x228>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80013d2:	4b47      	ldr	r3, [pc, #284]	@ (80014f0 <HAL_TIM_Base_MspInit+0x228>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 80013de:	4b49      	ldr	r3, [pc, #292]	@ (8001504 <HAL_TIM_Base_MspInit+0x23c>)
 80013e0:	4a49      	ldr	r2, [pc, #292]	@ (8001508 <HAL_TIM_Base_MspInit+0x240>)
 80013e2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 80013e4:	4b47      	ldr	r3, [pc, #284]	@ (8001504 <HAL_TIM_Base_MspInit+0x23c>)
 80013e6:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80013ea:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013ec:	4b45      	ldr	r3, [pc, #276]	@ (8001504 <HAL_TIM_Base_MspInit+0x23c>)
 80013ee:	2240      	movs	r2, #64	@ 0x40
 80013f0:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013f2:	4b44      	ldr	r3, [pc, #272]	@ (8001504 <HAL_TIM_Base_MspInit+0x23c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80013f8:	4b42      	ldr	r3, [pc, #264]	@ (8001504 <HAL_TIM_Base_MspInit+0x23c>)
 80013fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013fe:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001400:	4b40      	ldr	r3, [pc, #256]	@ (8001504 <HAL_TIM_Base_MspInit+0x23c>)
 8001402:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001406:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001408:	4b3e      	ldr	r3, [pc, #248]	@ (8001504 <HAL_TIM_Base_MspInit+0x23c>)
 800140a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800140e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8001410:	4b3c      	ldr	r3, [pc, #240]	@ (8001504 <HAL_TIM_Base_MspInit+0x23c>)
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001416:	4b3b      	ldr	r3, [pc, #236]	@ (8001504 <HAL_TIM_Base_MspInit+0x23c>)
 8001418:	2200      	movs	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800141c:	4b39      	ldr	r3, [pc, #228]	@ (8001504 <HAL_TIM_Base_MspInit+0x23c>)
 800141e:	2200      	movs	r2, #0
 8001420:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001422:	4838      	ldr	r0, [pc, #224]	@ (8001504 <HAL_TIM_Base_MspInit+0x23c>)
 8001424:	f001 f9d4 	bl	80027d0 <HAL_DMA_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_TIM_Base_MspInit+0x16a>
      Error_Handler();
 800142e:	f7ff feb5 	bl	800119c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a33      	ldr	r2, [pc, #204]	@ (8001504 <HAL_TIM_Base_MspInit+0x23c>)
 8001436:	625a      	str	r2, [r3, #36]	@ 0x24
 8001438:	4a32      	ldr	r2, [pc, #200]	@ (8001504 <HAL_TIM_Base_MspInit+0x23c>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim2_ch2_ch4.Instance = DMA1_Stream6;
 800143e:	4b33      	ldr	r3, [pc, #204]	@ (800150c <HAL_TIM_Base_MspInit+0x244>)
 8001440:	4a33      	ldr	r2, [pc, #204]	@ (8001510 <HAL_TIM_Base_MspInit+0x248>)
 8001442:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Channel = DMA_CHANNEL_3;
 8001444:	4b31      	ldr	r3, [pc, #196]	@ (800150c <HAL_TIM_Base_MspInit+0x244>)
 8001446:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800144a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800144c:	4b2f      	ldr	r3, [pc, #188]	@ (800150c <HAL_TIM_Base_MspInit+0x244>)
 800144e:	2240      	movs	r2, #64	@ 0x40
 8001450:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001452:	4b2e      	ldr	r3, [pc, #184]	@ (800150c <HAL_TIM_Base_MspInit+0x244>)
 8001454:	2200      	movs	r2, #0
 8001456:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001458:	4b2c      	ldr	r3, [pc, #176]	@ (800150c <HAL_TIM_Base_MspInit+0x244>)
 800145a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800145e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001460:	4b2a      	ldr	r3, [pc, #168]	@ (800150c <HAL_TIM_Base_MspInit+0x244>)
 8001462:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001466:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001468:	4b28      	ldr	r3, [pc, #160]	@ (800150c <HAL_TIM_Base_MspInit+0x244>)
 800146a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800146e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 8001470:	4b26      	ldr	r3, [pc, #152]	@ (800150c <HAL_TIM_Base_MspInit+0x244>)
 8001472:	2200      	movs	r2, #0
 8001474:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8001476:	4b25      	ldr	r3, [pc, #148]	@ (800150c <HAL_TIM_Base_MspInit+0x244>)
 8001478:	2200      	movs	r2, #0
 800147a:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch2_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800147c:	4b23      	ldr	r3, [pc, #140]	@ (800150c <HAL_TIM_Base_MspInit+0x244>)
 800147e:	2200      	movs	r2, #0
 8001480:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8001482:	4822      	ldr	r0, [pc, #136]	@ (800150c <HAL_TIM_Base_MspInit+0x244>)
 8001484:	f001 f9a4 	bl	80027d0 <HAL_DMA_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <HAL_TIM_Base_MspInit+0x1ca>
      Error_Handler();
 800148e:	f7ff fe85 	bl	800119c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a1d      	ldr	r2, [pc, #116]	@ (800150c <HAL_TIM_Base_MspInit+0x244>)
 8001496:	629a      	str	r2, [r3, #40]	@ 0x28
 8001498:	4a1c      	ldr	r2, [pc, #112]	@ (800150c <HAL_TIM_Base_MspInit+0x244>)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a1a      	ldr	r2, [pc, #104]	@ (800150c <HAL_TIM_Base_MspInit+0x244>)
 80014a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80014a4:	4a19      	ldr	r2, [pc, #100]	@ (800150c <HAL_TIM_Base_MspInit+0x244>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80014aa:	e01a      	b.n	80014e2 <HAL_TIM_Base_MspInit+0x21a>
  else if(htim_base->Instance==TIM6)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a18      	ldr	r2, [pc, #96]	@ (8001514 <HAL_TIM_Base_MspInit+0x24c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d115      	bne.n	80014e2 <HAL_TIM_Base_MspInit+0x21a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	4b0d      	ldr	r3, [pc, #52]	@ (80014f0 <HAL_TIM_Base_MspInit+0x228>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014be:	4a0c      	ldr	r2, [pc, #48]	@ (80014f0 <HAL_TIM_Base_MspInit+0x228>)
 80014c0:	f043 0310 	orr.w	r3, r3, #16
 80014c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014c6:	4b0a      	ldr	r3, [pc, #40]	@ (80014f0 <HAL_TIM_Base_MspInit+0x228>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ca:	f003 0310 	and.w	r3, r3, #16
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014d2:	2036      	movs	r0, #54	@ 0x36
 80014d4:	f001 f945 	bl	8002762 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn,15,0);
 80014d8:	2200      	movs	r2, #0
 80014da:	210f      	movs	r1, #15
 80014dc:	2036      	movs	r0, #54	@ 0x36
 80014de:	f001 f924 	bl	800272a <HAL_NVIC_SetPriority>
}
 80014e2:	bf00      	nop
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40010000 	.word	0x40010000
 80014f0:	40023800 	.word	0x40023800
 80014f4:	2000017c 	.word	0x2000017c
 80014f8:	40026428 	.word	0x40026428
 80014fc:	200001dc 	.word	0x200001dc
 8001500:	40026440 	.word	0x40026440
 8001504:	2000023c 	.word	0x2000023c
 8001508:	40026088 	.word	0x40026088
 800150c:	2000029c 	.word	0x2000029c
 8001510:	400260a0 	.word	0x400260a0
 8001514:	40001000 	.word	0x40001000

08001518 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	@ 0x28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a24      	ldr	r2, [pc, #144]	@ (80015c8 <HAL_TIM_MspPostInit+0xb0>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d11f      	bne.n	800157a <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	4b23      	ldr	r3, [pc, #140]	@ (80015cc <HAL_TIM_MspPostInit+0xb4>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001542:	4a22      	ldr	r2, [pc, #136]	@ (80015cc <HAL_TIM_MspPostInit+0xb4>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6313      	str	r3, [r2, #48]	@ 0x30
 800154a:	4b20      	ldr	r3, [pc, #128]	@ (80015cc <HAL_TIM_MspPostInit+0xb4>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001556:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800155a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	2302      	movs	r3, #2
 800155e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001564:	2300      	movs	r3, #0
 8001566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001568:	2301      	movs	r3, #1
 800156a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	4619      	mov	r1, r3
 8001572:	4817      	ldr	r0, [pc, #92]	@ (80015d0 <HAL_TIM_MspPostInit+0xb8>)
 8001574:	f001 fcbe 	bl	8002ef4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001578:	e022      	b.n	80015c0 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001582:	d11d      	bne.n	80015c0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001584:	2300      	movs	r3, #0
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	4b10      	ldr	r3, [pc, #64]	@ (80015cc <HAL_TIM_MspPostInit+0xb4>)
 800158a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158c:	4a0f      	ldr	r2, [pc, #60]	@ (80015cc <HAL_TIM_MspPostInit+0xb4>)
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	6313      	str	r3, [r2, #48]	@ 0x30
 8001594:	4b0d      	ldr	r3, [pc, #52]	@ (80015cc <HAL_TIM_MspPostInit+0xb4>)
 8001596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015a0:	2303      	movs	r3, #3
 80015a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ac:	2300      	movs	r3, #0
 80015ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015b0:	2301      	movs	r3, #1
 80015b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b4:	f107 0314 	add.w	r3, r7, #20
 80015b8:	4619      	mov	r1, r3
 80015ba:	4805      	ldr	r0, [pc, #20]	@ (80015d0 <HAL_TIM_MspPostInit+0xb8>)
 80015bc:	f001 fc9a 	bl	8002ef4 <HAL_GPIO_Init>
}
 80015c0:	bf00      	nop
 80015c2:	3728      	adds	r7, #40	@ 0x28
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40010000 	.word	0x40010000
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020000 	.word	0x40020000

080015d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <NMI_Handler+0x4>

080015dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <HardFault_Handler+0x4>

080015e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <MemManage_Handler+0x4>

080015ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <BusFault_Handler+0x4>

080015f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f8:	bf00      	nop
 80015fa:	e7fd      	b.n	80015f8 <UsageFault_Handler+0x4>

080015fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800162a:	f000 f917 	bl	800185c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001638:	4802      	ldr	r0, [pc, #8]	@ (8001644 <DMA1_Stream5_IRQHandler+0x10>)
 800163a:	f001 f9f1 	bl	8002a20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	2000023c 	.word	0x2000023c

08001648 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 800164c:	4802      	ldr	r0, [pc, #8]	@ (8001658 <DMA1_Stream6_IRQHandler+0x10>)
 800164e:	f001 f9e7 	bl	8002a20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	2000029c 	.word	0x2000029c

0800165c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001660:	4802      	ldr	r0, [pc, #8]	@ (800166c <DMA2_Stream1_IRQHandler+0x10>)
 8001662:	f001 f9dd 	bl	8002a20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	2000017c 	.word	0x2000017c

08001670 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8001674:	4802      	ldr	r0, [pc, #8]	@ (8001680 <DMA2_Stream2_IRQHandler+0x10>)
 8001676:	f001 f9d3 	bl	8002a20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	200001dc 	.word	0x200001dc

08001684 <CAN1_TX_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
  * @brief This function handles CAN_TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8001688:	4802      	ldr	r0, [pc, #8]	@ (8001694 <CAN1_TX_IRQHandler+0x10>)
 800168a:	f000 fd61 	bl	8002150 <HAL_CAN_IRQHandler>
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	2000007c 	.word	0x2000007c

08001698 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN_RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 800169c:	4802      	ldr	r0, [pc, #8]	@ (80016a8 <CAN1_RX0_IRQHandler+0x10>)
 800169e:	f000 fd57 	bl	8002150 <HAL_CAN_IRQHandler>
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	2000007c 	.word	0x2000007c

080016ac <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 80016b0:	4802      	ldr	r0, [pc, #8]	@ (80016bc <CAN1_SCE_IRQHandler+0x10>)
 80016b2:	f000 fd4d 	bl	8002150 <HAL_CAN_IRQHandler>
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	2000007c 	.word	0x2000007c

080016c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim6);
 80016c4:	4802      	ldr	r0, [pc, #8]	@ (80016d0 <TIM6_DAC_IRQHandler+0x10>)
 80016c6:	f002 ff37 	bl	8004538 <HAL_TIM_IRQHandler>
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000134 	.word	0x20000134

080016d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016dc:	4a14      	ldr	r2, [pc, #80]	@ (8001730 <_sbrk+0x5c>)
 80016de:	4b15      	ldr	r3, [pc, #84]	@ (8001734 <_sbrk+0x60>)
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016e8:	4b13      	ldr	r3, [pc, #76]	@ (8001738 <_sbrk+0x64>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d102      	bne.n	80016f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016f0:	4b11      	ldr	r3, [pc, #68]	@ (8001738 <_sbrk+0x64>)
 80016f2:	4a12      	ldr	r2, [pc, #72]	@ (800173c <_sbrk+0x68>)
 80016f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016f6:	4b10      	ldr	r3, [pc, #64]	@ (8001738 <_sbrk+0x64>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4413      	add	r3, r2
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	429a      	cmp	r2, r3
 8001702:	d207      	bcs.n	8001714 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001704:	f003 feb6 	bl	8005474 <__errno>
 8001708:	4603      	mov	r3, r0
 800170a:	220c      	movs	r2, #12
 800170c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800170e:	f04f 33ff 	mov.w	r3, #4294967295
 8001712:	e009      	b.n	8001728 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001714:	4b08      	ldr	r3, [pc, #32]	@ (8001738 <_sbrk+0x64>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800171a:	4b07      	ldr	r3, [pc, #28]	@ (8001738 <_sbrk+0x64>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4413      	add	r3, r2
 8001722:	4a05      	ldr	r2, [pc, #20]	@ (8001738 <_sbrk+0x64>)
 8001724:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001726:	68fb      	ldr	r3, [r7, #12]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3718      	adds	r7, #24
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20020000 	.word	0x20020000
 8001734:	00000400 	.word	0x00000400
 8001738:	20001088 	.word	0x20001088
 800173c:	200011d8 	.word	0x200011d8

08001740 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001744:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <SystemInit+0x20>)
 8001746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800174a:	4a05      	ldr	r2, [pc, #20]	@ (8001760 <SystemInit+0x20>)
 800174c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001750:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001764:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800179c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001768:	480d      	ldr	r0, [pc, #52]	@ (80017a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800176a:	490e      	ldr	r1, [pc, #56]	@ (80017a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800176c:	4a0e      	ldr	r2, [pc, #56]	@ (80017a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800176e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001770:	e002      	b.n	8001778 <LoopCopyDataInit>

08001772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001776:	3304      	adds	r3, #4

08001778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800177a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800177c:	d3f9      	bcc.n	8001772 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800177e:	4a0b      	ldr	r2, [pc, #44]	@ (80017ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001780:	4c0b      	ldr	r4, [pc, #44]	@ (80017b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001784:	e001      	b.n	800178a <LoopFillZerobss>

08001786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001788:	3204      	adds	r2, #4

0800178a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800178a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800178c:	d3fb      	bcc.n	8001786 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800178e:	f7ff ffd7 	bl	8001740 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001792:	f003 fe75 	bl	8005480 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001796:	f7ff f839 	bl	800080c <main>
  bx  lr    
 800179a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800179c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017a4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80017a8:	08005e48 	.word	0x08005e48
  ldr r2, =_sbss
 80017ac:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80017b0:	200011d8 	.word	0x200011d8

080017b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017b4:	e7fe      	b.n	80017b4 <ADC_IRQHandler>
	...

080017b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017bc:	4b0e      	ldr	r3, [pc, #56]	@ (80017f8 <HAL_Init+0x40>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a0d      	ldr	r2, [pc, #52]	@ (80017f8 <HAL_Init+0x40>)
 80017c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017c8:	4b0b      	ldr	r3, [pc, #44]	@ (80017f8 <HAL_Init+0x40>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a0a      	ldr	r2, [pc, #40]	@ (80017f8 <HAL_Init+0x40>)
 80017ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017d4:	4b08      	ldr	r3, [pc, #32]	@ (80017f8 <HAL_Init+0x40>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a07      	ldr	r2, [pc, #28]	@ (80017f8 <HAL_Init+0x40>)
 80017da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e0:	2003      	movs	r0, #3
 80017e2:	f000 ff97 	bl	8002714 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017e6:	2000      	movs	r0, #0
 80017e8:	f000 f808 	bl	80017fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017ec:	f7ff fcdc 	bl	80011a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40023c00 	.word	0x40023c00

080017fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001804:	4b12      	ldr	r3, [pc, #72]	@ (8001850 <HAL_InitTick+0x54>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	4b12      	ldr	r3, [pc, #72]	@ (8001854 <HAL_InitTick+0x58>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	4619      	mov	r1, r3
 800180e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001812:	fbb3 f3f1 	udiv	r3, r3, r1
 8001816:	fbb2 f3f3 	udiv	r3, r2, r3
 800181a:	4618      	mov	r0, r3
 800181c:	f000 ffaf 	bl	800277e <HAL_SYSTICK_Config>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e00e      	b.n	8001848 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b0f      	cmp	r3, #15
 800182e:	d80a      	bhi.n	8001846 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001830:	2200      	movs	r2, #0
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	f04f 30ff 	mov.w	r0, #4294967295
 8001838:	f000 ff77 	bl	800272a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800183c:	4a06      	ldr	r2, [pc, #24]	@ (8001858 <HAL_InitTick+0x5c>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001842:	2300      	movs	r3, #0
 8001844:	e000      	b.n	8001848 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
}
 8001848:	4618      	mov	r0, r3
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20000004 	.word	0x20000004
 8001854:	2000000c 	.word	0x2000000c
 8001858:	20000008 	.word	0x20000008

0800185c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001860:	4b06      	ldr	r3, [pc, #24]	@ (800187c <HAL_IncTick+0x20>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	461a      	mov	r2, r3
 8001866:	4b06      	ldr	r3, [pc, #24]	@ (8001880 <HAL_IncTick+0x24>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4413      	add	r3, r2
 800186c:	4a04      	ldr	r2, [pc, #16]	@ (8001880 <HAL_IncTick+0x24>)
 800186e:	6013      	str	r3, [r2, #0]
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	2000000c 	.word	0x2000000c
 8001880:	2000108c 	.word	0x2000108c

08001884 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  return uwTick;
 8001888:	4b03      	ldr	r3, [pc, #12]	@ (8001898 <HAL_GetTick+0x14>)
 800188a:	681b      	ldr	r3, [r3, #0]
}
 800188c:	4618      	mov	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	2000108c 	.word	0x2000108c

0800189c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018a4:	f7ff ffee 	bl	8001884 <HAL_GetTick>
 80018a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b4:	d005      	beq.n	80018c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018b6:	4b0a      	ldr	r3, [pc, #40]	@ (80018e0 <HAL_Delay+0x44>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	461a      	mov	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4413      	add	r3, r2
 80018c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018c2:	bf00      	nop
 80018c4:	f7ff ffde 	bl	8001884 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d8f7      	bhi.n	80018c4 <HAL_Delay+0x28>
  {
  }
}
 80018d4:	bf00      	nop
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	2000000c 	.word	0x2000000c

080018e4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e0ed      	b.n	8001ad2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d102      	bne.n	8001908 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff fc78 	bl	80011f8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f042 0201 	orr.w	r2, r2, #1
 8001916:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001918:	f7ff ffb4 	bl	8001884 <HAL_GetTick>
 800191c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800191e:	e012      	b.n	8001946 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001920:	f7ff ffb0 	bl	8001884 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b0a      	cmp	r3, #10
 800192c:	d90b      	bls.n	8001946 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001932:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2205      	movs	r2, #5
 800193e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e0c5      	b.n	8001ad2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0e5      	beq.n	8001920 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f022 0202 	bic.w	r2, r2, #2
 8001962:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001964:	f7ff ff8e 	bl	8001884 <HAL_GetTick>
 8001968:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800196a:	e012      	b.n	8001992 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800196c:	f7ff ff8a 	bl	8001884 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b0a      	cmp	r3, #10
 8001978:	d90b      	bls.n	8001992 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2205      	movs	r2, #5
 800198a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e09f      	b.n	8001ad2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1e5      	bne.n	800196c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	7e1b      	ldrb	r3, [r3, #24]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d108      	bne.n	80019ba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	e007      	b.n	80019ca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	7e5b      	ldrb	r3, [r3, #25]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d108      	bne.n	80019e4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	e007      	b.n	80019f4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80019f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	7e9b      	ldrb	r3, [r3, #26]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d108      	bne.n	8001a0e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f042 0220 	orr.w	r2, r2, #32
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	e007      	b.n	8001a1e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 0220 	bic.w	r2, r2, #32
 8001a1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	7edb      	ldrb	r3, [r3, #27]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d108      	bne.n	8001a38 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f022 0210 	bic.w	r2, r2, #16
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	e007      	b.n	8001a48 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f042 0210 	orr.w	r2, r2, #16
 8001a46:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	7f1b      	ldrb	r3, [r3, #28]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d108      	bne.n	8001a62 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f042 0208 	orr.w	r2, r2, #8
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	e007      	b.n	8001a72 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 0208 	bic.w	r2, r2, #8
 8001a70:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	7f5b      	ldrb	r3, [r3, #29]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d108      	bne.n	8001a8c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f042 0204 	orr.w	r2, r2, #4
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	e007      	b.n	8001a9c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 0204 	bic.w	r2, r2, #4
 8001a9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	695b      	ldr	r3, [r3, #20]
 8001ab0:	ea42 0103 	orr.w	r1, r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	1e5a      	subs	r2, r3, #1
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b087      	sub	sp, #28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aec:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8001aee:	7dfb      	ldrb	r3, [r7, #23]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d003      	beq.n	8001afc <HAL_CAN_ConfigFilter+0x20>
 8001af4:	7dfb      	ldrb	r3, [r7, #23]
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	f040 80be 	bne.w	8001c78 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001afc:	4b65      	ldr	r3, [pc, #404]	@ (8001c94 <HAL_CAN_ConfigFilter+0x1b8>)
 8001afe:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001b06:	f043 0201 	orr.w	r2, r3, #1
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001b16:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b2a:	021b      	lsls	r3, r3, #8
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	f003 031f 	and.w	r3, r3, #31
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	401a      	ands	r2, r3
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d123      	bne.n	8001ba6 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	43db      	mvns	r3, r3
 8001b68:	401a      	ands	r2, r3
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b80:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	3248      	adds	r2, #72	@ 0x48
 8001b86:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b9a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b9c:	6939      	ldr	r1, [r7, #16]
 8001b9e:	3348      	adds	r3, #72	@ 0x48
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	440b      	add	r3, r1
 8001ba4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d122      	bne.n	8001bf4 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001bce:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	3248      	adds	r2, #72	@ 0x48
 8001bd4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001be8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bea:	6939      	ldr	r1, [r7, #16]
 8001bec:	3348      	adds	r3, #72	@ 0x48
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	440b      	add	r3, r1
 8001bf2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d109      	bne.n	8001c10 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	43db      	mvns	r3, r3
 8001c06:	401a      	ands	r2, r3
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001c0e:	e007      	b.n	8001c20 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d109      	bne.n	8001c3c <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	43db      	mvns	r3, r3
 8001c32:	401a      	ands	r2, r3
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001c3a:	e007      	b.n	8001c4c <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	431a      	orrs	r2, r3
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d107      	bne.n	8001c64 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001c6a:	f023 0201 	bic.w	r2, r3, #1
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001c74:	2300      	movs	r3, #0
 8001c76:	e006      	b.n	8001c86 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
  }
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	371c      	adds	r7, #28
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	40006400 	.word	0x40006400

08001c98 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d12e      	bne.n	8001d0a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2202      	movs	r2, #2
 8001cb0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 0201 	bic.w	r2, r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001cc4:	f7ff fdde 	bl	8001884 <HAL_GetTick>
 8001cc8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001cca:	e012      	b.n	8001cf2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ccc:	f7ff fdda 	bl	8001884 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b0a      	cmp	r3, #10
 8001cd8:	d90b      	bls.n	8001cf2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cde:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2205      	movs	r2, #5
 8001cea:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e012      	b.n	8001d18 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1e5      	bne.n	8001ccc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001d06:	2300      	movs	r3, #0
 8001d08:	e006      	b.n	8001d18 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
  }
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b089      	sub	sp, #36	@ 0x24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
 8001d2c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d34:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d3e:	7ffb      	ldrb	r3, [r7, #31]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d003      	beq.n	8001d4c <HAL_CAN_AddTxMessage+0x2c>
 8001d44:	7ffb      	ldrb	r3, [r7, #31]
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	f040 80ad 	bne.w	8001ea6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10a      	bne.n	8001d6c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d105      	bne.n	8001d6c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 8095 	beq.w	8001e96 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	0e1b      	lsrs	r3, r3, #24
 8001d70:	f003 0303 	and.w	r3, r3, #3
 8001d74:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001d76:	2201      	movs	r2, #1
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	409a      	lsls	r2, r3
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d10d      	bne.n	8001da4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d92:	68f9      	ldr	r1, [r7, #12]
 8001d94:	6809      	ldr	r1, [r1, #0]
 8001d96:	431a      	orrs	r2, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	3318      	adds	r3, #24
 8001d9c:	011b      	lsls	r3, r3, #4
 8001d9e:	440b      	add	r3, r1
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	e00f      	b.n	8001dc4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dae:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001db4:	68f9      	ldr	r1, [r7, #12]
 8001db6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001db8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	3318      	adds	r3, #24
 8001dbe:	011b      	lsls	r3, r3, #4
 8001dc0:	440b      	add	r3, r1
 8001dc2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6819      	ldr	r1, [r3, #0]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	691a      	ldr	r2, [r3, #16]
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	3318      	adds	r3, #24
 8001dd0:	011b      	lsls	r3, r3, #4
 8001dd2:	440b      	add	r3, r1
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	7d1b      	ldrb	r3, [r3, #20]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d111      	bne.n	8001e04 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	3318      	adds	r3, #24
 8001de8:	011b      	lsls	r3, r3, #4
 8001dea:	4413      	add	r3, r2
 8001dec:	3304      	adds	r3, #4
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	6811      	ldr	r1, [r2, #0]
 8001df4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	3318      	adds	r3, #24
 8001dfc:	011b      	lsls	r3, r3, #4
 8001dfe:	440b      	add	r3, r1
 8001e00:	3304      	adds	r3, #4
 8001e02:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3307      	adds	r3, #7
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	061a      	lsls	r2, r3, #24
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3306      	adds	r3, #6
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	041b      	lsls	r3, r3, #16
 8001e14:	431a      	orrs	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3305      	adds	r3, #5
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	021b      	lsls	r3, r3, #8
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	3204      	adds	r2, #4
 8001e24:	7812      	ldrb	r2, [r2, #0]
 8001e26:	4610      	mov	r0, r2
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	6811      	ldr	r1, [r2, #0]
 8001e2c:	ea43 0200 	orr.w	r2, r3, r0
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	011b      	lsls	r3, r3, #4
 8001e34:	440b      	add	r3, r1
 8001e36:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001e3a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3303      	adds	r3, #3
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	061a      	lsls	r2, r3, #24
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3302      	adds	r3, #2
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	041b      	lsls	r3, r3, #16
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	3301      	adds	r3, #1
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	021b      	lsls	r3, r3, #8
 8001e56:	4313      	orrs	r3, r2
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	7812      	ldrb	r2, [r2, #0]
 8001e5c:	4610      	mov	r0, r2
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	6811      	ldr	r1, [r2, #0]
 8001e62:	ea43 0200 	orr.w	r2, r3, r0
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	011b      	lsls	r3, r3, #4
 8001e6a:	440b      	add	r3, r1
 8001e6c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001e70:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	3318      	adds	r3, #24
 8001e7a:	011b      	lsls	r3, r3, #4
 8001e7c:	4413      	add	r3, r2
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	6811      	ldr	r1, [r2, #0]
 8001e84:	f043 0201 	orr.w	r2, r3, #1
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	3318      	adds	r3, #24
 8001e8c:	011b      	lsls	r3, r3, #4
 8001e8e:	440b      	add	r3, r1
 8001e90:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001e92:	2300      	movs	r3, #0
 8001e94:	e00e      	b.n	8001eb4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e006      	b.n	8001eb4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eaa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
  }
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3724      	adds	r7, #36	@ 0x24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b087      	sub	sp, #28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
 8001ecc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ed4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ed6:	7dfb      	ldrb	r3, [r7, #23]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d003      	beq.n	8001ee4 <HAL_CAN_GetRxMessage+0x24>
 8001edc:	7dfb      	ldrb	r3, [r7, #23]
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	f040 8103 	bne.w	80020ea <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10e      	bne.n	8001f08 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d116      	bne.n	8001f26 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e0f7      	b.n	80020f8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d107      	bne.n	8001f26 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e0e8      	b.n	80020f8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	331b      	adds	r3, #27
 8001f2e:	011b      	lsls	r3, r3, #4
 8001f30:	4413      	add	r3, r2
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0204 	and.w	r2, r3, #4
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d10c      	bne.n	8001f5e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	331b      	adds	r3, #27
 8001f4c:	011b      	lsls	r3, r3, #4
 8001f4e:	4413      	add	r3, r2
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	0d5b      	lsrs	r3, r3, #21
 8001f54:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	e00b      	b.n	8001f76 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	331b      	adds	r3, #27
 8001f66:	011b      	lsls	r3, r3, #4
 8001f68:	4413      	add	r3, r2
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	08db      	lsrs	r3, r3, #3
 8001f6e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	331b      	adds	r3, #27
 8001f7e:	011b      	lsls	r3, r3, #4
 8001f80:	4413      	add	r3, r2
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0202 	and.w	r2, r3, #2
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	331b      	adds	r3, #27
 8001f94:	011b      	lsls	r3, r3, #4
 8001f96:	4413      	add	r3, r2
 8001f98:	3304      	adds	r3, #4
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0308 	and.w	r3, r3, #8
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2208      	movs	r2, #8
 8001fa8:	611a      	str	r2, [r3, #16]
 8001faa:	e00b      	b.n	8001fc4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	331b      	adds	r3, #27
 8001fb4:	011b      	lsls	r3, r3, #4
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3304      	adds	r3, #4
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 020f 	and.w	r2, r3, #15
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	331b      	adds	r3, #27
 8001fcc:	011b      	lsls	r3, r3, #4
 8001fce:	4413      	add	r3, r2
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	0a1b      	lsrs	r3, r3, #8
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	331b      	adds	r3, #27
 8001fe4:	011b      	lsls	r3, r3, #4
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3304      	adds	r3, #4
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	0c1b      	lsrs	r3, r3, #16
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	011b      	lsls	r3, r3, #4
 8001ffc:	4413      	add	r3, r2
 8001ffe:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	b2da      	uxtb	r2, r3
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	011b      	lsls	r3, r3, #4
 8002012:	4413      	add	r3, r2
 8002014:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	0a1a      	lsrs	r2, r3, #8
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	3301      	adds	r3, #1
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	011b      	lsls	r3, r3, #4
 800202c:	4413      	add	r3, r2
 800202e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	0c1a      	lsrs	r2, r3, #16
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	3302      	adds	r3, #2
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	011b      	lsls	r3, r3, #4
 8002046:	4413      	add	r3, r2
 8002048:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	0e1a      	lsrs	r2, r3, #24
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	3303      	adds	r3, #3
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	011b      	lsls	r3, r3, #4
 8002060:	4413      	add	r3, r2
 8002062:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	3304      	adds	r3, #4
 800206c:	b2d2      	uxtb	r2, r2
 800206e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	011b      	lsls	r3, r3, #4
 8002078:	4413      	add	r3, r2
 800207a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	0a1a      	lsrs	r2, r3, #8
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	3305      	adds	r3, #5
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	011b      	lsls	r3, r3, #4
 8002092:	4413      	add	r3, r2
 8002094:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	0c1a      	lsrs	r2, r3, #16
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	3306      	adds	r3, #6
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	011b      	lsls	r3, r3, #4
 80020ac:	4413      	add	r3, r2
 80020ae:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	0e1a      	lsrs	r2, r3, #24
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	3307      	adds	r3, #7
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d108      	bne.n	80020d6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0220 	orr.w	r2, r2, #32
 80020d2:	60da      	str	r2, [r3, #12]
 80020d4:	e007      	b.n	80020e6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	691a      	ldr	r2, [r3, #16]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f042 0220 	orr.w	r2, r2, #32
 80020e4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80020e6:	2300      	movs	r3, #0
 80020e8:	e006      	b.n	80020f8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ee:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
  }
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	371c      	adds	r7, #28
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002114:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002116:	7bfb      	ldrb	r3, [r7, #15]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d002      	beq.n	8002122 <HAL_CAN_ActivateNotification+0x1e>
 800211c:	7bfb      	ldrb	r3, [r7, #15]
 800211e:	2b02      	cmp	r3, #2
 8002120:	d109      	bne.n	8002136 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6959      	ldr	r1, [r3, #20]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002132:	2300      	movs	r3, #0
 8002134:	e006      	b.n	8002144 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
  }
}
 8002144:	4618      	mov	r0, r3
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08a      	sub	sp, #40	@ 0x28
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002158:	2300      	movs	r3, #0
 800215a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800218c:	6a3b      	ldr	r3, [r7, #32]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d07c      	beq.n	8002290 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b00      	cmp	r3, #0
 800219e:	d023      	beq.n	80021e8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2201      	movs	r2, #1
 80021a6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7fe ff5c 	bl	8001070 <HAL_CAN_TxMailbox0CompleteCallback>
 80021b8:	e016      	b.n	80021e8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d004      	beq.n	80021ce <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80021c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80021ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80021cc:	e00c      	b.n	80021e8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	f003 0308 	and.w	r3, r3, #8
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d004      	beq.n	80021e2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80021d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021da:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021de:	627b      	str	r3, [r7, #36]	@ 0x24
 80021e0:	e002      	b.n	80021e8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f96b 	bl	80024be <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d024      	beq.n	800223c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021fa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7fe ff42 	bl	8001090 <HAL_CAN_TxMailbox1CompleteCallback>
 800220c:	e016      	b.n	800223c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002214:	2b00      	cmp	r3, #0
 8002216:	d004      	beq.n	8002222 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800221a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800221e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002220:	e00c      	b.n	800223c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002228:	2b00      	cmp	r3, #0
 800222a:	d004      	beq.n	8002236 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800222c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800222e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002232:	627b      	str	r3, [r7, #36]	@ 0x24
 8002234:	e002      	b.n	800223c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 f94b 	bl	80024d2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d024      	beq.n	8002290 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800224e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7fe ff28 	bl	80010b0 <HAL_CAN_TxMailbox2CompleteCallback>
 8002260:	e016      	b.n	8002290 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d004      	beq.n	8002276 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800226c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002272:	627b      	str	r3, [r7, #36]	@ 0x24
 8002274:	e00c      	b.n	8002290 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d004      	beq.n	800228a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002282:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002286:	627b      	str	r3, [r7, #36]	@ 0x24
 8002288:	e002      	b.n	8002290 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f92b 	bl	80024e6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002290:	6a3b      	ldr	r3, [r7, #32]
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00c      	beq.n	80022b4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	f003 0310 	and.w	r3, r3, #16
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d007      	beq.n	80022b4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80022a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022aa:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2210      	movs	r2, #16
 80022b2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80022b4:	6a3b      	ldr	r3, [r7, #32]
 80022b6:	f003 0304 	and.w	r3, r3, #4
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00b      	beq.n	80022d6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	f003 0308 	and.w	r3, r3, #8
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d006      	beq.n	80022d6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2208      	movs	r2, #8
 80022ce:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 f912 	bl	80024fa <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80022d6:	6a3b      	ldr	r3, [r7, #32]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d009      	beq.n	80022f4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	f003 0303 	and.w	r3, r3, #3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d002      	beq.n	80022f4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7fe feee 	bl	80010d0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80022f4:	6a3b      	ldr	r3, [r7, #32]
 80022f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00c      	beq.n	8002318 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	f003 0310 	and.w	r3, r3, #16
 8002304:	2b00      	cmp	r3, #0
 8002306:	d007      	beq.n	8002318 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800230e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2210      	movs	r2, #16
 8002316:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	f003 0320 	and.w	r3, r3, #32
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00b      	beq.n	800233a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	f003 0308 	and.w	r3, r3, #8
 8002328:	2b00      	cmp	r3, #0
 800232a:	d006      	beq.n	800233a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2208      	movs	r2, #8
 8002332:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 f8f4 	bl	8002522 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800233a:	6a3b      	ldr	r3, [r7, #32]
 800233c:	f003 0310 	and.w	r3, r3, #16
 8002340:	2b00      	cmp	r3, #0
 8002342:	d009      	beq.n	8002358 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d002      	beq.n	8002358 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f8db 	bl	800250e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002358:	6a3b      	ldr	r3, [r7, #32]
 800235a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00b      	beq.n	800237a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	f003 0310 	and.w	r3, r3, #16
 8002368:	2b00      	cmp	r3, #0
 800236a:	d006      	beq.n	800237a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2210      	movs	r2, #16
 8002372:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 f8de 	bl	8002536 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00b      	beq.n	800239c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	2b00      	cmp	r3, #0
 800238c:	d006      	beq.n	800239c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2208      	movs	r2, #8
 8002394:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f8d7 	bl	800254a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800239c:	6a3b      	ldr	r3, [r7, #32]
 800239e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d07b      	beq.n	800249e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d072      	beq.n	8002496 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80023b0:	6a3b      	ldr	r3, [r7, #32]
 80023b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d008      	beq.n	80023cc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80023c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c6:	f043 0301 	orr.w	r3, r3, #1
 80023ca:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023cc:	6a3b      	ldr	r3, [r7, #32]
 80023ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d008      	beq.n	80023e8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80023e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e2:	f043 0302 	orr.w	r3, r3, #2
 80023e6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023e8:	6a3b      	ldr	r3, [r7, #32]
 80023ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d008      	beq.n	8002404 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80023fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fe:	f043 0304 	orr.w	r3, r3, #4
 8002402:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002404:	6a3b      	ldr	r3, [r7, #32]
 8002406:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800240a:	2b00      	cmp	r3, #0
 800240c:	d043      	beq.n	8002496 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002414:	2b00      	cmp	r3, #0
 8002416:	d03e      	beq.n	8002496 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800241e:	2b60      	cmp	r3, #96	@ 0x60
 8002420:	d02b      	beq.n	800247a <HAL_CAN_IRQHandler+0x32a>
 8002422:	2b60      	cmp	r3, #96	@ 0x60
 8002424:	d82e      	bhi.n	8002484 <HAL_CAN_IRQHandler+0x334>
 8002426:	2b50      	cmp	r3, #80	@ 0x50
 8002428:	d022      	beq.n	8002470 <HAL_CAN_IRQHandler+0x320>
 800242a:	2b50      	cmp	r3, #80	@ 0x50
 800242c:	d82a      	bhi.n	8002484 <HAL_CAN_IRQHandler+0x334>
 800242e:	2b40      	cmp	r3, #64	@ 0x40
 8002430:	d019      	beq.n	8002466 <HAL_CAN_IRQHandler+0x316>
 8002432:	2b40      	cmp	r3, #64	@ 0x40
 8002434:	d826      	bhi.n	8002484 <HAL_CAN_IRQHandler+0x334>
 8002436:	2b30      	cmp	r3, #48	@ 0x30
 8002438:	d010      	beq.n	800245c <HAL_CAN_IRQHandler+0x30c>
 800243a:	2b30      	cmp	r3, #48	@ 0x30
 800243c:	d822      	bhi.n	8002484 <HAL_CAN_IRQHandler+0x334>
 800243e:	2b10      	cmp	r3, #16
 8002440:	d002      	beq.n	8002448 <HAL_CAN_IRQHandler+0x2f8>
 8002442:	2b20      	cmp	r3, #32
 8002444:	d005      	beq.n	8002452 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002446:	e01d      	b.n	8002484 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244a:	f043 0308 	orr.w	r3, r3, #8
 800244e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002450:	e019      	b.n	8002486 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002454:	f043 0310 	orr.w	r3, r3, #16
 8002458:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800245a:	e014      	b.n	8002486 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800245c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245e:	f043 0320 	orr.w	r3, r3, #32
 8002462:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002464:	e00f      	b.n	8002486 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002468:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800246c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800246e:	e00a      	b.n	8002486 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002472:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002476:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002478:	e005      	b.n	8002486 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800247a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002480:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002482:	e000      	b.n	8002486 <HAL_CAN_IRQHandler+0x336>
            break;
 8002484:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	699a      	ldr	r2, [r3, #24]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002494:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2204      	movs	r2, #4
 800249c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800249e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d008      	beq.n	80024b6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f854 	bl	800255e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80024b6:	bf00      	nop
 80024b8:	3728      	adds	r7, #40	@ 0x28
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
	...

08002574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002584:	4b0c      	ldr	r3, [pc, #48]	@ (80025b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002590:	4013      	ands	r3, r2
 8002592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800259c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025a6:	4a04      	ldr	r2, [pc, #16]	@ (80025b8 <__NVIC_SetPriorityGrouping+0x44>)
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	60d3      	str	r3, [r2, #12]
}
 80025ac:	bf00      	nop
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025c0:	4b04      	ldr	r3, [pc, #16]	@ (80025d4 <__NVIC_GetPriorityGrouping+0x18>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	0a1b      	lsrs	r3, r3, #8
 80025c6:	f003 0307 	and.w	r3, r3, #7
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	db0b      	blt.n	8002602 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ea:	79fb      	ldrb	r3, [r7, #7]
 80025ec:	f003 021f 	and.w	r2, r3, #31
 80025f0:	4907      	ldr	r1, [pc, #28]	@ (8002610 <__NVIC_EnableIRQ+0x38>)
 80025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f6:	095b      	lsrs	r3, r3, #5
 80025f8:	2001      	movs	r0, #1
 80025fa:	fa00 f202 	lsl.w	r2, r0, r2
 80025fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	e000e100 	.word	0xe000e100

08002614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	6039      	str	r1, [r7, #0]
 800261e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002624:	2b00      	cmp	r3, #0
 8002626:	db0a      	blt.n	800263e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	b2da      	uxtb	r2, r3
 800262c:	490c      	ldr	r1, [pc, #48]	@ (8002660 <__NVIC_SetPriority+0x4c>)
 800262e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002632:	0112      	lsls	r2, r2, #4
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	440b      	add	r3, r1
 8002638:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800263c:	e00a      	b.n	8002654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	b2da      	uxtb	r2, r3
 8002642:	4908      	ldr	r1, [pc, #32]	@ (8002664 <__NVIC_SetPriority+0x50>)
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	3b04      	subs	r3, #4
 800264c:	0112      	lsls	r2, r2, #4
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	440b      	add	r3, r1
 8002652:	761a      	strb	r2, [r3, #24]
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	e000e100 	.word	0xe000e100
 8002664:	e000ed00 	.word	0xe000ed00

08002668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002668:	b480      	push	{r7}
 800266a:	b089      	sub	sp, #36	@ 0x24
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f1c3 0307 	rsb	r3, r3, #7
 8002682:	2b04      	cmp	r3, #4
 8002684:	bf28      	it	cs
 8002686:	2304      	movcs	r3, #4
 8002688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	3304      	adds	r3, #4
 800268e:	2b06      	cmp	r3, #6
 8002690:	d902      	bls.n	8002698 <NVIC_EncodePriority+0x30>
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	3b03      	subs	r3, #3
 8002696:	e000      	b.n	800269a <NVIC_EncodePriority+0x32>
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800269c:	f04f 32ff 	mov.w	r2, #4294967295
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43da      	mvns	r2, r3
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	401a      	ands	r2, r3
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026b0:	f04f 31ff 	mov.w	r1, #4294967295
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ba:	43d9      	mvns	r1, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c0:	4313      	orrs	r3, r2
         );
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3724      	adds	r7, #36	@ 0x24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
	...

080026d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3b01      	subs	r3, #1
 80026dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026e0:	d301      	bcc.n	80026e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026e2:	2301      	movs	r3, #1
 80026e4:	e00f      	b.n	8002706 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002710 <SysTick_Config+0x40>)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ee:	210f      	movs	r1, #15
 80026f0:	f04f 30ff 	mov.w	r0, #4294967295
 80026f4:	f7ff ff8e 	bl	8002614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026f8:	4b05      	ldr	r3, [pc, #20]	@ (8002710 <SysTick_Config+0x40>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026fe:	4b04      	ldr	r3, [pc, #16]	@ (8002710 <SysTick_Config+0x40>)
 8002700:	2207      	movs	r2, #7
 8002702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	e000e010 	.word	0xe000e010

08002714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f7ff ff29 	bl	8002574 <__NVIC_SetPriorityGrouping>
}
 8002722:	bf00      	nop
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800272a:	b580      	push	{r7, lr}
 800272c:	b086      	sub	sp, #24
 800272e:	af00      	add	r7, sp, #0
 8002730:	4603      	mov	r3, r0
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
 8002736:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800273c:	f7ff ff3e 	bl	80025bc <__NVIC_GetPriorityGrouping>
 8002740:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	68b9      	ldr	r1, [r7, #8]
 8002746:	6978      	ldr	r0, [r7, #20]
 8002748:	f7ff ff8e 	bl	8002668 <NVIC_EncodePriority>
 800274c:	4602      	mov	r2, r0
 800274e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002752:	4611      	mov	r1, r2
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff ff5d 	bl	8002614 <__NVIC_SetPriority>
}
 800275a:	bf00      	nop
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	4603      	mov	r3, r0
 800276a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800276c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff ff31 	bl	80025d8 <__NVIC_EnableIRQ>
}
 8002776:	bf00      	nop
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b082      	sub	sp, #8
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7ff ffa2 	bl	80026d0 <SysTick_Config>
 800278c:	4603      	mov	r3, r0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
	...

08002798 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	d106      	bne.n	80027b4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80027a6:	4b09      	ldr	r3, [pc, #36]	@ (80027cc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a08      	ldr	r2, [pc, #32]	@ (80027cc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80027ac:	f043 0304 	orr.w	r3, r3, #4
 80027b0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80027b2:	e005      	b.n	80027c0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80027b4:	4b05      	ldr	r3, [pc, #20]	@ (80027cc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a04      	ldr	r2, [pc, #16]	@ (80027cc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80027ba:	f023 0304 	bic.w	r3, r3, #4
 80027be:	6013      	str	r3, [r2, #0]
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	e000e010 	.word	0xe000e010

080027d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027dc:	f7ff f852 	bl	8001884 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e099      	b.n	8002920 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2202      	movs	r2, #2
 80027f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0201 	bic.w	r2, r2, #1
 800280a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800280c:	e00f      	b.n	800282e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800280e:	f7ff f839 	bl	8001884 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b05      	cmp	r3, #5
 800281a:	d908      	bls.n	800282e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2220      	movs	r2, #32
 8002820:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2203      	movs	r2, #3
 8002826:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e078      	b.n	8002920 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1e8      	bne.n	800280e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	4b38      	ldr	r3, [pc, #224]	@ (8002928 <HAL_DMA_Init+0x158>)
 8002848:	4013      	ands	r3, r2
 800284a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685a      	ldr	r2, [r3, #4]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800285a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002866:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002872:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	4313      	orrs	r3, r2
 800287e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002884:	2b04      	cmp	r3, #4
 8002886:	d107      	bne.n	8002898 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002890:	4313      	orrs	r3, r2
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	4313      	orrs	r3, r2
 8002896:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f023 0307 	bic.w	r3, r3, #7
 80028ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d117      	bne.n	80028f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00e      	beq.n	80028f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 fa91 	bl	8002dfc <DMA_CheckFifoParam>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d008      	beq.n	80028f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2240      	movs	r2, #64	@ 0x40
 80028e4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80028ee:	2301      	movs	r3, #1
 80028f0:	e016      	b.n	8002920 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 fa48 	bl	8002d90 <DMA_CalcBaseAndBitshift>
 8002900:	4603      	mov	r3, r0
 8002902:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002908:	223f      	movs	r2, #63	@ 0x3f
 800290a:	409a      	lsls	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3718      	adds	r7, #24
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	f010803f 	.word	0xf010803f

0800292c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
 8002938:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800293a:	2300      	movs	r3, #0
 800293c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002942:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800294a:	2b01      	cmp	r3, #1
 800294c:	d101      	bne.n	8002952 <HAL_DMA_Start_IT+0x26>
 800294e:	2302      	movs	r3, #2
 8002950:	e040      	b.n	80029d4 <HAL_DMA_Start_IT+0xa8>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b01      	cmp	r3, #1
 8002964:	d12f      	bne.n	80029c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2202      	movs	r2, #2
 800296a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	68b9      	ldr	r1, [r7, #8]
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 f9da 	bl	8002d34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002984:	223f      	movs	r2, #63	@ 0x3f
 8002986:	409a      	lsls	r2, r3
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 0216 	orr.w	r2, r2, #22
 800299a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d007      	beq.n	80029b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0208 	orr.w	r2, r2, #8
 80029b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0201 	orr.w	r2, r2, #1
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	e005      	b.n	80029d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80029ce:	2302      	movs	r3, #2
 80029d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80029d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d004      	beq.n	80029fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2280      	movs	r2, #128	@ 0x80
 80029f4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e00c      	b.n	8002a14 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2205      	movs	r2, #5
 80029fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0201 	bic.w	r2, r2, #1
 8002a10:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a2c:	4b8e      	ldr	r3, [pc, #568]	@ (8002c68 <HAL_DMA_IRQHandler+0x248>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a8e      	ldr	r2, [pc, #568]	@ (8002c6c <HAL_DMA_IRQHandler+0x24c>)
 8002a32:	fba2 2303 	umull	r2, r3, r2, r3
 8002a36:	0a9b      	lsrs	r3, r3, #10
 8002a38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a4a:	2208      	movs	r2, #8
 8002a4c:	409a      	lsls	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	4013      	ands	r3, r2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d01a      	beq.n	8002a8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d013      	beq.n	8002a8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0204 	bic.w	r2, r2, #4
 8002a72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a78:	2208      	movs	r2, #8
 8002a7a:	409a      	lsls	r2, r3
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a84:	f043 0201 	orr.w	r2, r3, #1
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a90:	2201      	movs	r2, #1
 8002a92:	409a      	lsls	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d012      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00b      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aae:	2201      	movs	r2, #1
 8002ab0:	409a      	lsls	r2, r3
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aba:	f043 0202 	orr.w	r2, r3, #2
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac6:	2204      	movs	r2, #4
 8002ac8:	409a      	lsls	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	4013      	ands	r3, r2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d012      	beq.n	8002af8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00b      	beq.n	8002af8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae4:	2204      	movs	r2, #4
 8002ae6:	409a      	lsls	r2, r3
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af0:	f043 0204 	orr.w	r2, r3, #4
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002afc:	2210      	movs	r2, #16
 8002afe:	409a      	lsls	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	4013      	ands	r3, r2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d043      	beq.n	8002b90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d03c      	beq.n	8002b90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b1a:	2210      	movs	r2, #16
 8002b1c:	409a      	lsls	r2, r3
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d018      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d108      	bne.n	8002b50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d024      	beq.n	8002b90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	4798      	blx	r3
 8002b4e:	e01f      	b.n	8002b90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d01b      	beq.n	8002b90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	4798      	blx	r3
 8002b60:	e016      	b.n	8002b90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d107      	bne.n	8002b80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0208 	bic.w	r2, r2, #8
 8002b7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d003      	beq.n	8002b90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b94:	2220      	movs	r2, #32
 8002b96:	409a      	lsls	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 808f 	beq.w	8002cc0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0310 	and.w	r3, r3, #16
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 8087 	beq.w	8002cc0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	409a      	lsls	r2, r3
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b05      	cmp	r3, #5
 8002bc8:	d136      	bne.n	8002c38 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 0216 	bic.w	r2, r2, #22
 8002bd8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695a      	ldr	r2, [r3, #20]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002be8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d103      	bne.n	8002bfa <HAL_DMA_IRQHandler+0x1da>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d007      	beq.n	8002c0a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0208 	bic.w	r2, r2, #8
 8002c08:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c0e:	223f      	movs	r2, #63	@ 0x3f
 8002c10:	409a      	lsls	r2, r3
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d07e      	beq.n	8002d2c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	4798      	blx	r3
        }
        return;
 8002c36:	e079      	b.n	8002d2c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d01d      	beq.n	8002c82 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10d      	bne.n	8002c70 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d031      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	4798      	blx	r3
 8002c64:	e02c      	b.n	8002cc0 <HAL_DMA_IRQHandler+0x2a0>
 8002c66:	bf00      	nop
 8002c68:	20000004 	.word	0x20000004
 8002c6c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d023      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	4798      	blx	r3
 8002c80:	e01e      	b.n	8002cc0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10f      	bne.n	8002cb0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 0210 	bic.w	r2, r2, #16
 8002c9e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d032      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d022      	beq.n	8002d1a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2205      	movs	r2, #5
 8002cd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0201 	bic.w	r2, r2, #1
 8002cea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	60bb      	str	r3, [r7, #8]
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d307      	bcc.n	8002d08 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f2      	bne.n	8002cec <HAL_DMA_IRQHandler+0x2cc>
 8002d06:	e000      	b.n	8002d0a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d08:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d005      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	4798      	blx	r3
 8002d2a:	e000      	b.n	8002d2e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d2c:	bf00      	nop
    }
  }
}
 8002d2e:	3718      	adds	r7, #24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
 8002d40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002d50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	2b40      	cmp	r3, #64	@ 0x40
 8002d60:	d108      	bne.n	8002d74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d72:	e007      	b.n	8002d84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	60da      	str	r2, [r3, #12]
}
 8002d84:	bf00      	nop
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	3b10      	subs	r3, #16
 8002da0:	4a14      	ldr	r2, [pc, #80]	@ (8002df4 <DMA_CalcBaseAndBitshift+0x64>)
 8002da2:	fba2 2303 	umull	r2, r3, r2, r3
 8002da6:	091b      	lsrs	r3, r3, #4
 8002da8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002daa:	4a13      	ldr	r2, [pc, #76]	@ (8002df8 <DMA_CalcBaseAndBitshift+0x68>)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4413      	add	r3, r2
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	461a      	mov	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2b03      	cmp	r3, #3
 8002dbc:	d909      	bls.n	8002dd2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002dc6:	f023 0303 	bic.w	r3, r3, #3
 8002dca:	1d1a      	adds	r2, r3, #4
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	659a      	str	r2, [r3, #88]	@ 0x58
 8002dd0:	e007      	b.n	8002de2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002dda:	f023 0303 	bic.w	r3, r3, #3
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	aaaaaaab 	.word	0xaaaaaaab
 8002df8:	08005dfc 	.word	0x08005dfc

08002dfc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e04:	2300      	movs	r3, #0
 8002e06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d11f      	bne.n	8002e56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	2b03      	cmp	r3, #3
 8002e1a:	d856      	bhi.n	8002eca <DMA_CheckFifoParam+0xce>
 8002e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e24 <DMA_CheckFifoParam+0x28>)
 8002e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e22:	bf00      	nop
 8002e24:	08002e35 	.word	0x08002e35
 8002e28:	08002e47 	.word	0x08002e47
 8002e2c:	08002e35 	.word	0x08002e35
 8002e30:	08002ecb 	.word	0x08002ecb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d046      	beq.n	8002ece <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e44:	e043      	b.n	8002ece <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e4a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e4e:	d140      	bne.n	8002ed2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e54:	e03d      	b.n	8002ed2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e5e:	d121      	bne.n	8002ea4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2b03      	cmp	r3, #3
 8002e64:	d837      	bhi.n	8002ed6 <DMA_CheckFifoParam+0xda>
 8002e66:	a201      	add	r2, pc, #4	@ (adr r2, 8002e6c <DMA_CheckFifoParam+0x70>)
 8002e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6c:	08002e7d 	.word	0x08002e7d
 8002e70:	08002e83 	.word	0x08002e83
 8002e74:	08002e7d 	.word	0x08002e7d
 8002e78:	08002e95 	.word	0x08002e95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e80:	e030      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e86:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d025      	beq.n	8002eda <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e92:	e022      	b.n	8002eda <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e98:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e9c:	d11f      	bne.n	8002ede <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ea2:	e01c      	b.n	8002ede <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d903      	bls.n	8002eb2 <DMA_CheckFifoParam+0xb6>
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	2b03      	cmp	r3, #3
 8002eae:	d003      	beq.n	8002eb8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002eb0:	e018      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	73fb      	strb	r3, [r7, #15]
      break;
 8002eb6:	e015      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ebc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00e      	beq.n	8002ee2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ec8:	e00b      	b.n	8002ee2 <DMA_CheckFifoParam+0xe6>
      break;
 8002eca:	bf00      	nop
 8002ecc:	e00a      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ece:	bf00      	nop
 8002ed0:	e008      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ed2:	bf00      	nop
 8002ed4:	e006      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ed6:	bf00      	nop
 8002ed8:	e004      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
      break;
 8002eda:	bf00      	nop
 8002edc:	e002      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ede:	bf00      	nop
 8002ee0:	e000      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ee2:	bf00      	nop
    }
  } 
  
  return status; 
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop

08002ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b089      	sub	sp, #36	@ 0x24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61fb      	str	r3, [r7, #28]
 8002f0e:	e165      	b.n	80031dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f10:	2201      	movs	r2, #1
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	4013      	ands	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	f040 8154 	bne.w	80031d6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f003 0303 	and.w	r3, r3, #3
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d005      	beq.n	8002f46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d130      	bne.n	8002fa8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	2203      	movs	r2, #3
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	43db      	mvns	r3, r3
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	43db      	mvns	r3, r3
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	091b      	lsrs	r3, r3, #4
 8002f92:	f003 0201 	and.w	r2, r3, #1
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f003 0303 	and.w	r3, r3, #3
 8002fb0:	2b03      	cmp	r3, #3
 8002fb2:	d017      	beq.n	8002fe4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	2203      	movs	r2, #3
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 0303 	and.w	r3, r3, #3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d123      	bne.n	8003038 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	08da      	lsrs	r2, r3, #3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3208      	adds	r2, #8
 8002ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	220f      	movs	r2, #15
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	43db      	mvns	r3, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4013      	ands	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	691a      	ldr	r2, [r3, #16]
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4313      	orrs	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	08da      	lsrs	r2, r3, #3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3208      	adds	r2, #8
 8003032:	69b9      	ldr	r1, [r7, #24]
 8003034:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	2203      	movs	r2, #3
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f003 0203 	and.w	r2, r3, #3
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4313      	orrs	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 80ae 	beq.w	80031d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800307a:	2300      	movs	r3, #0
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	4b5d      	ldr	r3, [pc, #372]	@ (80031f4 <HAL_GPIO_Init+0x300>)
 8003080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003082:	4a5c      	ldr	r2, [pc, #368]	@ (80031f4 <HAL_GPIO_Init+0x300>)
 8003084:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003088:	6453      	str	r3, [r2, #68]	@ 0x44
 800308a:	4b5a      	ldr	r3, [pc, #360]	@ (80031f4 <HAL_GPIO_Init+0x300>)
 800308c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800308e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003096:	4a58      	ldr	r2, [pc, #352]	@ (80031f8 <HAL_GPIO_Init+0x304>)
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	089b      	lsrs	r3, r3, #2
 800309c:	3302      	adds	r3, #2
 800309e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	220f      	movs	r2, #15
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	43db      	mvns	r3, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4013      	ands	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a4f      	ldr	r2, [pc, #316]	@ (80031fc <HAL_GPIO_Init+0x308>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d025      	beq.n	800310e <HAL_GPIO_Init+0x21a>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a4e      	ldr	r2, [pc, #312]	@ (8003200 <HAL_GPIO_Init+0x30c>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d01f      	beq.n	800310a <HAL_GPIO_Init+0x216>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a4d      	ldr	r2, [pc, #308]	@ (8003204 <HAL_GPIO_Init+0x310>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d019      	beq.n	8003106 <HAL_GPIO_Init+0x212>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a4c      	ldr	r2, [pc, #304]	@ (8003208 <HAL_GPIO_Init+0x314>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d013      	beq.n	8003102 <HAL_GPIO_Init+0x20e>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a4b      	ldr	r2, [pc, #300]	@ (800320c <HAL_GPIO_Init+0x318>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d00d      	beq.n	80030fe <HAL_GPIO_Init+0x20a>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a4a      	ldr	r2, [pc, #296]	@ (8003210 <HAL_GPIO_Init+0x31c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d007      	beq.n	80030fa <HAL_GPIO_Init+0x206>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a49      	ldr	r2, [pc, #292]	@ (8003214 <HAL_GPIO_Init+0x320>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d101      	bne.n	80030f6 <HAL_GPIO_Init+0x202>
 80030f2:	2306      	movs	r3, #6
 80030f4:	e00c      	b.n	8003110 <HAL_GPIO_Init+0x21c>
 80030f6:	2307      	movs	r3, #7
 80030f8:	e00a      	b.n	8003110 <HAL_GPIO_Init+0x21c>
 80030fa:	2305      	movs	r3, #5
 80030fc:	e008      	b.n	8003110 <HAL_GPIO_Init+0x21c>
 80030fe:	2304      	movs	r3, #4
 8003100:	e006      	b.n	8003110 <HAL_GPIO_Init+0x21c>
 8003102:	2303      	movs	r3, #3
 8003104:	e004      	b.n	8003110 <HAL_GPIO_Init+0x21c>
 8003106:	2302      	movs	r3, #2
 8003108:	e002      	b.n	8003110 <HAL_GPIO_Init+0x21c>
 800310a:	2301      	movs	r3, #1
 800310c:	e000      	b.n	8003110 <HAL_GPIO_Init+0x21c>
 800310e:	2300      	movs	r3, #0
 8003110:	69fa      	ldr	r2, [r7, #28]
 8003112:	f002 0203 	and.w	r2, r2, #3
 8003116:	0092      	lsls	r2, r2, #2
 8003118:	4093      	lsls	r3, r2
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	4313      	orrs	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003120:	4935      	ldr	r1, [pc, #212]	@ (80031f8 <HAL_GPIO_Init+0x304>)
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	089b      	lsrs	r3, r3, #2
 8003126:	3302      	adds	r3, #2
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800312e:	4b3a      	ldr	r3, [pc, #232]	@ (8003218 <HAL_GPIO_Init+0x324>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	43db      	mvns	r3, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4013      	ands	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	4313      	orrs	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003152:	4a31      	ldr	r2, [pc, #196]	@ (8003218 <HAL_GPIO_Init+0x324>)
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003158:	4b2f      	ldr	r3, [pc, #188]	@ (8003218 <HAL_GPIO_Init+0x324>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	43db      	mvns	r3, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4013      	ands	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	4313      	orrs	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800317c:	4a26      	ldr	r2, [pc, #152]	@ (8003218 <HAL_GPIO_Init+0x324>)
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003182:	4b25      	ldr	r3, [pc, #148]	@ (8003218 <HAL_GPIO_Init+0x324>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	43db      	mvns	r3, r3
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	4013      	ands	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003218 <HAL_GPIO_Init+0x324>)
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003218 <HAL_GPIO_Init+0x324>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	43db      	mvns	r3, r3
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4013      	ands	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031d0:	4a11      	ldr	r2, [pc, #68]	@ (8003218 <HAL_GPIO_Init+0x324>)
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	3301      	adds	r3, #1
 80031da:	61fb      	str	r3, [r7, #28]
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	2b0f      	cmp	r3, #15
 80031e0:	f67f ae96 	bls.w	8002f10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031e4:	bf00      	nop
 80031e6:	bf00      	nop
 80031e8:	3724      	adds	r7, #36	@ 0x24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	40023800 	.word	0x40023800
 80031f8:	40013800 	.word	0x40013800
 80031fc:	40020000 	.word	0x40020000
 8003200:	40020400 	.word	0x40020400
 8003204:	40020800 	.word	0x40020800
 8003208:	40020c00 	.word	0x40020c00
 800320c:	40021000 	.word	0x40021000
 8003210:	40021400 	.word	0x40021400
 8003214:	40021800 	.word	0x40021800
 8003218:	40013c00 	.word	0x40013c00

0800321c <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	460b      	mov	r3, r1
 8003226:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800322e:	887a      	ldrh	r2, [r7, #2]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4013      	ands	r3, r2
 8003234:	041a      	lsls	r2, r3, #16
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	43d9      	mvns	r1, r3
 800323a:	887b      	ldrh	r3, [r7, #2]
 800323c:	400b      	ands	r3, r1
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	619a      	str	r2, [r3, #24]
}
 8003244:	bf00      	nop
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e0cc      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003264:	4b68      	ldr	r3, [pc, #416]	@ (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 030f 	and.w	r3, r3, #15
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	429a      	cmp	r2, r3
 8003270:	d90c      	bls.n	800328c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003272:	4b65      	ldr	r3, [pc, #404]	@ (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800327a:	4b63      	ldr	r3, [pc, #396]	@ (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	429a      	cmp	r2, r3
 8003286:	d001      	beq.n	800328c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0b8      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d020      	beq.n	80032da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d005      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032a4:	4b59      	ldr	r3, [pc, #356]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	4a58      	ldr	r2, [pc, #352]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80032ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032bc:	4b53      	ldr	r3, [pc, #332]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	4a52      	ldr	r2, [pc, #328]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80032c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c8:	4b50      	ldr	r3, [pc, #320]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	494d      	ldr	r1, [pc, #308]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d044      	beq.n	8003370 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d107      	bne.n	80032fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ee:	4b47      	ldr	r3, [pc, #284]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d119      	bne.n	800332e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e07f      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d003      	beq.n	800330e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800330a:	2b03      	cmp	r3, #3
 800330c:	d107      	bne.n	800331e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800330e:	4b3f      	ldr	r3, [pc, #252]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d109      	bne.n	800332e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e06f      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800331e:	4b3b      	ldr	r3, [pc, #236]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e067      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800332e:	4b37      	ldr	r3, [pc, #220]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f023 0203 	bic.w	r2, r3, #3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	4934      	ldr	r1, [pc, #208]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 800333c:	4313      	orrs	r3, r2
 800333e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003340:	f7fe faa0 	bl	8001884 <HAL_GetTick>
 8003344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003346:	e00a      	b.n	800335e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003348:	f7fe fa9c 	bl	8001884 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003356:	4293      	cmp	r3, r2
 8003358:	d901      	bls.n	800335e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e04f      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335e:	4b2b      	ldr	r3, [pc, #172]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 020c 	and.w	r2, r3, #12
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	429a      	cmp	r2, r3
 800336e:	d1eb      	bne.n	8003348 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003370:	4b25      	ldr	r3, [pc, #148]	@ (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 030f 	and.w	r3, r3, #15
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	429a      	cmp	r2, r3
 800337c:	d20c      	bcs.n	8003398 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337e:	4b22      	ldr	r3, [pc, #136]	@ (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003386:	4b20      	ldr	r3, [pc, #128]	@ (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d001      	beq.n	8003398 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e032      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d008      	beq.n	80033b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a4:	4b19      	ldr	r3, [pc, #100]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	4916      	ldr	r1, [pc, #88]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d009      	beq.n	80033d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033c2:	4b12      	ldr	r3, [pc, #72]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	490e      	ldr	r1, [pc, #56]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033d6:	f000 f82d 	bl	8003434 <HAL_RCC_GetSysClockFreq>
 80033da:	4602      	mov	r2, r0
 80033dc:	4b0b      	ldr	r3, [pc, #44]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	091b      	lsrs	r3, r3, #4
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	490a      	ldr	r1, [pc, #40]	@ (8003410 <HAL_RCC_ClockConfig+0x1c0>)
 80033e8:	5ccb      	ldrb	r3, [r1, r3]
 80033ea:	fa22 f303 	lsr.w	r3, r2, r3
 80033ee:	4a09      	ldr	r2, [pc, #36]	@ (8003414 <HAL_RCC_ClockConfig+0x1c4>)
 80033f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80033f2:	4b09      	ldr	r3, [pc, #36]	@ (8003418 <HAL_RCC_ClockConfig+0x1c8>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fe fa00 	bl	80017fc <HAL_InitTick>

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40023c00 	.word	0x40023c00
 800340c:	40023800 	.word	0x40023800
 8003410:	08005dec 	.word	0x08005dec
 8003414:	20000004 	.word	0x20000004
 8003418:	20000008 	.word	0x20000008

0800341c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003420:	4b03      	ldr	r3, [pc, #12]	@ (8003430 <HAL_RCC_GetHCLKFreq+0x14>)
 8003422:	681b      	ldr	r3, [r3, #0]
}
 8003424:	4618      	mov	r0, r3
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	20000004 	.word	0x20000004

08003434 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003438:	b0ae      	sub	sp, #184	@ 0xb8
 800343a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003442:	2300      	movs	r3, #0
 8003444:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003448:	2300      	movs	r3, #0
 800344a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800344e:	2300      	movs	r3, #0
 8003450:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003454:	2300      	movs	r3, #0
 8003456:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800345a:	4bcb      	ldr	r3, [pc, #812]	@ (8003788 <HAL_RCC_GetSysClockFreq+0x354>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 030c 	and.w	r3, r3, #12
 8003462:	2b0c      	cmp	r3, #12
 8003464:	f200 8206 	bhi.w	8003874 <HAL_RCC_GetSysClockFreq+0x440>
 8003468:	a201      	add	r2, pc, #4	@ (adr r2, 8003470 <HAL_RCC_GetSysClockFreq+0x3c>)
 800346a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346e:	bf00      	nop
 8003470:	080034a5 	.word	0x080034a5
 8003474:	08003875 	.word	0x08003875
 8003478:	08003875 	.word	0x08003875
 800347c:	08003875 	.word	0x08003875
 8003480:	080034ad 	.word	0x080034ad
 8003484:	08003875 	.word	0x08003875
 8003488:	08003875 	.word	0x08003875
 800348c:	08003875 	.word	0x08003875
 8003490:	080034b5 	.word	0x080034b5
 8003494:	08003875 	.word	0x08003875
 8003498:	08003875 	.word	0x08003875
 800349c:	08003875 	.word	0x08003875
 80034a0:	080036a5 	.word	0x080036a5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034a4:	4bb9      	ldr	r3, [pc, #740]	@ (800378c <HAL_RCC_GetSysClockFreq+0x358>)
 80034a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80034aa:	e1e7      	b.n	800387c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034ac:	4bb8      	ldr	r3, [pc, #736]	@ (8003790 <HAL_RCC_GetSysClockFreq+0x35c>)
 80034ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80034b2:	e1e3      	b.n	800387c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034b4:	4bb4      	ldr	r3, [pc, #720]	@ (8003788 <HAL_RCC_GetSysClockFreq+0x354>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034c0:	4bb1      	ldr	r3, [pc, #708]	@ (8003788 <HAL_RCC_GetSysClockFreq+0x354>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d071      	beq.n	80035b0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034cc:	4bae      	ldr	r3, [pc, #696]	@ (8003788 <HAL_RCC_GetSysClockFreq+0x354>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	099b      	lsrs	r3, r3, #6
 80034d2:	2200      	movs	r2, #0
 80034d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80034d8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80034dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80034e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80034e8:	2300      	movs	r3, #0
 80034ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80034ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80034f2:	4622      	mov	r2, r4
 80034f4:	462b      	mov	r3, r5
 80034f6:	f04f 0000 	mov.w	r0, #0
 80034fa:	f04f 0100 	mov.w	r1, #0
 80034fe:	0159      	lsls	r1, r3, #5
 8003500:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003504:	0150      	lsls	r0, r2, #5
 8003506:	4602      	mov	r2, r0
 8003508:	460b      	mov	r3, r1
 800350a:	4621      	mov	r1, r4
 800350c:	1a51      	subs	r1, r2, r1
 800350e:	6439      	str	r1, [r7, #64]	@ 0x40
 8003510:	4629      	mov	r1, r5
 8003512:	eb63 0301 	sbc.w	r3, r3, r1
 8003516:	647b      	str	r3, [r7, #68]	@ 0x44
 8003518:	f04f 0200 	mov.w	r2, #0
 800351c:	f04f 0300 	mov.w	r3, #0
 8003520:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003524:	4649      	mov	r1, r9
 8003526:	018b      	lsls	r3, r1, #6
 8003528:	4641      	mov	r1, r8
 800352a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800352e:	4641      	mov	r1, r8
 8003530:	018a      	lsls	r2, r1, #6
 8003532:	4641      	mov	r1, r8
 8003534:	1a51      	subs	r1, r2, r1
 8003536:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003538:	4649      	mov	r1, r9
 800353a:	eb63 0301 	sbc.w	r3, r3, r1
 800353e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003540:	f04f 0200 	mov.w	r2, #0
 8003544:	f04f 0300 	mov.w	r3, #0
 8003548:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800354c:	4649      	mov	r1, r9
 800354e:	00cb      	lsls	r3, r1, #3
 8003550:	4641      	mov	r1, r8
 8003552:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003556:	4641      	mov	r1, r8
 8003558:	00ca      	lsls	r2, r1, #3
 800355a:	4610      	mov	r0, r2
 800355c:	4619      	mov	r1, r3
 800355e:	4603      	mov	r3, r0
 8003560:	4622      	mov	r2, r4
 8003562:	189b      	adds	r3, r3, r2
 8003564:	633b      	str	r3, [r7, #48]	@ 0x30
 8003566:	462b      	mov	r3, r5
 8003568:	460a      	mov	r2, r1
 800356a:	eb42 0303 	adc.w	r3, r2, r3
 800356e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800357c:	4629      	mov	r1, r5
 800357e:	024b      	lsls	r3, r1, #9
 8003580:	4621      	mov	r1, r4
 8003582:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003586:	4621      	mov	r1, r4
 8003588:	024a      	lsls	r2, r1, #9
 800358a:	4610      	mov	r0, r2
 800358c:	4619      	mov	r1, r3
 800358e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003592:	2200      	movs	r2, #0
 8003594:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003598:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800359c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80035a0:	f7fc fe86 	bl	80002b0 <__aeabi_uldivmod>
 80035a4:	4602      	mov	r2, r0
 80035a6:	460b      	mov	r3, r1
 80035a8:	4613      	mov	r3, r2
 80035aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80035ae:	e067      	b.n	8003680 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035b0:	4b75      	ldr	r3, [pc, #468]	@ (8003788 <HAL_RCC_GetSysClockFreq+0x354>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	099b      	lsrs	r3, r3, #6
 80035b6:	2200      	movs	r2, #0
 80035b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80035bc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80035c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80035c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80035ca:	2300      	movs	r3, #0
 80035cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80035ce:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80035d2:	4622      	mov	r2, r4
 80035d4:	462b      	mov	r3, r5
 80035d6:	f04f 0000 	mov.w	r0, #0
 80035da:	f04f 0100 	mov.w	r1, #0
 80035de:	0159      	lsls	r1, r3, #5
 80035e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035e4:	0150      	lsls	r0, r2, #5
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	4621      	mov	r1, r4
 80035ec:	1a51      	subs	r1, r2, r1
 80035ee:	62b9      	str	r1, [r7, #40]	@ 0x28
 80035f0:	4629      	mov	r1, r5
 80035f2:	eb63 0301 	sbc.w	r3, r3, r1
 80035f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035f8:	f04f 0200 	mov.w	r2, #0
 80035fc:	f04f 0300 	mov.w	r3, #0
 8003600:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003604:	4649      	mov	r1, r9
 8003606:	018b      	lsls	r3, r1, #6
 8003608:	4641      	mov	r1, r8
 800360a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800360e:	4641      	mov	r1, r8
 8003610:	018a      	lsls	r2, r1, #6
 8003612:	4641      	mov	r1, r8
 8003614:	ebb2 0a01 	subs.w	sl, r2, r1
 8003618:	4649      	mov	r1, r9
 800361a:	eb63 0b01 	sbc.w	fp, r3, r1
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800362a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800362e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003632:	4692      	mov	sl, r2
 8003634:	469b      	mov	fp, r3
 8003636:	4623      	mov	r3, r4
 8003638:	eb1a 0303 	adds.w	r3, sl, r3
 800363c:	623b      	str	r3, [r7, #32]
 800363e:	462b      	mov	r3, r5
 8003640:	eb4b 0303 	adc.w	r3, fp, r3
 8003644:	627b      	str	r3, [r7, #36]	@ 0x24
 8003646:	f04f 0200 	mov.w	r2, #0
 800364a:	f04f 0300 	mov.w	r3, #0
 800364e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003652:	4629      	mov	r1, r5
 8003654:	028b      	lsls	r3, r1, #10
 8003656:	4621      	mov	r1, r4
 8003658:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800365c:	4621      	mov	r1, r4
 800365e:	028a      	lsls	r2, r1, #10
 8003660:	4610      	mov	r0, r2
 8003662:	4619      	mov	r1, r3
 8003664:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003668:	2200      	movs	r2, #0
 800366a:	673b      	str	r3, [r7, #112]	@ 0x70
 800366c:	677a      	str	r2, [r7, #116]	@ 0x74
 800366e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003672:	f7fc fe1d 	bl	80002b0 <__aeabi_uldivmod>
 8003676:	4602      	mov	r2, r0
 8003678:	460b      	mov	r3, r1
 800367a:	4613      	mov	r3, r2
 800367c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003680:	4b41      	ldr	r3, [pc, #260]	@ (8003788 <HAL_RCC_GetSysClockFreq+0x354>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	0c1b      	lsrs	r3, r3, #16
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	3301      	adds	r3, #1
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003692:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003696:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800369a:	fbb2 f3f3 	udiv	r3, r2, r3
 800369e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80036a2:	e0eb      	b.n	800387c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036a4:	4b38      	ldr	r3, [pc, #224]	@ (8003788 <HAL_RCC_GetSysClockFreq+0x354>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036b0:	4b35      	ldr	r3, [pc, #212]	@ (8003788 <HAL_RCC_GetSysClockFreq+0x354>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d06b      	beq.n	8003794 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036bc:	4b32      	ldr	r3, [pc, #200]	@ (8003788 <HAL_RCC_GetSysClockFreq+0x354>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	099b      	lsrs	r3, r3, #6
 80036c2:	2200      	movs	r2, #0
 80036c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80036c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80036d0:	2300      	movs	r3, #0
 80036d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80036d4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80036d8:	4622      	mov	r2, r4
 80036da:	462b      	mov	r3, r5
 80036dc:	f04f 0000 	mov.w	r0, #0
 80036e0:	f04f 0100 	mov.w	r1, #0
 80036e4:	0159      	lsls	r1, r3, #5
 80036e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036ea:	0150      	lsls	r0, r2, #5
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	4621      	mov	r1, r4
 80036f2:	1a51      	subs	r1, r2, r1
 80036f4:	61b9      	str	r1, [r7, #24]
 80036f6:	4629      	mov	r1, r5
 80036f8:	eb63 0301 	sbc.w	r3, r3, r1
 80036fc:	61fb      	str	r3, [r7, #28]
 80036fe:	f04f 0200 	mov.w	r2, #0
 8003702:	f04f 0300 	mov.w	r3, #0
 8003706:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800370a:	4659      	mov	r1, fp
 800370c:	018b      	lsls	r3, r1, #6
 800370e:	4651      	mov	r1, sl
 8003710:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003714:	4651      	mov	r1, sl
 8003716:	018a      	lsls	r2, r1, #6
 8003718:	4651      	mov	r1, sl
 800371a:	ebb2 0801 	subs.w	r8, r2, r1
 800371e:	4659      	mov	r1, fp
 8003720:	eb63 0901 	sbc.w	r9, r3, r1
 8003724:	f04f 0200 	mov.w	r2, #0
 8003728:	f04f 0300 	mov.w	r3, #0
 800372c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003730:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003734:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003738:	4690      	mov	r8, r2
 800373a:	4699      	mov	r9, r3
 800373c:	4623      	mov	r3, r4
 800373e:	eb18 0303 	adds.w	r3, r8, r3
 8003742:	613b      	str	r3, [r7, #16]
 8003744:	462b      	mov	r3, r5
 8003746:	eb49 0303 	adc.w	r3, r9, r3
 800374a:	617b      	str	r3, [r7, #20]
 800374c:	f04f 0200 	mov.w	r2, #0
 8003750:	f04f 0300 	mov.w	r3, #0
 8003754:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003758:	4629      	mov	r1, r5
 800375a:	024b      	lsls	r3, r1, #9
 800375c:	4621      	mov	r1, r4
 800375e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003762:	4621      	mov	r1, r4
 8003764:	024a      	lsls	r2, r1, #9
 8003766:	4610      	mov	r0, r2
 8003768:	4619      	mov	r1, r3
 800376a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800376e:	2200      	movs	r2, #0
 8003770:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003772:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003774:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003778:	f7fc fd9a 	bl	80002b0 <__aeabi_uldivmod>
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
 8003780:	4613      	mov	r3, r2
 8003782:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003786:	e065      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0x420>
 8003788:	40023800 	.word	0x40023800
 800378c:	00f42400 	.word	0x00f42400
 8003790:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003794:	4b3d      	ldr	r3, [pc, #244]	@ (800388c <HAL_RCC_GetSysClockFreq+0x458>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	099b      	lsrs	r3, r3, #6
 800379a:	2200      	movs	r2, #0
 800379c:	4618      	mov	r0, r3
 800379e:	4611      	mov	r1, r2
 80037a0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80037a6:	2300      	movs	r3, #0
 80037a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80037aa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80037ae:	4642      	mov	r2, r8
 80037b0:	464b      	mov	r3, r9
 80037b2:	f04f 0000 	mov.w	r0, #0
 80037b6:	f04f 0100 	mov.w	r1, #0
 80037ba:	0159      	lsls	r1, r3, #5
 80037bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037c0:	0150      	lsls	r0, r2, #5
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	4641      	mov	r1, r8
 80037c8:	1a51      	subs	r1, r2, r1
 80037ca:	60b9      	str	r1, [r7, #8]
 80037cc:	4649      	mov	r1, r9
 80037ce:	eb63 0301 	sbc.w	r3, r3, r1
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	f04f 0200 	mov.w	r2, #0
 80037d8:	f04f 0300 	mov.w	r3, #0
 80037dc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80037e0:	4659      	mov	r1, fp
 80037e2:	018b      	lsls	r3, r1, #6
 80037e4:	4651      	mov	r1, sl
 80037e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037ea:	4651      	mov	r1, sl
 80037ec:	018a      	lsls	r2, r1, #6
 80037ee:	4651      	mov	r1, sl
 80037f0:	1a54      	subs	r4, r2, r1
 80037f2:	4659      	mov	r1, fp
 80037f4:	eb63 0501 	sbc.w	r5, r3, r1
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	f04f 0300 	mov.w	r3, #0
 8003800:	00eb      	lsls	r3, r5, #3
 8003802:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003806:	00e2      	lsls	r2, r4, #3
 8003808:	4614      	mov	r4, r2
 800380a:	461d      	mov	r5, r3
 800380c:	4643      	mov	r3, r8
 800380e:	18e3      	adds	r3, r4, r3
 8003810:	603b      	str	r3, [r7, #0]
 8003812:	464b      	mov	r3, r9
 8003814:	eb45 0303 	adc.w	r3, r5, r3
 8003818:	607b      	str	r3, [r7, #4]
 800381a:	f04f 0200 	mov.w	r2, #0
 800381e:	f04f 0300 	mov.w	r3, #0
 8003822:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003826:	4629      	mov	r1, r5
 8003828:	028b      	lsls	r3, r1, #10
 800382a:	4621      	mov	r1, r4
 800382c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003830:	4621      	mov	r1, r4
 8003832:	028a      	lsls	r2, r1, #10
 8003834:	4610      	mov	r0, r2
 8003836:	4619      	mov	r1, r3
 8003838:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800383c:	2200      	movs	r2, #0
 800383e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003840:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003842:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003846:	f7fc fd33 	bl	80002b0 <__aeabi_uldivmod>
 800384a:	4602      	mov	r2, r0
 800384c:	460b      	mov	r3, r1
 800384e:	4613      	mov	r3, r2
 8003850:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003854:	4b0d      	ldr	r3, [pc, #52]	@ (800388c <HAL_RCC_GetSysClockFreq+0x458>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	0f1b      	lsrs	r3, r3, #28
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003862:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003866:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800386a:	fbb2 f3f3 	udiv	r3, r2, r3
 800386e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003872:	e003      	b.n	800387c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003874:	4b06      	ldr	r3, [pc, #24]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003876:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800387a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800387c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003880:	4618      	mov	r0, r3
 8003882:	37b8      	adds	r7, #184	@ 0xb8
 8003884:	46bd      	mov	sp, r7
 8003886:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800388a:	bf00      	nop
 800388c:	40023800 	.word	0x40023800
 8003890:	00f42400 	.word	0x00f42400

08003894 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e28d      	b.n	8003dc2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f000 8083 	beq.w	80039ba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80038b4:	4b94      	ldr	r3, [pc, #592]	@ (8003b08 <HAL_RCC_OscConfig+0x274>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f003 030c 	and.w	r3, r3, #12
 80038bc:	2b04      	cmp	r3, #4
 80038be:	d019      	beq.n	80038f4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80038c0:	4b91      	ldr	r3, [pc, #580]	@ (8003b08 <HAL_RCC_OscConfig+0x274>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f003 030c 	and.w	r3, r3, #12
        || \
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	d106      	bne.n	80038da <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80038cc:	4b8e      	ldr	r3, [pc, #568]	@ (8003b08 <HAL_RCC_OscConfig+0x274>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038d8:	d00c      	beq.n	80038f4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038da:	4b8b      	ldr	r3, [pc, #556]	@ (8003b08 <HAL_RCC_OscConfig+0x274>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80038e2:	2b0c      	cmp	r3, #12
 80038e4:	d112      	bne.n	800390c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038e6:	4b88      	ldr	r3, [pc, #544]	@ (8003b08 <HAL_RCC_OscConfig+0x274>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038f2:	d10b      	bne.n	800390c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f4:	4b84      	ldr	r3, [pc, #528]	@ (8003b08 <HAL_RCC_OscConfig+0x274>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d05b      	beq.n	80039b8 <HAL_RCC_OscConfig+0x124>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d157      	bne.n	80039b8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e25a      	b.n	8003dc2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003914:	d106      	bne.n	8003924 <HAL_RCC_OscConfig+0x90>
 8003916:	4b7c      	ldr	r3, [pc, #496]	@ (8003b08 <HAL_RCC_OscConfig+0x274>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a7b      	ldr	r2, [pc, #492]	@ (8003b08 <HAL_RCC_OscConfig+0x274>)
 800391c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	e01d      	b.n	8003960 <HAL_RCC_OscConfig+0xcc>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800392c:	d10c      	bne.n	8003948 <HAL_RCC_OscConfig+0xb4>
 800392e:	4b76      	ldr	r3, [pc, #472]	@ (8003b08 <HAL_RCC_OscConfig+0x274>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a75      	ldr	r2, [pc, #468]	@ (8003b08 <HAL_RCC_OscConfig+0x274>)
 8003934:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	4b73      	ldr	r3, [pc, #460]	@ (8003b08 <HAL_RCC_OscConfig+0x274>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a72      	ldr	r2, [pc, #456]	@ (8003b08 <HAL_RCC_OscConfig+0x274>)
 8003940:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	e00b      	b.n	8003960 <HAL_RCC_OscConfig+0xcc>
 8003948:	4b6f      	ldr	r3, [pc, #444]	@ (8003b08 <HAL_RCC_OscConfig+0x274>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a6e      	ldr	r2, [pc, #440]	@ (8003b08 <HAL_RCC_OscConfig+0x274>)
 800394e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003952:	6013      	str	r3, [r2, #0]
 8003954:	4b6c      	ldr	r3, [pc, #432]	@ (8003b08 <HAL_RCC_OscConfig+0x274>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a6b      	ldr	r2, [pc, #428]	@ (8003b08 <HAL_RCC_OscConfig+0x274>)
 800395a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800395e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d013      	beq.n	8003990 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003968:	f7fd ff8c 	bl	8001884 <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003970:	f7fd ff88 	bl	8001884 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b64      	cmp	r3, #100	@ 0x64
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e21f      	b.n	8003dc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003982:	4b61      	ldr	r3, [pc, #388]	@ (8003b08 <HAL_RCC_OscConfig+0x274>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d0f0      	beq.n	8003970 <HAL_RCC_OscConfig+0xdc>
 800398e:	e014      	b.n	80039ba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003990:	f7fd ff78 	bl	8001884 <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003998:	f7fd ff74 	bl	8001884 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b64      	cmp	r3, #100	@ 0x64
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e20b      	b.n	8003dc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039aa:	4b57      	ldr	r3, [pc, #348]	@ (8003b08 <HAL_RCC_OscConfig+0x274>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1f0      	bne.n	8003998 <HAL_RCC_OscConfig+0x104>
 80039b6:	e000      	b.n	80039ba <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d06f      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80039c6:	4b50      	ldr	r3, [pc, #320]	@ (8003b08 <HAL_RCC_OscConfig+0x274>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 030c 	and.w	r3, r3, #12
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d017      	beq.n	8003a02 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80039d2:	4b4d      	ldr	r3, [pc, #308]	@ (8003b08 <HAL_RCC_OscConfig+0x274>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 030c 	and.w	r3, r3, #12
        || \
 80039da:	2b08      	cmp	r3, #8
 80039dc:	d105      	bne.n	80039ea <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80039de:	4b4a      	ldr	r3, [pc, #296]	@ (8003b08 <HAL_RCC_OscConfig+0x274>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00b      	beq.n	8003a02 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ea:	4b47      	ldr	r3, [pc, #284]	@ (8003b08 <HAL_RCC_OscConfig+0x274>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80039f2:	2b0c      	cmp	r3, #12
 80039f4:	d11c      	bne.n	8003a30 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039f6:	4b44      	ldr	r3, [pc, #272]	@ (8003b08 <HAL_RCC_OscConfig+0x274>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d116      	bne.n	8003a30 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a02:	4b41      	ldr	r3, [pc, #260]	@ (8003b08 <HAL_RCC_OscConfig+0x274>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d005      	beq.n	8003a1a <HAL_RCC_OscConfig+0x186>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d001      	beq.n	8003a1a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e1d3      	b.n	8003dc2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a1a:	4b3b      	ldr	r3, [pc, #236]	@ (8003b08 <HAL_RCC_OscConfig+0x274>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	4937      	ldr	r1, [pc, #220]	@ (8003b08 <HAL_RCC_OscConfig+0x274>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a2e:	e03a      	b.n	8003aa6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d020      	beq.n	8003a7a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a38:	4b34      	ldr	r3, [pc, #208]	@ (8003b0c <HAL_RCC_OscConfig+0x278>)
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3e:	f7fd ff21 	bl	8001884 <HAL_GetTick>
 8003a42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a44:	e008      	b.n	8003a58 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a46:	f7fd ff1d 	bl	8001884 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e1b4      	b.n	8003dc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a58:	4b2b      	ldr	r3, [pc, #172]	@ (8003b08 <HAL_RCC_OscConfig+0x274>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0f0      	beq.n	8003a46 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a64:	4b28      	ldr	r3, [pc, #160]	@ (8003b08 <HAL_RCC_OscConfig+0x274>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	4925      	ldr	r1, [pc, #148]	@ (8003b08 <HAL_RCC_OscConfig+0x274>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	600b      	str	r3, [r1, #0]
 8003a78:	e015      	b.n	8003aa6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a7a:	4b24      	ldr	r3, [pc, #144]	@ (8003b0c <HAL_RCC_OscConfig+0x278>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a80:	f7fd ff00 	bl	8001884 <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a88:	f7fd fefc 	bl	8001884 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e193      	b.n	8003dc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8003b08 <HAL_RCC_OscConfig+0x274>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1f0      	bne.n	8003a88 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0308 	and.w	r3, r3, #8
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d036      	beq.n	8003b20 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d016      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aba:	4b15      	ldr	r3, [pc, #84]	@ (8003b10 <HAL_RCC_OscConfig+0x27c>)
 8003abc:	2201      	movs	r2, #1
 8003abe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac0:	f7fd fee0 	bl	8001884 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ac8:	f7fd fedc 	bl	8001884 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e173      	b.n	8003dc2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ada:	4b0b      	ldr	r3, [pc, #44]	@ (8003b08 <HAL_RCC_OscConfig+0x274>)
 8003adc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0f0      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x234>
 8003ae6:	e01b      	b.n	8003b20 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ae8:	4b09      	ldr	r3, [pc, #36]	@ (8003b10 <HAL_RCC_OscConfig+0x27c>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aee:	f7fd fec9 	bl	8001884 <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af4:	e00e      	b.n	8003b14 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003af6:	f7fd fec5 	bl	8001884 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d907      	bls.n	8003b14 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e15c      	b.n	8003dc2 <HAL_RCC_OscConfig+0x52e>
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	42470000 	.word	0x42470000
 8003b10:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b14:	4b8a      	ldr	r3, [pc, #552]	@ (8003d40 <HAL_RCC_OscConfig+0x4ac>)
 8003b16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1ea      	bne.n	8003af6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 8097 	beq.w	8003c5c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b32:	4b83      	ldr	r3, [pc, #524]	@ (8003d40 <HAL_RCC_OscConfig+0x4ac>)
 8003b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10f      	bne.n	8003b5e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60bb      	str	r3, [r7, #8]
 8003b42:	4b7f      	ldr	r3, [pc, #508]	@ (8003d40 <HAL_RCC_OscConfig+0x4ac>)
 8003b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b46:	4a7e      	ldr	r2, [pc, #504]	@ (8003d40 <HAL_RCC_OscConfig+0x4ac>)
 8003b48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b4e:	4b7c      	ldr	r3, [pc, #496]	@ (8003d40 <HAL_RCC_OscConfig+0x4ac>)
 8003b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b56:	60bb      	str	r3, [r7, #8]
 8003b58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b5e:	4b79      	ldr	r3, [pc, #484]	@ (8003d44 <HAL_RCC_OscConfig+0x4b0>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d118      	bne.n	8003b9c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b6a:	4b76      	ldr	r3, [pc, #472]	@ (8003d44 <HAL_RCC_OscConfig+0x4b0>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a75      	ldr	r2, [pc, #468]	@ (8003d44 <HAL_RCC_OscConfig+0x4b0>)
 8003b70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b76:	f7fd fe85 	bl	8001884 <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7c:	e008      	b.n	8003b90 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b7e:	f7fd fe81 	bl	8001884 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e118      	b.n	8003dc2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b90:	4b6c      	ldr	r3, [pc, #432]	@ (8003d44 <HAL_RCC_OscConfig+0x4b0>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0f0      	beq.n	8003b7e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d106      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x31e>
 8003ba4:	4b66      	ldr	r3, [pc, #408]	@ (8003d40 <HAL_RCC_OscConfig+0x4ac>)
 8003ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba8:	4a65      	ldr	r2, [pc, #404]	@ (8003d40 <HAL_RCC_OscConfig+0x4ac>)
 8003baa:	f043 0301 	orr.w	r3, r3, #1
 8003bae:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bb0:	e01c      	b.n	8003bec <HAL_RCC_OscConfig+0x358>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	2b05      	cmp	r3, #5
 8003bb8:	d10c      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x340>
 8003bba:	4b61      	ldr	r3, [pc, #388]	@ (8003d40 <HAL_RCC_OscConfig+0x4ac>)
 8003bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bbe:	4a60      	ldr	r2, [pc, #384]	@ (8003d40 <HAL_RCC_OscConfig+0x4ac>)
 8003bc0:	f043 0304 	orr.w	r3, r3, #4
 8003bc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bc6:	4b5e      	ldr	r3, [pc, #376]	@ (8003d40 <HAL_RCC_OscConfig+0x4ac>)
 8003bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bca:	4a5d      	ldr	r2, [pc, #372]	@ (8003d40 <HAL_RCC_OscConfig+0x4ac>)
 8003bcc:	f043 0301 	orr.w	r3, r3, #1
 8003bd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bd2:	e00b      	b.n	8003bec <HAL_RCC_OscConfig+0x358>
 8003bd4:	4b5a      	ldr	r3, [pc, #360]	@ (8003d40 <HAL_RCC_OscConfig+0x4ac>)
 8003bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bd8:	4a59      	ldr	r2, [pc, #356]	@ (8003d40 <HAL_RCC_OscConfig+0x4ac>)
 8003bda:	f023 0301 	bic.w	r3, r3, #1
 8003bde:	6713      	str	r3, [r2, #112]	@ 0x70
 8003be0:	4b57      	ldr	r3, [pc, #348]	@ (8003d40 <HAL_RCC_OscConfig+0x4ac>)
 8003be2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be4:	4a56      	ldr	r2, [pc, #344]	@ (8003d40 <HAL_RCC_OscConfig+0x4ac>)
 8003be6:	f023 0304 	bic.w	r3, r3, #4
 8003bea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d015      	beq.n	8003c20 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf4:	f7fd fe46 	bl	8001884 <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bfa:	e00a      	b.n	8003c12 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bfc:	f7fd fe42 	bl	8001884 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e0d7      	b.n	8003dc2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c12:	4b4b      	ldr	r3, [pc, #300]	@ (8003d40 <HAL_RCC_OscConfig+0x4ac>)
 8003c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0ee      	beq.n	8003bfc <HAL_RCC_OscConfig+0x368>
 8003c1e:	e014      	b.n	8003c4a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c20:	f7fd fe30 	bl	8001884 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c26:	e00a      	b.n	8003c3e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c28:	f7fd fe2c 	bl	8001884 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e0c1      	b.n	8003dc2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c3e:	4b40      	ldr	r3, [pc, #256]	@ (8003d40 <HAL_RCC_OscConfig+0x4ac>)
 8003c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1ee      	bne.n	8003c28 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c4a:	7dfb      	ldrb	r3, [r7, #23]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d105      	bne.n	8003c5c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c50:	4b3b      	ldr	r3, [pc, #236]	@ (8003d40 <HAL_RCC_OscConfig+0x4ac>)
 8003c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c54:	4a3a      	ldr	r2, [pc, #232]	@ (8003d40 <HAL_RCC_OscConfig+0x4ac>)
 8003c56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c5a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 80ad 	beq.w	8003dc0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c66:	4b36      	ldr	r3, [pc, #216]	@ (8003d40 <HAL_RCC_OscConfig+0x4ac>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 030c 	and.w	r3, r3, #12
 8003c6e:	2b08      	cmp	r3, #8
 8003c70:	d060      	beq.n	8003d34 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d145      	bne.n	8003d06 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c7a:	4b33      	ldr	r3, [pc, #204]	@ (8003d48 <HAL_RCC_OscConfig+0x4b4>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c80:	f7fd fe00 	bl	8001884 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c88:	f7fd fdfc 	bl	8001884 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e093      	b.n	8003dc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c9a:	4b29      	ldr	r3, [pc, #164]	@ (8003d40 <HAL_RCC_OscConfig+0x4ac>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1f0      	bne.n	8003c88 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	69da      	ldr	r2, [r3, #28]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb4:	019b      	lsls	r3, r3, #6
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cbc:	085b      	lsrs	r3, r3, #1
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	041b      	lsls	r3, r3, #16
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc8:	061b      	lsls	r3, r3, #24
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd0:	071b      	lsls	r3, r3, #28
 8003cd2:	491b      	ldr	r1, [pc, #108]	@ (8003d40 <HAL_RCC_OscConfig+0x4ac>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8003d48 <HAL_RCC_OscConfig+0x4b4>)
 8003cda:	2201      	movs	r2, #1
 8003cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cde:	f7fd fdd1 	bl	8001884 <HAL_GetTick>
 8003ce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ce4:	e008      	b.n	8003cf8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce6:	f7fd fdcd 	bl	8001884 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e064      	b.n	8003dc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cf8:	4b11      	ldr	r3, [pc, #68]	@ (8003d40 <HAL_RCC_OscConfig+0x4ac>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d0f0      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x452>
 8003d04:	e05c      	b.n	8003dc0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d06:	4b10      	ldr	r3, [pc, #64]	@ (8003d48 <HAL_RCC_OscConfig+0x4b4>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0c:	f7fd fdba 	bl	8001884 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d14:	f7fd fdb6 	bl	8001884 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e04d      	b.n	8003dc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d26:	4b06      	ldr	r3, [pc, #24]	@ (8003d40 <HAL_RCC_OscConfig+0x4ac>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1f0      	bne.n	8003d14 <HAL_RCC_OscConfig+0x480>
 8003d32:	e045      	b.n	8003dc0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d107      	bne.n	8003d4c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e040      	b.n	8003dc2 <HAL_RCC_OscConfig+0x52e>
 8003d40:	40023800 	.word	0x40023800
 8003d44:	40007000 	.word	0x40007000
 8003d48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d4c:	4b1f      	ldr	r3, [pc, #124]	@ (8003dcc <HAL_RCC_OscConfig+0x538>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d030      	beq.n	8003dbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d129      	bne.n	8003dbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d122      	bne.n	8003dbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d119      	bne.n	8003dbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d92:	085b      	lsrs	r3, r3, #1
 8003d94:	3b01      	subs	r3, #1
 8003d96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d10f      	bne.n	8003dbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d107      	bne.n	8003dbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d001      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e000      	b.n	8003dc2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3718      	adds	r7, #24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	40023800 	.word	0x40023800

08003dd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e041      	b.n	8003e66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d106      	bne.n	8003dfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7fd fa66 	bl	80012c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4610      	mov	r0, r2
 8003e10:	f000 ff0e 	bl	8004c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
	...

08003e70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d001      	beq.n	8003e88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e04e      	b.n	8003f26 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68da      	ldr	r2, [r3, #12]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f042 0201 	orr.w	r2, r2, #1
 8003e9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a23      	ldr	r2, [pc, #140]	@ (8003f34 <HAL_TIM_Base_Start_IT+0xc4>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d022      	beq.n	8003ef0 <HAL_TIM_Base_Start_IT+0x80>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eb2:	d01d      	beq.n	8003ef0 <HAL_TIM_Base_Start_IT+0x80>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a1f      	ldr	r2, [pc, #124]	@ (8003f38 <HAL_TIM_Base_Start_IT+0xc8>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d018      	beq.n	8003ef0 <HAL_TIM_Base_Start_IT+0x80>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a1e      	ldr	r2, [pc, #120]	@ (8003f3c <HAL_TIM_Base_Start_IT+0xcc>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d013      	beq.n	8003ef0 <HAL_TIM_Base_Start_IT+0x80>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a1c      	ldr	r2, [pc, #112]	@ (8003f40 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d00e      	beq.n	8003ef0 <HAL_TIM_Base_Start_IT+0x80>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a1b      	ldr	r2, [pc, #108]	@ (8003f44 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d009      	beq.n	8003ef0 <HAL_TIM_Base_Start_IT+0x80>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a19      	ldr	r2, [pc, #100]	@ (8003f48 <HAL_TIM_Base_Start_IT+0xd8>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d004      	beq.n	8003ef0 <HAL_TIM_Base_Start_IT+0x80>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a18      	ldr	r2, [pc, #96]	@ (8003f4c <HAL_TIM_Base_Start_IT+0xdc>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d111      	bne.n	8003f14 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 0307 	and.w	r3, r3, #7
 8003efa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2b06      	cmp	r3, #6
 8003f00:	d010      	beq.n	8003f24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f042 0201 	orr.w	r2, r2, #1
 8003f10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f12:	e007      	b.n	8003f24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f042 0201 	orr.w	r2, r2, #1
 8003f22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	40010000 	.word	0x40010000
 8003f38:	40000400 	.word	0x40000400
 8003f3c:	40000800 	.word	0x40000800
 8003f40:	40000c00 	.word	0x40000c00
 8003f44:	40010400 	.word	0x40010400
 8003f48:	40014000 	.word	0x40014000
 8003f4c:	40001800 	.word	0x40001800

08003f50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e041      	b.n	8003fe6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d106      	bne.n	8003f7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f839 	bl	8003fee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3304      	adds	r3, #4
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	4610      	mov	r0, r2
 8003f90:	f000 fe4e 	bl	8004c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3708      	adds	r7, #8
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b083      	sub	sp, #12
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ff6:	bf00      	nop
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
	...

08004004 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
 8004010:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004012:	2300      	movs	r3, #0
 8004014:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d109      	bne.n	8004030 <HAL_TIM_PWM_Start_DMA+0x2c>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	bf0c      	ite	eq
 8004028:	2301      	moveq	r3, #1
 800402a:	2300      	movne	r3, #0
 800402c:	b2db      	uxtb	r3, r3
 800402e:	e022      	b.n	8004076 <HAL_TIM_PWM_Start_DMA+0x72>
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2b04      	cmp	r3, #4
 8004034:	d109      	bne.n	800404a <HAL_TIM_PWM_Start_DMA+0x46>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	bf0c      	ite	eq
 8004042:	2301      	moveq	r3, #1
 8004044:	2300      	movne	r3, #0
 8004046:	b2db      	uxtb	r3, r3
 8004048:	e015      	b.n	8004076 <HAL_TIM_PWM_Start_DMA+0x72>
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	2b08      	cmp	r3, #8
 800404e:	d109      	bne.n	8004064 <HAL_TIM_PWM_Start_DMA+0x60>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	bf0c      	ite	eq
 800405c:	2301      	moveq	r3, #1
 800405e:	2300      	movne	r3, #0
 8004060:	b2db      	uxtb	r3, r3
 8004062:	e008      	b.n	8004076 <HAL_TIM_PWM_Start_DMA+0x72>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	bf0c      	ite	eq
 8004070:	2301      	moveq	r3, #1
 8004072:	2300      	movne	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800407a:	2302      	movs	r3, #2
 800407c:	e171      	b.n	8004362 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d109      	bne.n	8004098 <HAL_TIM_PWM_Start_DMA+0x94>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b01      	cmp	r3, #1
 800408e:	bf0c      	ite	eq
 8004090:	2301      	moveq	r3, #1
 8004092:	2300      	movne	r3, #0
 8004094:	b2db      	uxtb	r3, r3
 8004096:	e022      	b.n	80040de <HAL_TIM_PWM_Start_DMA+0xda>
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	2b04      	cmp	r3, #4
 800409c:	d109      	bne.n	80040b2 <HAL_TIM_PWM_Start_DMA+0xae>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	bf0c      	ite	eq
 80040aa:	2301      	moveq	r3, #1
 80040ac:	2300      	movne	r3, #0
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	e015      	b.n	80040de <HAL_TIM_PWM_Start_DMA+0xda>
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	d109      	bne.n	80040cc <HAL_TIM_PWM_Start_DMA+0xc8>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	bf0c      	ite	eq
 80040c4:	2301      	moveq	r3, #1
 80040c6:	2300      	movne	r3, #0
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	e008      	b.n	80040de <HAL_TIM_PWM_Start_DMA+0xda>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	bf0c      	ite	eq
 80040d8:	2301      	moveq	r3, #1
 80040da:	2300      	movne	r3, #0
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d024      	beq.n	800412c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d002      	beq.n	80040ee <HAL_TIM_PWM_Start_DMA+0xea>
 80040e8:	887b      	ldrh	r3, [r7, #2]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e137      	b.n	8004362 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d104      	bne.n	8004102 <HAL_TIM_PWM_Start_DMA+0xfe>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2202      	movs	r2, #2
 80040fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004100:	e016      	b.n	8004130 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	2b04      	cmp	r3, #4
 8004106:	d104      	bne.n	8004112 <HAL_TIM_PWM_Start_DMA+0x10e>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2202      	movs	r2, #2
 800410c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004110:	e00e      	b.n	8004130 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	2b08      	cmp	r3, #8
 8004116:	d104      	bne.n	8004122 <HAL_TIM_PWM_Start_DMA+0x11e>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2202      	movs	r2, #2
 800411c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004120:	e006      	b.n	8004130 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2202      	movs	r2, #2
 8004126:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800412a:	e001      	b.n	8004130 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e118      	b.n	8004362 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2b0c      	cmp	r3, #12
 8004134:	f200 80ae 	bhi.w	8004294 <HAL_TIM_PWM_Start_DMA+0x290>
 8004138:	a201      	add	r2, pc, #4	@ (adr r2, 8004140 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800413a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800413e:	bf00      	nop
 8004140:	08004175 	.word	0x08004175
 8004144:	08004295 	.word	0x08004295
 8004148:	08004295 	.word	0x08004295
 800414c:	08004295 	.word	0x08004295
 8004150:	080041bd 	.word	0x080041bd
 8004154:	08004295 	.word	0x08004295
 8004158:	08004295 	.word	0x08004295
 800415c:	08004295 	.word	0x08004295
 8004160:	08004205 	.word	0x08004205
 8004164:	08004295 	.word	0x08004295
 8004168:	08004295 	.word	0x08004295
 800416c:	08004295 	.word	0x08004295
 8004170:	0800424d 	.word	0x0800424d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004178:	4a7c      	ldr	r2, [pc, #496]	@ (800436c <HAL_TIM_PWM_Start_DMA+0x368>)
 800417a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004180:	4a7b      	ldr	r2, [pc, #492]	@ (8004370 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004182:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004188:	4a7a      	ldr	r2, [pc, #488]	@ (8004374 <HAL_TIM_PWM_Start_DMA+0x370>)
 800418a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8004190:	6879      	ldr	r1, [r7, #4]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	3334      	adds	r3, #52	@ 0x34
 8004198:	461a      	mov	r2, r3
 800419a:	887b      	ldrh	r3, [r7, #2]
 800419c:	f7fe fbc6 	bl	800292c <HAL_DMA_Start_IT>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e0db      	b.n	8004362 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68da      	ldr	r2, [r3, #12]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041b8:	60da      	str	r2, [r3, #12]
      break;
 80041ba:	e06e      	b.n	800429a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c0:	4a6a      	ldr	r2, [pc, #424]	@ (800436c <HAL_TIM_PWM_Start_DMA+0x368>)
 80041c2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c8:	4a69      	ldr	r2, [pc, #420]	@ (8004370 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80041ca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d0:	4a68      	ldr	r2, [pc, #416]	@ (8004374 <HAL_TIM_PWM_Start_DMA+0x370>)
 80041d2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	3338      	adds	r3, #56	@ 0x38
 80041e0:	461a      	mov	r2, r3
 80041e2:	887b      	ldrh	r3, [r7, #2]
 80041e4:	f7fe fba2 	bl	800292c <HAL_DMA_Start_IT>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e0b7      	b.n	8004362 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68da      	ldr	r2, [r3, #12]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004200:	60da      	str	r2, [r3, #12]
      break;
 8004202:	e04a      	b.n	800429a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004208:	4a58      	ldr	r2, [pc, #352]	@ (800436c <HAL_TIM_PWM_Start_DMA+0x368>)
 800420a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004210:	4a57      	ldr	r2, [pc, #348]	@ (8004370 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004212:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004218:	4a56      	ldr	r2, [pc, #344]	@ (8004374 <HAL_TIM_PWM_Start_DMA+0x370>)
 800421a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8004220:	6879      	ldr	r1, [r7, #4]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	333c      	adds	r3, #60	@ 0x3c
 8004228:	461a      	mov	r2, r3
 800422a:	887b      	ldrh	r3, [r7, #2]
 800422c:	f7fe fb7e 	bl	800292c <HAL_DMA_Start_IT>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e093      	b.n	8004362 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68da      	ldr	r2, [r3, #12]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004248:	60da      	str	r2, [r3, #12]
      break;
 800424a:	e026      	b.n	800429a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004250:	4a46      	ldr	r2, [pc, #280]	@ (800436c <HAL_TIM_PWM_Start_DMA+0x368>)
 8004252:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004258:	4a45      	ldr	r2, [pc, #276]	@ (8004370 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800425a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004260:	4a44      	ldr	r2, [pc, #272]	@ (8004374 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004262:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004268:	6879      	ldr	r1, [r7, #4]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	3340      	adds	r3, #64	@ 0x40
 8004270:	461a      	mov	r2, r3
 8004272:	887b      	ldrh	r3, [r7, #2]
 8004274:	f7fe fb5a 	bl	800292c <HAL_DMA_Start_IT>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e06f      	b.n	8004362 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68da      	ldr	r2, [r3, #12]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004290:	60da      	str	r2, [r3, #12]
      break;
 8004292:	e002      	b.n	800429a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	75fb      	strb	r3, [r7, #23]
      break;
 8004298:	bf00      	nop
  }

  if (status == HAL_OK)
 800429a:	7dfb      	ldrb	r3, [r7, #23]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d15f      	bne.n	8004360 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2201      	movs	r2, #1
 80042a6:	68b9      	ldr	r1, [r7, #8]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 ffb1 	bl	8005210 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a31      	ldr	r2, [pc, #196]	@ (8004378 <HAL_TIM_PWM_Start_DMA+0x374>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d004      	beq.n	80042c2 <HAL_TIM_PWM_Start_DMA+0x2be>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a2f      	ldr	r2, [pc, #188]	@ (800437c <HAL_TIM_PWM_Start_DMA+0x378>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d101      	bne.n	80042c6 <HAL_TIM_PWM_Start_DMA+0x2c2>
 80042c2:	2301      	movs	r3, #1
 80042c4:	e000      	b.n	80042c8 <HAL_TIM_PWM_Start_DMA+0x2c4>
 80042c6:	2300      	movs	r3, #0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d007      	beq.n	80042dc <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042da:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a25      	ldr	r2, [pc, #148]	@ (8004378 <HAL_TIM_PWM_Start_DMA+0x374>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d022      	beq.n	800432c <HAL_TIM_PWM_Start_DMA+0x328>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042ee:	d01d      	beq.n	800432c <HAL_TIM_PWM_Start_DMA+0x328>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a22      	ldr	r2, [pc, #136]	@ (8004380 <HAL_TIM_PWM_Start_DMA+0x37c>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d018      	beq.n	800432c <HAL_TIM_PWM_Start_DMA+0x328>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a21      	ldr	r2, [pc, #132]	@ (8004384 <HAL_TIM_PWM_Start_DMA+0x380>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d013      	beq.n	800432c <HAL_TIM_PWM_Start_DMA+0x328>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a1f      	ldr	r2, [pc, #124]	@ (8004388 <HAL_TIM_PWM_Start_DMA+0x384>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d00e      	beq.n	800432c <HAL_TIM_PWM_Start_DMA+0x328>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a1a      	ldr	r2, [pc, #104]	@ (800437c <HAL_TIM_PWM_Start_DMA+0x378>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d009      	beq.n	800432c <HAL_TIM_PWM_Start_DMA+0x328>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a1b      	ldr	r2, [pc, #108]	@ (800438c <HAL_TIM_PWM_Start_DMA+0x388>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d004      	beq.n	800432c <HAL_TIM_PWM_Start_DMA+0x328>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a1a      	ldr	r2, [pc, #104]	@ (8004390 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d111      	bne.n	8004350 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	2b06      	cmp	r3, #6
 800433c:	d010      	beq.n	8004360 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f042 0201 	orr.w	r2, r2, #1
 800434c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800434e:	e007      	b.n	8004360 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 0201 	orr.w	r2, r2, #1
 800435e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004360:	7dfb      	ldrb	r3, [r7, #23]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3718      	adds	r7, #24
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	08004b21 	.word	0x08004b21
 8004370:	08004bc9 	.word	0x08004bc9
 8004374:	08004a8f 	.word	0x08004a8f
 8004378:	40010000 	.word	0x40010000
 800437c:	40010400 	.word	0x40010400
 8004380:	40000400 	.word	0x40000400
 8004384:	40000800 	.word	0x40000800
 8004388:	40000c00 	.word	0x40000c00
 800438c:	40014000 	.word	0x40014000
 8004390:	40001800 	.word	0x40001800

08004394 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800439e:	2300      	movs	r3, #0
 80043a0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2b0c      	cmp	r3, #12
 80043a6:	d855      	bhi.n	8004454 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80043a8:	a201      	add	r2, pc, #4	@ (adr r2, 80043b0 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80043aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ae:	bf00      	nop
 80043b0:	080043e5 	.word	0x080043e5
 80043b4:	08004455 	.word	0x08004455
 80043b8:	08004455 	.word	0x08004455
 80043bc:	08004455 	.word	0x08004455
 80043c0:	08004401 	.word	0x08004401
 80043c4:	08004455 	.word	0x08004455
 80043c8:	08004455 	.word	0x08004455
 80043cc:	08004455 	.word	0x08004455
 80043d0:	0800441d 	.word	0x0800441d
 80043d4:	08004455 	.word	0x08004455
 80043d8:	08004455 	.word	0x08004455
 80043dc:	08004455 	.word	0x08004455
 80043e0:	08004439 	.word	0x08004439
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68da      	ldr	r2, [r3, #12]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80043f2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7fe faef 	bl	80029dc <HAL_DMA_Abort_IT>
      break;
 80043fe:	e02c      	b.n	800445a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68da      	ldr	r2, [r3, #12]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800440e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004414:	4618      	mov	r0, r3
 8004416:	f7fe fae1 	bl	80029dc <HAL_DMA_Abort_IT>
      break;
 800441a:	e01e      	b.n	800445a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68da      	ldr	r2, [r3, #12]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800442a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004430:	4618      	mov	r0, r3
 8004432:	f7fe fad3 	bl	80029dc <HAL_DMA_Abort_IT>
      break;
 8004436:	e010      	b.n	800445a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68da      	ldr	r2, [r3, #12]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004446:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800444c:	4618      	mov	r0, r3
 800444e:	f7fe fac5 	bl	80029dc <HAL_DMA_Abort_IT>
      break;
 8004452:	e002      	b.n	800445a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	73fb      	strb	r3, [r7, #15]
      break;
 8004458:	bf00      	nop
  }

  if (status == HAL_OK)
 800445a:	7bfb      	ldrb	r3, [r7, #15]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d161      	bne.n	8004524 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2200      	movs	r2, #0
 8004466:	6839      	ldr	r1, [r7, #0]
 8004468:	4618      	mov	r0, r3
 800446a:	f000 fed1 	bl	8005210 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a2f      	ldr	r2, [pc, #188]	@ (8004530 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d004      	beq.n	8004482 <HAL_TIM_PWM_Stop_DMA+0xee>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a2d      	ldr	r2, [pc, #180]	@ (8004534 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d101      	bne.n	8004486 <HAL_TIM_PWM_Stop_DMA+0xf2>
 8004482:	2301      	movs	r3, #1
 8004484:	e000      	b.n	8004488 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8004486:	2300      	movs	r3, #0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d017      	beq.n	80044bc <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6a1a      	ldr	r2, [r3, #32]
 8004492:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004496:	4013      	ands	r3, r2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10f      	bne.n	80044bc <HAL_TIM_PWM_Stop_DMA+0x128>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6a1a      	ldr	r2, [r3, #32]
 80044a2:	f240 4344 	movw	r3, #1092	@ 0x444
 80044a6:	4013      	ands	r3, r2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d107      	bne.n	80044bc <HAL_TIM_PWM_Stop_DMA+0x128>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80044ba:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6a1a      	ldr	r2, [r3, #32]
 80044c2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80044c6:	4013      	ands	r3, r2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10f      	bne.n	80044ec <HAL_TIM_PWM_Stop_DMA+0x158>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6a1a      	ldr	r2, [r3, #32]
 80044d2:	f240 4344 	movw	r3, #1092	@ 0x444
 80044d6:	4013      	ands	r3, r2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d107      	bne.n	80044ec <HAL_TIM_PWM_Stop_DMA+0x158>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 0201 	bic.w	r2, r2, #1
 80044ea:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d104      	bne.n	80044fc <HAL_TIM_PWM_Stop_DMA+0x168>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044fa:	e013      	b.n	8004524 <HAL_TIM_PWM_Stop_DMA+0x190>
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	2b04      	cmp	r3, #4
 8004500:	d104      	bne.n	800450c <HAL_TIM_PWM_Stop_DMA+0x178>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800450a:	e00b      	b.n	8004524 <HAL_TIM_PWM_Stop_DMA+0x190>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	2b08      	cmp	r3, #8
 8004510:	d104      	bne.n	800451c <HAL_TIM_PWM_Stop_DMA+0x188>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800451a:	e003      	b.n	8004524 <HAL_TIM_PWM_Stop_DMA+0x190>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8004524:	7bfb      	ldrb	r3, [r7, #15]
}
 8004526:	4618      	mov	r0, r3
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	40010000 	.word	0x40010000
 8004534:	40010400 	.word	0x40010400

08004538 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d020      	beq.n	800459c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f003 0302 	and.w	r3, r3, #2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d01b      	beq.n	800459c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f06f 0202 	mvn.w	r2, #2
 800456c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	f003 0303 	and.w	r3, r3, #3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 fa5b 	bl	8004a3e <HAL_TIM_IC_CaptureCallback>
 8004588:	e005      	b.n	8004596 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 fa4d 	bl	8004a2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f7fc f823 	bl	80005dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	f003 0304 	and.w	r3, r3, #4
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d020      	beq.n	80045e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d01b      	beq.n	80045e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f06f 0204 	mvn.w	r2, #4
 80045b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2202      	movs	r2, #2
 80045be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 fa35 	bl	8004a3e <HAL_TIM_IC_CaptureCallback>
 80045d4:	e005      	b.n	80045e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 fa27 	bl	8004a2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f7fb fffd 	bl	80005dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	f003 0308 	and.w	r3, r3, #8
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d020      	beq.n	8004634 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f003 0308 	and.w	r3, r3, #8
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d01b      	beq.n	8004634 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f06f 0208 	mvn.w	r2, #8
 8004604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2204      	movs	r2, #4
 800460a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 fa0f 	bl	8004a3e <HAL_TIM_IC_CaptureCallback>
 8004620:	e005      	b.n	800462e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 fa01 	bl	8004a2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f7fb ffd7 	bl	80005dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	f003 0310 	and.w	r3, r3, #16
 800463a:	2b00      	cmp	r3, #0
 800463c:	d020      	beq.n	8004680 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f003 0310 	and.w	r3, r3, #16
 8004644:	2b00      	cmp	r3, #0
 8004646:	d01b      	beq.n	8004680 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f06f 0210 	mvn.w	r2, #16
 8004650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2208      	movs	r2, #8
 8004656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f9e9 	bl	8004a3e <HAL_TIM_IC_CaptureCallback>
 800466c:	e005      	b.n	800467a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f9db 	bl	8004a2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f7fb ffb1 	bl	80005dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00c      	beq.n	80046a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	2b00      	cmp	r3, #0
 8004692:	d007      	beq.n	80046a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f06f 0201 	mvn.w	r2, #1
 800469c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7fc fd72 	bl	8001188 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00c      	beq.n	80046c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d007      	beq.n	80046c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80046c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 fea2 	bl	800540c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00c      	beq.n	80046ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d007      	beq.n	80046ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80046e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f9bd 	bl	8004a66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	f003 0320 	and.w	r3, r3, #32
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00c      	beq.n	8004710 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f003 0320 	and.w	r3, r3, #32
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d007      	beq.n	8004710 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f06f 0220 	mvn.w	r2, #32
 8004708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 fe74 	bl	80053f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004710:	bf00      	nop
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004724:	2300      	movs	r3, #0
 8004726:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800472e:	2b01      	cmp	r3, #1
 8004730:	d101      	bne.n	8004736 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004732:	2302      	movs	r3, #2
 8004734:	e0ae      	b.n	8004894 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2b0c      	cmp	r3, #12
 8004742:	f200 809f 	bhi.w	8004884 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004746:	a201      	add	r2, pc, #4	@ (adr r2, 800474c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474c:	08004781 	.word	0x08004781
 8004750:	08004885 	.word	0x08004885
 8004754:	08004885 	.word	0x08004885
 8004758:	08004885 	.word	0x08004885
 800475c:	080047c1 	.word	0x080047c1
 8004760:	08004885 	.word	0x08004885
 8004764:	08004885 	.word	0x08004885
 8004768:	08004885 	.word	0x08004885
 800476c:	08004803 	.word	0x08004803
 8004770:	08004885 	.word	0x08004885
 8004774:	08004885 	.word	0x08004885
 8004778:	08004885 	.word	0x08004885
 800477c:	08004843 	.word	0x08004843
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68b9      	ldr	r1, [r7, #8]
 8004786:	4618      	mov	r0, r3
 8004788:	f000 faf8 	bl	8004d7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	699a      	ldr	r2, [r3, #24]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f042 0208 	orr.w	r2, r2, #8
 800479a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699a      	ldr	r2, [r3, #24]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 0204 	bic.w	r2, r2, #4
 80047aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6999      	ldr	r1, [r3, #24]
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	691a      	ldr	r2, [r3, #16]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	619a      	str	r2, [r3, #24]
      break;
 80047be:	e064      	b.n	800488a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68b9      	ldr	r1, [r7, #8]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 fb48 	bl	8004e5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	699a      	ldr	r2, [r3, #24]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	699a      	ldr	r2, [r3, #24]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6999      	ldr	r1, [r3, #24]
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	021a      	lsls	r2, r3, #8
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	619a      	str	r2, [r3, #24]
      break;
 8004800:	e043      	b.n	800488a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68b9      	ldr	r1, [r7, #8]
 8004808:	4618      	mov	r0, r3
 800480a:	f000 fb9d 	bl	8004f48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	69da      	ldr	r2, [r3, #28]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f042 0208 	orr.w	r2, r2, #8
 800481c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	69da      	ldr	r2, [r3, #28]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 0204 	bic.w	r2, r2, #4
 800482c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	69d9      	ldr	r1, [r3, #28]
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	691a      	ldr	r2, [r3, #16]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	61da      	str	r2, [r3, #28]
      break;
 8004840:	e023      	b.n	800488a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68b9      	ldr	r1, [r7, #8]
 8004848:	4618      	mov	r0, r3
 800484a:	f000 fbf1 	bl	8005030 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	69da      	ldr	r2, [r3, #28]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800485c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	69da      	ldr	r2, [r3, #28]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800486c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	69d9      	ldr	r1, [r3, #28]
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	021a      	lsls	r2, r3, #8
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	430a      	orrs	r2, r1
 8004880:	61da      	str	r2, [r3, #28]
      break;
 8004882:	e002      	b.n	800488a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	75fb      	strb	r3, [r7, #23]
      break;
 8004888:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004892:	7dfb      	ldrb	r3, [r7, #23]
}
 8004894:	4618      	mov	r0, r3
 8004896:	3718      	adds	r7, #24
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048a6:	2300      	movs	r3, #0
 80048a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d101      	bne.n	80048b8 <HAL_TIM_ConfigClockSource+0x1c>
 80048b4:	2302      	movs	r3, #2
 80048b6:	e0b4      	b.n	8004a22 <HAL_TIM_ConfigClockSource+0x186>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2202      	movs	r2, #2
 80048c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80048d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048f0:	d03e      	beq.n	8004970 <HAL_TIM_ConfigClockSource+0xd4>
 80048f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048f6:	f200 8087 	bhi.w	8004a08 <HAL_TIM_ConfigClockSource+0x16c>
 80048fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048fe:	f000 8086 	beq.w	8004a0e <HAL_TIM_ConfigClockSource+0x172>
 8004902:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004906:	d87f      	bhi.n	8004a08 <HAL_TIM_ConfigClockSource+0x16c>
 8004908:	2b70      	cmp	r3, #112	@ 0x70
 800490a:	d01a      	beq.n	8004942 <HAL_TIM_ConfigClockSource+0xa6>
 800490c:	2b70      	cmp	r3, #112	@ 0x70
 800490e:	d87b      	bhi.n	8004a08 <HAL_TIM_ConfigClockSource+0x16c>
 8004910:	2b60      	cmp	r3, #96	@ 0x60
 8004912:	d050      	beq.n	80049b6 <HAL_TIM_ConfigClockSource+0x11a>
 8004914:	2b60      	cmp	r3, #96	@ 0x60
 8004916:	d877      	bhi.n	8004a08 <HAL_TIM_ConfigClockSource+0x16c>
 8004918:	2b50      	cmp	r3, #80	@ 0x50
 800491a:	d03c      	beq.n	8004996 <HAL_TIM_ConfigClockSource+0xfa>
 800491c:	2b50      	cmp	r3, #80	@ 0x50
 800491e:	d873      	bhi.n	8004a08 <HAL_TIM_ConfigClockSource+0x16c>
 8004920:	2b40      	cmp	r3, #64	@ 0x40
 8004922:	d058      	beq.n	80049d6 <HAL_TIM_ConfigClockSource+0x13a>
 8004924:	2b40      	cmp	r3, #64	@ 0x40
 8004926:	d86f      	bhi.n	8004a08 <HAL_TIM_ConfigClockSource+0x16c>
 8004928:	2b30      	cmp	r3, #48	@ 0x30
 800492a:	d064      	beq.n	80049f6 <HAL_TIM_ConfigClockSource+0x15a>
 800492c:	2b30      	cmp	r3, #48	@ 0x30
 800492e:	d86b      	bhi.n	8004a08 <HAL_TIM_ConfigClockSource+0x16c>
 8004930:	2b20      	cmp	r3, #32
 8004932:	d060      	beq.n	80049f6 <HAL_TIM_ConfigClockSource+0x15a>
 8004934:	2b20      	cmp	r3, #32
 8004936:	d867      	bhi.n	8004a08 <HAL_TIM_ConfigClockSource+0x16c>
 8004938:	2b00      	cmp	r3, #0
 800493a:	d05c      	beq.n	80049f6 <HAL_TIM_ConfigClockSource+0x15a>
 800493c:	2b10      	cmp	r3, #16
 800493e:	d05a      	beq.n	80049f6 <HAL_TIM_ConfigClockSource+0x15a>
 8004940:	e062      	b.n	8004a08 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004952:	f000 fc3d 	bl	80051d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004964:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	609a      	str	r2, [r3, #8]
      break;
 800496e:	e04f      	b.n	8004a10 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004980:	f000 fc26 	bl	80051d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689a      	ldr	r2, [r3, #8]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004992:	609a      	str	r2, [r3, #8]
      break;
 8004994:	e03c      	b.n	8004a10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049a2:	461a      	mov	r2, r3
 80049a4:	f000 fb9a 	bl	80050dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2150      	movs	r1, #80	@ 0x50
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 fbf3 	bl	800519a <TIM_ITRx_SetConfig>
      break;
 80049b4:	e02c      	b.n	8004a10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049c2:	461a      	mov	r2, r3
 80049c4:	f000 fbb9 	bl	800513a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2160      	movs	r1, #96	@ 0x60
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 fbe3 	bl	800519a <TIM_ITRx_SetConfig>
      break;
 80049d4:	e01c      	b.n	8004a10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049e2:	461a      	mov	r2, r3
 80049e4:	f000 fb7a 	bl	80050dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2140      	movs	r1, #64	@ 0x40
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 fbd3 	bl	800519a <TIM_ITRx_SetConfig>
      break;
 80049f4:	e00c      	b.n	8004a10 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4619      	mov	r1, r3
 8004a00:	4610      	mov	r0, r2
 8004a02:	f000 fbca 	bl	800519a <TIM_ITRx_SetConfig>
      break;
 8004a06:	e003      	b.n	8004a10 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a0c:	e000      	b.n	8004a10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b083      	sub	sp, #12
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a32:	bf00      	nop
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a46:	bf00      	nop
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004a5a:	bf00      	nop
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b083      	sub	sp, #12
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b084      	sub	sp, #16
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a9a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d107      	bne.n	8004ab6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ab4:	e02a      	b.n	8004b0c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d107      	bne.n	8004ad0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ace:	e01d      	b.n	8004b0c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d107      	bne.n	8004aea <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2204      	movs	r2, #4
 8004ade:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ae8:	e010      	b.n	8004b0c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d107      	bne.n	8004b04 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2208      	movs	r2, #8
 8004af8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b02:	e003      	b.n	8004b0c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f7ff ffb4 	bl	8004a7a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	771a      	strb	r2, [r3, #28]
}
 8004b18:	bf00      	nop
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b2c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d10b      	bne.n	8004b50 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d136      	bne.n	8004bb4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b4e:	e031      	b.n	8004bb4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d10b      	bne.n	8004b72 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2202      	movs	r2, #2
 8004b5e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	69db      	ldr	r3, [r3, #28]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d125      	bne.n	8004bb4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b70:	e020      	b.n	8004bb4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d10b      	bne.n	8004b94 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2204      	movs	r2, #4
 8004b80:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d114      	bne.n	8004bb4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b92:	e00f      	b.n	8004bb4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d10a      	bne.n	8004bb4 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2208      	movs	r2, #8
 8004ba2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	69db      	ldr	r3, [r3, #28]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d103      	bne.n	8004bb4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f7fb fd11 	bl	80005dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	771a      	strb	r2, [r3, #28]
}
 8004bc0:	bf00      	nop
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d103      	bne.n	8004be8 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2201      	movs	r2, #1
 8004be4:	771a      	strb	r2, [r3, #28]
 8004be6:	e019      	b.n	8004c1c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d103      	bne.n	8004bfa <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2202      	movs	r2, #2
 8004bf6:	771a      	strb	r2, [r3, #28]
 8004bf8:	e010      	b.n	8004c1c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d103      	bne.n	8004c0c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2204      	movs	r2, #4
 8004c08:	771a      	strb	r2, [r3, #28]
 8004c0a:	e007      	b.n	8004c1c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d102      	bne.n	8004c1c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2208      	movs	r2, #8
 8004c1a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f7ff ff18 	bl	8004a52 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	771a      	strb	r2, [r3, #28]
}
 8004c28:	bf00      	nop
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a43      	ldr	r2, [pc, #268]	@ (8004d50 <TIM_Base_SetConfig+0x120>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d013      	beq.n	8004c70 <TIM_Base_SetConfig+0x40>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c4e:	d00f      	beq.n	8004c70 <TIM_Base_SetConfig+0x40>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a40      	ldr	r2, [pc, #256]	@ (8004d54 <TIM_Base_SetConfig+0x124>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d00b      	beq.n	8004c70 <TIM_Base_SetConfig+0x40>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a3f      	ldr	r2, [pc, #252]	@ (8004d58 <TIM_Base_SetConfig+0x128>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d007      	beq.n	8004c70 <TIM_Base_SetConfig+0x40>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a3e      	ldr	r2, [pc, #248]	@ (8004d5c <TIM_Base_SetConfig+0x12c>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d003      	beq.n	8004c70 <TIM_Base_SetConfig+0x40>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a3d      	ldr	r2, [pc, #244]	@ (8004d60 <TIM_Base_SetConfig+0x130>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d108      	bne.n	8004c82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a32      	ldr	r2, [pc, #200]	@ (8004d50 <TIM_Base_SetConfig+0x120>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d02b      	beq.n	8004ce2 <TIM_Base_SetConfig+0xb2>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c90:	d027      	beq.n	8004ce2 <TIM_Base_SetConfig+0xb2>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a2f      	ldr	r2, [pc, #188]	@ (8004d54 <TIM_Base_SetConfig+0x124>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d023      	beq.n	8004ce2 <TIM_Base_SetConfig+0xb2>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a2e      	ldr	r2, [pc, #184]	@ (8004d58 <TIM_Base_SetConfig+0x128>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d01f      	beq.n	8004ce2 <TIM_Base_SetConfig+0xb2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a2d      	ldr	r2, [pc, #180]	@ (8004d5c <TIM_Base_SetConfig+0x12c>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d01b      	beq.n	8004ce2 <TIM_Base_SetConfig+0xb2>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a2c      	ldr	r2, [pc, #176]	@ (8004d60 <TIM_Base_SetConfig+0x130>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d017      	beq.n	8004ce2 <TIM_Base_SetConfig+0xb2>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a2b      	ldr	r2, [pc, #172]	@ (8004d64 <TIM_Base_SetConfig+0x134>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d013      	beq.n	8004ce2 <TIM_Base_SetConfig+0xb2>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a2a      	ldr	r2, [pc, #168]	@ (8004d68 <TIM_Base_SetConfig+0x138>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d00f      	beq.n	8004ce2 <TIM_Base_SetConfig+0xb2>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a29      	ldr	r2, [pc, #164]	@ (8004d6c <TIM_Base_SetConfig+0x13c>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d00b      	beq.n	8004ce2 <TIM_Base_SetConfig+0xb2>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a28      	ldr	r2, [pc, #160]	@ (8004d70 <TIM_Base_SetConfig+0x140>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d007      	beq.n	8004ce2 <TIM_Base_SetConfig+0xb2>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a27      	ldr	r2, [pc, #156]	@ (8004d74 <TIM_Base_SetConfig+0x144>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d003      	beq.n	8004ce2 <TIM_Base_SetConfig+0xb2>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a26      	ldr	r2, [pc, #152]	@ (8004d78 <TIM_Base_SetConfig+0x148>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d108      	bne.n	8004cf4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ce8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	689a      	ldr	r2, [r3, #8]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a0e      	ldr	r2, [pc, #56]	@ (8004d50 <TIM_Base_SetConfig+0x120>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d003      	beq.n	8004d22 <TIM_Base_SetConfig+0xf2>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a10      	ldr	r2, [pc, #64]	@ (8004d60 <TIM_Base_SetConfig+0x130>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d103      	bne.n	8004d2a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	691a      	ldr	r2, [r3, #16]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f043 0204 	orr.w	r2, r3, #4
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	601a      	str	r2, [r3, #0]
}
 8004d42:	bf00      	nop
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	40010000 	.word	0x40010000
 8004d54:	40000400 	.word	0x40000400
 8004d58:	40000800 	.word	0x40000800
 8004d5c:	40000c00 	.word	0x40000c00
 8004d60:	40010400 	.word	0x40010400
 8004d64:	40014000 	.word	0x40014000
 8004d68:	40014400 	.word	0x40014400
 8004d6c:	40014800 	.word	0x40014800
 8004d70:	40001800 	.word	0x40001800
 8004d74:	40001c00 	.word	0x40001c00
 8004d78:	40002000 	.word	0x40002000

08004d7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b087      	sub	sp, #28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a1b      	ldr	r3, [r3, #32]
 8004d90:	f023 0201 	bic.w	r2, r3, #1
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f023 0303 	bic.w	r3, r3, #3
 8004db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f023 0302 	bic.w	r3, r3, #2
 8004dc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a20      	ldr	r2, [pc, #128]	@ (8004e54 <TIM_OC1_SetConfig+0xd8>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d003      	beq.n	8004de0 <TIM_OC1_SetConfig+0x64>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a1f      	ldr	r2, [pc, #124]	@ (8004e58 <TIM_OC1_SetConfig+0xdc>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d10c      	bne.n	8004dfa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f023 0308 	bic.w	r3, r3, #8
 8004de6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f023 0304 	bic.w	r3, r3, #4
 8004df8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a15      	ldr	r2, [pc, #84]	@ (8004e54 <TIM_OC1_SetConfig+0xd8>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d003      	beq.n	8004e0a <TIM_OC1_SetConfig+0x8e>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a14      	ldr	r2, [pc, #80]	@ (8004e58 <TIM_OC1_SetConfig+0xdc>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d111      	bne.n	8004e2e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	699b      	ldr	r3, [r3, #24]
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	621a      	str	r2, [r3, #32]
}
 8004e48:	bf00      	nop
 8004e4a:	371c      	adds	r7, #28
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr
 8004e54:	40010000 	.word	0x40010000
 8004e58:	40010400 	.word	0x40010400

08004e5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b087      	sub	sp, #28
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	f023 0210 	bic.w	r2, r3, #16
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	021b      	lsls	r3, r3, #8
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f023 0320 	bic.w	r3, r3, #32
 8004ea6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	011b      	lsls	r3, r3, #4
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a22      	ldr	r2, [pc, #136]	@ (8004f40 <TIM_OC2_SetConfig+0xe4>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d003      	beq.n	8004ec4 <TIM_OC2_SetConfig+0x68>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a21      	ldr	r2, [pc, #132]	@ (8004f44 <TIM_OC2_SetConfig+0xe8>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d10d      	bne.n	8004ee0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004eca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ede:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a17      	ldr	r2, [pc, #92]	@ (8004f40 <TIM_OC2_SetConfig+0xe4>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d003      	beq.n	8004ef0 <TIM_OC2_SetConfig+0x94>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a16      	ldr	r2, [pc, #88]	@ (8004f44 <TIM_OC2_SetConfig+0xe8>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d113      	bne.n	8004f18 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ef6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004efe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	621a      	str	r2, [r3, #32]
}
 8004f32:	bf00      	nop
 8004f34:	371c      	adds	r7, #28
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	40010000 	.word	0x40010000
 8004f44:	40010400 	.word	0x40010400

08004f48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b087      	sub	sp, #28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f023 0303 	bic.w	r3, r3, #3
 8004f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	021b      	lsls	r3, r3, #8
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a21      	ldr	r2, [pc, #132]	@ (8005028 <TIM_OC3_SetConfig+0xe0>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d003      	beq.n	8004fae <TIM_OC3_SetConfig+0x66>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a20      	ldr	r2, [pc, #128]	@ (800502c <TIM_OC3_SetConfig+0xe4>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d10d      	bne.n	8004fca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004fb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	021b      	lsls	r3, r3, #8
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004fc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a16      	ldr	r2, [pc, #88]	@ (8005028 <TIM_OC3_SetConfig+0xe0>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d003      	beq.n	8004fda <TIM_OC3_SetConfig+0x92>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a15      	ldr	r2, [pc, #84]	@ (800502c <TIM_OC3_SetConfig+0xe4>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d113      	bne.n	8005002 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004fe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	011b      	lsls	r3, r3, #4
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	011b      	lsls	r3, r3, #4
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	621a      	str	r2, [r3, #32]
}
 800501c:	bf00      	nop
 800501e:	371c      	adds	r7, #28
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr
 8005028:	40010000 	.word	0x40010000
 800502c:	40010400 	.word	0x40010400

08005030 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005030:	b480      	push	{r7}
 8005032:	b087      	sub	sp, #28
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800505e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005066:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	021b      	lsls	r3, r3, #8
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	4313      	orrs	r3, r2
 8005072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800507a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	031b      	lsls	r3, r3, #12
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	4313      	orrs	r3, r2
 8005086:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a12      	ldr	r2, [pc, #72]	@ (80050d4 <TIM_OC4_SetConfig+0xa4>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d003      	beq.n	8005098 <TIM_OC4_SetConfig+0x68>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a11      	ldr	r2, [pc, #68]	@ (80050d8 <TIM_OC4_SetConfig+0xa8>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d109      	bne.n	80050ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800509e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	019b      	lsls	r3, r3, #6
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	621a      	str	r2, [r3, #32]
}
 80050c6:	bf00      	nop
 80050c8:	371c      	adds	r7, #28
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	40010000 	.word	0x40010000
 80050d8:	40010400 	.word	0x40010400

080050dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050dc:	b480      	push	{r7}
 80050de:	b087      	sub	sp, #28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	f023 0201 	bic.w	r2, r3, #1
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	011b      	lsls	r3, r3, #4
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	4313      	orrs	r3, r2
 8005110:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f023 030a 	bic.w	r3, r3, #10
 8005118:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	4313      	orrs	r3, r2
 8005120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	621a      	str	r2, [r3, #32]
}
 800512e:	bf00      	nop
 8005130:	371c      	adds	r7, #28
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800513a:	b480      	push	{r7}
 800513c:	b087      	sub	sp, #28
 800513e:	af00      	add	r7, sp, #0
 8005140:	60f8      	str	r0, [r7, #12]
 8005142:	60b9      	str	r1, [r7, #8]
 8005144:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6a1b      	ldr	r3, [r3, #32]
 8005150:	f023 0210 	bic.w	r2, r3, #16
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005164:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	031b      	lsls	r3, r3, #12
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	4313      	orrs	r3, r2
 800516e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005176:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	011b      	lsls	r3, r3, #4
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	4313      	orrs	r3, r2
 8005180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	621a      	str	r2, [r3, #32]
}
 800518e:	bf00      	nop
 8005190:	371c      	adds	r7, #28
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800519a:	b480      	push	{r7}
 800519c:	b085      	sub	sp, #20
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
 80051a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	f043 0307 	orr.w	r3, r3, #7
 80051bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	609a      	str	r2, [r3, #8]
}
 80051c4:	bf00      	nop
 80051c6:	3714      	adds	r7, #20
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
 80051dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	021a      	lsls	r2, r3, #8
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	431a      	orrs	r2, r3
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	609a      	str	r2, [r3, #8]
}
 8005204:	bf00      	nop
 8005206:	371c      	adds	r7, #28
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005210:	b480      	push	{r7}
 8005212:	b087      	sub	sp, #28
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	f003 031f 	and.w	r3, r3, #31
 8005222:	2201      	movs	r2, #1
 8005224:	fa02 f303 	lsl.w	r3, r2, r3
 8005228:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6a1a      	ldr	r2, [r3, #32]
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	43db      	mvns	r3, r3
 8005232:	401a      	ands	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6a1a      	ldr	r2, [r3, #32]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	f003 031f 	and.w	r3, r3, #31
 8005242:	6879      	ldr	r1, [r7, #4]
 8005244:	fa01 f303 	lsl.w	r3, r1, r3
 8005248:	431a      	orrs	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	621a      	str	r2, [r3, #32]
}
 800524e:	bf00      	nop
 8005250:	371c      	adds	r7, #28
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
	...

0800525c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800526c:	2b01      	cmp	r3, #1
 800526e:	d101      	bne.n	8005274 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005270:	2302      	movs	r3, #2
 8005272:	e05a      	b.n	800532a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800529a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a21      	ldr	r2, [pc, #132]	@ (8005338 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d022      	beq.n	80052fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052c0:	d01d      	beq.n	80052fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a1d      	ldr	r2, [pc, #116]	@ (800533c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d018      	beq.n	80052fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a1b      	ldr	r2, [pc, #108]	@ (8005340 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d013      	beq.n	80052fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a1a      	ldr	r2, [pc, #104]	@ (8005344 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d00e      	beq.n	80052fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a18      	ldr	r2, [pc, #96]	@ (8005348 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d009      	beq.n	80052fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a17      	ldr	r2, [pc, #92]	@ (800534c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d004      	beq.n	80052fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a15      	ldr	r2, [pc, #84]	@ (8005350 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d10c      	bne.n	8005318 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005304:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	4313      	orrs	r3, r2
 800530e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68ba      	ldr	r2, [r7, #8]
 8005316:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3714      	adds	r7, #20
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	40010000 	.word	0x40010000
 800533c:	40000400 	.word	0x40000400
 8005340:	40000800 	.word	0x40000800
 8005344:	40000c00 	.word	0x40000c00
 8005348:	40010400 	.word	0x40010400
 800534c:	40014000 	.word	0x40014000
 8005350:	40001800 	.word	0x40001800

08005354 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800535e:	2300      	movs	r3, #0
 8005360:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005368:	2b01      	cmp	r3, #1
 800536a:	d101      	bne.n	8005370 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800536c:	2302      	movs	r3, #2
 800536e:	e03d      	b.n	80053ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	4313      	orrs	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	4313      	orrs	r3, r2
 8005392:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	4313      	orrs	r3, r2
 80053a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3714      	adds	r7, #20
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <siprintf>:
 8005420:	b40e      	push	{r1, r2, r3}
 8005422:	b510      	push	{r4, lr}
 8005424:	b09d      	sub	sp, #116	@ 0x74
 8005426:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005428:	9002      	str	r0, [sp, #8]
 800542a:	9006      	str	r0, [sp, #24]
 800542c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005430:	480a      	ldr	r0, [pc, #40]	@ (800545c <siprintf+0x3c>)
 8005432:	9107      	str	r1, [sp, #28]
 8005434:	9104      	str	r1, [sp, #16]
 8005436:	490a      	ldr	r1, [pc, #40]	@ (8005460 <siprintf+0x40>)
 8005438:	f853 2b04 	ldr.w	r2, [r3], #4
 800543c:	9105      	str	r1, [sp, #20]
 800543e:	2400      	movs	r4, #0
 8005440:	a902      	add	r1, sp, #8
 8005442:	6800      	ldr	r0, [r0, #0]
 8005444:	9301      	str	r3, [sp, #4]
 8005446:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005448:	f000 f994 	bl	8005774 <_svfiprintf_r>
 800544c:	9b02      	ldr	r3, [sp, #8]
 800544e:	701c      	strb	r4, [r3, #0]
 8005450:	b01d      	add	sp, #116	@ 0x74
 8005452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005456:	b003      	add	sp, #12
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	20000010 	.word	0x20000010
 8005460:	ffff0208 	.word	0xffff0208

08005464 <memset>:
 8005464:	4402      	add	r2, r0
 8005466:	4603      	mov	r3, r0
 8005468:	4293      	cmp	r3, r2
 800546a:	d100      	bne.n	800546e <memset+0xa>
 800546c:	4770      	bx	lr
 800546e:	f803 1b01 	strb.w	r1, [r3], #1
 8005472:	e7f9      	b.n	8005468 <memset+0x4>

08005474 <__errno>:
 8005474:	4b01      	ldr	r3, [pc, #4]	@ (800547c <__errno+0x8>)
 8005476:	6818      	ldr	r0, [r3, #0]
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	20000010 	.word	0x20000010

08005480 <__libc_init_array>:
 8005480:	b570      	push	{r4, r5, r6, lr}
 8005482:	4d0d      	ldr	r5, [pc, #52]	@ (80054b8 <__libc_init_array+0x38>)
 8005484:	4c0d      	ldr	r4, [pc, #52]	@ (80054bc <__libc_init_array+0x3c>)
 8005486:	1b64      	subs	r4, r4, r5
 8005488:	10a4      	asrs	r4, r4, #2
 800548a:	2600      	movs	r6, #0
 800548c:	42a6      	cmp	r6, r4
 800548e:	d109      	bne.n	80054a4 <__libc_init_array+0x24>
 8005490:	4d0b      	ldr	r5, [pc, #44]	@ (80054c0 <__libc_init_array+0x40>)
 8005492:	4c0c      	ldr	r4, [pc, #48]	@ (80054c4 <__libc_init_array+0x44>)
 8005494:	f000 fc64 	bl	8005d60 <_init>
 8005498:	1b64      	subs	r4, r4, r5
 800549a:	10a4      	asrs	r4, r4, #2
 800549c:	2600      	movs	r6, #0
 800549e:	42a6      	cmp	r6, r4
 80054a0:	d105      	bne.n	80054ae <__libc_init_array+0x2e>
 80054a2:	bd70      	pop	{r4, r5, r6, pc}
 80054a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80054a8:	4798      	blx	r3
 80054aa:	3601      	adds	r6, #1
 80054ac:	e7ee      	b.n	800548c <__libc_init_array+0xc>
 80054ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80054b2:	4798      	blx	r3
 80054b4:	3601      	adds	r6, #1
 80054b6:	e7f2      	b.n	800549e <__libc_init_array+0x1e>
 80054b8:	08005e40 	.word	0x08005e40
 80054bc:	08005e40 	.word	0x08005e40
 80054c0:	08005e40 	.word	0x08005e40
 80054c4:	08005e44 	.word	0x08005e44

080054c8 <__retarget_lock_acquire_recursive>:
 80054c8:	4770      	bx	lr

080054ca <__retarget_lock_release_recursive>:
 80054ca:	4770      	bx	lr

080054cc <_free_r>:
 80054cc:	b538      	push	{r3, r4, r5, lr}
 80054ce:	4605      	mov	r5, r0
 80054d0:	2900      	cmp	r1, #0
 80054d2:	d041      	beq.n	8005558 <_free_r+0x8c>
 80054d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054d8:	1f0c      	subs	r4, r1, #4
 80054da:	2b00      	cmp	r3, #0
 80054dc:	bfb8      	it	lt
 80054de:	18e4      	addlt	r4, r4, r3
 80054e0:	f000 f8e0 	bl	80056a4 <__malloc_lock>
 80054e4:	4a1d      	ldr	r2, [pc, #116]	@ (800555c <_free_r+0x90>)
 80054e6:	6813      	ldr	r3, [r2, #0]
 80054e8:	b933      	cbnz	r3, 80054f8 <_free_r+0x2c>
 80054ea:	6063      	str	r3, [r4, #4]
 80054ec:	6014      	str	r4, [r2, #0]
 80054ee:	4628      	mov	r0, r5
 80054f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054f4:	f000 b8dc 	b.w	80056b0 <__malloc_unlock>
 80054f8:	42a3      	cmp	r3, r4
 80054fa:	d908      	bls.n	800550e <_free_r+0x42>
 80054fc:	6820      	ldr	r0, [r4, #0]
 80054fe:	1821      	adds	r1, r4, r0
 8005500:	428b      	cmp	r3, r1
 8005502:	bf01      	itttt	eq
 8005504:	6819      	ldreq	r1, [r3, #0]
 8005506:	685b      	ldreq	r3, [r3, #4]
 8005508:	1809      	addeq	r1, r1, r0
 800550a:	6021      	streq	r1, [r4, #0]
 800550c:	e7ed      	b.n	80054ea <_free_r+0x1e>
 800550e:	461a      	mov	r2, r3
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	b10b      	cbz	r3, 8005518 <_free_r+0x4c>
 8005514:	42a3      	cmp	r3, r4
 8005516:	d9fa      	bls.n	800550e <_free_r+0x42>
 8005518:	6811      	ldr	r1, [r2, #0]
 800551a:	1850      	adds	r0, r2, r1
 800551c:	42a0      	cmp	r0, r4
 800551e:	d10b      	bne.n	8005538 <_free_r+0x6c>
 8005520:	6820      	ldr	r0, [r4, #0]
 8005522:	4401      	add	r1, r0
 8005524:	1850      	adds	r0, r2, r1
 8005526:	4283      	cmp	r3, r0
 8005528:	6011      	str	r1, [r2, #0]
 800552a:	d1e0      	bne.n	80054ee <_free_r+0x22>
 800552c:	6818      	ldr	r0, [r3, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	6053      	str	r3, [r2, #4]
 8005532:	4408      	add	r0, r1
 8005534:	6010      	str	r0, [r2, #0]
 8005536:	e7da      	b.n	80054ee <_free_r+0x22>
 8005538:	d902      	bls.n	8005540 <_free_r+0x74>
 800553a:	230c      	movs	r3, #12
 800553c:	602b      	str	r3, [r5, #0]
 800553e:	e7d6      	b.n	80054ee <_free_r+0x22>
 8005540:	6820      	ldr	r0, [r4, #0]
 8005542:	1821      	adds	r1, r4, r0
 8005544:	428b      	cmp	r3, r1
 8005546:	bf04      	itt	eq
 8005548:	6819      	ldreq	r1, [r3, #0]
 800554a:	685b      	ldreq	r3, [r3, #4]
 800554c:	6063      	str	r3, [r4, #4]
 800554e:	bf04      	itt	eq
 8005550:	1809      	addeq	r1, r1, r0
 8005552:	6021      	streq	r1, [r4, #0]
 8005554:	6054      	str	r4, [r2, #4]
 8005556:	e7ca      	b.n	80054ee <_free_r+0x22>
 8005558:	bd38      	pop	{r3, r4, r5, pc}
 800555a:	bf00      	nop
 800555c:	200011d4 	.word	0x200011d4

08005560 <sbrk_aligned>:
 8005560:	b570      	push	{r4, r5, r6, lr}
 8005562:	4e0f      	ldr	r6, [pc, #60]	@ (80055a0 <sbrk_aligned+0x40>)
 8005564:	460c      	mov	r4, r1
 8005566:	6831      	ldr	r1, [r6, #0]
 8005568:	4605      	mov	r5, r0
 800556a:	b911      	cbnz	r1, 8005572 <sbrk_aligned+0x12>
 800556c:	f000 fba4 	bl	8005cb8 <_sbrk_r>
 8005570:	6030      	str	r0, [r6, #0]
 8005572:	4621      	mov	r1, r4
 8005574:	4628      	mov	r0, r5
 8005576:	f000 fb9f 	bl	8005cb8 <_sbrk_r>
 800557a:	1c43      	adds	r3, r0, #1
 800557c:	d103      	bne.n	8005586 <sbrk_aligned+0x26>
 800557e:	f04f 34ff 	mov.w	r4, #4294967295
 8005582:	4620      	mov	r0, r4
 8005584:	bd70      	pop	{r4, r5, r6, pc}
 8005586:	1cc4      	adds	r4, r0, #3
 8005588:	f024 0403 	bic.w	r4, r4, #3
 800558c:	42a0      	cmp	r0, r4
 800558e:	d0f8      	beq.n	8005582 <sbrk_aligned+0x22>
 8005590:	1a21      	subs	r1, r4, r0
 8005592:	4628      	mov	r0, r5
 8005594:	f000 fb90 	bl	8005cb8 <_sbrk_r>
 8005598:	3001      	adds	r0, #1
 800559a:	d1f2      	bne.n	8005582 <sbrk_aligned+0x22>
 800559c:	e7ef      	b.n	800557e <sbrk_aligned+0x1e>
 800559e:	bf00      	nop
 80055a0:	200011d0 	.word	0x200011d0

080055a4 <_malloc_r>:
 80055a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055a8:	1ccd      	adds	r5, r1, #3
 80055aa:	f025 0503 	bic.w	r5, r5, #3
 80055ae:	3508      	adds	r5, #8
 80055b0:	2d0c      	cmp	r5, #12
 80055b2:	bf38      	it	cc
 80055b4:	250c      	movcc	r5, #12
 80055b6:	2d00      	cmp	r5, #0
 80055b8:	4606      	mov	r6, r0
 80055ba:	db01      	blt.n	80055c0 <_malloc_r+0x1c>
 80055bc:	42a9      	cmp	r1, r5
 80055be:	d904      	bls.n	80055ca <_malloc_r+0x26>
 80055c0:	230c      	movs	r3, #12
 80055c2:	6033      	str	r3, [r6, #0]
 80055c4:	2000      	movs	r0, #0
 80055c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80056a0 <_malloc_r+0xfc>
 80055ce:	f000 f869 	bl	80056a4 <__malloc_lock>
 80055d2:	f8d8 3000 	ldr.w	r3, [r8]
 80055d6:	461c      	mov	r4, r3
 80055d8:	bb44      	cbnz	r4, 800562c <_malloc_r+0x88>
 80055da:	4629      	mov	r1, r5
 80055dc:	4630      	mov	r0, r6
 80055de:	f7ff ffbf 	bl	8005560 <sbrk_aligned>
 80055e2:	1c43      	adds	r3, r0, #1
 80055e4:	4604      	mov	r4, r0
 80055e6:	d158      	bne.n	800569a <_malloc_r+0xf6>
 80055e8:	f8d8 4000 	ldr.w	r4, [r8]
 80055ec:	4627      	mov	r7, r4
 80055ee:	2f00      	cmp	r7, #0
 80055f0:	d143      	bne.n	800567a <_malloc_r+0xd6>
 80055f2:	2c00      	cmp	r4, #0
 80055f4:	d04b      	beq.n	800568e <_malloc_r+0xea>
 80055f6:	6823      	ldr	r3, [r4, #0]
 80055f8:	4639      	mov	r1, r7
 80055fa:	4630      	mov	r0, r6
 80055fc:	eb04 0903 	add.w	r9, r4, r3
 8005600:	f000 fb5a 	bl	8005cb8 <_sbrk_r>
 8005604:	4581      	cmp	r9, r0
 8005606:	d142      	bne.n	800568e <_malloc_r+0xea>
 8005608:	6821      	ldr	r1, [r4, #0]
 800560a:	1a6d      	subs	r5, r5, r1
 800560c:	4629      	mov	r1, r5
 800560e:	4630      	mov	r0, r6
 8005610:	f7ff ffa6 	bl	8005560 <sbrk_aligned>
 8005614:	3001      	adds	r0, #1
 8005616:	d03a      	beq.n	800568e <_malloc_r+0xea>
 8005618:	6823      	ldr	r3, [r4, #0]
 800561a:	442b      	add	r3, r5
 800561c:	6023      	str	r3, [r4, #0]
 800561e:	f8d8 3000 	ldr.w	r3, [r8]
 8005622:	685a      	ldr	r2, [r3, #4]
 8005624:	bb62      	cbnz	r2, 8005680 <_malloc_r+0xdc>
 8005626:	f8c8 7000 	str.w	r7, [r8]
 800562a:	e00f      	b.n	800564c <_malloc_r+0xa8>
 800562c:	6822      	ldr	r2, [r4, #0]
 800562e:	1b52      	subs	r2, r2, r5
 8005630:	d420      	bmi.n	8005674 <_malloc_r+0xd0>
 8005632:	2a0b      	cmp	r2, #11
 8005634:	d917      	bls.n	8005666 <_malloc_r+0xc2>
 8005636:	1961      	adds	r1, r4, r5
 8005638:	42a3      	cmp	r3, r4
 800563a:	6025      	str	r5, [r4, #0]
 800563c:	bf18      	it	ne
 800563e:	6059      	strne	r1, [r3, #4]
 8005640:	6863      	ldr	r3, [r4, #4]
 8005642:	bf08      	it	eq
 8005644:	f8c8 1000 	streq.w	r1, [r8]
 8005648:	5162      	str	r2, [r4, r5]
 800564a:	604b      	str	r3, [r1, #4]
 800564c:	4630      	mov	r0, r6
 800564e:	f000 f82f 	bl	80056b0 <__malloc_unlock>
 8005652:	f104 000b 	add.w	r0, r4, #11
 8005656:	1d23      	adds	r3, r4, #4
 8005658:	f020 0007 	bic.w	r0, r0, #7
 800565c:	1ac2      	subs	r2, r0, r3
 800565e:	bf1c      	itt	ne
 8005660:	1a1b      	subne	r3, r3, r0
 8005662:	50a3      	strne	r3, [r4, r2]
 8005664:	e7af      	b.n	80055c6 <_malloc_r+0x22>
 8005666:	6862      	ldr	r2, [r4, #4]
 8005668:	42a3      	cmp	r3, r4
 800566a:	bf0c      	ite	eq
 800566c:	f8c8 2000 	streq.w	r2, [r8]
 8005670:	605a      	strne	r2, [r3, #4]
 8005672:	e7eb      	b.n	800564c <_malloc_r+0xa8>
 8005674:	4623      	mov	r3, r4
 8005676:	6864      	ldr	r4, [r4, #4]
 8005678:	e7ae      	b.n	80055d8 <_malloc_r+0x34>
 800567a:	463c      	mov	r4, r7
 800567c:	687f      	ldr	r7, [r7, #4]
 800567e:	e7b6      	b.n	80055ee <_malloc_r+0x4a>
 8005680:	461a      	mov	r2, r3
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	42a3      	cmp	r3, r4
 8005686:	d1fb      	bne.n	8005680 <_malloc_r+0xdc>
 8005688:	2300      	movs	r3, #0
 800568a:	6053      	str	r3, [r2, #4]
 800568c:	e7de      	b.n	800564c <_malloc_r+0xa8>
 800568e:	230c      	movs	r3, #12
 8005690:	6033      	str	r3, [r6, #0]
 8005692:	4630      	mov	r0, r6
 8005694:	f000 f80c 	bl	80056b0 <__malloc_unlock>
 8005698:	e794      	b.n	80055c4 <_malloc_r+0x20>
 800569a:	6005      	str	r5, [r0, #0]
 800569c:	e7d6      	b.n	800564c <_malloc_r+0xa8>
 800569e:	bf00      	nop
 80056a0:	200011d4 	.word	0x200011d4

080056a4 <__malloc_lock>:
 80056a4:	4801      	ldr	r0, [pc, #4]	@ (80056ac <__malloc_lock+0x8>)
 80056a6:	f7ff bf0f 	b.w	80054c8 <__retarget_lock_acquire_recursive>
 80056aa:	bf00      	nop
 80056ac:	200011cc 	.word	0x200011cc

080056b0 <__malloc_unlock>:
 80056b0:	4801      	ldr	r0, [pc, #4]	@ (80056b8 <__malloc_unlock+0x8>)
 80056b2:	f7ff bf0a 	b.w	80054ca <__retarget_lock_release_recursive>
 80056b6:	bf00      	nop
 80056b8:	200011cc 	.word	0x200011cc

080056bc <__ssputs_r>:
 80056bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056c0:	688e      	ldr	r6, [r1, #8]
 80056c2:	461f      	mov	r7, r3
 80056c4:	42be      	cmp	r6, r7
 80056c6:	680b      	ldr	r3, [r1, #0]
 80056c8:	4682      	mov	sl, r0
 80056ca:	460c      	mov	r4, r1
 80056cc:	4690      	mov	r8, r2
 80056ce:	d82d      	bhi.n	800572c <__ssputs_r+0x70>
 80056d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80056d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80056d8:	d026      	beq.n	8005728 <__ssputs_r+0x6c>
 80056da:	6965      	ldr	r5, [r4, #20]
 80056dc:	6909      	ldr	r1, [r1, #16]
 80056de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80056e2:	eba3 0901 	sub.w	r9, r3, r1
 80056e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80056ea:	1c7b      	adds	r3, r7, #1
 80056ec:	444b      	add	r3, r9
 80056ee:	106d      	asrs	r5, r5, #1
 80056f0:	429d      	cmp	r5, r3
 80056f2:	bf38      	it	cc
 80056f4:	461d      	movcc	r5, r3
 80056f6:	0553      	lsls	r3, r2, #21
 80056f8:	d527      	bpl.n	800574a <__ssputs_r+0x8e>
 80056fa:	4629      	mov	r1, r5
 80056fc:	f7ff ff52 	bl	80055a4 <_malloc_r>
 8005700:	4606      	mov	r6, r0
 8005702:	b360      	cbz	r0, 800575e <__ssputs_r+0xa2>
 8005704:	6921      	ldr	r1, [r4, #16]
 8005706:	464a      	mov	r2, r9
 8005708:	f000 fae6 	bl	8005cd8 <memcpy>
 800570c:	89a3      	ldrh	r3, [r4, #12]
 800570e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005712:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005716:	81a3      	strh	r3, [r4, #12]
 8005718:	6126      	str	r6, [r4, #16]
 800571a:	6165      	str	r5, [r4, #20]
 800571c:	444e      	add	r6, r9
 800571e:	eba5 0509 	sub.w	r5, r5, r9
 8005722:	6026      	str	r6, [r4, #0]
 8005724:	60a5      	str	r5, [r4, #8]
 8005726:	463e      	mov	r6, r7
 8005728:	42be      	cmp	r6, r7
 800572a:	d900      	bls.n	800572e <__ssputs_r+0x72>
 800572c:	463e      	mov	r6, r7
 800572e:	6820      	ldr	r0, [r4, #0]
 8005730:	4632      	mov	r2, r6
 8005732:	4641      	mov	r1, r8
 8005734:	f000 faa6 	bl	8005c84 <memmove>
 8005738:	68a3      	ldr	r3, [r4, #8]
 800573a:	1b9b      	subs	r3, r3, r6
 800573c:	60a3      	str	r3, [r4, #8]
 800573e:	6823      	ldr	r3, [r4, #0]
 8005740:	4433      	add	r3, r6
 8005742:	6023      	str	r3, [r4, #0]
 8005744:	2000      	movs	r0, #0
 8005746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800574a:	462a      	mov	r2, r5
 800574c:	f000 fad2 	bl	8005cf4 <_realloc_r>
 8005750:	4606      	mov	r6, r0
 8005752:	2800      	cmp	r0, #0
 8005754:	d1e0      	bne.n	8005718 <__ssputs_r+0x5c>
 8005756:	6921      	ldr	r1, [r4, #16]
 8005758:	4650      	mov	r0, sl
 800575a:	f7ff feb7 	bl	80054cc <_free_r>
 800575e:	230c      	movs	r3, #12
 8005760:	f8ca 3000 	str.w	r3, [sl]
 8005764:	89a3      	ldrh	r3, [r4, #12]
 8005766:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800576a:	81a3      	strh	r3, [r4, #12]
 800576c:	f04f 30ff 	mov.w	r0, #4294967295
 8005770:	e7e9      	b.n	8005746 <__ssputs_r+0x8a>
	...

08005774 <_svfiprintf_r>:
 8005774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005778:	4698      	mov	r8, r3
 800577a:	898b      	ldrh	r3, [r1, #12]
 800577c:	061b      	lsls	r3, r3, #24
 800577e:	b09d      	sub	sp, #116	@ 0x74
 8005780:	4607      	mov	r7, r0
 8005782:	460d      	mov	r5, r1
 8005784:	4614      	mov	r4, r2
 8005786:	d510      	bpl.n	80057aa <_svfiprintf_r+0x36>
 8005788:	690b      	ldr	r3, [r1, #16]
 800578a:	b973      	cbnz	r3, 80057aa <_svfiprintf_r+0x36>
 800578c:	2140      	movs	r1, #64	@ 0x40
 800578e:	f7ff ff09 	bl	80055a4 <_malloc_r>
 8005792:	6028      	str	r0, [r5, #0]
 8005794:	6128      	str	r0, [r5, #16]
 8005796:	b930      	cbnz	r0, 80057a6 <_svfiprintf_r+0x32>
 8005798:	230c      	movs	r3, #12
 800579a:	603b      	str	r3, [r7, #0]
 800579c:	f04f 30ff 	mov.w	r0, #4294967295
 80057a0:	b01d      	add	sp, #116	@ 0x74
 80057a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057a6:	2340      	movs	r3, #64	@ 0x40
 80057a8:	616b      	str	r3, [r5, #20]
 80057aa:	2300      	movs	r3, #0
 80057ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80057ae:	2320      	movs	r3, #32
 80057b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80057b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80057b8:	2330      	movs	r3, #48	@ 0x30
 80057ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005958 <_svfiprintf_r+0x1e4>
 80057be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80057c2:	f04f 0901 	mov.w	r9, #1
 80057c6:	4623      	mov	r3, r4
 80057c8:	469a      	mov	sl, r3
 80057ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057ce:	b10a      	cbz	r2, 80057d4 <_svfiprintf_r+0x60>
 80057d0:	2a25      	cmp	r2, #37	@ 0x25
 80057d2:	d1f9      	bne.n	80057c8 <_svfiprintf_r+0x54>
 80057d4:	ebba 0b04 	subs.w	fp, sl, r4
 80057d8:	d00b      	beq.n	80057f2 <_svfiprintf_r+0x7e>
 80057da:	465b      	mov	r3, fp
 80057dc:	4622      	mov	r2, r4
 80057de:	4629      	mov	r1, r5
 80057e0:	4638      	mov	r0, r7
 80057e2:	f7ff ff6b 	bl	80056bc <__ssputs_r>
 80057e6:	3001      	adds	r0, #1
 80057e8:	f000 80a7 	beq.w	800593a <_svfiprintf_r+0x1c6>
 80057ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057ee:	445a      	add	r2, fp
 80057f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80057f2:	f89a 3000 	ldrb.w	r3, [sl]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 809f 	beq.w	800593a <_svfiprintf_r+0x1c6>
 80057fc:	2300      	movs	r3, #0
 80057fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005802:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005806:	f10a 0a01 	add.w	sl, sl, #1
 800580a:	9304      	str	r3, [sp, #16]
 800580c:	9307      	str	r3, [sp, #28]
 800580e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005812:	931a      	str	r3, [sp, #104]	@ 0x68
 8005814:	4654      	mov	r4, sl
 8005816:	2205      	movs	r2, #5
 8005818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800581c:	484e      	ldr	r0, [pc, #312]	@ (8005958 <_svfiprintf_r+0x1e4>)
 800581e:	f7fa fcf7 	bl	8000210 <memchr>
 8005822:	9a04      	ldr	r2, [sp, #16]
 8005824:	b9d8      	cbnz	r0, 800585e <_svfiprintf_r+0xea>
 8005826:	06d0      	lsls	r0, r2, #27
 8005828:	bf44      	itt	mi
 800582a:	2320      	movmi	r3, #32
 800582c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005830:	0711      	lsls	r1, r2, #28
 8005832:	bf44      	itt	mi
 8005834:	232b      	movmi	r3, #43	@ 0x2b
 8005836:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800583a:	f89a 3000 	ldrb.w	r3, [sl]
 800583e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005840:	d015      	beq.n	800586e <_svfiprintf_r+0xfa>
 8005842:	9a07      	ldr	r2, [sp, #28]
 8005844:	4654      	mov	r4, sl
 8005846:	2000      	movs	r0, #0
 8005848:	f04f 0c0a 	mov.w	ip, #10
 800584c:	4621      	mov	r1, r4
 800584e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005852:	3b30      	subs	r3, #48	@ 0x30
 8005854:	2b09      	cmp	r3, #9
 8005856:	d94b      	bls.n	80058f0 <_svfiprintf_r+0x17c>
 8005858:	b1b0      	cbz	r0, 8005888 <_svfiprintf_r+0x114>
 800585a:	9207      	str	r2, [sp, #28]
 800585c:	e014      	b.n	8005888 <_svfiprintf_r+0x114>
 800585e:	eba0 0308 	sub.w	r3, r0, r8
 8005862:	fa09 f303 	lsl.w	r3, r9, r3
 8005866:	4313      	orrs	r3, r2
 8005868:	9304      	str	r3, [sp, #16]
 800586a:	46a2      	mov	sl, r4
 800586c:	e7d2      	b.n	8005814 <_svfiprintf_r+0xa0>
 800586e:	9b03      	ldr	r3, [sp, #12]
 8005870:	1d19      	adds	r1, r3, #4
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	9103      	str	r1, [sp, #12]
 8005876:	2b00      	cmp	r3, #0
 8005878:	bfbb      	ittet	lt
 800587a:	425b      	neglt	r3, r3
 800587c:	f042 0202 	orrlt.w	r2, r2, #2
 8005880:	9307      	strge	r3, [sp, #28]
 8005882:	9307      	strlt	r3, [sp, #28]
 8005884:	bfb8      	it	lt
 8005886:	9204      	strlt	r2, [sp, #16]
 8005888:	7823      	ldrb	r3, [r4, #0]
 800588a:	2b2e      	cmp	r3, #46	@ 0x2e
 800588c:	d10a      	bne.n	80058a4 <_svfiprintf_r+0x130>
 800588e:	7863      	ldrb	r3, [r4, #1]
 8005890:	2b2a      	cmp	r3, #42	@ 0x2a
 8005892:	d132      	bne.n	80058fa <_svfiprintf_r+0x186>
 8005894:	9b03      	ldr	r3, [sp, #12]
 8005896:	1d1a      	adds	r2, r3, #4
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	9203      	str	r2, [sp, #12]
 800589c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80058a0:	3402      	adds	r4, #2
 80058a2:	9305      	str	r3, [sp, #20]
 80058a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005968 <_svfiprintf_r+0x1f4>
 80058a8:	7821      	ldrb	r1, [r4, #0]
 80058aa:	2203      	movs	r2, #3
 80058ac:	4650      	mov	r0, sl
 80058ae:	f7fa fcaf 	bl	8000210 <memchr>
 80058b2:	b138      	cbz	r0, 80058c4 <_svfiprintf_r+0x150>
 80058b4:	9b04      	ldr	r3, [sp, #16]
 80058b6:	eba0 000a 	sub.w	r0, r0, sl
 80058ba:	2240      	movs	r2, #64	@ 0x40
 80058bc:	4082      	lsls	r2, r0
 80058be:	4313      	orrs	r3, r2
 80058c0:	3401      	adds	r4, #1
 80058c2:	9304      	str	r3, [sp, #16]
 80058c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058c8:	4824      	ldr	r0, [pc, #144]	@ (800595c <_svfiprintf_r+0x1e8>)
 80058ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80058ce:	2206      	movs	r2, #6
 80058d0:	f7fa fc9e 	bl	8000210 <memchr>
 80058d4:	2800      	cmp	r0, #0
 80058d6:	d036      	beq.n	8005946 <_svfiprintf_r+0x1d2>
 80058d8:	4b21      	ldr	r3, [pc, #132]	@ (8005960 <_svfiprintf_r+0x1ec>)
 80058da:	bb1b      	cbnz	r3, 8005924 <_svfiprintf_r+0x1b0>
 80058dc:	9b03      	ldr	r3, [sp, #12]
 80058de:	3307      	adds	r3, #7
 80058e0:	f023 0307 	bic.w	r3, r3, #7
 80058e4:	3308      	adds	r3, #8
 80058e6:	9303      	str	r3, [sp, #12]
 80058e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058ea:	4433      	add	r3, r6
 80058ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80058ee:	e76a      	b.n	80057c6 <_svfiprintf_r+0x52>
 80058f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80058f4:	460c      	mov	r4, r1
 80058f6:	2001      	movs	r0, #1
 80058f8:	e7a8      	b.n	800584c <_svfiprintf_r+0xd8>
 80058fa:	2300      	movs	r3, #0
 80058fc:	3401      	adds	r4, #1
 80058fe:	9305      	str	r3, [sp, #20]
 8005900:	4619      	mov	r1, r3
 8005902:	f04f 0c0a 	mov.w	ip, #10
 8005906:	4620      	mov	r0, r4
 8005908:	f810 2b01 	ldrb.w	r2, [r0], #1
 800590c:	3a30      	subs	r2, #48	@ 0x30
 800590e:	2a09      	cmp	r2, #9
 8005910:	d903      	bls.n	800591a <_svfiprintf_r+0x1a6>
 8005912:	2b00      	cmp	r3, #0
 8005914:	d0c6      	beq.n	80058a4 <_svfiprintf_r+0x130>
 8005916:	9105      	str	r1, [sp, #20]
 8005918:	e7c4      	b.n	80058a4 <_svfiprintf_r+0x130>
 800591a:	fb0c 2101 	mla	r1, ip, r1, r2
 800591e:	4604      	mov	r4, r0
 8005920:	2301      	movs	r3, #1
 8005922:	e7f0      	b.n	8005906 <_svfiprintf_r+0x192>
 8005924:	ab03      	add	r3, sp, #12
 8005926:	9300      	str	r3, [sp, #0]
 8005928:	462a      	mov	r2, r5
 800592a:	4b0e      	ldr	r3, [pc, #56]	@ (8005964 <_svfiprintf_r+0x1f0>)
 800592c:	a904      	add	r1, sp, #16
 800592e:	4638      	mov	r0, r7
 8005930:	f3af 8000 	nop.w
 8005934:	1c42      	adds	r2, r0, #1
 8005936:	4606      	mov	r6, r0
 8005938:	d1d6      	bne.n	80058e8 <_svfiprintf_r+0x174>
 800593a:	89ab      	ldrh	r3, [r5, #12]
 800593c:	065b      	lsls	r3, r3, #25
 800593e:	f53f af2d 	bmi.w	800579c <_svfiprintf_r+0x28>
 8005942:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005944:	e72c      	b.n	80057a0 <_svfiprintf_r+0x2c>
 8005946:	ab03      	add	r3, sp, #12
 8005948:	9300      	str	r3, [sp, #0]
 800594a:	462a      	mov	r2, r5
 800594c:	4b05      	ldr	r3, [pc, #20]	@ (8005964 <_svfiprintf_r+0x1f0>)
 800594e:	a904      	add	r1, sp, #16
 8005950:	4638      	mov	r0, r7
 8005952:	f000 f879 	bl	8005a48 <_printf_i>
 8005956:	e7ed      	b.n	8005934 <_svfiprintf_r+0x1c0>
 8005958:	08005e04 	.word	0x08005e04
 800595c:	08005e0e 	.word	0x08005e0e
 8005960:	00000000 	.word	0x00000000
 8005964:	080056bd 	.word	0x080056bd
 8005968:	08005e0a 	.word	0x08005e0a

0800596c <_printf_common>:
 800596c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005970:	4616      	mov	r6, r2
 8005972:	4698      	mov	r8, r3
 8005974:	688a      	ldr	r2, [r1, #8]
 8005976:	690b      	ldr	r3, [r1, #16]
 8005978:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800597c:	4293      	cmp	r3, r2
 800597e:	bfb8      	it	lt
 8005980:	4613      	movlt	r3, r2
 8005982:	6033      	str	r3, [r6, #0]
 8005984:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005988:	4607      	mov	r7, r0
 800598a:	460c      	mov	r4, r1
 800598c:	b10a      	cbz	r2, 8005992 <_printf_common+0x26>
 800598e:	3301      	adds	r3, #1
 8005990:	6033      	str	r3, [r6, #0]
 8005992:	6823      	ldr	r3, [r4, #0]
 8005994:	0699      	lsls	r1, r3, #26
 8005996:	bf42      	ittt	mi
 8005998:	6833      	ldrmi	r3, [r6, #0]
 800599a:	3302      	addmi	r3, #2
 800599c:	6033      	strmi	r3, [r6, #0]
 800599e:	6825      	ldr	r5, [r4, #0]
 80059a0:	f015 0506 	ands.w	r5, r5, #6
 80059a4:	d106      	bne.n	80059b4 <_printf_common+0x48>
 80059a6:	f104 0a19 	add.w	sl, r4, #25
 80059aa:	68e3      	ldr	r3, [r4, #12]
 80059ac:	6832      	ldr	r2, [r6, #0]
 80059ae:	1a9b      	subs	r3, r3, r2
 80059b0:	42ab      	cmp	r3, r5
 80059b2:	dc26      	bgt.n	8005a02 <_printf_common+0x96>
 80059b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80059b8:	6822      	ldr	r2, [r4, #0]
 80059ba:	3b00      	subs	r3, #0
 80059bc:	bf18      	it	ne
 80059be:	2301      	movne	r3, #1
 80059c0:	0692      	lsls	r2, r2, #26
 80059c2:	d42b      	bmi.n	8005a1c <_printf_common+0xb0>
 80059c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80059c8:	4641      	mov	r1, r8
 80059ca:	4638      	mov	r0, r7
 80059cc:	47c8      	blx	r9
 80059ce:	3001      	adds	r0, #1
 80059d0:	d01e      	beq.n	8005a10 <_printf_common+0xa4>
 80059d2:	6823      	ldr	r3, [r4, #0]
 80059d4:	6922      	ldr	r2, [r4, #16]
 80059d6:	f003 0306 	and.w	r3, r3, #6
 80059da:	2b04      	cmp	r3, #4
 80059dc:	bf02      	ittt	eq
 80059de:	68e5      	ldreq	r5, [r4, #12]
 80059e0:	6833      	ldreq	r3, [r6, #0]
 80059e2:	1aed      	subeq	r5, r5, r3
 80059e4:	68a3      	ldr	r3, [r4, #8]
 80059e6:	bf0c      	ite	eq
 80059e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059ec:	2500      	movne	r5, #0
 80059ee:	4293      	cmp	r3, r2
 80059f0:	bfc4      	itt	gt
 80059f2:	1a9b      	subgt	r3, r3, r2
 80059f4:	18ed      	addgt	r5, r5, r3
 80059f6:	2600      	movs	r6, #0
 80059f8:	341a      	adds	r4, #26
 80059fa:	42b5      	cmp	r5, r6
 80059fc:	d11a      	bne.n	8005a34 <_printf_common+0xc8>
 80059fe:	2000      	movs	r0, #0
 8005a00:	e008      	b.n	8005a14 <_printf_common+0xa8>
 8005a02:	2301      	movs	r3, #1
 8005a04:	4652      	mov	r2, sl
 8005a06:	4641      	mov	r1, r8
 8005a08:	4638      	mov	r0, r7
 8005a0a:	47c8      	blx	r9
 8005a0c:	3001      	adds	r0, #1
 8005a0e:	d103      	bne.n	8005a18 <_printf_common+0xac>
 8005a10:	f04f 30ff 	mov.w	r0, #4294967295
 8005a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a18:	3501      	adds	r5, #1
 8005a1a:	e7c6      	b.n	80059aa <_printf_common+0x3e>
 8005a1c:	18e1      	adds	r1, r4, r3
 8005a1e:	1c5a      	adds	r2, r3, #1
 8005a20:	2030      	movs	r0, #48	@ 0x30
 8005a22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005a26:	4422      	add	r2, r4
 8005a28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005a2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005a30:	3302      	adds	r3, #2
 8005a32:	e7c7      	b.n	80059c4 <_printf_common+0x58>
 8005a34:	2301      	movs	r3, #1
 8005a36:	4622      	mov	r2, r4
 8005a38:	4641      	mov	r1, r8
 8005a3a:	4638      	mov	r0, r7
 8005a3c:	47c8      	blx	r9
 8005a3e:	3001      	adds	r0, #1
 8005a40:	d0e6      	beq.n	8005a10 <_printf_common+0xa4>
 8005a42:	3601      	adds	r6, #1
 8005a44:	e7d9      	b.n	80059fa <_printf_common+0x8e>
	...

08005a48 <_printf_i>:
 8005a48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a4c:	7e0f      	ldrb	r7, [r1, #24]
 8005a4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005a50:	2f78      	cmp	r7, #120	@ 0x78
 8005a52:	4691      	mov	r9, r2
 8005a54:	4680      	mov	r8, r0
 8005a56:	460c      	mov	r4, r1
 8005a58:	469a      	mov	sl, r3
 8005a5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005a5e:	d807      	bhi.n	8005a70 <_printf_i+0x28>
 8005a60:	2f62      	cmp	r7, #98	@ 0x62
 8005a62:	d80a      	bhi.n	8005a7a <_printf_i+0x32>
 8005a64:	2f00      	cmp	r7, #0
 8005a66:	f000 80d1 	beq.w	8005c0c <_printf_i+0x1c4>
 8005a6a:	2f58      	cmp	r7, #88	@ 0x58
 8005a6c:	f000 80b8 	beq.w	8005be0 <_printf_i+0x198>
 8005a70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005a78:	e03a      	b.n	8005af0 <_printf_i+0xa8>
 8005a7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005a7e:	2b15      	cmp	r3, #21
 8005a80:	d8f6      	bhi.n	8005a70 <_printf_i+0x28>
 8005a82:	a101      	add	r1, pc, #4	@ (adr r1, 8005a88 <_printf_i+0x40>)
 8005a84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a88:	08005ae1 	.word	0x08005ae1
 8005a8c:	08005af5 	.word	0x08005af5
 8005a90:	08005a71 	.word	0x08005a71
 8005a94:	08005a71 	.word	0x08005a71
 8005a98:	08005a71 	.word	0x08005a71
 8005a9c:	08005a71 	.word	0x08005a71
 8005aa0:	08005af5 	.word	0x08005af5
 8005aa4:	08005a71 	.word	0x08005a71
 8005aa8:	08005a71 	.word	0x08005a71
 8005aac:	08005a71 	.word	0x08005a71
 8005ab0:	08005a71 	.word	0x08005a71
 8005ab4:	08005bf3 	.word	0x08005bf3
 8005ab8:	08005b1f 	.word	0x08005b1f
 8005abc:	08005bad 	.word	0x08005bad
 8005ac0:	08005a71 	.word	0x08005a71
 8005ac4:	08005a71 	.word	0x08005a71
 8005ac8:	08005c15 	.word	0x08005c15
 8005acc:	08005a71 	.word	0x08005a71
 8005ad0:	08005b1f 	.word	0x08005b1f
 8005ad4:	08005a71 	.word	0x08005a71
 8005ad8:	08005a71 	.word	0x08005a71
 8005adc:	08005bb5 	.word	0x08005bb5
 8005ae0:	6833      	ldr	r3, [r6, #0]
 8005ae2:	1d1a      	adds	r2, r3, #4
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6032      	str	r2, [r6, #0]
 8005ae8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005aec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005af0:	2301      	movs	r3, #1
 8005af2:	e09c      	b.n	8005c2e <_printf_i+0x1e6>
 8005af4:	6833      	ldr	r3, [r6, #0]
 8005af6:	6820      	ldr	r0, [r4, #0]
 8005af8:	1d19      	adds	r1, r3, #4
 8005afa:	6031      	str	r1, [r6, #0]
 8005afc:	0606      	lsls	r6, r0, #24
 8005afe:	d501      	bpl.n	8005b04 <_printf_i+0xbc>
 8005b00:	681d      	ldr	r5, [r3, #0]
 8005b02:	e003      	b.n	8005b0c <_printf_i+0xc4>
 8005b04:	0645      	lsls	r5, r0, #25
 8005b06:	d5fb      	bpl.n	8005b00 <_printf_i+0xb8>
 8005b08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005b0c:	2d00      	cmp	r5, #0
 8005b0e:	da03      	bge.n	8005b18 <_printf_i+0xd0>
 8005b10:	232d      	movs	r3, #45	@ 0x2d
 8005b12:	426d      	negs	r5, r5
 8005b14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b18:	4858      	ldr	r0, [pc, #352]	@ (8005c7c <_printf_i+0x234>)
 8005b1a:	230a      	movs	r3, #10
 8005b1c:	e011      	b.n	8005b42 <_printf_i+0xfa>
 8005b1e:	6821      	ldr	r1, [r4, #0]
 8005b20:	6833      	ldr	r3, [r6, #0]
 8005b22:	0608      	lsls	r0, r1, #24
 8005b24:	f853 5b04 	ldr.w	r5, [r3], #4
 8005b28:	d402      	bmi.n	8005b30 <_printf_i+0xe8>
 8005b2a:	0649      	lsls	r1, r1, #25
 8005b2c:	bf48      	it	mi
 8005b2e:	b2ad      	uxthmi	r5, r5
 8005b30:	2f6f      	cmp	r7, #111	@ 0x6f
 8005b32:	4852      	ldr	r0, [pc, #328]	@ (8005c7c <_printf_i+0x234>)
 8005b34:	6033      	str	r3, [r6, #0]
 8005b36:	bf14      	ite	ne
 8005b38:	230a      	movne	r3, #10
 8005b3a:	2308      	moveq	r3, #8
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005b42:	6866      	ldr	r6, [r4, #4]
 8005b44:	60a6      	str	r6, [r4, #8]
 8005b46:	2e00      	cmp	r6, #0
 8005b48:	db05      	blt.n	8005b56 <_printf_i+0x10e>
 8005b4a:	6821      	ldr	r1, [r4, #0]
 8005b4c:	432e      	orrs	r6, r5
 8005b4e:	f021 0104 	bic.w	r1, r1, #4
 8005b52:	6021      	str	r1, [r4, #0]
 8005b54:	d04b      	beq.n	8005bee <_printf_i+0x1a6>
 8005b56:	4616      	mov	r6, r2
 8005b58:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b5c:	fb03 5711 	mls	r7, r3, r1, r5
 8005b60:	5dc7      	ldrb	r7, [r0, r7]
 8005b62:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b66:	462f      	mov	r7, r5
 8005b68:	42bb      	cmp	r3, r7
 8005b6a:	460d      	mov	r5, r1
 8005b6c:	d9f4      	bls.n	8005b58 <_printf_i+0x110>
 8005b6e:	2b08      	cmp	r3, #8
 8005b70:	d10b      	bne.n	8005b8a <_printf_i+0x142>
 8005b72:	6823      	ldr	r3, [r4, #0]
 8005b74:	07df      	lsls	r7, r3, #31
 8005b76:	d508      	bpl.n	8005b8a <_printf_i+0x142>
 8005b78:	6923      	ldr	r3, [r4, #16]
 8005b7a:	6861      	ldr	r1, [r4, #4]
 8005b7c:	4299      	cmp	r1, r3
 8005b7e:	bfde      	ittt	le
 8005b80:	2330      	movle	r3, #48	@ 0x30
 8005b82:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b86:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b8a:	1b92      	subs	r2, r2, r6
 8005b8c:	6122      	str	r2, [r4, #16]
 8005b8e:	f8cd a000 	str.w	sl, [sp]
 8005b92:	464b      	mov	r3, r9
 8005b94:	aa03      	add	r2, sp, #12
 8005b96:	4621      	mov	r1, r4
 8005b98:	4640      	mov	r0, r8
 8005b9a:	f7ff fee7 	bl	800596c <_printf_common>
 8005b9e:	3001      	adds	r0, #1
 8005ba0:	d14a      	bne.n	8005c38 <_printf_i+0x1f0>
 8005ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba6:	b004      	add	sp, #16
 8005ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bac:	6823      	ldr	r3, [r4, #0]
 8005bae:	f043 0320 	orr.w	r3, r3, #32
 8005bb2:	6023      	str	r3, [r4, #0]
 8005bb4:	4832      	ldr	r0, [pc, #200]	@ (8005c80 <_printf_i+0x238>)
 8005bb6:	2778      	movs	r7, #120	@ 0x78
 8005bb8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005bbc:	6823      	ldr	r3, [r4, #0]
 8005bbe:	6831      	ldr	r1, [r6, #0]
 8005bc0:	061f      	lsls	r7, r3, #24
 8005bc2:	f851 5b04 	ldr.w	r5, [r1], #4
 8005bc6:	d402      	bmi.n	8005bce <_printf_i+0x186>
 8005bc8:	065f      	lsls	r7, r3, #25
 8005bca:	bf48      	it	mi
 8005bcc:	b2ad      	uxthmi	r5, r5
 8005bce:	6031      	str	r1, [r6, #0]
 8005bd0:	07d9      	lsls	r1, r3, #31
 8005bd2:	bf44      	itt	mi
 8005bd4:	f043 0320 	orrmi.w	r3, r3, #32
 8005bd8:	6023      	strmi	r3, [r4, #0]
 8005bda:	b11d      	cbz	r5, 8005be4 <_printf_i+0x19c>
 8005bdc:	2310      	movs	r3, #16
 8005bde:	e7ad      	b.n	8005b3c <_printf_i+0xf4>
 8005be0:	4826      	ldr	r0, [pc, #152]	@ (8005c7c <_printf_i+0x234>)
 8005be2:	e7e9      	b.n	8005bb8 <_printf_i+0x170>
 8005be4:	6823      	ldr	r3, [r4, #0]
 8005be6:	f023 0320 	bic.w	r3, r3, #32
 8005bea:	6023      	str	r3, [r4, #0]
 8005bec:	e7f6      	b.n	8005bdc <_printf_i+0x194>
 8005bee:	4616      	mov	r6, r2
 8005bf0:	e7bd      	b.n	8005b6e <_printf_i+0x126>
 8005bf2:	6833      	ldr	r3, [r6, #0]
 8005bf4:	6825      	ldr	r5, [r4, #0]
 8005bf6:	6961      	ldr	r1, [r4, #20]
 8005bf8:	1d18      	adds	r0, r3, #4
 8005bfa:	6030      	str	r0, [r6, #0]
 8005bfc:	062e      	lsls	r6, r5, #24
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	d501      	bpl.n	8005c06 <_printf_i+0x1be>
 8005c02:	6019      	str	r1, [r3, #0]
 8005c04:	e002      	b.n	8005c0c <_printf_i+0x1c4>
 8005c06:	0668      	lsls	r0, r5, #25
 8005c08:	d5fb      	bpl.n	8005c02 <_printf_i+0x1ba>
 8005c0a:	8019      	strh	r1, [r3, #0]
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	6123      	str	r3, [r4, #16]
 8005c10:	4616      	mov	r6, r2
 8005c12:	e7bc      	b.n	8005b8e <_printf_i+0x146>
 8005c14:	6833      	ldr	r3, [r6, #0]
 8005c16:	1d1a      	adds	r2, r3, #4
 8005c18:	6032      	str	r2, [r6, #0]
 8005c1a:	681e      	ldr	r6, [r3, #0]
 8005c1c:	6862      	ldr	r2, [r4, #4]
 8005c1e:	2100      	movs	r1, #0
 8005c20:	4630      	mov	r0, r6
 8005c22:	f7fa faf5 	bl	8000210 <memchr>
 8005c26:	b108      	cbz	r0, 8005c2c <_printf_i+0x1e4>
 8005c28:	1b80      	subs	r0, r0, r6
 8005c2a:	6060      	str	r0, [r4, #4]
 8005c2c:	6863      	ldr	r3, [r4, #4]
 8005c2e:	6123      	str	r3, [r4, #16]
 8005c30:	2300      	movs	r3, #0
 8005c32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c36:	e7aa      	b.n	8005b8e <_printf_i+0x146>
 8005c38:	6923      	ldr	r3, [r4, #16]
 8005c3a:	4632      	mov	r2, r6
 8005c3c:	4649      	mov	r1, r9
 8005c3e:	4640      	mov	r0, r8
 8005c40:	47d0      	blx	sl
 8005c42:	3001      	adds	r0, #1
 8005c44:	d0ad      	beq.n	8005ba2 <_printf_i+0x15a>
 8005c46:	6823      	ldr	r3, [r4, #0]
 8005c48:	079b      	lsls	r3, r3, #30
 8005c4a:	d413      	bmi.n	8005c74 <_printf_i+0x22c>
 8005c4c:	68e0      	ldr	r0, [r4, #12]
 8005c4e:	9b03      	ldr	r3, [sp, #12]
 8005c50:	4298      	cmp	r0, r3
 8005c52:	bfb8      	it	lt
 8005c54:	4618      	movlt	r0, r3
 8005c56:	e7a6      	b.n	8005ba6 <_printf_i+0x15e>
 8005c58:	2301      	movs	r3, #1
 8005c5a:	4632      	mov	r2, r6
 8005c5c:	4649      	mov	r1, r9
 8005c5e:	4640      	mov	r0, r8
 8005c60:	47d0      	blx	sl
 8005c62:	3001      	adds	r0, #1
 8005c64:	d09d      	beq.n	8005ba2 <_printf_i+0x15a>
 8005c66:	3501      	adds	r5, #1
 8005c68:	68e3      	ldr	r3, [r4, #12]
 8005c6a:	9903      	ldr	r1, [sp, #12]
 8005c6c:	1a5b      	subs	r3, r3, r1
 8005c6e:	42ab      	cmp	r3, r5
 8005c70:	dcf2      	bgt.n	8005c58 <_printf_i+0x210>
 8005c72:	e7eb      	b.n	8005c4c <_printf_i+0x204>
 8005c74:	2500      	movs	r5, #0
 8005c76:	f104 0619 	add.w	r6, r4, #25
 8005c7a:	e7f5      	b.n	8005c68 <_printf_i+0x220>
 8005c7c:	08005e15 	.word	0x08005e15
 8005c80:	08005e26 	.word	0x08005e26

08005c84 <memmove>:
 8005c84:	4288      	cmp	r0, r1
 8005c86:	b510      	push	{r4, lr}
 8005c88:	eb01 0402 	add.w	r4, r1, r2
 8005c8c:	d902      	bls.n	8005c94 <memmove+0x10>
 8005c8e:	4284      	cmp	r4, r0
 8005c90:	4623      	mov	r3, r4
 8005c92:	d807      	bhi.n	8005ca4 <memmove+0x20>
 8005c94:	1e43      	subs	r3, r0, #1
 8005c96:	42a1      	cmp	r1, r4
 8005c98:	d008      	beq.n	8005cac <memmove+0x28>
 8005c9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005ca2:	e7f8      	b.n	8005c96 <memmove+0x12>
 8005ca4:	4402      	add	r2, r0
 8005ca6:	4601      	mov	r1, r0
 8005ca8:	428a      	cmp	r2, r1
 8005caa:	d100      	bne.n	8005cae <memmove+0x2a>
 8005cac:	bd10      	pop	{r4, pc}
 8005cae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005cb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005cb6:	e7f7      	b.n	8005ca8 <memmove+0x24>

08005cb8 <_sbrk_r>:
 8005cb8:	b538      	push	{r3, r4, r5, lr}
 8005cba:	4d06      	ldr	r5, [pc, #24]	@ (8005cd4 <_sbrk_r+0x1c>)
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	4604      	mov	r4, r0
 8005cc0:	4608      	mov	r0, r1
 8005cc2:	602b      	str	r3, [r5, #0]
 8005cc4:	f7fb fd06 	bl	80016d4 <_sbrk>
 8005cc8:	1c43      	adds	r3, r0, #1
 8005cca:	d102      	bne.n	8005cd2 <_sbrk_r+0x1a>
 8005ccc:	682b      	ldr	r3, [r5, #0]
 8005cce:	b103      	cbz	r3, 8005cd2 <_sbrk_r+0x1a>
 8005cd0:	6023      	str	r3, [r4, #0]
 8005cd2:	bd38      	pop	{r3, r4, r5, pc}
 8005cd4:	200011c8 	.word	0x200011c8

08005cd8 <memcpy>:
 8005cd8:	440a      	add	r2, r1
 8005cda:	4291      	cmp	r1, r2
 8005cdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ce0:	d100      	bne.n	8005ce4 <memcpy+0xc>
 8005ce2:	4770      	bx	lr
 8005ce4:	b510      	push	{r4, lr}
 8005ce6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cee:	4291      	cmp	r1, r2
 8005cf0:	d1f9      	bne.n	8005ce6 <memcpy+0xe>
 8005cf2:	bd10      	pop	{r4, pc}

08005cf4 <_realloc_r>:
 8005cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cf8:	4607      	mov	r7, r0
 8005cfa:	4614      	mov	r4, r2
 8005cfc:	460d      	mov	r5, r1
 8005cfe:	b921      	cbnz	r1, 8005d0a <_realloc_r+0x16>
 8005d00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d04:	4611      	mov	r1, r2
 8005d06:	f7ff bc4d 	b.w	80055a4 <_malloc_r>
 8005d0a:	b92a      	cbnz	r2, 8005d18 <_realloc_r+0x24>
 8005d0c:	f7ff fbde 	bl	80054cc <_free_r>
 8005d10:	4625      	mov	r5, r4
 8005d12:	4628      	mov	r0, r5
 8005d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d18:	f000 f81a 	bl	8005d50 <_malloc_usable_size_r>
 8005d1c:	4284      	cmp	r4, r0
 8005d1e:	4606      	mov	r6, r0
 8005d20:	d802      	bhi.n	8005d28 <_realloc_r+0x34>
 8005d22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005d26:	d8f4      	bhi.n	8005d12 <_realloc_r+0x1e>
 8005d28:	4621      	mov	r1, r4
 8005d2a:	4638      	mov	r0, r7
 8005d2c:	f7ff fc3a 	bl	80055a4 <_malloc_r>
 8005d30:	4680      	mov	r8, r0
 8005d32:	b908      	cbnz	r0, 8005d38 <_realloc_r+0x44>
 8005d34:	4645      	mov	r5, r8
 8005d36:	e7ec      	b.n	8005d12 <_realloc_r+0x1e>
 8005d38:	42b4      	cmp	r4, r6
 8005d3a:	4622      	mov	r2, r4
 8005d3c:	4629      	mov	r1, r5
 8005d3e:	bf28      	it	cs
 8005d40:	4632      	movcs	r2, r6
 8005d42:	f7ff ffc9 	bl	8005cd8 <memcpy>
 8005d46:	4629      	mov	r1, r5
 8005d48:	4638      	mov	r0, r7
 8005d4a:	f7ff fbbf 	bl	80054cc <_free_r>
 8005d4e:	e7f1      	b.n	8005d34 <_realloc_r+0x40>

08005d50 <_malloc_usable_size_r>:
 8005d50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d54:	1f18      	subs	r0, r3, #4
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	bfbc      	itt	lt
 8005d5a:	580b      	ldrlt	r3, [r1, r0]
 8005d5c:	18c0      	addlt	r0, r0, r3
 8005d5e:	4770      	bx	lr

08005d60 <_init>:
 8005d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d62:	bf00      	nop
 8005d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d66:	bc08      	pop	{r3}
 8005d68:	469e      	mov	lr, r3
 8005d6a:	4770      	bx	lr

08005d6c <_fini>:
 8005d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d6e:	bf00      	nop
 8005d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d72:	bc08      	pop	{r3}
 8005d74:	469e      	mov	lr, r3
 8005d76:	4770      	bx	lr
