
Brakes_Controller_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cf8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08004ec8  08004ec8  00005ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fb4  08004fb4  0000606c  2**0
                  CONTENTS
  4 .ARM          00000008  08004fb4  08004fb4  00005fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fbc  08004fbc  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fbc  08004fbc  00005fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fc0  08004fc0  00005fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08004fc4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  2000006c  08005030  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  08005030  000062ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f4ac  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020ee  00000000  00000000  00015548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  00017638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aeb  00000000  00000000  00018438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002305d  00000000  00000000  00018f23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000101b6  00000000  00000000  0003bf80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4d2c  00000000  00000000  0004c136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00120e62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004490  00000000  00000000  00120ea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  00125338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004eb0 	.word	0x08004eb0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08004eb0 	.word	0x08004eb0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <SysTick_Handler>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SysTick_Handler (void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80005f0:	f000 fd7e 	bl	80010f0 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80005f4:	f001 fd0e 	bl	8002014 <HAL_SYSTICK_IRQHandler>
}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}

080005fc <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN_TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8000600:	4802      	ldr	r0, [pc, #8]	@ (800060c <CAN1_TX_IRQHandler+0x10>)
 8000602:	f001 f9c8 	bl	8001996 <HAL_CAN_IRQHandler>
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	200000cc 	.word	0x200000cc

08000610 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN_RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8000614:	4802      	ldr	r0, [pc, #8]	@ (8000620 <CAN1_RX0_IRQHandler+0x10>)
 8000616:	f001 f9be 	bl	8001996 <HAL_CAN_IRQHandler>
}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	200000cc 	.word	0x200000cc

08000624 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8000628:	4802      	ldr	r0, [pc, #8]	@ (8000634 <CAN1_SCE_IRQHandler+0x10>)
 800062a:	f001 f9b4 	bl	8001996 <HAL_CAN_IRQHandler>
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	200000cc 	.word	0x200000cc

08000638 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htimer6);
 800063c:	4802      	ldr	r0, [pc, #8]	@ (8000648 <TIM6_DAC_IRQHandler+0x10>)
 800063e:	f002 fd8b 	bl	8003158 <HAL_TIM_IRQHandler>
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	200000f4 	.word	0x200000f4

0800064c <EXTI15_10_IRQHandler>:
/**
  * @brief This function handles EXTI line[15:10] interrupts.
  * Waits for button to be pressed then sends the CAN bus message
  */
void EXTI15_10_IRQHandler(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htimer6);
 8000650:	4804      	ldr	r0, [pc, #16]	@ (8000664 <EXTI15_10_IRQHandler+0x18>)
 8000652:	f002 fd11 	bl	8003078 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000656:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800065a:	f001 feb1 	bl	80023c0 <HAL_GPIO_EXTI_IRQHandler>
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	200000f4 	.word	0x200000f4

08000668 <main>:
uint8_t req_counter = 0;
uint8_t brakes_status = 1; // 1 = engaged, 0 = disengaged
CAN_RxHeaderTypeDef RxHeader;

int main(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  printf("Hello world!");
 800066c:	4815      	ldr	r0, [pc, #84]	@ (80006c4 <main+0x5c>)
 800066e:	f003 fbdb 	bl	8003e28 <iprintf>
  HAL_Init();
 8000672:	f000 fceb 	bl	800104c <HAL_Init>
  SystemClock_Config_HSE(SYS_CLOCK_FREQ_50_MHZ);
 8000676:	2032      	movs	r0, #50	@ 0x32
 8000678:	f000 f82a 	bl	80006d0 <SystemClock_Config_HSE>
  GPIO_Init();
 800067c:	f000 f912 	bl	80008a4 <GPIO_Init>
  UART2_Init();
 8000680:	f000 f99a 	bl	80009b8 <UART2_Init>
  TIMER6_Init();
 8000684:	f000 f97a 	bl	800097c <TIMER6_Init>
  CAN1_Init();
 8000688:	f000 f9bc 	bl	8000a04 <CAN1_Init>
  CAN_Filter_Config();
 800068c:	f000 f8e4 	bl	8000858 <CAN_Filter_Config>

  CAN1_Tx();
 8000690:	f000 f8b8 	bl	8000804 <CAN1_Tx>

  if(HAL_CAN_ActivateNotification(&hcan1,CAN_IT_TX_MAILBOX_EMPTY|CAN_IT_RX_FIFO0_MSG_PENDING|CAN_IT_BUSOFF)!= HAL_OK)
 8000694:	f240 4103 	movw	r1, #1027	@ 0x403
 8000698:	480b      	ldr	r0, [pc, #44]	@ (80006c8 <main+0x60>)
 800069a:	f001 f956 	bl	800194a <HAL_CAN_ActivateNotification>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <main+0x40>
  {
    Error_handler();
 80006a4:	f000 faf0 	bl	8000c88 <Error_handler>
  }

  if( HAL_CAN_Start(&hcan1) != HAL_OK)
 80006a8:	4807      	ldr	r0, [pc, #28]	@ (80006c8 <main+0x60>)
 80006aa:	f000 ff1d 	bl	80014e8 <HAL_CAN_Start>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <main+0x50>
  {
    Error_handler();
 80006b4:	f000 fae8 	bl	8000c88 <Error_handler>
  }
  // Start the TIMER interrupt
  HAL_TIM_Base_Start_IT(&htimer6);
 80006b8:	4804      	ldr	r0, [pc, #16]	@ (80006cc <main+0x64>)
 80006ba:	f002 fcdd 	bl	8003078 <HAL_TIM_Base_Start_IT>

  while(1);
 80006be:	bf00      	nop
 80006c0:	e7fd      	b.n	80006be <main+0x56>
 80006c2:	bf00      	nop
 80006c4:	08004ec8 	.word	0x08004ec8
 80006c8:	200000cc 	.word	0x200000cc
 80006cc:	200000f4 	.word	0x200000f4

080006d0 <SystemClock_Config_HSE>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config_HSE(uint8_t clock_freq)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b096      	sub	sp, #88	@ 0x58
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
  RCC_OscInitTypeDef Osc_Init;
  RCC_ClkInitTypeDef Clock_Init;
  uint8_t flash_latency=0;
 80006da:	2300      	movs	r3, #0
 80006dc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

  Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSE ;
 80006e0:	2301      	movs	r3, #1
 80006e2:	61fb      	str	r3, [r7, #28]
  Osc_Init.HSEState = RCC_HSE_ON;
 80006e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006e8:	623b      	str	r3, [r7, #32]
  Osc_Init.PLL.PLLState = RCC_PLL_ON;
 80006ea:	2302      	movs	r3, #2
 80006ec:	637b      	str	r3, [r7, #52]	@ 0x34
  Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006f2:	63bb      	str	r3, [r7, #56]	@ 0x38

  switch(clock_freq) {
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	2b78      	cmp	r3, #120	@ 0x78
 80006f8:	d038      	beq.n	800076c <SystemClock_Config_HSE+0x9c>
 80006fa:	2b78      	cmp	r3, #120	@ 0x78
 80006fc:	dc7c      	bgt.n	80007f8 <SystemClock_Config_HSE+0x128>
 80006fe:	2b32      	cmp	r3, #50	@ 0x32
 8000700:	d002      	beq.n	8000708 <SystemClock_Config_HSE+0x38>
 8000702:	2b54      	cmp	r3, #84	@ 0x54
 8000704:	d019      	beq.n	800073a <SystemClock_Config_HSE+0x6a>
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
    flash_latency = 3;
    break;

  default:
    return ;
 8000706:	e077      	b.n	80007f8 <SystemClock_Config_HSE+0x128>
    Osc_Init.PLL.PLLM = 4;
 8000708:	2304      	movs	r3, #4
 800070a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    Osc_Init.PLL.PLLN = 50;
 800070c:	2332      	movs	r3, #50	@ 0x32
 800070e:	643b      	str	r3, [r7, #64]	@ 0x40
    Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000710:	2302      	movs	r3, #2
 8000712:	647b      	str	r3, [r7, #68]	@ 0x44
    Osc_Init.PLL.PLLQ = 2;
 8000714:	2302      	movs	r3, #2
 8000716:	64bb      	str	r3, [r7, #72]	@ 0x48
    Osc_Init.PLL.PLLR = 2;
 8000718:	2302      	movs	r3, #2
 800071a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 800071c:	230f      	movs	r3, #15
 800071e:	60bb      	str	r3, [r7, #8]
    Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000720:	2302      	movs	r3, #2
 8000722:	60fb      	str	r3, [r7, #12]
    Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	613b      	str	r3, [r7, #16]
    Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000728:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800072c:	617b      	str	r3, [r7, #20]
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
    flash_latency = 1;
 8000732:	2301      	movs	r3, #1
 8000734:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    break;
 8000738:	e032      	b.n	80007a0 <SystemClock_Config_HSE+0xd0>
    Osc_Init.PLL.PLLM = 4;
 800073a:	2304      	movs	r3, #4
 800073c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    Osc_Init.PLL.PLLN = 84;
 800073e:	2354      	movs	r3, #84	@ 0x54
 8000740:	643b      	str	r3, [r7, #64]	@ 0x40
    Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000742:	2302      	movs	r3, #2
 8000744:	647b      	str	r3, [r7, #68]	@ 0x44
    Osc_Init.PLL.PLLQ = 2;
 8000746:	2302      	movs	r3, #2
 8000748:	64bb      	str	r3, [r7, #72]	@ 0x48
    Osc_Init.PLL.PLLR = 2;
 800074a:	2302      	movs	r3, #2
 800074c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 800074e:	230f      	movs	r3, #15
 8000750:	60bb      	str	r3, [r7, #8]
    Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000752:	2302      	movs	r3, #2
 8000754:	60fb      	str	r3, [r7, #12]
    Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	613b      	str	r3, [r7, #16]
    Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 800075a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800075e:	617b      	str	r3, [r7, #20]
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	61bb      	str	r3, [r7, #24]
    flash_latency = 2;
 8000764:	2302      	movs	r3, #2
 8000766:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    break;
 800076a:	e019      	b.n	80007a0 <SystemClock_Config_HSE+0xd0>
    Osc_Init.PLL.PLLM = 4;
 800076c:	2304      	movs	r3, #4
 800076e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    Osc_Init.PLL.PLLN = 120;
 8000770:	2378      	movs	r3, #120	@ 0x78
 8000772:	643b      	str	r3, [r7, #64]	@ 0x40
    Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000774:	2302      	movs	r3, #2
 8000776:	647b      	str	r3, [r7, #68]	@ 0x44
    Osc_Init.PLL.PLLQ = 2;
 8000778:	2302      	movs	r3, #2
 800077a:	64bb      	str	r3, [r7, #72]	@ 0x48
    Osc_Init.PLL.PLLR = 2;
 800077c:	2302      	movs	r3, #2
 800077e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 8000780:	230f      	movs	r3, #15
 8000782:	60bb      	str	r3, [r7, #8]
    Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000784:	2302      	movs	r3, #2
 8000786:	60fb      	str	r3, [r7, #12]
    Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	613b      	str	r3, [r7, #16]
    Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 800078c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000790:	617b      	str	r3, [r7, #20]
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000792:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000796:	61bb      	str	r3, [r7, #24]
    flash_latency = 3;
 8000798:	2303      	movs	r3, #3
 800079a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    break;
 800079e:	bf00      	nop
  }

  if (HAL_RCC_OscConfig(&Osc_Init) != HAL_OK)
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	4618      	mov	r0, r3
 80007a6:	f002 f979 	bl	8002a9c <HAL_RCC_OscConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config_HSE+0xe4>
  {
    Error_handler();
 80007b0:	f000 fa6a 	bl	8000c88 <Error_handler>
  }

  if (HAL_RCC_ClockConfig(&Clock_Init, flash_latency) != HAL_OK)
 80007b4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80007b8:	f107 0308 	add.w	r3, r7, #8
 80007bc:	4611      	mov	r1, r2
 80007be:	4618      	mov	r0, r3
 80007c0:	f001 fe22 	bl	8002408 <HAL_RCC_ClockConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config_HSE+0xfe>
  {
    Error_handler();
 80007ca:	f000 fa5d 	bl	8000c88 <Error_handler>
  }

  /*Configure the systick timer interrupt frequency (for every 1 ms) */
  uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 80007ce:	f001 ff01 	bl	80025d4 <HAL_RCC_GetHCLKFreq>
 80007d2:	6538      	str	r0, [r7, #80]	@ 0x50
  HAL_SYSTICK_Config(hclk_freq/1000);
 80007d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80007d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000800 <SystemClock_Config_HSE+0x130>)
 80007d8:	fba2 2303 	umull	r2, r3, r2, r3
 80007dc:	099b      	lsrs	r3, r3, #6
 80007de:	4618      	mov	r0, r3
 80007e0:	f001 fbef 	bl	8001fc2 <HAL_SYSTICK_Config>

  /**Configure the Systick
  */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80007e4:	2004      	movs	r0, #4
 80007e6:	f001 fbf9 	bl	8001fdc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2100      	movs	r1, #0
 80007ee:	f04f 30ff 	mov.w	r0, #4294967295
 80007f2:	f001 fbbc 	bl	8001f6e <HAL_NVIC_SetPriority>
 80007f6:	e000      	b.n	80007fa <SystemClock_Config_HSE+0x12a>
    return ;
 80007f8:	bf00      	nop
}
 80007fa:	3758      	adds	r7, #88	@ 0x58
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	10624dd3 	.word	0x10624dd3

08000804 <CAN1_Tx>:
/**
  * @brief  Transmit a message via CAN1.
  * @retval None
  */
void CAN1_Tx()
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b088      	sub	sp, #32
 8000808:	af00      	add	r7, sp, #0
  CAN_TxHeaderTypeDef TxHeader;
  uint32_t TxMailbox;
  uint8_t message;

  TxHeader.DLC = 1;
 800080a:	2301      	movs	r3, #1
 800080c:	61bb      	str	r3, [r7, #24]
  TxHeader.StdId = 0x299;
 800080e:	f240 2399 	movw	r3, #665	@ 0x299
 8000812:	60bb      	str	r3, [r7, #8]
  TxHeader.IDE   = CAN_ID_STD;
 8000814:	2300      	movs	r3, #0
 8000816:	613b      	str	r3, [r7, #16]

  TxHeader.RTR = CAN_RTR_DATA;
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]

  message = brakes_status;
 800081c:	4b0b      	ldr	r3, [pc, #44]	@ (800084c <CAN1_Tx+0x48>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	70fb      	strb	r3, [r7, #3]

  // board led blinks on tx
  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8000822:	2120      	movs	r1, #32
 8000824:	480a      	ldr	r0, [pc, #40]	@ (8000850 <CAN1_Tx+0x4c>)
 8000826:	f001 fdb0 	bl	800238a <HAL_GPIO_TogglePin>
  // send the message

  if( HAL_CAN_AddTxMessage(&hcan1,&TxHeader,&message,&TxMailbox) != HAL_OK)
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	1cfa      	adds	r2, r7, #3
 800082e:	f107 0108 	add.w	r1, r7, #8
 8000832:	4808      	ldr	r0, [pc, #32]	@ (8000854 <CAN1_Tx+0x50>)
 8000834:	f000 fe9c 	bl	8001570 <HAL_CAN_AddTxMessage>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <CAN1_Tx+0x3e>
  {
    Error_handler();
 800083e:	f000 fa23 	bl	8000c88 <Error_handler>
  }
}
 8000842:	bf00      	nop
 8000844:	3720      	adds	r7, #32
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000000 	.word	0x20000000
 8000850:	40020000 	.word	0x40020000
 8000854:	200000cc 	.word	0x200000cc

08000858 <CAN_Filter_Config>:
/**
  * @brief  Configures the CAN filter.
  * @retval None
  */
void CAN_Filter_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	@ 0x28
 800085c:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef can1_filter_init;

  can1_filter_init.FilterActivation = ENABLE;
 800085e:	2301      	movs	r3, #1
 8000860:	623b      	str	r3, [r7, #32]
  can1_filter_init.FilterBank  = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
  can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
  // xxx xxxx xxxx
  // 100 xxxx xxxx
  // Accept only 4XX
  // id 1000 = 0x8
  // mask 1110 = 0xE
  can1_filter_init.FilterIdHigh = 0x0000;
 800086a:	2300      	movs	r3, #0
 800086c:	603b      	str	r3, [r7, #0]
  can1_filter_init.FilterIdLow = 0x0000;
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
  can1_filter_init.FilterMaskIdHigh = 0X0000;
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
  can1_filter_init.FilterMaskIdLow = 0x0000;
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
  can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 800087a:	2300      	movs	r3, #0
 800087c:	61bb      	str	r3, [r7, #24]
  can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 800087e:	2301      	movs	r3, #1
 8000880:	61fb      	str	r3, [r7, #28]

  if( HAL_CAN_ConfigFilter(&hcan1,&can1_filter_init) != HAL_OK)
 8000882:	463b      	mov	r3, r7
 8000884:	4619      	mov	r1, r3
 8000886:	4806      	ldr	r0, [pc, #24]	@ (80008a0 <CAN_Filter_Config+0x48>)
 8000888:	f000 fd4e 	bl	8001328 <HAL_CAN_ConfigFilter>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <CAN_Filter_Config+0x3e>
  {
    Error_handler();
 8000892:	f000 f9f9 	bl	8000c88 <Error_handler>
  }
}
 8000896:	bf00      	nop
 8000898:	3728      	adds	r7, #40	@ 0x28
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200000cc 	.word	0x200000cc

080008a4 <GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void GPIO_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08e      	sub	sp, #56	@ 0x38
 80008a8:	af00      	add	r7, sp, #0
  // enabling the clocks for the GPIO ports
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	4b2f      	ldr	r3, [pc, #188]	@ (800096c <GPIO_Init+0xc8>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a2e      	ldr	r2, [pc, #184]	@ (800096c <GPIO_Init+0xc8>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b2c      	ldr	r3, [pc, #176]	@ (800096c <GPIO_Init+0xc8>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	4b28      	ldr	r3, [pc, #160]	@ (800096c <GPIO_Init+0xc8>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a27      	ldr	r2, [pc, #156]	@ (800096c <GPIO_Init+0xc8>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b25      	ldr	r3, [pc, #148]	@ (800096c <GPIO_Init+0xc8>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0304 	and.w	r3, r3, #4
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	4b21      	ldr	r3, [pc, #132]	@ (800096c <GPIO_Init+0xc8>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a20      	ldr	r2, [pc, #128]	@ (800096c <GPIO_Init+0xc8>)
 80008ec:	f043 0302 	orr.w	r3, r3, #2
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b1e      	ldr	r3, [pc, #120]	@ (800096c <GPIO_Init+0xc8>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0302 	and.w	r3, r3, #2
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]

  // === General Output Pin ===
  GPIO_InitTypeDef ledgpio;
  ledgpio.Pin = GPIO_PIN_5;
 80008fe:	2320      	movs	r3, #32
 8000900:	627b      	str	r3, [r7, #36]	@ 0x24
  ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
 8000904:	62bb      	str	r3, [r7, #40]	@ 0x28
  ledgpio.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &ledgpio);
 800090a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800090e:	4619      	mov	r1, r3
 8000910:	4817      	ldr	r0, [pc, #92]	@ (8000970 <GPIO_Init+0xcc>)
 8000912:	f001 fb8d 	bl	8002030 <HAL_GPIO_Init>

  // === Solenoid Control Pins ===
  GPIO_InitTypeDef solenoid;
  solenoid.Mode = GPIO_MODE_OUTPUT_PP;
 8000916:	2301      	movs	r3, #1
 8000918:	617b      	str	r3, [r7, #20]
  solenoid.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	61bb      	str	r3, [r7, #24]

  // PA8, PA9
  solenoid.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 800091e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000922:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &solenoid);
 8000924:	f107 0310 	add.w	r3, r7, #16
 8000928:	4619      	mov	r1, r3
 800092a:	4811      	ldr	r0, [pc, #68]	@ (8000970 <GPIO_Init+0xcc>)
 800092c:	f001 fb80 	bl	8002030 <HAL_GPIO_Init>

  // PB4, PB10
  solenoid.Pin = GPIO_PIN_4 | GPIO_PIN_10;
 8000930:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8000934:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &solenoid);
 8000936:	f107 0310 	add.w	r3, r7, #16
 800093a:	4619      	mov	r1, r3
 800093c:	480d      	ldr	r0, [pc, #52]	@ (8000974 <GPIO_Init+0xd0>)
 800093e:	f001 fb77 	bl	8002030 <HAL_GPIO_Init>

  // === Button Input Pin with Interrupt ===
  ledgpio.Pin = GPIO_PIN_13;
 8000942:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000946:	627b      	str	r3, [r7, #36]	@ 0x24
  ledgpio.Mode = GPIO_MODE_IT_FALLING;
 8000948:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800094c:	62bb      	str	r3, [r7, #40]	@ 0x28
  ledgpio.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &ledgpio);
 8000952:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000956:	4619      	mov	r1, r3
 8000958:	4807      	ldr	r0, [pc, #28]	@ (8000978 <GPIO_Init+0xd4>)
 800095a:	f001 fb69 	bl	8002030 <HAL_GPIO_Init>

  // enables the IRQ on pins 10-15
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800095e:	2028      	movs	r0, #40	@ 0x28
 8000960:	f001 fb21 	bl	8001fa6 <HAL_NVIC_EnableIRQ>
}
 8000964:	bf00      	nop
 8000966:	3738      	adds	r7, #56	@ 0x38
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40023800 	.word	0x40023800
 8000970:	40020000 	.word	0x40020000
 8000974:	40020400 	.word	0x40020400
 8000978:	40020800 	.word	0x40020800

0800097c <TIMER6_Init>:
  * Generates an interrupt every 1 second
  * @param None
  * @retval None
  */
void TIMER6_Init(void)
{ // APB clock1 84 MHz
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  // CNT_CLK = TIMx_CLK / (prescaler+1)
  htimer6.Instance = TIM6;
 8000980:	4b0b      	ldr	r3, [pc, #44]	@ (80009b0 <TIMER6_Init+0x34>)
 8000982:	4a0c      	ldr	r2, [pc, #48]	@ (80009b4 <TIMER6_Init+0x38>)
 8000984:	601a      	str	r2, [r3, #0]
  //  Every one second:
  //  htimer6.Init.Prescaler = 4999;
  //  htimer6.Init.Period = 10000-1;

  // Every 5 seconds:
  htimer6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000986:	4b0a      	ldr	r3, [pc, #40]	@ (80009b0 <TIMER6_Init+0x34>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  htimer6.Init.Prescaler = 49999;  // Divides 50MHz to 1kHz
 800098c:	4b08      	ldr	r3, [pc, #32]	@ (80009b0 <TIMER6_Init+0x34>)
 800098e:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000992:	605a      	str	r2, [r3, #4]
  htimer6.Init.Period = 4999;      // 1kHz → 5s interrupt
 8000994:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <TIMER6_Init+0x34>)
 8000996:	f241 3287 	movw	r2, #4999	@ 0x1387
 800099a:	60da      	str	r2, [r3, #12]
  if( HAL_TIM_Base_Init(&htimer6) != HAL_OK )
 800099c:	4804      	ldr	r0, [pc, #16]	@ (80009b0 <TIMER6_Init+0x34>)
 800099e:	f002 fb1b 	bl	8002fd8 <HAL_TIM_Base_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <TIMER6_Init+0x30>
  {
    Error_handler();
 80009a8:	f000 f96e 	bl	8000c88 <Error_handler>
  }
}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	200000f4 	.word	0x200000f4
 80009b4:	40001000 	.word	0x40001000

080009b8 <UART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void UART2_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	@ (80009fc <UART2_Init+0x44>)
 80009be:	4a10      	ldr	r2, [pc, #64]	@ (8000a00 <UART2_Init+0x48>)
 80009c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	@ (80009fc <UART2_Init+0x44>)
 80009c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ca:	4b0c      	ldr	r3, [pc, #48]	@ (80009fc <UART2_Init+0x44>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009d0:	4b0a      	ldr	r3, [pc, #40]	@ (80009fc <UART2_Init+0x44>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009d6:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <UART2_Init+0x44>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009dc:	4b07      	ldr	r3, [pc, #28]	@ (80009fc <UART2_Init+0x44>)
 80009de:	2200      	movs	r2, #0
 80009e0:	619a      	str	r2, [r3, #24]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009e2:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <UART2_Init+0x44>)
 80009e4:	220c      	movs	r2, #12
 80009e6:	615a      	str	r2, [r3, #20]
  if ( HAL_UART_Init(&huart2) != HAL_OK )
 80009e8:	4804      	ldr	r0, [pc, #16]	@ (80009fc <UART2_Init+0x44>)
 80009ea:	f002 fd99 	bl	8003520 <HAL_UART_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <UART2_Init+0x40>
  {
    //There is a problem
    Error_handler();
 80009f4:	f000 f948 	bl	8000c88 <Error_handler>
  }
}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000088 	.word	0x20000088
 8000a00:	40004400 	.word	0x40004400

08000a04 <CAN1_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
void CAN1_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  hcan1.Instance = CAN1;
 8000a08:	4b17      	ldr	r3, [pc, #92]	@ (8000a68 <CAN1_Init+0x64>)
 8000a0a:	4a18      	ldr	r2, [pc, #96]	@ (8000a6c <CAN1_Init+0x68>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a0e:	4b16      	ldr	r3, [pc, #88]	@ (8000a68 <CAN1_Init+0x64>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  hcan1.Init.AutoBusOff = ENABLE;
 8000a14:	4b14      	ldr	r3, [pc, #80]	@ (8000a68 <CAN1_Init+0x64>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000a1a:	4b13      	ldr	r3, [pc, #76]	@ (8000a68 <CAN1_Init+0x64>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a20:	4b11      	ldr	r3, [pc, #68]	@ (8000a68 <CAN1_Init+0x64>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	769a      	strb	r2, [r3, #26]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a26:	4b10      	ldr	r3, [pc, #64]	@ (8000a68 <CAN1_Init+0x64>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a68 <CAN1_Init+0x64>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	761a      	strb	r2, [r3, #24]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a32:	4b0d      	ldr	r3, [pc, #52]	@ (8000a68 <CAN1_Init+0x64>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	775a      	strb	r2, [r3, #29]
  //  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;

  //  Settings related to CAN bit timings
  //  Setting resulting bit rate to 250k as per DALY BMS reqs
  //  The prescalar, time values were derived from http://www.bittiming.can-wiki.info/
  hcan1.Init.Prescaler = 10;
 8000a38:	4b0b      	ldr	r3, [pc, #44]	@ (8000a68 <CAN1_Init+0x64>)
 8000a3a:	220a      	movs	r2, #10
 8000a3c:	605a      	str	r2, [r3, #4]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a68 <CAN1_Init+0x64>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000a44:	4b08      	ldr	r3, [pc, #32]	@ (8000a68 <CAN1_Init+0x64>)
 8000a46:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000a4a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <CAN1_Init+0x64>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	615a      	str	r2, [r3, #20]

  if ( HAL_CAN_Init (&hcan1) != HAL_OK)
 8000a52:	4805      	ldr	r0, [pc, #20]	@ (8000a68 <CAN1_Init+0x64>)
 8000a54:	f000 fb6c 	bl	8001130 <HAL_CAN_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <CAN1_Init+0x5e>
  {
    Error_handler();
 8000a5e:	f000 f913 	bl	8000c88 <Error_handler>
  }
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200000cc 	.word	0x200000cc
 8000a6c:	40006400 	.word	0x40006400

08000a70 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b090      	sub	sp, #64	@ 0x40
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  char msg[50];
  sprintf(msg,"Message Transmitted:M0\r\n");
 8000a78:	f107 030c 	add.w	r3, r7, #12
 8000a7c:	490a      	ldr	r1, [pc, #40]	@ (8000aa8 <HAL_CAN_TxMailbox0CompleteCallback+0x38>)
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f003 f9e4 	bl	8003e4c <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fbc1 	bl	8000210 <strlen>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	f107 010c 	add.w	r1, r7, #12
 8000a96:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9a:	4804      	ldr	r0, [pc, #16]	@ (8000aac <HAL_CAN_TxMailbox0CompleteCallback+0x3c>)
 8000a9c:	f002 fd8d 	bl	80035ba <HAL_UART_Transmit>
}
 8000aa0:	bf00      	nop
 8000aa2:	3740      	adds	r7, #64	@ 0x40
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	08004ed8 	.word	0x08004ed8
 8000aac:	20000088 	.word	0x20000088

08000ab0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b090      	sub	sp, #64	@ 0x40
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  char msg[50];
  sprintf(msg,"Message Transmitted:M1\r\n");
 8000ab8:	f107 030c 	add.w	r3, r7, #12
 8000abc:	490a      	ldr	r1, [pc, #40]	@ (8000ae8 <HAL_CAN_TxMailbox1CompleteCallback+0x38>)
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f003 f9c4 	bl	8003e4c <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fba1 	bl	8000210 <strlen>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	b29a      	uxth	r2, r3
 8000ad2:	f107 010c 	add.w	r1, r7, #12
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ada:	4804      	ldr	r0, [pc, #16]	@ (8000aec <HAL_CAN_TxMailbox1CompleteCallback+0x3c>)
 8000adc:	f002 fd6d 	bl	80035ba <HAL_UART_Transmit>
}
 8000ae0:	bf00      	nop
 8000ae2:	3740      	adds	r7, #64	@ 0x40
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	08004ef4 	.word	0x08004ef4
 8000aec:	20000088 	.word	0x20000088

08000af0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b090      	sub	sp, #64	@ 0x40
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  char msg[50];
  sprintf(msg,"Message Transmitted:M2\r\n");
 8000af8:	f107 030c 	add.w	r3, r7, #12
 8000afc:	490a      	ldr	r1, [pc, #40]	@ (8000b28 <HAL_CAN_TxMailbox2CompleteCallback+0x38>)
 8000afe:	4618      	mov	r0, r3
 8000b00:	f003 f9a4 	bl	8003e4c <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fb81 	bl	8000210 <strlen>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	b29a      	uxth	r2, r3
 8000b12:	f107 010c 	add.w	r1, r7, #12
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1a:	4804      	ldr	r0, [pc, #16]	@ (8000b2c <HAL_CAN_TxMailbox2CompleteCallback+0x3c>)
 8000b1c:	f002 fd4d 	bl	80035ba <HAL_UART_Transmit>
}
 8000b20:	bf00      	nop
 8000b22:	3740      	adds	r7, #64	@ 0x40
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	08004f10 	.word	0x08004f10
 8000b2c:	20000088 	.word	0x20000088

08000b30 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b092      	sub	sp, #72	@ 0x48
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
//  char msg[50];
//  sprintf(msg,"Brake controller recieved a message!!!!:M0\r\n");
//  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);

  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8000b38:	2120      	movs	r1, #32
 8000b3a:	4830      	ldr	r0, [pc, #192]	@ (8000bfc <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000b3c:	f001 fc25 	bl	800238a <HAL_GPIO_TogglePin>

  uint8_t rcvd_msg[8]; // 8 is max cap for std CAN

  char msg[50];

  if(HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,&RxHeader,rcvd_msg) != HAL_OK)
 8000b40:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b44:	4a2e      	ldr	r2, [pc, #184]	@ (8000c00 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000b46:	2100      	movs	r1, #0
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f000 fdec 	bl	8001726 <HAL_CAN_GetRxMessage>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
  {
    Error_handler();
 8000b54:	f000 f898 	bl	8000c88 <Error_handler>
  }

  if(RxHeader.StdId == 0x201 && RxHeader.RTR == 0 )
 8000b58:	4b29      	ldr	r3, [pc, #164]	@ (8000c00 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f240 2201 	movw	r2, #513	@ 0x201
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d120      	bne.n	8000ba6 <HAL_CAN_RxFifo0MsgPendingCallback+0x76>
 8000b64:	4b26      	ldr	r3, [pc, #152]	@ (8000c00 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d11c      	bne.n	8000ba6 <HAL_CAN_RxFifo0MsgPendingCallback+0x76>
  {
    brakes_status = 0;
 8000b6c:	4b25      	ldr	r3, [pc, #148]	@ (8000c04 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	701a      	strb	r2, [r3, #0]
    Manage_Solenoids();
 8000b72:	f000 f859 	bl	8000c28 <Manage_Solenoids>
    sprintf(msg,"0x201 engage brakes : #%x\r\n",rcvd_msg[0]);
 8000b76:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	f107 030c 	add.w	r3, r7, #12
 8000b80:	4921      	ldr	r1, [pc, #132]	@ (8000c08 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000b82:	4618      	mov	r0, r3
 8000b84:	f003 f962 	bl	8003e4c <siprintf>
    HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000b88:	f107 030c 	add.w	r3, r7, #12
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff fb3f 	bl	8000210 <strlen>
 8000b92:	4603      	mov	r3, r0
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	f107 010c 	add.w	r1, r7, #12
 8000b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9e:	481b      	ldr	r0, [pc, #108]	@ (8000c0c <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000ba0:	f002 fd0b 	bl	80035ba <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
  }



}
 8000ba4:	e025      	b.n	8000bf2 <HAL_CAN_RxFifo0MsgPendingCallback+0xc2>
  else if ( RxHeader.StdId == 0x202 && RxHeader.RTR == 0)
 8000ba6:	4b16      	ldr	r3, [pc, #88]	@ (8000c00 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f240 2202 	movw	r2, #514	@ 0x202
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d11f      	bne.n	8000bf2 <HAL_CAN_RxFifo0MsgPendingCallback+0xc2>
 8000bb2:	4b13      	ldr	r3, [pc, #76]	@ (8000c00 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000bb4:	68db      	ldr	r3, [r3, #12]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d11b      	bne.n	8000bf2 <HAL_CAN_RxFifo0MsgPendingCallback+0xc2>
    brakes_status = 1;
 8000bba:	4b12      	ldr	r3, [pc, #72]	@ (8000c04 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	701a      	strb	r2, [r3, #0]
    Manage_Solenoids();
 8000bc0:	f000 f832 	bl	8000c28 <Manage_Solenoids>
    sprintf(msg,"0x202 disengage brakes : #%x\r\n",rcvd_msg[0]);
 8000bc4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000bc8:	461a      	mov	r2, r3
 8000bca:	f107 030c 	add.w	r3, r7, #12
 8000bce:	4910      	ldr	r1, [pc, #64]	@ (8000c10 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f003 f93b 	bl	8003e4c <siprintf>
    HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000bd6:	f107 030c 	add.w	r3, r7, #12
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fb18 	bl	8000210 <strlen>
 8000be0:	4603      	mov	r3, r0
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	f107 010c 	add.w	r1, r7, #12
 8000be8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bec:	4807      	ldr	r0, [pc, #28]	@ (8000c0c <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000bee:	f002 fce4 	bl	80035ba <HAL_UART_Transmit>
}
 8000bf2:	bf00      	nop
 8000bf4:	3748      	adds	r7, #72	@ 0x48
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40020000 	.word	0x40020000
 8000c00:	2000013c 	.word	0x2000013c
 8000c04:	20000000 	.word	0x20000000
 8000c08:	08004f2c 	.word	0x08004f2c
 8000c0c:	20000088 	.word	0x20000088
 8000c10:	08004f48 	.word	0x08004f48

08000c14 <HAL_TIM_PeriodElapsedCallback>:
  * We will send the heartbeat signal from this function
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{ // broadcasts heartbeat signal
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  CAN1_Tx();
 8000c1c:	f7ff fdf2 	bl	8000804 <CAN1_Tx>
}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <Manage_Solenoids>:

void Manage_Solenoids()
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
  // based on the global uni8_t brakes_states set the pins
  GPIO_PinState state = (brakes_status == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000c2e:	4b13      	ldr	r3, [pc, #76]	@ (8000c7c <Manage_Solenoids+0x54>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	bf0c      	ite	eq
 8000c36:	2301      	moveq	r3, #1
 8000c38:	2300      	movne	r3, #0
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	71fb      	strb	r3, [r7, #7]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, state);  // PA8
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	461a      	mov	r2, r3
 8000c42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c46:	480e      	ldr	r0, [pc, #56]	@ (8000c80 <Manage_Solenoids+0x58>)
 8000c48:	f001 fb86 	bl	8002358 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, state);  // PA9
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c54:	480a      	ldr	r0, [pc, #40]	@ (8000c80 <Manage_Solenoids+0x58>)
 8000c56:	f001 fb7f 	bl	8002358 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, state);  // PB4
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	2110      	movs	r1, #16
 8000c60:	4808      	ldr	r0, [pc, #32]	@ (8000c84 <Manage_Solenoids+0x5c>)
 8000c62:	f001 fb79 	bl	8002358 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, state); // PB10
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c6e:	4805      	ldr	r0, [pc, #20]	@ (8000c84 <Manage_Solenoids+0x5c>)
 8000c70:	f001 fb72 	bl	8002358 <HAL_GPIO_WritePin>
}
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000000 	.word	0x20000000
 8000c80:	40020000 	.word	0x40020000
 8000c84:	40020400 	.word	0x40020400

08000c88 <Error_handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  while(1);
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <Error_handler+0x4>

08000c90 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  //Here will do low level processor specific inits.
  //1. Set up the priority grouping of the arm cortex mx processor
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c94:	2003      	movs	r0, #3
 8000c96:	f001 f95f 	bl	8001f58 <HAL_NVIC_SetPriorityGrouping>

  //2. Enable the required system exceptions of the arm cortex mx processor
  SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd0 <HAL_MspInit+0x40>)
 8000c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c9e:	4a0c      	ldr	r2, [pc, #48]	@ (8000cd0 <HAL_MspInit+0x40>)
 8000ca0:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8000ca4:	6253      	str	r3, [r2, #36]	@ 0x24

  //3. configure the priority for the system exceptions
  HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2100      	movs	r1, #0
 8000caa:	f06f 000b 	mvn.w	r0, #11
 8000cae:	f001 f95e 	bl	8001f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	f06f 000a 	mvn.w	r0, #10
 8000cba:	f001 f958 	bl	8001f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	f06f 0009 	mvn.w	r0, #9
 8000cc6:	f001 f952 	bl	8001f6e <HAL_NVIC_SetPriority>
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08a      	sub	sp, #40	@ 0x28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef gpio_uart;
  //here we are going to do the low level inits. of the USART2 peripheral

  //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
  __HAL_RCC_USART2_CLK_ENABLE();
 8000cdc:	2300      	movs	r3, #0
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d5c <HAL_UART_MspInit+0x88>)
 8000ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce4:	4a1d      	ldr	r2, [pc, #116]	@ (8000d5c <HAL_UART_MspInit+0x88>)
 8000ce6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cea:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cec:	4b1b      	ldr	r3, [pc, #108]	@ (8000d5c <HAL_UART_MspInit+0x88>)
 8000cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	4b17      	ldr	r3, [pc, #92]	@ (8000d5c <HAL_UART_MspInit+0x88>)
 8000cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d00:	4a16      	ldr	r2, [pc, #88]	@ (8000d5c <HAL_UART_MspInit+0x88>)
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d08:	4b14      	ldr	r3, [pc, #80]	@ (8000d5c <HAL_UART_MspInit+0x88>)
 8000d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]

  //2 . Do the pin muxing configurations
  gpio_uart.Pin = GPIO_PIN_2;
 8000d14:	2304      	movs	r3, #4
 8000d16:	617b      	str	r3, [r7, #20]
  gpio_uart.Mode =GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	61bb      	str	r3, [r7, #24]
  gpio_uart.Pull = GPIO_PULLUP;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	61fb      	str	r3, [r7, #28]
  gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	623b      	str	r3, [r7, #32]
  gpio_uart.Alternate =  GPIO_AF7_USART2; //UART2_TX
 8000d24:	2307      	movs	r3, #7
 8000d26:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA,&gpio_uart);
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	480c      	ldr	r0, [pc, #48]	@ (8000d60 <HAL_UART_MspInit+0x8c>)
 8000d30:	f001 f97e 	bl	8002030 <HAL_GPIO_Init>

  gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 8000d34:	2308      	movs	r3, #8
 8000d36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA,&gpio_uart);
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4808      	ldr	r0, [pc, #32]	@ (8000d60 <HAL_UART_MspInit+0x8c>)
 8000d40:	f001 f976 	bl	8002030 <HAL_GPIO_Init>
  //3 . Enable the IRQ and set up the priority (NVIC settings )
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d44:	2026      	movs	r0, #38	@ 0x26
 8000d46:	f001 f92e 	bl	8001fa6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	210f      	movs	r1, #15
 8000d4e:	2026      	movs	r0, #38	@ 0x26
 8000d50:	f001 f90d 	bl	8001f6e <HAL_NVIC_SetPriority>
}
 8000d54:	bf00      	nop
 8000d56:	3728      	adds	r7, #40	@ 0x28
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40020000 	.word	0x40020000

08000d64 <HAL_CAN_MspInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b088      	sub	sp, #32
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_CAN1_CLK_ENABLE();
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	4b20      	ldr	r3, [pc, #128]	@ (8000df4 <HAL_CAN_MspInit+0x90>)
 8000d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d74:	4a1f      	ldr	r2, [pc, #124]	@ (8000df4 <HAL_CAN_MspInit+0x90>)
 8000d76:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000df4 <HAL_CAN_MspInit+0x90>)
 8000d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	68bb      	ldr	r3, [r7, #8]

  /**CAN1 GPIO Configuration
     PA11     ------> CAN1_RX
     PA12     ------> CAN1_TX
  */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d88:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000d8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d96:	2303      	movs	r3, #3
 8000d98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000d9a:	2309      	movs	r3, #9
 8000d9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9e:	f107 030c 	add.w	r3, r7, #12
 8000da2:	4619      	mov	r1, r3
 8000da4:	4814      	ldr	r0, [pc, #80]	@ (8000df8 <HAL_CAN_MspInit+0x94>)
 8000da6:	f001 f943 	bl	8002030 <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(CAN1_TX_IRQn,15,0);
 8000daa:	2200      	movs	r2, #0
 8000dac:	210f      	movs	r1, #15
 8000dae:	2013      	movs	r0, #19
 8000db0:	f001 f8dd 	bl	8001f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(CAN1_RX0_IRQn,15,0);
 8000db4:	2200      	movs	r2, #0
 8000db6:	210f      	movs	r1, #15
 8000db8:	2014      	movs	r0, #20
 8000dba:	f001 f8d8 	bl	8001f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(CAN1_RX1_IRQn,15,0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	210f      	movs	r1, #15
 8000dc2:	2015      	movs	r0, #21
 8000dc4:	f001 f8d3 	bl	8001f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(CAN1_SCE_IRQn,15,0);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	210f      	movs	r1, #15
 8000dcc:	2016      	movs	r0, #22
 8000dce:	f001 f8ce 	bl	8001f6e <HAL_NVIC_SetPriority>

  HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000dd2:	2013      	movs	r0, #19
 8000dd4:	f001 f8e7 	bl	8001fa6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000dd8:	2014      	movs	r0, #20
 8000dda:	f001 f8e4 	bl	8001fa6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000dde:	2015      	movs	r0, #21
 8000de0:	f001 f8e1 	bl	8001fa6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000de4:	2016      	movs	r0, #22
 8000de6:	f001 f8de 	bl	8001fa6 <HAL_NVIC_EnableIRQ>
}
 8000dea:	bf00      	nop
 8000dec:	3720      	adds	r7, #32
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40020000 	.word	0x40020000

08000dfc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htimer)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  //1. enable the clock for the TIM6 peripheral
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e04:	2300      	movs	r3, #0
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	4b0b      	ldr	r3, [pc, #44]	@ (8000e38 <HAL_TIM_Base_MspInit+0x3c>)
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000e38 <HAL_TIM_Base_MspInit+0x3c>)
 8000e0e:	f043 0310 	orr.w	r3, r3, #16
 8000e12:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e14:	4b08      	ldr	r3, [pc, #32]	@ (8000e38 <HAL_TIM_Base_MspInit+0x3c>)
 8000e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e18:	f003 0310 	and.w	r3, r3, #16
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	68fb      	ldr	r3, [r7, #12]

  //2. Enable the IRQ of TIM6
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e20:	2036      	movs	r0, #54	@ 0x36
 8000e22:	f001 f8c0 	bl	8001fa6 <HAL_NVIC_EnableIRQ>

  //3. setup the priority for TIM6_DAC_IRQn
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn,15,0);
 8000e26:	2200      	movs	r2, #0
 8000e28:	210f      	movs	r1, #15
 8000e2a:	2036      	movs	r0, #54	@ 0x36
 8000e2c:	f001 f89f 	bl	8001f6e <HAL_NVIC_SetPriority>
}
 8000e30:	bf00      	nop
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40023800 	.word	0x40023800

08000e3c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0    *((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN            *((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]

  //Enable TRCENA
  DEMCR |= ( 1 << 24);
 8000e46:	4b0f      	ldr	r3, [pc, #60]	@ (8000e84 <ITM_SendChar+0x48>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e84 <ITM_SendChar+0x48>)
 8000e4c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000e50:	6013      	str	r3, [r2, #0]

  //enable stimulus port 0
  ITM_TRACE_EN |= ( 1 << 0);
 8000e52:	4b0d      	ldr	r3, [pc, #52]	@ (8000e88 <ITM_SendChar+0x4c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a0c      	ldr	r2, [pc, #48]	@ (8000e88 <ITM_SendChar+0x4c>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	6013      	str	r3, [r2, #0]

  // read FIFO status in bit [0]:
  while(!(ITM_STIMULUS_PORT0 & 1));
 8000e5e:	bf00      	nop
 8000e60:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d0f8      	beq.n	8000e60 <ITM_SendChar+0x24>

  //Write to ITM stimulus port0
  ITM_STIMULUS_PORT0 = ch;
 8000e6e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	6013      	str	r3, [r2, #0]
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000edfc 	.word	0xe000edfc
 8000e88:	e0000e00 	.word	0xe0000e00

08000e8c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	e00a      	b.n	8000eb4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e9e:	f3af 8000 	nop.w
 8000ea2:	4601      	mov	r1, r0
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	1c5a      	adds	r2, r3, #1
 8000ea8:	60ba      	str	r2, [r7, #8]
 8000eaa:	b2ca      	uxtb	r2, r1
 8000eac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	697a      	ldr	r2, [r7, #20]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	dbf0      	blt.n	8000e9e <_read+0x12>
	}

return len;
 8000ebc:	687b      	ldr	r3, [r7, #4]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b086      	sub	sp, #24
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	60f8      	str	r0, [r7, #12]
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	e009      	b.n	8000eec <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	1c5a      	adds	r2, r3, #1
 8000edc:	60ba      	str	r2, [r7, #8]
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ffab 	bl	8000e3c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	697a      	ldr	r2, [r7, #20]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	dbf1      	blt.n	8000ed8 <_write+0x12>
	}
	return len;
 8000ef4:	687b      	ldr	r3, [r7, #4]
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3718      	adds	r7, #24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <_close>:

int _close(int file)
{
 8000efe:	b480      	push	{r7}
 8000f00:	b083      	sub	sp, #12
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
	return -1;
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b083      	sub	sp, #12
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
 8000f1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f26:	605a      	str	r2, [r3, #4]
	return 0;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <_isatty>:

int _isatty(int file)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
	return 1;
 8000f3e:	2301      	movs	r3, #1
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
	return 0;
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
	...

08000f68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f70:	4a14      	ldr	r2, [pc, #80]	@ (8000fc4 <_sbrk+0x5c>)
 8000f72:	4b15      	ldr	r3, [pc, #84]	@ (8000fc8 <_sbrk+0x60>)
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f7c:	4b13      	ldr	r3, [pc, #76]	@ (8000fcc <_sbrk+0x64>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d102      	bne.n	8000f8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f84:	4b11      	ldr	r3, [pc, #68]	@ (8000fcc <_sbrk+0x64>)
 8000f86:	4a12      	ldr	r2, [pc, #72]	@ (8000fd0 <_sbrk+0x68>)
 8000f88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f8a:	4b10      	ldr	r3, [pc, #64]	@ (8000fcc <_sbrk+0x64>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d207      	bcs.n	8000fa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f98:	f003 f80c 	bl	8003fb4 <__errno>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	220c      	movs	r2, #12
 8000fa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa6:	e009      	b.n	8000fbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fa8:	4b08      	ldr	r3, [pc, #32]	@ (8000fcc <_sbrk+0x64>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fae:	4b07      	ldr	r3, [pc, #28]	@ (8000fcc <_sbrk+0x64>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	4a05      	ldr	r2, [pc, #20]	@ (8000fcc <_sbrk+0x64>)
 8000fb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fba:	68fb      	ldr	r3, [r7, #12]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20020000 	.word	0x20020000
 8000fc8:	00000400 	.word	0x00000400
 8000fcc:	20000158 	.word	0x20000158
 8000fd0:	200002b0 	.word	0x200002b0

08000fd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fd8:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <SystemInit+0x20>)
 8000fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fde:	4a05      	ldr	r2, [pc, #20]	@ (8000ff4 <SystemInit+0x20>)
 8000fe0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fe4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ff8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001030 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ffc:	480d      	ldr	r0, [pc, #52]	@ (8001034 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ffe:	490e      	ldr	r1, [pc, #56]	@ (8001038 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001000:	4a0e      	ldr	r2, [pc, #56]	@ (800103c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001004:	e002      	b.n	800100c <LoopCopyDataInit>

08001006 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001006:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001008:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100a:	3304      	adds	r3, #4

0800100c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800100c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001010:	d3f9      	bcc.n	8001006 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001012:	4a0b      	ldr	r2, [pc, #44]	@ (8001040 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001014:	4c0b      	ldr	r4, [pc, #44]	@ (8001044 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001018:	e001      	b.n	800101e <LoopFillZerobss>

0800101a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800101c:	3204      	adds	r2, #4

0800101e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001020:	d3fb      	bcc.n	800101a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001022:	f7ff ffd7 	bl	8000fd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001026:	f002 ffcb 	bl	8003fc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800102a:	f7ff fb1d 	bl	8000668 <main>
  bx  lr    
 800102e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001030:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001034:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001038:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800103c:	08004fc4 	.word	0x08004fc4
  ldr r2, =_sbss
 8001040:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001044:	200002ac 	.word	0x200002ac

08001048 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001048:	e7fe      	b.n	8001048 <ADC_IRQHandler>
	...

0800104c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001050:	4b0e      	ldr	r3, [pc, #56]	@ (800108c <HAL_Init+0x40>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a0d      	ldr	r2, [pc, #52]	@ (800108c <HAL_Init+0x40>)
 8001056:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800105a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800105c:	4b0b      	ldr	r3, [pc, #44]	@ (800108c <HAL_Init+0x40>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a0a      	ldr	r2, [pc, #40]	@ (800108c <HAL_Init+0x40>)
 8001062:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001066:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001068:	4b08      	ldr	r3, [pc, #32]	@ (800108c <HAL_Init+0x40>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a07      	ldr	r2, [pc, #28]	@ (800108c <HAL_Init+0x40>)
 800106e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001072:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001074:	2003      	movs	r0, #3
 8001076:	f000 ff6f 	bl	8001f58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800107a:	2000      	movs	r0, #0
 800107c:	f000 f808 	bl	8001090 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001080:	f7ff fe06 	bl	8000c90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40023c00 	.word	0x40023c00

08001090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001098:	4b12      	ldr	r3, [pc, #72]	@ (80010e4 <HAL_InitTick+0x54>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b12      	ldr	r3, [pc, #72]	@ (80010e8 <HAL_InitTick+0x58>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	4619      	mov	r1, r3
 80010a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 ff87 	bl	8001fc2 <HAL_SYSTICK_Config>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e00e      	b.n	80010dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2b0f      	cmp	r3, #15
 80010c2:	d80a      	bhi.n	80010da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c4:	2200      	movs	r2, #0
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	f04f 30ff 	mov.w	r0, #4294967295
 80010cc:	f000 ff4f 	bl	8001f6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d0:	4a06      	ldr	r2, [pc, #24]	@ (80010ec <HAL_InitTick+0x5c>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010d6:	2300      	movs	r3, #0
 80010d8:	e000      	b.n	80010dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000004 	.word	0x20000004
 80010e8:	2000000c 	.word	0x2000000c
 80010ec:	20000008 	.word	0x20000008

080010f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f4:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <HAL_IncTick+0x20>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <HAL_IncTick+0x24>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4413      	add	r3, r2
 8001100:	4a04      	ldr	r2, [pc, #16]	@ (8001114 <HAL_IncTick+0x24>)
 8001102:	6013      	str	r3, [r2, #0]
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	2000000c 	.word	0x2000000c
 8001114:	2000015c 	.word	0x2000015c

08001118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return uwTick;
 800111c:	4b03      	ldr	r3, [pc, #12]	@ (800112c <HAL_GetTick+0x14>)
 800111e:	681b      	ldr	r3, [r3, #0]
}
 8001120:	4618      	mov	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	2000015c 	.word	0x2000015c

08001130 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e0ed      	b.n	800131e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	d102      	bne.n	8001154 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff fe08 	bl	8000d64 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f042 0201 	orr.w	r2, r2, #1
 8001162:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001164:	f7ff ffd8 	bl	8001118 <HAL_GetTick>
 8001168:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800116a:	e012      	b.n	8001192 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800116c:	f7ff ffd4 	bl	8001118 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b0a      	cmp	r3, #10
 8001178:	d90b      	bls.n	8001192 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800117e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2205      	movs	r2, #5
 800118a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e0c5      	b.n	800131e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	2b00      	cmp	r3, #0
 800119e:	d0e5      	beq.n	800116c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 0202 	bic.w	r2, r2, #2
 80011ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011b0:	f7ff ffb2 	bl	8001118 <HAL_GetTick>
 80011b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011b6:	e012      	b.n	80011de <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011b8:	f7ff ffae 	bl	8001118 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b0a      	cmp	r3, #10
 80011c4:	d90b      	bls.n	80011de <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2205      	movs	r2, #5
 80011d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e09f      	b.n	800131e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1e5      	bne.n	80011b8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	7e1b      	ldrb	r3, [r3, #24]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d108      	bne.n	8001206 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	e007      	b.n	8001216 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001214:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	7e5b      	ldrb	r3, [r3, #25]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d108      	bne.n	8001230 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	e007      	b.n	8001240 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800123e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	7e9b      	ldrb	r3, [r3, #26]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d108      	bne.n	800125a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f042 0220 	orr.w	r2, r2, #32
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	e007      	b.n	800126a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f022 0220 	bic.w	r2, r2, #32
 8001268:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	7edb      	ldrb	r3, [r3, #27]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d108      	bne.n	8001284 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f022 0210 	bic.w	r2, r2, #16
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	e007      	b.n	8001294 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f042 0210 	orr.w	r2, r2, #16
 8001292:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	7f1b      	ldrb	r3, [r3, #28]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d108      	bne.n	80012ae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f042 0208 	orr.w	r2, r2, #8
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	e007      	b.n	80012be <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 0208 	bic.w	r2, r2, #8
 80012bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	7f5b      	ldrb	r3, [r3, #29]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d108      	bne.n	80012d8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f042 0204 	orr.w	r2, r2, #4
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	e007      	b.n	80012e8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 0204 	bic.w	r2, r2, #4
 80012e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689a      	ldr	r2, [r3, #8]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	431a      	orrs	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	431a      	orrs	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	695b      	ldr	r3, [r3, #20]
 80012fc:	ea42 0103 	orr.w	r1, r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	1e5a      	subs	r2, r3, #1
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	430a      	orrs	r2, r1
 800130c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2201      	movs	r2, #1
 8001318:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001328:	b480      	push	{r7}
 800132a:	b087      	sub	sp, #28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800133e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001340:	7cfb      	ldrb	r3, [r7, #19]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d003      	beq.n	800134e <HAL_CAN_ConfigFilter+0x26>
 8001346:	7cfb      	ldrb	r3, [r7, #19]
 8001348:	2b02      	cmp	r3, #2
 800134a:	f040 80be 	bne.w	80014ca <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800134e:	4b65      	ldr	r3, [pc, #404]	@ (80014e4 <HAL_CAN_ConfigFilter+0x1bc>)
 8001350:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001358:	f043 0201 	orr.w	r2, r3, #1
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001368:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800137c:	021b      	lsls	r3, r3, #8
 800137e:	431a      	orrs	r2, r3
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	f003 031f 	and.w	r3, r3, #31
 800138e:	2201      	movs	r2, #1
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	43db      	mvns	r3, r3
 80013a0:	401a      	ands	r2, r3
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	69db      	ldr	r3, [r3, #28]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d123      	bne.n	80013f8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	43db      	mvns	r3, r3
 80013ba:	401a      	ands	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80013d2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	3248      	adds	r2, #72	@ 0x48
 80013d8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013ec:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013ee:	6979      	ldr	r1, [r7, #20]
 80013f0:	3348      	adds	r3, #72	@ 0x48
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	440b      	add	r3, r1
 80013f6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	69db      	ldr	r3, [r3, #28]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d122      	bne.n	8001446 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	431a      	orrs	r2, r3
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001420:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	3248      	adds	r2, #72	@ 0x48
 8001426:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800143a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800143c:	6979      	ldr	r1, [r7, #20]
 800143e:	3348      	adds	r3, #72	@ 0x48
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	440b      	add	r3, r1
 8001444:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d109      	bne.n	8001462 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	43db      	mvns	r3, r3
 8001458:	401a      	ands	r2, r3
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001460:	e007      	b.n	8001472 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	431a      	orrs	r2, r3
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d109      	bne.n	800148e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	43db      	mvns	r3, r3
 8001484:	401a      	ands	r2, r3
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800148c:	e007      	b.n	800149e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	431a      	orrs	r2, r3
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	6a1b      	ldr	r3, [r3, #32]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d107      	bne.n	80014b6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	431a      	orrs	r2, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80014bc:	f023 0201 	bic.w	r2, r3, #1
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80014c6:	2300      	movs	r3, #0
 80014c8:	e006      	b.n	80014d8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ce:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
  }
}
 80014d8:	4618      	mov	r0, r3
 80014da:	371c      	adds	r7, #28
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	40006400 	.word	0x40006400

080014e8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d12e      	bne.n	800155a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2202      	movs	r2, #2
 8001500:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 0201 	bic.w	r2, r2, #1
 8001512:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001514:	f7ff fe00 	bl	8001118 <HAL_GetTick>
 8001518:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800151a:	e012      	b.n	8001542 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800151c:	f7ff fdfc 	bl	8001118 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b0a      	cmp	r3, #10
 8001528:	d90b      	bls.n	8001542 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800152e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2205      	movs	r2, #5
 800153a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e012      	b.n	8001568 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1e5      	bne.n	800151c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001556:	2300      	movs	r3, #0
 8001558:	e006      	b.n	8001568 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800155e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
  }
}
 8001568:	4618      	mov	r0, r3
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001570:	b480      	push	{r7}
 8001572:	b089      	sub	sp, #36	@ 0x24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
 800157c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001584:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800158e:	7ffb      	ldrb	r3, [r7, #31]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d003      	beq.n	800159c <HAL_CAN_AddTxMessage+0x2c>
 8001594:	7ffb      	ldrb	r3, [r7, #31]
 8001596:	2b02      	cmp	r3, #2
 8001598:	f040 80b8 	bne.w	800170c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d10a      	bne.n	80015bc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d105      	bne.n	80015bc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f000 80a0 	beq.w	80016fc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	0e1b      	lsrs	r3, r3, #24
 80015c0:	f003 0303 	and.w	r3, r3, #3
 80015c4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d907      	bls.n	80015dc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e09e      	b.n	800171a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80015dc:	2201      	movs	r2, #1
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	409a      	lsls	r2, r3
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d10d      	bne.n	800160a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80015f8:	68f9      	ldr	r1, [r7, #12]
 80015fa:	6809      	ldr	r1, [r1, #0]
 80015fc:	431a      	orrs	r2, r3
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	3318      	adds	r3, #24
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	440b      	add	r3, r1
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	e00f      	b.n	800162a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001614:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800161a:	68f9      	ldr	r1, [r7, #12]
 800161c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800161e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	3318      	adds	r3, #24
 8001624:	011b      	lsls	r3, r3, #4
 8001626:	440b      	add	r3, r1
 8001628:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6819      	ldr	r1, [r3, #0]
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	691a      	ldr	r2, [r3, #16]
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	3318      	adds	r3, #24
 8001636:	011b      	lsls	r3, r3, #4
 8001638:	440b      	add	r3, r1
 800163a:	3304      	adds	r3, #4
 800163c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	7d1b      	ldrb	r3, [r3, #20]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d111      	bne.n	800166a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	3318      	adds	r3, #24
 800164e:	011b      	lsls	r3, r3, #4
 8001650:	4413      	add	r3, r2
 8001652:	3304      	adds	r3, #4
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	6811      	ldr	r1, [r2, #0]
 800165a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	3318      	adds	r3, #24
 8001662:	011b      	lsls	r3, r3, #4
 8001664:	440b      	add	r3, r1
 8001666:	3304      	adds	r3, #4
 8001668:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	3307      	adds	r3, #7
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	061a      	lsls	r2, r3, #24
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3306      	adds	r3, #6
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	041b      	lsls	r3, r3, #16
 800167a:	431a      	orrs	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3305      	adds	r3, #5
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	021b      	lsls	r3, r3, #8
 8001684:	4313      	orrs	r3, r2
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	3204      	adds	r2, #4
 800168a:	7812      	ldrb	r2, [r2, #0]
 800168c:	4610      	mov	r0, r2
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	6811      	ldr	r1, [r2, #0]
 8001692:	ea43 0200 	orr.w	r2, r3, r0
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	011b      	lsls	r3, r3, #4
 800169a:	440b      	add	r3, r1
 800169c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80016a0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	3303      	adds	r3, #3
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	061a      	lsls	r2, r3, #24
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	3302      	adds	r3, #2
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	041b      	lsls	r3, r3, #16
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3301      	adds	r3, #1
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	4313      	orrs	r3, r2
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	7812      	ldrb	r2, [r2, #0]
 80016c2:	4610      	mov	r0, r2
 80016c4:	68fa      	ldr	r2, [r7, #12]
 80016c6:	6811      	ldr	r1, [r2, #0]
 80016c8:	ea43 0200 	orr.w	r2, r3, r0
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	011b      	lsls	r3, r3, #4
 80016d0:	440b      	add	r3, r1
 80016d2:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80016d6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	3318      	adds	r3, #24
 80016e0:	011b      	lsls	r3, r3, #4
 80016e2:	4413      	add	r3, r2
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	6811      	ldr	r1, [r2, #0]
 80016ea:	f043 0201 	orr.w	r2, r3, #1
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	3318      	adds	r3, #24
 80016f2:	011b      	lsls	r3, r3, #4
 80016f4:	440b      	add	r3, r1
 80016f6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80016f8:	2300      	movs	r3, #0
 80016fa:	e00e      	b.n	800171a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001700:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e006      	b.n	800171a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001710:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
  }
}
 800171a:	4618      	mov	r0, r3
 800171c:	3724      	adds	r7, #36	@ 0x24
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001726:	b480      	push	{r7}
 8001728:	b087      	sub	sp, #28
 800172a:	af00      	add	r7, sp, #0
 800172c:	60f8      	str	r0, [r7, #12]
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	607a      	str	r2, [r7, #4]
 8001732:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f893 3020 	ldrb.w	r3, [r3, #32]
 800173a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800173c:	7dfb      	ldrb	r3, [r7, #23]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d003      	beq.n	800174a <HAL_CAN_GetRxMessage+0x24>
 8001742:	7dfb      	ldrb	r3, [r7, #23]
 8001744:	2b02      	cmp	r3, #2
 8001746:	f040 80f3 	bne.w	8001930 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10e      	bne.n	800176e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d116      	bne.n	800178c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001762:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e0e7      	b.n	800193e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	f003 0303 	and.w	r3, r3, #3
 8001778:	2b00      	cmp	r3, #0
 800177a:	d107      	bne.n	800178c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001780:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e0d8      	b.n	800193e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	331b      	adds	r3, #27
 8001794:	011b      	lsls	r3, r3, #4
 8001796:	4413      	add	r3, r2
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0204 	and.w	r2, r3, #4
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10c      	bne.n	80017c4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	331b      	adds	r3, #27
 80017b2:	011b      	lsls	r3, r3, #4
 80017b4:	4413      	add	r3, r2
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	0d5b      	lsrs	r3, r3, #21
 80017ba:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	e00b      	b.n	80017dc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	331b      	adds	r3, #27
 80017cc:	011b      	lsls	r3, r3, #4
 80017ce:	4413      	add	r3, r2
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	08db      	lsrs	r3, r3, #3
 80017d4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	331b      	adds	r3, #27
 80017e4:	011b      	lsls	r3, r3, #4
 80017e6:	4413      	add	r3, r2
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0202 	and.w	r2, r3, #2
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	331b      	adds	r3, #27
 80017fa:	011b      	lsls	r3, r3, #4
 80017fc:	4413      	add	r3, r2
 80017fe:	3304      	adds	r3, #4
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 020f 	and.w	r2, r3, #15
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	331b      	adds	r3, #27
 8001812:	011b      	lsls	r3, r3, #4
 8001814:	4413      	add	r3, r2
 8001816:	3304      	adds	r3, #4
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	0a1b      	lsrs	r3, r3, #8
 800181c:	b2da      	uxtb	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	331b      	adds	r3, #27
 800182a:	011b      	lsls	r3, r3, #4
 800182c:	4413      	add	r3, r2
 800182e:	3304      	adds	r3, #4
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	0c1b      	lsrs	r3, r3, #16
 8001834:	b29a      	uxth	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	011b      	lsls	r3, r3, #4
 8001842:	4413      	add	r3, r2
 8001844:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	b2da      	uxtb	r2, r3
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	011b      	lsls	r3, r3, #4
 8001858:	4413      	add	r3, r2
 800185a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	0a1a      	lsrs	r2, r3, #8
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	3301      	adds	r3, #1
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	011b      	lsls	r3, r3, #4
 8001872:	4413      	add	r3, r2
 8001874:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	0c1a      	lsrs	r2, r3, #16
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	3302      	adds	r3, #2
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	4413      	add	r3, r2
 800188e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	0e1a      	lsrs	r2, r3, #24
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	3303      	adds	r3, #3
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	011b      	lsls	r3, r3, #4
 80018a6:	4413      	add	r3, r2
 80018a8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	3304      	adds	r3, #4
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	4413      	add	r3, r2
 80018c0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	0a1a      	lsrs	r2, r3, #8
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	3305      	adds	r3, #5
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	011b      	lsls	r3, r3, #4
 80018d8:	4413      	add	r3, r2
 80018da:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	0c1a      	lsrs	r2, r3, #16
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	3306      	adds	r3, #6
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	011b      	lsls	r3, r3, #4
 80018f2:	4413      	add	r3, r2
 80018f4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	0e1a      	lsrs	r2, r3, #24
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	3307      	adds	r3, #7
 8001900:	b2d2      	uxtb	r2, r2
 8001902:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d108      	bne.n	800191c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68da      	ldr	r2, [r3, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f042 0220 	orr.w	r2, r2, #32
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	e007      	b.n	800192c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	691a      	ldr	r2, [r3, #16]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f042 0220 	orr.w	r2, r2, #32
 800192a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800192c:	2300      	movs	r3, #0
 800192e:	e006      	b.n	800193e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001934:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
  }
}
 800193e:	4618      	mov	r0, r3
 8001940:	371c      	adds	r7, #28
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800194a:	b480      	push	{r7}
 800194c:	b085      	sub	sp, #20
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f893 3020 	ldrb.w	r3, [r3, #32]
 800195a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d002      	beq.n	8001968 <HAL_CAN_ActivateNotification+0x1e>
 8001962:	7bfb      	ldrb	r3, [r7, #15]
 8001964:	2b02      	cmp	r3, #2
 8001966:	d109      	bne.n	800197c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6959      	ldr	r1, [r3, #20]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	430a      	orrs	r2, r1
 8001976:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001978:	2300      	movs	r3, #0
 800197a:	e006      	b.n	800198a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001980:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
  }
}
 800198a:	4618      	mov	r0, r3
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b08a      	sub	sp, #40	@ 0x28
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800199e:	2300      	movs	r3, #0
 80019a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	695b      	ldr	r3, [r3, #20]
 80019a8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80019d2:	6a3b      	ldr	r3, [r7, #32]
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d07c      	beq.n	8001ad6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d023      	beq.n	8001a2e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2201      	movs	r2, #1
 80019ec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff f839 	bl	8000a70 <HAL_CAN_TxMailbox0CompleteCallback>
 80019fe:	e016      	b.n	8001a2e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	f003 0304 	and.w	r3, r3, #4
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d004      	beq.n	8001a14 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a10:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a12:	e00c      	b.n	8001a2e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d004      	beq.n	8001a28 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a20:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a24:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a26:	e002      	b.n	8001a2e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f000 f96b 	bl	8001d04 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d024      	beq.n	8001a82 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a40:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d003      	beq.n	8001a54 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff f82f 	bl	8000ab0 <HAL_CAN_TxMailbox1CompleteCallback>
 8001a52:	e016      	b.n	8001a82 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d004      	beq.n	8001a68 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a60:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a64:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a66:	e00c      	b.n	8001a82 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d004      	beq.n	8001a7c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a78:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a7a:	e002      	b.n	8001a82 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 f94b 	bl	8001d18 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d024      	beq.n	8001ad6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a94:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff f825 	bl	8000af0 <HAL_CAN_TxMailbox2CompleteCallback>
 8001aa6:	e016      	b.n	8001ad6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d004      	beq.n	8001abc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ab8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aba:	e00c      	b.n	8001ad6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d004      	beq.n	8001ad0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001acc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ace:	e002      	b.n	8001ad6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 f92b 	bl	8001d2c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001ad6:	6a3b      	ldr	r3, [r7, #32]
 8001ad8:	f003 0308 	and.w	r3, r3, #8
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d00c      	beq.n	8001afa <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	f003 0310 	and.w	r3, r3, #16
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d007      	beq.n	8001afa <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001af0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2210      	movs	r2, #16
 8001af8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001afa:	6a3b      	ldr	r3, [r7, #32]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d00b      	beq.n	8001b1c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d006      	beq.n	8001b1c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2208      	movs	r2, #8
 8001b14:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f912 	bl	8001d40 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001b1c:	6a3b      	ldr	r3, [r7, #32]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d009      	beq.n	8001b3a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	f003 0303 	and.w	r3, r3, #3
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d002      	beq.n	8001b3a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7fe fffb 	bl	8000b30 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b3a:	6a3b      	ldr	r3, [r7, #32]
 8001b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d00c      	beq.n	8001b5e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	f003 0310 	and.w	r3, r3, #16
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d007      	beq.n	8001b5e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b50:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b54:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2210      	movs	r2, #16
 8001b5c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	f003 0320 	and.w	r3, r3, #32
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d00b      	beq.n	8001b80 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d006      	beq.n	8001b80 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2208      	movs	r2, #8
 8001b78:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f8f4 	bl	8001d68 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001b80:	6a3b      	ldr	r3, [r7, #32]
 8001b82:	f003 0310 	and.w	r3, r3, #16
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d009      	beq.n	8001b9e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d002      	beq.n	8001b9e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 f8db 	bl	8001d54 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b9e:	6a3b      	ldr	r3, [r7, #32]
 8001ba0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00b      	beq.n	8001bc0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f003 0310 	and.w	r3, r3, #16
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d006      	beq.n	8001bc0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2210      	movs	r2, #16
 8001bb8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f8de 	bl	8001d7c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001bc0:	6a3b      	ldr	r3, [r7, #32]
 8001bc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00b      	beq.n	8001be2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	f003 0308 	and.w	r3, r3, #8
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d006      	beq.n	8001be2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2208      	movs	r2, #8
 8001bda:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 f8d7 	bl	8001d90 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001be2:	6a3b      	ldr	r3, [r7, #32]
 8001be4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d07b      	beq.n	8001ce4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f003 0304 	and.w	r3, r3, #4
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d072      	beq.n	8001cdc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bf6:	6a3b      	ldr	r3, [r7, #32]
 8001bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d008      	beq.n	8001c12 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c12:	6a3b      	ldr	r3, [r7, #32]
 8001c14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d008      	beq.n	8001c2e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c28:	f043 0302 	orr.w	r3, r3, #2
 8001c2c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c2e:	6a3b      	ldr	r3, [r7, #32]
 8001c30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d008      	beq.n	8001c4a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c44:	f043 0304 	orr.w	r3, r3, #4
 8001c48:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c4a:	6a3b      	ldr	r3, [r7, #32]
 8001c4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d043      	beq.n	8001cdc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d03e      	beq.n	8001cdc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c64:	2b60      	cmp	r3, #96	@ 0x60
 8001c66:	d02b      	beq.n	8001cc0 <HAL_CAN_IRQHandler+0x32a>
 8001c68:	2b60      	cmp	r3, #96	@ 0x60
 8001c6a:	d82e      	bhi.n	8001cca <HAL_CAN_IRQHandler+0x334>
 8001c6c:	2b50      	cmp	r3, #80	@ 0x50
 8001c6e:	d022      	beq.n	8001cb6 <HAL_CAN_IRQHandler+0x320>
 8001c70:	2b50      	cmp	r3, #80	@ 0x50
 8001c72:	d82a      	bhi.n	8001cca <HAL_CAN_IRQHandler+0x334>
 8001c74:	2b40      	cmp	r3, #64	@ 0x40
 8001c76:	d019      	beq.n	8001cac <HAL_CAN_IRQHandler+0x316>
 8001c78:	2b40      	cmp	r3, #64	@ 0x40
 8001c7a:	d826      	bhi.n	8001cca <HAL_CAN_IRQHandler+0x334>
 8001c7c:	2b30      	cmp	r3, #48	@ 0x30
 8001c7e:	d010      	beq.n	8001ca2 <HAL_CAN_IRQHandler+0x30c>
 8001c80:	2b30      	cmp	r3, #48	@ 0x30
 8001c82:	d822      	bhi.n	8001cca <HAL_CAN_IRQHandler+0x334>
 8001c84:	2b10      	cmp	r3, #16
 8001c86:	d002      	beq.n	8001c8e <HAL_CAN_IRQHandler+0x2f8>
 8001c88:	2b20      	cmp	r3, #32
 8001c8a:	d005      	beq.n	8001c98 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c8c:	e01d      	b.n	8001cca <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c90:	f043 0308 	orr.w	r3, r3, #8
 8001c94:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c96:	e019      	b.n	8001ccc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9a:	f043 0310 	orr.w	r3, r3, #16
 8001c9e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ca0:	e014      	b.n	8001ccc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca4:	f043 0320 	orr.w	r3, r3, #32
 8001ca8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001caa:	e00f      	b.n	8001ccc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cb2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cb4:	e00a      	b.n	8001ccc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cbc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cbe:	e005      	b.n	8001ccc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cc6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cc8:	e000      	b.n	8001ccc <HAL_CAN_IRQHandler+0x336>
            break;
 8001cca:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	699a      	ldr	r2, [r3, #24]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001cda:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2204      	movs	r2, #4
 8001ce2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d008      	beq.n	8001cfc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 f854 	bl	8001da4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	3728      	adds	r7, #40	@ 0x28
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001dfc <__NVIC_SetPriorityGrouping+0x44>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dce:	68ba      	ldr	r2, [r7, #8]
 8001dd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001de0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001de4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dea:	4a04      	ldr	r2, [pc, #16]	@ (8001dfc <__NVIC_SetPriorityGrouping+0x44>)
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	60d3      	str	r3, [r2, #12]
}
 8001df0:	bf00      	nop
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e04:	4b04      	ldr	r3, [pc, #16]	@ (8001e18 <__NVIC_GetPriorityGrouping+0x18>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	0a1b      	lsrs	r3, r3, #8
 8001e0a:	f003 0307 	and.w	r3, r3, #7
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	db0b      	blt.n	8001e46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e2e:	79fb      	ldrb	r3, [r7, #7]
 8001e30:	f003 021f 	and.w	r2, r3, #31
 8001e34:	4907      	ldr	r1, [pc, #28]	@ (8001e54 <__NVIC_EnableIRQ+0x38>)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	095b      	lsrs	r3, r3, #5
 8001e3c:	2001      	movs	r0, #1
 8001e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	e000e100 	.word	0xe000e100

08001e58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	6039      	str	r1, [r7, #0]
 8001e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	db0a      	blt.n	8001e82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	b2da      	uxtb	r2, r3
 8001e70:	490c      	ldr	r1, [pc, #48]	@ (8001ea4 <__NVIC_SetPriority+0x4c>)
 8001e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e76:	0112      	lsls	r2, r2, #4
 8001e78:	b2d2      	uxtb	r2, r2
 8001e7a:	440b      	add	r3, r1
 8001e7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e80:	e00a      	b.n	8001e98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	4908      	ldr	r1, [pc, #32]	@ (8001ea8 <__NVIC_SetPriority+0x50>)
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	3b04      	subs	r3, #4
 8001e90:	0112      	lsls	r2, r2, #4
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	440b      	add	r3, r1
 8001e96:	761a      	strb	r2, [r3, #24]
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	e000e100 	.word	0xe000e100
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b089      	sub	sp, #36	@ 0x24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f1c3 0307 	rsb	r3, r3, #7
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	bf28      	it	cs
 8001eca:	2304      	movcs	r3, #4
 8001ecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	2b06      	cmp	r3, #6
 8001ed4:	d902      	bls.n	8001edc <NVIC_EncodePriority+0x30>
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	3b03      	subs	r3, #3
 8001eda:	e000      	b.n	8001ede <NVIC_EncodePriority+0x32>
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43da      	mvns	r2, r3
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	401a      	ands	r2, r3
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	fa01 f303 	lsl.w	r3, r1, r3
 8001efe:	43d9      	mvns	r1, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f04:	4313      	orrs	r3, r2
         );
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3724      	adds	r7, #36	@ 0x24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
	...

08001f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f24:	d301      	bcc.n	8001f2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f26:	2301      	movs	r3, #1
 8001f28:	e00f      	b.n	8001f4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f54 <SysTick_Config+0x40>)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f32:	210f      	movs	r1, #15
 8001f34:	f04f 30ff 	mov.w	r0, #4294967295
 8001f38:	f7ff ff8e 	bl	8001e58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f3c:	4b05      	ldr	r3, [pc, #20]	@ (8001f54 <SysTick_Config+0x40>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f42:	4b04      	ldr	r3, [pc, #16]	@ (8001f54 <SysTick_Config+0x40>)
 8001f44:	2207      	movs	r2, #7
 8001f46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	e000e010 	.word	0xe000e010

08001f58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7ff ff29 	bl	8001db8 <__NVIC_SetPriorityGrouping>
}
 8001f66:	bf00      	nop
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b086      	sub	sp, #24
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	4603      	mov	r3, r0
 8001f76:	60b9      	str	r1, [r7, #8]
 8001f78:	607a      	str	r2, [r7, #4]
 8001f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f80:	f7ff ff3e 	bl	8001e00 <__NVIC_GetPriorityGrouping>
 8001f84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	68b9      	ldr	r1, [r7, #8]
 8001f8a:	6978      	ldr	r0, [r7, #20]
 8001f8c:	f7ff ff8e 	bl	8001eac <NVIC_EncodePriority>
 8001f90:	4602      	mov	r2, r0
 8001f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f96:	4611      	mov	r1, r2
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff ff5d 	bl	8001e58 <__NVIC_SetPriority>
}
 8001f9e:	bf00      	nop
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	4603      	mov	r3, r0
 8001fae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff ff31 	bl	8001e1c <__NVIC_EnableIRQ>
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff ffa2 	bl	8001f14 <SysTick_Config>
 8001fd0:	4603      	mov	r3, r0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
	...

08001fdc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	d106      	bne.n	8001ff8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001fea:	4b09      	ldr	r3, [pc, #36]	@ (8002010 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a08      	ldr	r2, [pc, #32]	@ (8002010 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001ff0:	f043 0304 	orr.w	r3, r3, #4
 8001ff4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001ff6:	e005      	b.n	8002004 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001ff8:	4b05      	ldr	r3, [pc, #20]	@ (8002010 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a04      	ldr	r2, [pc, #16]	@ (8002010 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001ffe:	f023 0304 	bic.w	r3, r3, #4
 8002002:	6013      	str	r3, [r2, #0]
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	e000e010 	.word	0xe000e010

08002014 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002018:	f000 f802 	bl	8002020 <HAL_SYSTICK_Callback>
}
 800201c:	bf00      	nop
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
	...

08002030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002030:	b480      	push	{r7}
 8002032:	b089      	sub	sp, #36	@ 0x24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800203e:	2300      	movs	r3, #0
 8002040:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002042:	2300      	movs	r3, #0
 8002044:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002046:	2300      	movs	r3, #0
 8002048:	61fb      	str	r3, [r7, #28]
 800204a:	e165      	b.n	8002318 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800204c:	2201      	movs	r2, #1
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	4013      	ands	r3, r2
 800205e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	429a      	cmp	r2, r3
 8002066:	f040 8154 	bne.w	8002312 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	2b01      	cmp	r3, #1
 8002074:	d005      	beq.n	8002082 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800207e:	2b02      	cmp	r3, #2
 8002080:	d130      	bne.n	80020e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	2203      	movs	r2, #3
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	68da      	ldr	r2, [r3, #12]
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020b8:	2201      	movs	r2, #1
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	091b      	lsrs	r3, r3, #4
 80020ce:	f003 0201 	and.w	r2, r3, #1
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4313      	orrs	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	2b03      	cmp	r3, #3
 80020ee:	d017      	beq.n	8002120 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	2203      	movs	r2, #3
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 0303 	and.w	r3, r3, #3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d123      	bne.n	8002174 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	08da      	lsrs	r2, r3, #3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3208      	adds	r2, #8
 8002134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002138:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	220f      	movs	r2, #15
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4013      	ands	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	691a      	ldr	r2, [r3, #16]
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4313      	orrs	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	08da      	lsrs	r2, r3, #3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3208      	adds	r2, #8
 800216e:	69b9      	ldr	r1, [r7, #24]
 8002170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	2203      	movs	r2, #3
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 0203 	and.w	r2, r3, #3
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4313      	orrs	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f000 80ae 	beq.w	8002312 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	4b5d      	ldr	r3, [pc, #372]	@ (8002330 <HAL_GPIO_Init+0x300>)
 80021bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021be:	4a5c      	ldr	r2, [pc, #368]	@ (8002330 <HAL_GPIO_Init+0x300>)
 80021c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80021c6:	4b5a      	ldr	r3, [pc, #360]	@ (8002330 <HAL_GPIO_Init+0x300>)
 80021c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021d2:	4a58      	ldr	r2, [pc, #352]	@ (8002334 <HAL_GPIO_Init+0x304>)
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	089b      	lsrs	r3, r3, #2
 80021d8:	3302      	adds	r3, #2
 80021da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f003 0303 	and.w	r3, r3, #3
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	220f      	movs	r2, #15
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a4f      	ldr	r2, [pc, #316]	@ (8002338 <HAL_GPIO_Init+0x308>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d025      	beq.n	800224a <HAL_GPIO_Init+0x21a>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a4e      	ldr	r2, [pc, #312]	@ (800233c <HAL_GPIO_Init+0x30c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d01f      	beq.n	8002246 <HAL_GPIO_Init+0x216>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a4d      	ldr	r2, [pc, #308]	@ (8002340 <HAL_GPIO_Init+0x310>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d019      	beq.n	8002242 <HAL_GPIO_Init+0x212>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a4c      	ldr	r2, [pc, #304]	@ (8002344 <HAL_GPIO_Init+0x314>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d013      	beq.n	800223e <HAL_GPIO_Init+0x20e>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a4b      	ldr	r2, [pc, #300]	@ (8002348 <HAL_GPIO_Init+0x318>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d00d      	beq.n	800223a <HAL_GPIO_Init+0x20a>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a4a      	ldr	r2, [pc, #296]	@ (800234c <HAL_GPIO_Init+0x31c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d007      	beq.n	8002236 <HAL_GPIO_Init+0x206>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a49      	ldr	r2, [pc, #292]	@ (8002350 <HAL_GPIO_Init+0x320>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d101      	bne.n	8002232 <HAL_GPIO_Init+0x202>
 800222e:	2306      	movs	r3, #6
 8002230:	e00c      	b.n	800224c <HAL_GPIO_Init+0x21c>
 8002232:	2307      	movs	r3, #7
 8002234:	e00a      	b.n	800224c <HAL_GPIO_Init+0x21c>
 8002236:	2305      	movs	r3, #5
 8002238:	e008      	b.n	800224c <HAL_GPIO_Init+0x21c>
 800223a:	2304      	movs	r3, #4
 800223c:	e006      	b.n	800224c <HAL_GPIO_Init+0x21c>
 800223e:	2303      	movs	r3, #3
 8002240:	e004      	b.n	800224c <HAL_GPIO_Init+0x21c>
 8002242:	2302      	movs	r3, #2
 8002244:	e002      	b.n	800224c <HAL_GPIO_Init+0x21c>
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <HAL_GPIO_Init+0x21c>
 800224a:	2300      	movs	r3, #0
 800224c:	69fa      	ldr	r2, [r7, #28]
 800224e:	f002 0203 	and.w	r2, r2, #3
 8002252:	0092      	lsls	r2, r2, #2
 8002254:	4093      	lsls	r3, r2
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4313      	orrs	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800225c:	4935      	ldr	r1, [pc, #212]	@ (8002334 <HAL_GPIO_Init+0x304>)
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	089b      	lsrs	r3, r3, #2
 8002262:	3302      	adds	r3, #2
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800226a:	4b3a      	ldr	r3, [pc, #232]	@ (8002354 <HAL_GPIO_Init+0x324>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	43db      	mvns	r3, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4013      	ands	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	4313      	orrs	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800228e:	4a31      	ldr	r2, [pc, #196]	@ (8002354 <HAL_GPIO_Init+0x324>)
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002294:	4b2f      	ldr	r3, [pc, #188]	@ (8002354 <HAL_GPIO_Init+0x324>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	43db      	mvns	r3, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4013      	ands	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022b8:	4a26      	ldr	r2, [pc, #152]	@ (8002354 <HAL_GPIO_Init+0x324>)
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022be:	4b25      	ldr	r3, [pc, #148]	@ (8002354 <HAL_GPIO_Init+0x324>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	43db      	mvns	r3, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4013      	ands	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002354 <HAL_GPIO_Init+0x324>)
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002354 <HAL_GPIO_Init+0x324>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	4313      	orrs	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800230c:	4a11      	ldr	r2, [pc, #68]	@ (8002354 <HAL_GPIO_Init+0x324>)
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	3301      	adds	r3, #1
 8002316:	61fb      	str	r3, [r7, #28]
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	2b0f      	cmp	r3, #15
 800231c:	f67f ae96 	bls.w	800204c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002320:	bf00      	nop
 8002322:	bf00      	nop
 8002324:	3724      	adds	r7, #36	@ 0x24
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	40023800 	.word	0x40023800
 8002334:	40013800 	.word	0x40013800
 8002338:	40020000 	.word	0x40020000
 800233c:	40020400 	.word	0x40020400
 8002340:	40020800 	.word	0x40020800
 8002344:	40020c00 	.word	0x40020c00
 8002348:	40021000 	.word	0x40021000
 800234c:	40021400 	.word	0x40021400
 8002350:	40021800 	.word	0x40021800
 8002354:	40013c00 	.word	0x40013c00

08002358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	807b      	strh	r3, [r7, #2]
 8002364:	4613      	mov	r3, r2
 8002366:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002368:	787b      	ldrb	r3, [r7, #1]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800236e:	887a      	ldrh	r2, [r7, #2]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002374:	e003      	b.n	800237e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002376:	887b      	ldrh	r3, [r7, #2]
 8002378:	041a      	lsls	r2, r3, #16
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	619a      	str	r2, [r3, #24]
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800238a:	b480      	push	{r7}
 800238c:	b085      	sub	sp, #20
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
 8002392:	460b      	mov	r3, r1
 8002394:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800239c:	887a      	ldrh	r2, [r7, #2]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	4013      	ands	r3, r2
 80023a2:	041a      	lsls	r2, r3, #16
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	43d9      	mvns	r1, r3
 80023a8:	887b      	ldrh	r3, [r7, #2]
 80023aa:	400b      	ands	r3, r1
 80023ac:	431a      	orrs	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	619a      	str	r2, [r3, #24]
}
 80023b2:	bf00      	nop
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
	...

080023c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80023ca:	4b08      	ldr	r3, [pc, #32]	@ (80023ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023cc:	695a      	ldr	r2, [r3, #20]
 80023ce:	88fb      	ldrh	r3, [r7, #6]
 80023d0:	4013      	ands	r3, r2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d006      	beq.n	80023e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023d6:	4a05      	ldr	r2, [pc, #20]	@ (80023ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023d8:	88fb      	ldrh	r3, [r7, #6]
 80023da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023dc:	88fb      	ldrh	r3, [r7, #6]
 80023de:	4618      	mov	r0, r3
 80023e0:	f000 f806 	bl	80023f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80023e4:	bf00      	nop
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40013c00 	.word	0x40013c00

080023f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
	...

08002408 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0cc      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800241c:	4b68      	ldr	r3, [pc, #416]	@ (80025c0 <HAL_RCC_ClockConfig+0x1b8>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 030f 	and.w	r3, r3, #15
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	d90c      	bls.n	8002444 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242a:	4b65      	ldr	r3, [pc, #404]	@ (80025c0 <HAL_RCC_ClockConfig+0x1b8>)
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002432:	4b63      	ldr	r3, [pc, #396]	@ (80025c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	429a      	cmp	r2, r3
 800243e:	d001      	beq.n	8002444 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e0b8      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d020      	beq.n	8002492 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800245c:	4b59      	ldr	r3, [pc, #356]	@ (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	4a58      	ldr	r2, [pc, #352]	@ (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002466:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0308 	and.w	r3, r3, #8
 8002470:	2b00      	cmp	r3, #0
 8002472:	d005      	beq.n	8002480 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002474:	4b53      	ldr	r3, [pc, #332]	@ (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	4a52      	ldr	r2, [pc, #328]	@ (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 800247a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800247e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002480:	4b50      	ldr	r3, [pc, #320]	@ (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	494d      	ldr	r1, [pc, #308]	@ (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	4313      	orrs	r3, r2
 8002490:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d044      	beq.n	8002528 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d107      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a6:	4b47      	ldr	r3, [pc, #284]	@ (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d119      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e07f      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d003      	beq.n	80024c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	d107      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c6:	4b3f      	ldr	r3, [pc, #252]	@ (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d109      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e06f      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d6:	4b3b      	ldr	r3, [pc, #236]	@ (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e067      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024e6:	4b37      	ldr	r3, [pc, #220]	@ (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f023 0203 	bic.w	r2, r3, #3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	4934      	ldr	r1, [pc, #208]	@ (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024f8:	f7fe fe0e 	bl	8001118 <HAL_GetTick>
 80024fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fe:	e00a      	b.n	8002516 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002500:	f7fe fe0a 	bl	8001118 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800250e:	4293      	cmp	r3, r2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e04f      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002516:	4b2b      	ldr	r3, [pc, #172]	@ (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 020c 	and.w	r2, r3, #12
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	429a      	cmp	r2, r3
 8002526:	d1eb      	bne.n	8002500 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002528:	4b25      	ldr	r3, [pc, #148]	@ (80025c0 <HAL_RCC_ClockConfig+0x1b8>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 030f 	and.w	r3, r3, #15
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	429a      	cmp	r2, r3
 8002534:	d20c      	bcs.n	8002550 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002536:	4b22      	ldr	r3, [pc, #136]	@ (80025c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800253e:	4b20      	ldr	r3, [pc, #128]	@ (80025c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	429a      	cmp	r2, r3
 800254a:	d001      	beq.n	8002550 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e032      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b00      	cmp	r3, #0
 800255a:	d008      	beq.n	800256e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800255c:	4b19      	ldr	r3, [pc, #100]	@ (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	4916      	ldr	r1, [pc, #88]	@ (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	4313      	orrs	r3, r2
 800256c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	2b00      	cmp	r3, #0
 8002578:	d009      	beq.n	800258e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800257a:	4b12      	ldr	r3, [pc, #72]	@ (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	490e      	ldr	r1, [pc, #56]	@ (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 800258a:	4313      	orrs	r3, r2
 800258c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800258e:	f000 f855 	bl	800263c <HAL_RCC_GetSysClockFreq>
 8002592:	4602      	mov	r2, r0
 8002594:	4b0b      	ldr	r3, [pc, #44]	@ (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	091b      	lsrs	r3, r3, #4
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	490a      	ldr	r1, [pc, #40]	@ (80025c8 <HAL_RCC_ClockConfig+0x1c0>)
 80025a0:	5ccb      	ldrb	r3, [r1, r3]
 80025a2:	fa22 f303 	lsr.w	r3, r2, r3
 80025a6:	4a09      	ldr	r2, [pc, #36]	@ (80025cc <HAL_RCC_ClockConfig+0x1c4>)
 80025a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025aa:	4b09      	ldr	r3, [pc, #36]	@ (80025d0 <HAL_RCC_ClockConfig+0x1c8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fe fd6e 	bl	8001090 <HAL_InitTick>

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40023c00 	.word	0x40023c00
 80025c4:	40023800 	.word	0x40023800
 80025c8:	08004f68 	.word	0x08004f68
 80025cc:	20000004 	.word	0x20000004
 80025d0:	20000008 	.word	0x20000008

080025d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025d8:	4b03      	ldr	r3, [pc, #12]	@ (80025e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80025da:	681b      	ldr	r3, [r3, #0]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	20000004 	.word	0x20000004

080025ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025f0:	f7ff fff0 	bl	80025d4 <HAL_RCC_GetHCLKFreq>
 80025f4:	4602      	mov	r2, r0
 80025f6:	4b05      	ldr	r3, [pc, #20]	@ (800260c <HAL_RCC_GetPCLK1Freq+0x20>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	0a9b      	lsrs	r3, r3, #10
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	4903      	ldr	r1, [pc, #12]	@ (8002610 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002602:	5ccb      	ldrb	r3, [r1, r3]
 8002604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002608:	4618      	mov	r0, r3
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40023800 	.word	0x40023800
 8002610:	08004f78 	.word	0x08004f78

08002614 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002618:	f7ff ffdc 	bl	80025d4 <HAL_RCC_GetHCLKFreq>
 800261c:	4602      	mov	r2, r0
 800261e:	4b05      	ldr	r3, [pc, #20]	@ (8002634 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	0b5b      	lsrs	r3, r3, #13
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	4903      	ldr	r1, [pc, #12]	@ (8002638 <HAL_RCC_GetPCLK2Freq+0x24>)
 800262a:	5ccb      	ldrb	r3, [r1, r3]
 800262c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002630:	4618      	mov	r0, r3
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40023800 	.word	0x40023800
 8002638:	08004f78 	.word	0x08004f78

0800263c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800263c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002640:	b0ae      	sub	sp, #184	@ 0xb8
 8002642:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002644:	2300      	movs	r3, #0
 8002646:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800264a:	2300      	movs	r3, #0
 800264c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002650:	2300      	movs	r3, #0
 8002652:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002656:	2300      	movs	r3, #0
 8002658:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002662:	4bcb      	ldr	r3, [pc, #812]	@ (8002990 <HAL_RCC_GetSysClockFreq+0x354>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 030c 	and.w	r3, r3, #12
 800266a:	2b0c      	cmp	r3, #12
 800266c:	f200 8206 	bhi.w	8002a7c <HAL_RCC_GetSysClockFreq+0x440>
 8002670:	a201      	add	r2, pc, #4	@ (adr r2, 8002678 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002676:	bf00      	nop
 8002678:	080026ad 	.word	0x080026ad
 800267c:	08002a7d 	.word	0x08002a7d
 8002680:	08002a7d 	.word	0x08002a7d
 8002684:	08002a7d 	.word	0x08002a7d
 8002688:	080026b5 	.word	0x080026b5
 800268c:	08002a7d 	.word	0x08002a7d
 8002690:	08002a7d 	.word	0x08002a7d
 8002694:	08002a7d 	.word	0x08002a7d
 8002698:	080026bd 	.word	0x080026bd
 800269c:	08002a7d 	.word	0x08002a7d
 80026a0:	08002a7d 	.word	0x08002a7d
 80026a4:	08002a7d 	.word	0x08002a7d
 80026a8:	080028ad 	.word	0x080028ad
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026ac:	4bb9      	ldr	r3, [pc, #740]	@ (8002994 <HAL_RCC_GetSysClockFreq+0x358>)
 80026ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80026b2:	e1e7      	b.n	8002a84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026b4:	4bb8      	ldr	r3, [pc, #736]	@ (8002998 <HAL_RCC_GetSysClockFreq+0x35c>)
 80026b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80026ba:	e1e3      	b.n	8002a84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026bc:	4bb4      	ldr	r3, [pc, #720]	@ (8002990 <HAL_RCC_GetSysClockFreq+0x354>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026c8:	4bb1      	ldr	r3, [pc, #708]	@ (8002990 <HAL_RCC_GetSysClockFreq+0x354>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d071      	beq.n	80027b8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026d4:	4bae      	ldr	r3, [pc, #696]	@ (8002990 <HAL_RCC_GetSysClockFreq+0x354>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	099b      	lsrs	r3, r3, #6
 80026da:	2200      	movs	r2, #0
 80026dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80026e0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80026e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80026e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80026f0:	2300      	movs	r3, #0
 80026f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80026f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80026fa:	4622      	mov	r2, r4
 80026fc:	462b      	mov	r3, r5
 80026fe:	f04f 0000 	mov.w	r0, #0
 8002702:	f04f 0100 	mov.w	r1, #0
 8002706:	0159      	lsls	r1, r3, #5
 8002708:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800270c:	0150      	lsls	r0, r2, #5
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	4621      	mov	r1, r4
 8002714:	1a51      	subs	r1, r2, r1
 8002716:	6439      	str	r1, [r7, #64]	@ 0x40
 8002718:	4629      	mov	r1, r5
 800271a:	eb63 0301 	sbc.w	r3, r3, r1
 800271e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	f04f 0300 	mov.w	r3, #0
 8002728:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800272c:	4649      	mov	r1, r9
 800272e:	018b      	lsls	r3, r1, #6
 8002730:	4641      	mov	r1, r8
 8002732:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002736:	4641      	mov	r1, r8
 8002738:	018a      	lsls	r2, r1, #6
 800273a:	4641      	mov	r1, r8
 800273c:	1a51      	subs	r1, r2, r1
 800273e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002740:	4649      	mov	r1, r9
 8002742:	eb63 0301 	sbc.w	r3, r3, r1
 8002746:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002748:	f04f 0200 	mov.w	r2, #0
 800274c:	f04f 0300 	mov.w	r3, #0
 8002750:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002754:	4649      	mov	r1, r9
 8002756:	00cb      	lsls	r3, r1, #3
 8002758:	4641      	mov	r1, r8
 800275a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800275e:	4641      	mov	r1, r8
 8002760:	00ca      	lsls	r2, r1, #3
 8002762:	4610      	mov	r0, r2
 8002764:	4619      	mov	r1, r3
 8002766:	4603      	mov	r3, r0
 8002768:	4622      	mov	r2, r4
 800276a:	189b      	adds	r3, r3, r2
 800276c:	633b      	str	r3, [r7, #48]	@ 0x30
 800276e:	462b      	mov	r3, r5
 8002770:	460a      	mov	r2, r1
 8002772:	eb42 0303 	adc.w	r3, r2, r3
 8002776:	637b      	str	r3, [r7, #52]	@ 0x34
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	f04f 0300 	mov.w	r3, #0
 8002780:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002784:	4629      	mov	r1, r5
 8002786:	024b      	lsls	r3, r1, #9
 8002788:	4621      	mov	r1, r4
 800278a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800278e:	4621      	mov	r1, r4
 8002790:	024a      	lsls	r2, r1, #9
 8002792:	4610      	mov	r0, r2
 8002794:	4619      	mov	r1, r3
 8002796:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800279a:	2200      	movs	r2, #0
 800279c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80027a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80027a4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80027a8:	f7fd fd8a 	bl	80002c0 <__aeabi_uldivmod>
 80027ac:	4602      	mov	r2, r0
 80027ae:	460b      	mov	r3, r1
 80027b0:	4613      	mov	r3, r2
 80027b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80027b6:	e067      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027b8:	4b75      	ldr	r3, [pc, #468]	@ (8002990 <HAL_RCC_GetSysClockFreq+0x354>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	099b      	lsrs	r3, r3, #6
 80027be:	2200      	movs	r2, #0
 80027c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80027c4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80027c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80027cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80027d2:	2300      	movs	r3, #0
 80027d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80027d6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80027da:	4622      	mov	r2, r4
 80027dc:	462b      	mov	r3, r5
 80027de:	f04f 0000 	mov.w	r0, #0
 80027e2:	f04f 0100 	mov.w	r1, #0
 80027e6:	0159      	lsls	r1, r3, #5
 80027e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027ec:	0150      	lsls	r0, r2, #5
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	4621      	mov	r1, r4
 80027f4:	1a51      	subs	r1, r2, r1
 80027f6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80027f8:	4629      	mov	r1, r5
 80027fa:	eb63 0301 	sbc.w	r3, r3, r1
 80027fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	f04f 0300 	mov.w	r3, #0
 8002808:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800280c:	4649      	mov	r1, r9
 800280e:	018b      	lsls	r3, r1, #6
 8002810:	4641      	mov	r1, r8
 8002812:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002816:	4641      	mov	r1, r8
 8002818:	018a      	lsls	r2, r1, #6
 800281a:	4641      	mov	r1, r8
 800281c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002820:	4649      	mov	r1, r9
 8002822:	eb63 0b01 	sbc.w	fp, r3, r1
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	f04f 0300 	mov.w	r3, #0
 800282e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002832:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002836:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800283a:	4692      	mov	sl, r2
 800283c:	469b      	mov	fp, r3
 800283e:	4623      	mov	r3, r4
 8002840:	eb1a 0303 	adds.w	r3, sl, r3
 8002844:	623b      	str	r3, [r7, #32]
 8002846:	462b      	mov	r3, r5
 8002848:	eb4b 0303 	adc.w	r3, fp, r3
 800284c:	627b      	str	r3, [r7, #36]	@ 0x24
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	f04f 0300 	mov.w	r3, #0
 8002856:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800285a:	4629      	mov	r1, r5
 800285c:	028b      	lsls	r3, r1, #10
 800285e:	4621      	mov	r1, r4
 8002860:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002864:	4621      	mov	r1, r4
 8002866:	028a      	lsls	r2, r1, #10
 8002868:	4610      	mov	r0, r2
 800286a:	4619      	mov	r1, r3
 800286c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002870:	2200      	movs	r2, #0
 8002872:	673b      	str	r3, [r7, #112]	@ 0x70
 8002874:	677a      	str	r2, [r7, #116]	@ 0x74
 8002876:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800287a:	f7fd fd21 	bl	80002c0 <__aeabi_uldivmod>
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	4613      	mov	r3, r2
 8002884:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002888:	4b41      	ldr	r3, [pc, #260]	@ (8002990 <HAL_RCC_GetSysClockFreq+0x354>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	0c1b      	lsrs	r3, r3, #16
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	3301      	adds	r3, #1
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800289a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800289e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80028a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80028aa:	e0eb      	b.n	8002a84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028ac:	4b38      	ldr	r3, [pc, #224]	@ (8002990 <HAL_RCC_GetSysClockFreq+0x354>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028b8:	4b35      	ldr	r3, [pc, #212]	@ (8002990 <HAL_RCC_GetSysClockFreq+0x354>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d06b      	beq.n	800299c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028c4:	4b32      	ldr	r3, [pc, #200]	@ (8002990 <HAL_RCC_GetSysClockFreq+0x354>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	099b      	lsrs	r3, r3, #6
 80028ca:	2200      	movs	r2, #0
 80028cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80028ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80028d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80028d8:	2300      	movs	r3, #0
 80028da:	667b      	str	r3, [r7, #100]	@ 0x64
 80028dc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80028e0:	4622      	mov	r2, r4
 80028e2:	462b      	mov	r3, r5
 80028e4:	f04f 0000 	mov.w	r0, #0
 80028e8:	f04f 0100 	mov.w	r1, #0
 80028ec:	0159      	lsls	r1, r3, #5
 80028ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028f2:	0150      	lsls	r0, r2, #5
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4621      	mov	r1, r4
 80028fa:	1a51      	subs	r1, r2, r1
 80028fc:	61b9      	str	r1, [r7, #24]
 80028fe:	4629      	mov	r1, r5
 8002900:	eb63 0301 	sbc.w	r3, r3, r1
 8002904:	61fb      	str	r3, [r7, #28]
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	f04f 0300 	mov.w	r3, #0
 800290e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002912:	4659      	mov	r1, fp
 8002914:	018b      	lsls	r3, r1, #6
 8002916:	4651      	mov	r1, sl
 8002918:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800291c:	4651      	mov	r1, sl
 800291e:	018a      	lsls	r2, r1, #6
 8002920:	4651      	mov	r1, sl
 8002922:	ebb2 0801 	subs.w	r8, r2, r1
 8002926:	4659      	mov	r1, fp
 8002928:	eb63 0901 	sbc.w	r9, r3, r1
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	f04f 0300 	mov.w	r3, #0
 8002934:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002938:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800293c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002940:	4690      	mov	r8, r2
 8002942:	4699      	mov	r9, r3
 8002944:	4623      	mov	r3, r4
 8002946:	eb18 0303 	adds.w	r3, r8, r3
 800294a:	613b      	str	r3, [r7, #16]
 800294c:	462b      	mov	r3, r5
 800294e:	eb49 0303 	adc.w	r3, r9, r3
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	f04f 0200 	mov.w	r2, #0
 8002958:	f04f 0300 	mov.w	r3, #0
 800295c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002960:	4629      	mov	r1, r5
 8002962:	024b      	lsls	r3, r1, #9
 8002964:	4621      	mov	r1, r4
 8002966:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800296a:	4621      	mov	r1, r4
 800296c:	024a      	lsls	r2, r1, #9
 800296e:	4610      	mov	r0, r2
 8002970:	4619      	mov	r1, r3
 8002972:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002976:	2200      	movs	r2, #0
 8002978:	65bb      	str	r3, [r7, #88]	@ 0x58
 800297a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800297c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002980:	f7fd fc9e 	bl	80002c0 <__aeabi_uldivmod>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4613      	mov	r3, r2
 800298a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800298e:	e065      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0x420>
 8002990:	40023800 	.word	0x40023800
 8002994:	00f42400 	.word	0x00f42400
 8002998:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800299c:	4b3d      	ldr	r3, [pc, #244]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0x458>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	099b      	lsrs	r3, r3, #6
 80029a2:	2200      	movs	r2, #0
 80029a4:	4618      	mov	r0, r3
 80029a6:	4611      	mov	r1, r2
 80029a8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80029ae:	2300      	movs	r3, #0
 80029b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80029b2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80029b6:	4642      	mov	r2, r8
 80029b8:	464b      	mov	r3, r9
 80029ba:	f04f 0000 	mov.w	r0, #0
 80029be:	f04f 0100 	mov.w	r1, #0
 80029c2:	0159      	lsls	r1, r3, #5
 80029c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029c8:	0150      	lsls	r0, r2, #5
 80029ca:	4602      	mov	r2, r0
 80029cc:	460b      	mov	r3, r1
 80029ce:	4641      	mov	r1, r8
 80029d0:	1a51      	subs	r1, r2, r1
 80029d2:	60b9      	str	r1, [r7, #8]
 80029d4:	4649      	mov	r1, r9
 80029d6:	eb63 0301 	sbc.w	r3, r3, r1
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	f04f 0300 	mov.w	r3, #0
 80029e4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80029e8:	4659      	mov	r1, fp
 80029ea:	018b      	lsls	r3, r1, #6
 80029ec:	4651      	mov	r1, sl
 80029ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029f2:	4651      	mov	r1, sl
 80029f4:	018a      	lsls	r2, r1, #6
 80029f6:	4651      	mov	r1, sl
 80029f8:	1a54      	subs	r4, r2, r1
 80029fa:	4659      	mov	r1, fp
 80029fc:	eb63 0501 	sbc.w	r5, r3, r1
 8002a00:	f04f 0200 	mov.w	r2, #0
 8002a04:	f04f 0300 	mov.w	r3, #0
 8002a08:	00eb      	lsls	r3, r5, #3
 8002a0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a0e:	00e2      	lsls	r2, r4, #3
 8002a10:	4614      	mov	r4, r2
 8002a12:	461d      	mov	r5, r3
 8002a14:	4643      	mov	r3, r8
 8002a16:	18e3      	adds	r3, r4, r3
 8002a18:	603b      	str	r3, [r7, #0]
 8002a1a:	464b      	mov	r3, r9
 8002a1c:	eb45 0303 	adc.w	r3, r5, r3
 8002a20:	607b      	str	r3, [r7, #4]
 8002a22:	f04f 0200 	mov.w	r2, #0
 8002a26:	f04f 0300 	mov.w	r3, #0
 8002a2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a2e:	4629      	mov	r1, r5
 8002a30:	028b      	lsls	r3, r1, #10
 8002a32:	4621      	mov	r1, r4
 8002a34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a38:	4621      	mov	r1, r4
 8002a3a:	028a      	lsls	r2, r1, #10
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	4619      	mov	r1, r3
 8002a40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a44:	2200      	movs	r2, #0
 8002a46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a48:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002a4a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002a4e:	f7fd fc37 	bl	80002c0 <__aeabi_uldivmod>
 8002a52:	4602      	mov	r2, r0
 8002a54:	460b      	mov	r3, r1
 8002a56:	4613      	mov	r3, r2
 8002a58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0x458>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	0f1b      	lsrs	r3, r3, #28
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8002a6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a7a:	e003      	b.n	8002a84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a7c:	4b06      	ldr	r3, [pc, #24]	@ (8002a98 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002a7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a82:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	37b8      	adds	r7, #184	@ 0xb8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a92:	bf00      	nop
 8002a94:	40023800 	.word	0x40023800
 8002a98:	00f42400 	.word	0x00f42400

08002a9c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e28d      	b.n	8002fca <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 8083 	beq.w	8002bc2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002abc:	4b94      	ldr	r3, [pc, #592]	@ (8002d10 <HAL_RCC_OscConfig+0x274>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 030c 	and.w	r3, r3, #12
 8002ac4:	2b04      	cmp	r3, #4
 8002ac6:	d019      	beq.n	8002afc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ac8:	4b91      	ldr	r3, [pc, #580]	@ (8002d10 <HAL_RCC_OscConfig+0x274>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d106      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ad4:	4b8e      	ldr	r3, [pc, #568]	@ (8002d10 <HAL_RCC_OscConfig+0x274>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002adc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ae0:	d00c      	beq.n	8002afc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ae2:	4b8b      	ldr	r3, [pc, #556]	@ (8002d10 <HAL_RCC_OscConfig+0x274>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002aea:	2b0c      	cmp	r3, #12
 8002aec:	d112      	bne.n	8002b14 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aee:	4b88      	ldr	r3, [pc, #544]	@ (8002d10 <HAL_RCC_OscConfig+0x274>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002af6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002afa:	d10b      	bne.n	8002b14 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002afc:	4b84      	ldr	r3, [pc, #528]	@ (8002d10 <HAL_RCC_OscConfig+0x274>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d05b      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x124>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d157      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e25a      	b.n	8002fca <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b1c:	d106      	bne.n	8002b2c <HAL_RCC_OscConfig+0x90>
 8002b1e:	4b7c      	ldr	r3, [pc, #496]	@ (8002d10 <HAL_RCC_OscConfig+0x274>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a7b      	ldr	r2, [pc, #492]	@ (8002d10 <HAL_RCC_OscConfig+0x274>)
 8002b24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	e01d      	b.n	8002b68 <HAL_RCC_OscConfig+0xcc>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b34:	d10c      	bne.n	8002b50 <HAL_RCC_OscConfig+0xb4>
 8002b36:	4b76      	ldr	r3, [pc, #472]	@ (8002d10 <HAL_RCC_OscConfig+0x274>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a75      	ldr	r2, [pc, #468]	@ (8002d10 <HAL_RCC_OscConfig+0x274>)
 8002b3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	4b73      	ldr	r3, [pc, #460]	@ (8002d10 <HAL_RCC_OscConfig+0x274>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a72      	ldr	r2, [pc, #456]	@ (8002d10 <HAL_RCC_OscConfig+0x274>)
 8002b48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	e00b      	b.n	8002b68 <HAL_RCC_OscConfig+0xcc>
 8002b50:	4b6f      	ldr	r3, [pc, #444]	@ (8002d10 <HAL_RCC_OscConfig+0x274>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a6e      	ldr	r2, [pc, #440]	@ (8002d10 <HAL_RCC_OscConfig+0x274>)
 8002b56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b5a:	6013      	str	r3, [r2, #0]
 8002b5c:	4b6c      	ldr	r3, [pc, #432]	@ (8002d10 <HAL_RCC_OscConfig+0x274>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a6b      	ldr	r2, [pc, #428]	@ (8002d10 <HAL_RCC_OscConfig+0x274>)
 8002b62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d013      	beq.n	8002b98 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b70:	f7fe fad2 	bl	8001118 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b78:	f7fe face 	bl	8001118 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b64      	cmp	r3, #100	@ 0x64
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e21f      	b.n	8002fca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b8a:	4b61      	ldr	r3, [pc, #388]	@ (8002d10 <HAL_RCC_OscConfig+0x274>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0f0      	beq.n	8002b78 <HAL_RCC_OscConfig+0xdc>
 8002b96:	e014      	b.n	8002bc2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b98:	f7fe fabe 	bl	8001118 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ba0:	f7fe faba 	bl	8001118 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b64      	cmp	r3, #100	@ 0x64
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e20b      	b.n	8002fca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bb2:	4b57      	ldr	r3, [pc, #348]	@ (8002d10 <HAL_RCC_OscConfig+0x274>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f0      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x104>
 8002bbe:	e000      	b.n	8002bc2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d06f      	beq.n	8002cae <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002bce:	4b50      	ldr	r3, [pc, #320]	@ (8002d10 <HAL_RCC_OscConfig+0x274>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 030c 	and.w	r3, r3, #12
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d017      	beq.n	8002c0a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002bda:	4b4d      	ldr	r3, [pc, #308]	@ (8002d10 <HAL_RCC_OscConfig+0x274>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d105      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002be6:	4b4a      	ldr	r3, [pc, #296]	@ (8002d10 <HAL_RCC_OscConfig+0x274>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00b      	beq.n	8002c0a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bf2:	4b47      	ldr	r3, [pc, #284]	@ (8002d10 <HAL_RCC_OscConfig+0x274>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002bfa:	2b0c      	cmp	r3, #12
 8002bfc:	d11c      	bne.n	8002c38 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bfe:	4b44      	ldr	r3, [pc, #272]	@ (8002d10 <HAL_RCC_OscConfig+0x274>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d116      	bne.n	8002c38 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c0a:	4b41      	ldr	r3, [pc, #260]	@ (8002d10 <HAL_RCC_OscConfig+0x274>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d005      	beq.n	8002c22 <HAL_RCC_OscConfig+0x186>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d001      	beq.n	8002c22 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e1d3      	b.n	8002fca <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c22:	4b3b      	ldr	r3, [pc, #236]	@ (8002d10 <HAL_RCC_OscConfig+0x274>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	4937      	ldr	r1, [pc, #220]	@ (8002d10 <HAL_RCC_OscConfig+0x274>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c36:	e03a      	b.n	8002cae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d020      	beq.n	8002c82 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c40:	4b34      	ldr	r3, [pc, #208]	@ (8002d14 <HAL_RCC_OscConfig+0x278>)
 8002c42:	2201      	movs	r2, #1
 8002c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c46:	f7fe fa67 	bl	8001118 <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c4e:	f7fe fa63 	bl	8001118 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e1b4      	b.n	8002fca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c60:	4b2b      	ldr	r3, [pc, #172]	@ (8002d10 <HAL_RCC_OscConfig+0x274>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0f0      	beq.n	8002c4e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c6c:	4b28      	ldr	r3, [pc, #160]	@ (8002d10 <HAL_RCC_OscConfig+0x274>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	4925      	ldr	r1, [pc, #148]	@ (8002d10 <HAL_RCC_OscConfig+0x274>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	600b      	str	r3, [r1, #0]
 8002c80:	e015      	b.n	8002cae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c82:	4b24      	ldr	r3, [pc, #144]	@ (8002d14 <HAL_RCC_OscConfig+0x278>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c88:	f7fe fa46 	bl	8001118 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c90:	f7fe fa42 	bl	8001118 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e193      	b.n	8002fca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8002d10 <HAL_RCC_OscConfig+0x274>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f0      	bne.n	8002c90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d036      	beq.n	8002d28 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d016      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cc2:	4b15      	ldr	r3, [pc, #84]	@ (8002d18 <HAL_RCC_OscConfig+0x27c>)
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc8:	f7fe fa26 	bl	8001118 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cd0:	f7fe fa22 	bl	8001118 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e173      	b.n	8002fca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8002d10 <HAL_RCC_OscConfig+0x274>)
 8002ce4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0f0      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x234>
 8002cee:	e01b      	b.n	8002d28 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cf0:	4b09      	ldr	r3, [pc, #36]	@ (8002d18 <HAL_RCC_OscConfig+0x27c>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf6:	f7fe fa0f 	bl	8001118 <HAL_GetTick>
 8002cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cfc:	e00e      	b.n	8002d1c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cfe:	f7fe fa0b 	bl	8001118 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d907      	bls.n	8002d1c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e15c      	b.n	8002fca <HAL_RCC_OscConfig+0x52e>
 8002d10:	40023800 	.word	0x40023800
 8002d14:	42470000 	.word	0x42470000
 8002d18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d1c:	4b8a      	ldr	r3, [pc, #552]	@ (8002f48 <HAL_RCC_OscConfig+0x4ac>)
 8002d1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1ea      	bne.n	8002cfe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 8097 	beq.w	8002e64 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d36:	2300      	movs	r3, #0
 8002d38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d3a:	4b83      	ldr	r3, [pc, #524]	@ (8002f48 <HAL_RCC_OscConfig+0x4ac>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10f      	bne.n	8002d66 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d46:	2300      	movs	r3, #0
 8002d48:	60bb      	str	r3, [r7, #8]
 8002d4a:	4b7f      	ldr	r3, [pc, #508]	@ (8002f48 <HAL_RCC_OscConfig+0x4ac>)
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4e:	4a7e      	ldr	r2, [pc, #504]	@ (8002f48 <HAL_RCC_OscConfig+0x4ac>)
 8002d50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d54:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d56:	4b7c      	ldr	r3, [pc, #496]	@ (8002f48 <HAL_RCC_OscConfig+0x4ac>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d5e:	60bb      	str	r3, [r7, #8]
 8002d60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d62:	2301      	movs	r3, #1
 8002d64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d66:	4b79      	ldr	r3, [pc, #484]	@ (8002f4c <HAL_RCC_OscConfig+0x4b0>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d118      	bne.n	8002da4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d72:	4b76      	ldr	r3, [pc, #472]	@ (8002f4c <HAL_RCC_OscConfig+0x4b0>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a75      	ldr	r2, [pc, #468]	@ (8002f4c <HAL_RCC_OscConfig+0x4b0>)
 8002d78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d7e:	f7fe f9cb 	bl	8001118 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d86:	f7fe f9c7 	bl	8001118 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e118      	b.n	8002fca <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d98:	4b6c      	ldr	r3, [pc, #432]	@ (8002f4c <HAL_RCC_OscConfig+0x4b0>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0f0      	beq.n	8002d86 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d106      	bne.n	8002dba <HAL_RCC_OscConfig+0x31e>
 8002dac:	4b66      	ldr	r3, [pc, #408]	@ (8002f48 <HAL_RCC_OscConfig+0x4ac>)
 8002dae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db0:	4a65      	ldr	r2, [pc, #404]	@ (8002f48 <HAL_RCC_OscConfig+0x4ac>)
 8002db2:	f043 0301 	orr.w	r3, r3, #1
 8002db6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002db8:	e01c      	b.n	8002df4 <HAL_RCC_OscConfig+0x358>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	2b05      	cmp	r3, #5
 8002dc0:	d10c      	bne.n	8002ddc <HAL_RCC_OscConfig+0x340>
 8002dc2:	4b61      	ldr	r3, [pc, #388]	@ (8002f48 <HAL_RCC_OscConfig+0x4ac>)
 8002dc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc6:	4a60      	ldr	r2, [pc, #384]	@ (8002f48 <HAL_RCC_OscConfig+0x4ac>)
 8002dc8:	f043 0304 	orr.w	r3, r3, #4
 8002dcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dce:	4b5e      	ldr	r3, [pc, #376]	@ (8002f48 <HAL_RCC_OscConfig+0x4ac>)
 8002dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dd2:	4a5d      	ldr	r2, [pc, #372]	@ (8002f48 <HAL_RCC_OscConfig+0x4ac>)
 8002dd4:	f043 0301 	orr.w	r3, r3, #1
 8002dd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dda:	e00b      	b.n	8002df4 <HAL_RCC_OscConfig+0x358>
 8002ddc:	4b5a      	ldr	r3, [pc, #360]	@ (8002f48 <HAL_RCC_OscConfig+0x4ac>)
 8002dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002de0:	4a59      	ldr	r2, [pc, #356]	@ (8002f48 <HAL_RCC_OscConfig+0x4ac>)
 8002de2:	f023 0301 	bic.w	r3, r3, #1
 8002de6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002de8:	4b57      	ldr	r3, [pc, #348]	@ (8002f48 <HAL_RCC_OscConfig+0x4ac>)
 8002dea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dec:	4a56      	ldr	r2, [pc, #344]	@ (8002f48 <HAL_RCC_OscConfig+0x4ac>)
 8002dee:	f023 0304 	bic.w	r3, r3, #4
 8002df2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d015      	beq.n	8002e28 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfc:	f7fe f98c 	bl	8001118 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e02:	e00a      	b.n	8002e1a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e04:	f7fe f988 	bl	8001118 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e0d7      	b.n	8002fca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e1a:	4b4b      	ldr	r3, [pc, #300]	@ (8002f48 <HAL_RCC_OscConfig+0x4ac>)
 8002e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0ee      	beq.n	8002e04 <HAL_RCC_OscConfig+0x368>
 8002e26:	e014      	b.n	8002e52 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e28:	f7fe f976 	bl	8001118 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e2e:	e00a      	b.n	8002e46 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e30:	f7fe f972 	bl	8001118 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e0c1      	b.n	8002fca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e46:	4b40      	ldr	r3, [pc, #256]	@ (8002f48 <HAL_RCC_OscConfig+0x4ac>)
 8002e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1ee      	bne.n	8002e30 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e52:	7dfb      	ldrb	r3, [r7, #23]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d105      	bne.n	8002e64 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e58:	4b3b      	ldr	r3, [pc, #236]	@ (8002f48 <HAL_RCC_OscConfig+0x4ac>)
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5c:	4a3a      	ldr	r2, [pc, #232]	@ (8002f48 <HAL_RCC_OscConfig+0x4ac>)
 8002e5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e62:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 80ad 	beq.w	8002fc8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e6e:	4b36      	ldr	r3, [pc, #216]	@ (8002f48 <HAL_RCC_OscConfig+0x4ac>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 030c 	and.w	r3, r3, #12
 8002e76:	2b08      	cmp	r3, #8
 8002e78:	d060      	beq.n	8002f3c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d145      	bne.n	8002f0e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e82:	4b33      	ldr	r3, [pc, #204]	@ (8002f50 <HAL_RCC_OscConfig+0x4b4>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e88:	f7fe f946 	bl	8001118 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e90:	f7fe f942 	bl	8001118 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e093      	b.n	8002fca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea2:	4b29      	ldr	r3, [pc, #164]	@ (8002f48 <HAL_RCC_OscConfig+0x4ac>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f0      	bne.n	8002e90 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69da      	ldr	r2, [r3, #28]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ebc:	019b      	lsls	r3, r3, #6
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec4:	085b      	lsrs	r3, r3, #1
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	041b      	lsls	r3, r3, #16
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed0:	061b      	lsls	r3, r3, #24
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed8:	071b      	lsls	r3, r3, #28
 8002eda:	491b      	ldr	r1, [pc, #108]	@ (8002f48 <HAL_RCC_OscConfig+0x4ac>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8002f50 <HAL_RCC_OscConfig+0x4b4>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee6:	f7fe f917 	bl	8001118 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eee:	f7fe f913 	bl	8001118 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e064      	b.n	8002fca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f00:	4b11      	ldr	r3, [pc, #68]	@ (8002f48 <HAL_RCC_OscConfig+0x4ac>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0f0      	beq.n	8002eee <HAL_RCC_OscConfig+0x452>
 8002f0c:	e05c      	b.n	8002fc8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0e:	4b10      	ldr	r3, [pc, #64]	@ (8002f50 <HAL_RCC_OscConfig+0x4b4>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f14:	f7fe f900 	bl	8001118 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f1c:	f7fe f8fc 	bl	8001118 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e04d      	b.n	8002fca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2e:	4b06      	ldr	r3, [pc, #24]	@ (8002f48 <HAL_RCC_OscConfig+0x4ac>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x480>
 8002f3a:	e045      	b.n	8002fc8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d107      	bne.n	8002f54 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e040      	b.n	8002fca <HAL_RCC_OscConfig+0x52e>
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	40007000 	.word	0x40007000
 8002f50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f54:	4b1f      	ldr	r3, [pc, #124]	@ (8002fd4 <HAL_RCC_OscConfig+0x538>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d030      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d129      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d122      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f84:	4013      	ands	r3, r2
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d119      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f9a:	085b      	lsrs	r3, r3, #1
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d10f      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d107      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fbe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d001      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e000      	b.n	8002fca <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40023800 	.word	0x40023800

08002fd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e041      	b.n	800306e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d106      	bne.n	8003004 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7fd fefc 	bl	8000dfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3304      	adds	r3, #4
 8003014:	4619      	mov	r1, r3
 8003016:	4610      	mov	r0, r2
 8003018:	f000 f9ce 	bl	80033b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
	...

08003078 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b01      	cmp	r3, #1
 800308a:	d001      	beq.n	8003090 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e04e      	b.n	800312e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2202      	movs	r2, #2
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68da      	ldr	r2, [r3, #12]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0201 	orr.w	r2, r2, #1
 80030a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a23      	ldr	r2, [pc, #140]	@ (800313c <HAL_TIM_Base_Start_IT+0xc4>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d022      	beq.n	80030f8 <HAL_TIM_Base_Start_IT+0x80>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030ba:	d01d      	beq.n	80030f8 <HAL_TIM_Base_Start_IT+0x80>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a1f      	ldr	r2, [pc, #124]	@ (8003140 <HAL_TIM_Base_Start_IT+0xc8>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d018      	beq.n	80030f8 <HAL_TIM_Base_Start_IT+0x80>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a1e      	ldr	r2, [pc, #120]	@ (8003144 <HAL_TIM_Base_Start_IT+0xcc>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d013      	beq.n	80030f8 <HAL_TIM_Base_Start_IT+0x80>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003148 <HAL_TIM_Base_Start_IT+0xd0>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d00e      	beq.n	80030f8 <HAL_TIM_Base_Start_IT+0x80>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a1b      	ldr	r2, [pc, #108]	@ (800314c <HAL_TIM_Base_Start_IT+0xd4>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d009      	beq.n	80030f8 <HAL_TIM_Base_Start_IT+0x80>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a19      	ldr	r2, [pc, #100]	@ (8003150 <HAL_TIM_Base_Start_IT+0xd8>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d004      	beq.n	80030f8 <HAL_TIM_Base_Start_IT+0x80>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a18      	ldr	r2, [pc, #96]	@ (8003154 <HAL_TIM_Base_Start_IT+0xdc>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d111      	bne.n	800311c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2b06      	cmp	r3, #6
 8003108:	d010      	beq.n	800312c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f042 0201 	orr.w	r2, r2, #1
 8003118:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800311a:	e007      	b.n	800312c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0201 	orr.w	r2, r2, #1
 800312a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	40010000 	.word	0x40010000
 8003140:	40000400 	.word	0x40000400
 8003144:	40000800 	.word	0x40000800
 8003148:	40000c00 	.word	0x40000c00
 800314c:	40010400 	.word	0x40010400
 8003150:	40014000 	.word	0x40014000
 8003154:	40001800 	.word	0x40001800

08003158 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b02      	cmp	r3, #2
 800316c:	d122      	bne.n	80031b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b02      	cmp	r3, #2
 800317a:	d11b      	bne.n	80031b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f06f 0202 	mvn.w	r2, #2
 8003184:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f8ee 	bl	800337c <HAL_TIM_IC_CaptureCallback>
 80031a0:	e005      	b.n	80031ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f8e0 	bl	8003368 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 f8f1 	bl	8003390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f003 0304 	and.w	r3, r3, #4
 80031be:	2b04      	cmp	r3, #4
 80031c0:	d122      	bne.n	8003208 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b04      	cmp	r3, #4
 80031ce:	d11b      	bne.n	8003208 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f06f 0204 	mvn.w	r2, #4
 80031d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2202      	movs	r2, #2
 80031de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f8c4 	bl	800337c <HAL_TIM_IC_CaptureCallback>
 80031f4:	e005      	b.n	8003202 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f8b6 	bl	8003368 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f8c7 	bl	8003390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b08      	cmp	r3, #8
 8003214:	d122      	bne.n	800325c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f003 0308 	and.w	r3, r3, #8
 8003220:	2b08      	cmp	r3, #8
 8003222:	d11b      	bne.n	800325c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f06f 0208 	mvn.w	r2, #8
 800322c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2204      	movs	r2, #4
 8003232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f89a 	bl	800337c <HAL_TIM_IC_CaptureCallback>
 8003248:	e005      	b.n	8003256 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f88c 	bl	8003368 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 f89d 	bl	8003390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	f003 0310 	and.w	r3, r3, #16
 8003266:	2b10      	cmp	r3, #16
 8003268:	d122      	bne.n	80032b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f003 0310 	and.w	r3, r3, #16
 8003274:	2b10      	cmp	r3, #16
 8003276:	d11b      	bne.n	80032b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f06f 0210 	mvn.w	r2, #16
 8003280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2208      	movs	r2, #8
 8003286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f870 	bl	800337c <HAL_TIM_IC_CaptureCallback>
 800329c:	e005      	b.n	80032aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f862 	bl	8003368 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 f873 	bl	8003390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d10e      	bne.n	80032dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d107      	bne.n	80032dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f06f 0201 	mvn.w	r2, #1
 80032d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7fd fc9c 	bl	8000c14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032e6:	2b80      	cmp	r3, #128	@ 0x80
 80032e8:	d10e      	bne.n	8003308 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032f4:	2b80      	cmp	r3, #128	@ 0x80
 80032f6:	d107      	bne.n	8003308 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f902 	bl	800350c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003312:	2b40      	cmp	r3, #64	@ 0x40
 8003314:	d10e      	bne.n	8003334 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003320:	2b40      	cmp	r3, #64	@ 0x40
 8003322:	d107      	bne.n	8003334 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800332c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f838 	bl	80033a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	f003 0320 	and.w	r3, r3, #32
 800333e:	2b20      	cmp	r3, #32
 8003340:	d10e      	bne.n	8003360 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f003 0320 	and.w	r3, r3, #32
 800334c:	2b20      	cmp	r3, #32
 800334e:	d107      	bne.n	8003360 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f06f 0220 	mvn.w	r2, #32
 8003358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f8cc 	bl	80034f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003360:	bf00      	nop
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a40      	ldr	r2, [pc, #256]	@ (80034cc <TIM_Base_SetConfig+0x114>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d013      	beq.n	80033f8 <TIM_Base_SetConfig+0x40>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033d6:	d00f      	beq.n	80033f8 <TIM_Base_SetConfig+0x40>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a3d      	ldr	r2, [pc, #244]	@ (80034d0 <TIM_Base_SetConfig+0x118>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d00b      	beq.n	80033f8 <TIM_Base_SetConfig+0x40>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a3c      	ldr	r2, [pc, #240]	@ (80034d4 <TIM_Base_SetConfig+0x11c>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d007      	beq.n	80033f8 <TIM_Base_SetConfig+0x40>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a3b      	ldr	r2, [pc, #236]	@ (80034d8 <TIM_Base_SetConfig+0x120>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d003      	beq.n	80033f8 <TIM_Base_SetConfig+0x40>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a3a      	ldr	r2, [pc, #232]	@ (80034dc <TIM_Base_SetConfig+0x124>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d108      	bne.n	800340a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	4313      	orrs	r3, r2
 8003408:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a2f      	ldr	r2, [pc, #188]	@ (80034cc <TIM_Base_SetConfig+0x114>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d02b      	beq.n	800346a <TIM_Base_SetConfig+0xb2>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003418:	d027      	beq.n	800346a <TIM_Base_SetConfig+0xb2>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a2c      	ldr	r2, [pc, #176]	@ (80034d0 <TIM_Base_SetConfig+0x118>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d023      	beq.n	800346a <TIM_Base_SetConfig+0xb2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a2b      	ldr	r2, [pc, #172]	@ (80034d4 <TIM_Base_SetConfig+0x11c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d01f      	beq.n	800346a <TIM_Base_SetConfig+0xb2>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a2a      	ldr	r2, [pc, #168]	@ (80034d8 <TIM_Base_SetConfig+0x120>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d01b      	beq.n	800346a <TIM_Base_SetConfig+0xb2>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a29      	ldr	r2, [pc, #164]	@ (80034dc <TIM_Base_SetConfig+0x124>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d017      	beq.n	800346a <TIM_Base_SetConfig+0xb2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a28      	ldr	r2, [pc, #160]	@ (80034e0 <TIM_Base_SetConfig+0x128>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d013      	beq.n	800346a <TIM_Base_SetConfig+0xb2>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a27      	ldr	r2, [pc, #156]	@ (80034e4 <TIM_Base_SetConfig+0x12c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d00f      	beq.n	800346a <TIM_Base_SetConfig+0xb2>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a26      	ldr	r2, [pc, #152]	@ (80034e8 <TIM_Base_SetConfig+0x130>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d00b      	beq.n	800346a <TIM_Base_SetConfig+0xb2>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a25      	ldr	r2, [pc, #148]	@ (80034ec <TIM_Base_SetConfig+0x134>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d007      	beq.n	800346a <TIM_Base_SetConfig+0xb2>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a24      	ldr	r2, [pc, #144]	@ (80034f0 <TIM_Base_SetConfig+0x138>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d003      	beq.n	800346a <TIM_Base_SetConfig+0xb2>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a23      	ldr	r2, [pc, #140]	@ (80034f4 <TIM_Base_SetConfig+0x13c>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d108      	bne.n	800347c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003470:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	4313      	orrs	r3, r2
 800347a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	4313      	orrs	r3, r2
 8003488:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a0a      	ldr	r2, [pc, #40]	@ (80034cc <TIM_Base_SetConfig+0x114>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d003      	beq.n	80034b0 <TIM_Base_SetConfig+0xf8>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a0c      	ldr	r2, [pc, #48]	@ (80034dc <TIM_Base_SetConfig+0x124>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d103      	bne.n	80034b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	691a      	ldr	r2, [r3, #16]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	615a      	str	r2, [r3, #20]
}
 80034be:	bf00      	nop
 80034c0:	3714      	adds	r7, #20
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	40010000 	.word	0x40010000
 80034d0:	40000400 	.word	0x40000400
 80034d4:	40000800 	.word	0x40000800
 80034d8:	40000c00 	.word	0x40000c00
 80034dc:	40010400 	.word	0x40010400
 80034e0:	40014000 	.word	0x40014000
 80034e4:	40014400 	.word	0x40014400
 80034e8:	40014800 	.word	0x40014800
 80034ec:	40001800 	.word	0x40001800
 80034f0:	40001c00 	.word	0x40001c00
 80034f4:	40002000 	.word	0x40002000

080034f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e03f      	b.n	80035b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d106      	bne.n	800354c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7fd fbc4 	bl	8000cd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2224      	movs	r2, #36	@ 0x24
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003562:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 f929 	bl	80037bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	691a      	ldr	r2, [r3, #16]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003578:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	695a      	ldr	r2, [r3, #20]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003588:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003598:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2220      	movs	r2, #32
 80035ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b08a      	sub	sp, #40	@ 0x28
 80035be:	af02      	add	r7, sp, #8
 80035c0:	60f8      	str	r0, [r7, #12]
 80035c2:	60b9      	str	r1, [r7, #8]
 80035c4:	603b      	str	r3, [r7, #0]
 80035c6:	4613      	mov	r3, r2
 80035c8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035ca:	2300      	movs	r3, #0
 80035cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b20      	cmp	r3, #32
 80035d8:	d17c      	bne.n	80036d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d002      	beq.n	80035e6 <HAL_UART_Transmit+0x2c>
 80035e0:	88fb      	ldrh	r3, [r7, #6]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e075      	b.n	80036d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d101      	bne.n	80035f8 <HAL_UART_Transmit+0x3e>
 80035f4:	2302      	movs	r3, #2
 80035f6:	e06e      	b.n	80036d6 <HAL_UART_Transmit+0x11c>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2221      	movs	r2, #33	@ 0x21
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800360e:	f7fd fd83 	bl	8001118 <HAL_GetTick>
 8003612:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	88fa      	ldrh	r2, [r7, #6]
 8003618:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	88fa      	ldrh	r2, [r7, #6]
 800361e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003628:	d108      	bne.n	800363c <HAL_UART_Transmit+0x82>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d104      	bne.n	800363c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003632:	2300      	movs	r3, #0
 8003634:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	61bb      	str	r3, [r7, #24]
 800363a:	e003      	b.n	8003644 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003640:	2300      	movs	r3, #0
 8003642:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 800364c:	e02a      	b.n	80036a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2200      	movs	r2, #0
 8003656:	2180      	movs	r1, #128	@ 0x80
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 f840 	bl	80036de <UART_WaitOnFlagUntilTimeout>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e036      	b.n	80036d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10b      	bne.n	8003686 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	881b      	ldrh	r3, [r3, #0]
 8003672:	461a      	mov	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800367c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	3302      	adds	r3, #2
 8003682:	61bb      	str	r3, [r7, #24]
 8003684:	e007      	b.n	8003696 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	781a      	ldrb	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	3301      	adds	r3, #1
 8003694:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800369a:	b29b      	uxth	r3, r3
 800369c:	3b01      	subs	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1cf      	bne.n	800364e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2200      	movs	r2, #0
 80036b6:	2140      	movs	r1, #64	@ 0x40
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 f810 	bl	80036de <UART_WaitOnFlagUntilTimeout>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e006      	b.n	80036d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80036d0:	2300      	movs	r3, #0
 80036d2:	e000      	b.n	80036d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80036d4:	2302      	movs	r3, #2
  }
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3720      	adds	r7, #32
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b090      	sub	sp, #64	@ 0x40
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	60f8      	str	r0, [r7, #12]
 80036e6:	60b9      	str	r1, [r7, #8]
 80036e8:	603b      	str	r3, [r7, #0]
 80036ea:	4613      	mov	r3, r2
 80036ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ee:	e050      	b.n	8003792 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f6:	d04c      	beq.n	8003792 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d007      	beq.n	800370e <UART_WaitOnFlagUntilTimeout+0x30>
 80036fe:	f7fd fd0b 	bl	8001118 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800370a:	429a      	cmp	r2, r3
 800370c:	d241      	bcs.n	8003792 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	330c      	adds	r3, #12
 8003714:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003718:	e853 3f00 	ldrex	r3, [r3]
 800371c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800371e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003720:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003724:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	330c      	adds	r3, #12
 800372c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800372e:	637a      	str	r2, [r7, #52]	@ 0x34
 8003730:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003732:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003734:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003736:	e841 2300 	strex	r3, r2, [r1]
 800373a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800373c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1e5      	bne.n	800370e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	3314      	adds	r3, #20
 8003748:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	e853 3f00 	ldrex	r3, [r3]
 8003750:	613b      	str	r3, [r7, #16]
   return(result);
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	f023 0301 	bic.w	r3, r3, #1
 8003758:	63bb      	str	r3, [r7, #56]	@ 0x38
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	3314      	adds	r3, #20
 8003760:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003762:	623a      	str	r2, [r7, #32]
 8003764:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003766:	69f9      	ldr	r1, [r7, #28]
 8003768:	6a3a      	ldr	r2, [r7, #32]
 800376a:	e841 2300 	strex	r3, r2, [r1]
 800376e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1e5      	bne.n	8003742 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2220      	movs	r2, #32
 800377a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2220      	movs	r2, #32
 8003782:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e00f      	b.n	80037b2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	4013      	ands	r3, r2
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	429a      	cmp	r2, r3
 80037a0:	bf0c      	ite	eq
 80037a2:	2301      	moveq	r3, #1
 80037a4:	2300      	movne	r3, #0
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	461a      	mov	r2, r3
 80037aa:	79fb      	ldrb	r3, [r7, #7]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d09f      	beq.n	80036f0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3740      	adds	r7, #64	@ 0x40
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
	...

080037bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037c0:	b0c0      	sub	sp, #256	@ 0x100
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80037d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d8:	68d9      	ldr	r1, [r3, #12]
 80037da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	ea40 0301 	orr.w	r3, r0, r1
 80037e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	431a      	orrs	r2, r3
 80037f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	431a      	orrs	r2, r3
 80037fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	4313      	orrs	r3, r2
 8003804:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003814:	f021 010c 	bic.w	r1, r1, #12
 8003818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003822:	430b      	orrs	r3, r1
 8003824:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003836:	6999      	ldr	r1, [r3, #24]
 8003838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	ea40 0301 	orr.w	r3, r0, r1
 8003842:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	4b8f      	ldr	r3, [pc, #572]	@ (8003a88 <UART_SetConfig+0x2cc>)
 800384c:	429a      	cmp	r2, r3
 800384e:	d005      	beq.n	800385c <UART_SetConfig+0xa0>
 8003850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	4b8d      	ldr	r3, [pc, #564]	@ (8003a8c <UART_SetConfig+0x2d0>)
 8003858:	429a      	cmp	r2, r3
 800385a:	d104      	bne.n	8003866 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800385c:	f7fe feda 	bl	8002614 <HAL_RCC_GetPCLK2Freq>
 8003860:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003864:	e003      	b.n	800386e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003866:	f7fe fec1 	bl	80025ec <HAL_RCC_GetPCLK1Freq>
 800386a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800386e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003878:	f040 810c 	bne.w	8003a94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800387c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003880:	2200      	movs	r2, #0
 8003882:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003886:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800388a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800388e:	4622      	mov	r2, r4
 8003890:	462b      	mov	r3, r5
 8003892:	1891      	adds	r1, r2, r2
 8003894:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003896:	415b      	adcs	r3, r3
 8003898:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800389a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800389e:	4621      	mov	r1, r4
 80038a0:	eb12 0801 	adds.w	r8, r2, r1
 80038a4:	4629      	mov	r1, r5
 80038a6:	eb43 0901 	adc.w	r9, r3, r1
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	f04f 0300 	mov.w	r3, #0
 80038b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038be:	4690      	mov	r8, r2
 80038c0:	4699      	mov	r9, r3
 80038c2:	4623      	mov	r3, r4
 80038c4:	eb18 0303 	adds.w	r3, r8, r3
 80038c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80038cc:	462b      	mov	r3, r5
 80038ce:	eb49 0303 	adc.w	r3, r9, r3
 80038d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80038d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80038e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80038ea:	460b      	mov	r3, r1
 80038ec:	18db      	adds	r3, r3, r3
 80038ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80038f0:	4613      	mov	r3, r2
 80038f2:	eb42 0303 	adc.w	r3, r2, r3
 80038f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80038f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80038fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003900:	f7fc fcde 	bl	80002c0 <__aeabi_uldivmod>
 8003904:	4602      	mov	r2, r0
 8003906:	460b      	mov	r3, r1
 8003908:	4b61      	ldr	r3, [pc, #388]	@ (8003a90 <UART_SetConfig+0x2d4>)
 800390a:	fba3 2302 	umull	r2, r3, r3, r2
 800390e:	095b      	lsrs	r3, r3, #5
 8003910:	011c      	lsls	r4, r3, #4
 8003912:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003916:	2200      	movs	r2, #0
 8003918:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800391c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003920:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003924:	4642      	mov	r2, r8
 8003926:	464b      	mov	r3, r9
 8003928:	1891      	adds	r1, r2, r2
 800392a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800392c:	415b      	adcs	r3, r3
 800392e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003930:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003934:	4641      	mov	r1, r8
 8003936:	eb12 0a01 	adds.w	sl, r2, r1
 800393a:	4649      	mov	r1, r9
 800393c:	eb43 0b01 	adc.w	fp, r3, r1
 8003940:	f04f 0200 	mov.w	r2, #0
 8003944:	f04f 0300 	mov.w	r3, #0
 8003948:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800394c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003950:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003954:	4692      	mov	sl, r2
 8003956:	469b      	mov	fp, r3
 8003958:	4643      	mov	r3, r8
 800395a:	eb1a 0303 	adds.w	r3, sl, r3
 800395e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003962:	464b      	mov	r3, r9
 8003964:	eb4b 0303 	adc.w	r3, fp, r3
 8003968:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800396c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003978:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800397c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003980:	460b      	mov	r3, r1
 8003982:	18db      	adds	r3, r3, r3
 8003984:	643b      	str	r3, [r7, #64]	@ 0x40
 8003986:	4613      	mov	r3, r2
 8003988:	eb42 0303 	adc.w	r3, r2, r3
 800398c:	647b      	str	r3, [r7, #68]	@ 0x44
 800398e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003992:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003996:	f7fc fc93 	bl	80002c0 <__aeabi_uldivmod>
 800399a:	4602      	mov	r2, r0
 800399c:	460b      	mov	r3, r1
 800399e:	4611      	mov	r1, r2
 80039a0:	4b3b      	ldr	r3, [pc, #236]	@ (8003a90 <UART_SetConfig+0x2d4>)
 80039a2:	fba3 2301 	umull	r2, r3, r3, r1
 80039a6:	095b      	lsrs	r3, r3, #5
 80039a8:	2264      	movs	r2, #100	@ 0x64
 80039aa:	fb02 f303 	mul.w	r3, r2, r3
 80039ae:	1acb      	subs	r3, r1, r3
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80039b6:	4b36      	ldr	r3, [pc, #216]	@ (8003a90 <UART_SetConfig+0x2d4>)
 80039b8:	fba3 2302 	umull	r2, r3, r3, r2
 80039bc:	095b      	lsrs	r3, r3, #5
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80039c4:	441c      	add	r4, r3
 80039c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039ca:	2200      	movs	r2, #0
 80039cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80039d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80039d8:	4642      	mov	r2, r8
 80039da:	464b      	mov	r3, r9
 80039dc:	1891      	adds	r1, r2, r2
 80039de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80039e0:	415b      	adcs	r3, r3
 80039e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80039e8:	4641      	mov	r1, r8
 80039ea:	1851      	adds	r1, r2, r1
 80039ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80039ee:	4649      	mov	r1, r9
 80039f0:	414b      	adcs	r3, r1
 80039f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80039f4:	f04f 0200 	mov.w	r2, #0
 80039f8:	f04f 0300 	mov.w	r3, #0
 80039fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003a00:	4659      	mov	r1, fp
 8003a02:	00cb      	lsls	r3, r1, #3
 8003a04:	4651      	mov	r1, sl
 8003a06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a0a:	4651      	mov	r1, sl
 8003a0c:	00ca      	lsls	r2, r1, #3
 8003a0e:	4610      	mov	r0, r2
 8003a10:	4619      	mov	r1, r3
 8003a12:	4603      	mov	r3, r0
 8003a14:	4642      	mov	r2, r8
 8003a16:	189b      	adds	r3, r3, r2
 8003a18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a1c:	464b      	mov	r3, r9
 8003a1e:	460a      	mov	r2, r1
 8003a20:	eb42 0303 	adc.w	r3, r2, r3
 8003a24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a34:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003a38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	18db      	adds	r3, r3, r3
 8003a40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a42:	4613      	mov	r3, r2
 8003a44:	eb42 0303 	adc.w	r3, r2, r3
 8003a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003a52:	f7fc fc35 	bl	80002c0 <__aeabi_uldivmod>
 8003a56:	4602      	mov	r2, r0
 8003a58:	460b      	mov	r3, r1
 8003a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003a90 <UART_SetConfig+0x2d4>)
 8003a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8003a60:	095b      	lsrs	r3, r3, #5
 8003a62:	2164      	movs	r1, #100	@ 0x64
 8003a64:	fb01 f303 	mul.w	r3, r1, r3
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	3332      	adds	r3, #50	@ 0x32
 8003a6e:	4a08      	ldr	r2, [pc, #32]	@ (8003a90 <UART_SetConfig+0x2d4>)
 8003a70:	fba2 2303 	umull	r2, r3, r2, r3
 8003a74:	095b      	lsrs	r3, r3, #5
 8003a76:	f003 0207 	and.w	r2, r3, #7
 8003a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4422      	add	r2, r4
 8003a82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a84:	e106      	b.n	8003c94 <UART_SetConfig+0x4d8>
 8003a86:	bf00      	nop
 8003a88:	40011000 	.word	0x40011000
 8003a8c:	40011400 	.word	0x40011400
 8003a90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a9e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003aa2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003aa6:	4642      	mov	r2, r8
 8003aa8:	464b      	mov	r3, r9
 8003aaa:	1891      	adds	r1, r2, r2
 8003aac:	6239      	str	r1, [r7, #32]
 8003aae:	415b      	adcs	r3, r3
 8003ab0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ab2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ab6:	4641      	mov	r1, r8
 8003ab8:	1854      	adds	r4, r2, r1
 8003aba:	4649      	mov	r1, r9
 8003abc:	eb43 0501 	adc.w	r5, r3, r1
 8003ac0:	f04f 0200 	mov.w	r2, #0
 8003ac4:	f04f 0300 	mov.w	r3, #0
 8003ac8:	00eb      	lsls	r3, r5, #3
 8003aca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ace:	00e2      	lsls	r2, r4, #3
 8003ad0:	4614      	mov	r4, r2
 8003ad2:	461d      	mov	r5, r3
 8003ad4:	4643      	mov	r3, r8
 8003ad6:	18e3      	adds	r3, r4, r3
 8003ad8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003adc:	464b      	mov	r3, r9
 8003ade:	eb45 0303 	adc.w	r3, r5, r3
 8003ae2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003af2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003af6:	f04f 0200 	mov.w	r2, #0
 8003afa:	f04f 0300 	mov.w	r3, #0
 8003afe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003b02:	4629      	mov	r1, r5
 8003b04:	008b      	lsls	r3, r1, #2
 8003b06:	4621      	mov	r1, r4
 8003b08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b0c:	4621      	mov	r1, r4
 8003b0e:	008a      	lsls	r2, r1, #2
 8003b10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003b14:	f7fc fbd4 	bl	80002c0 <__aeabi_uldivmod>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4b60      	ldr	r3, [pc, #384]	@ (8003ca0 <UART_SetConfig+0x4e4>)
 8003b1e:	fba3 2302 	umull	r2, r3, r3, r2
 8003b22:	095b      	lsrs	r3, r3, #5
 8003b24:	011c      	lsls	r4, r3, #4
 8003b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b30:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003b38:	4642      	mov	r2, r8
 8003b3a:	464b      	mov	r3, r9
 8003b3c:	1891      	adds	r1, r2, r2
 8003b3e:	61b9      	str	r1, [r7, #24]
 8003b40:	415b      	adcs	r3, r3
 8003b42:	61fb      	str	r3, [r7, #28]
 8003b44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b48:	4641      	mov	r1, r8
 8003b4a:	1851      	adds	r1, r2, r1
 8003b4c:	6139      	str	r1, [r7, #16]
 8003b4e:	4649      	mov	r1, r9
 8003b50:	414b      	adcs	r3, r1
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	f04f 0200 	mov.w	r2, #0
 8003b58:	f04f 0300 	mov.w	r3, #0
 8003b5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b60:	4659      	mov	r1, fp
 8003b62:	00cb      	lsls	r3, r1, #3
 8003b64:	4651      	mov	r1, sl
 8003b66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b6a:	4651      	mov	r1, sl
 8003b6c:	00ca      	lsls	r2, r1, #3
 8003b6e:	4610      	mov	r0, r2
 8003b70:	4619      	mov	r1, r3
 8003b72:	4603      	mov	r3, r0
 8003b74:	4642      	mov	r2, r8
 8003b76:	189b      	adds	r3, r3, r2
 8003b78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b7c:	464b      	mov	r3, r9
 8003b7e:	460a      	mov	r2, r1
 8003b80:	eb42 0303 	adc.w	r3, r2, r3
 8003b84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b92:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003b94:	f04f 0200 	mov.w	r2, #0
 8003b98:	f04f 0300 	mov.w	r3, #0
 8003b9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003ba0:	4649      	mov	r1, r9
 8003ba2:	008b      	lsls	r3, r1, #2
 8003ba4:	4641      	mov	r1, r8
 8003ba6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003baa:	4641      	mov	r1, r8
 8003bac:	008a      	lsls	r2, r1, #2
 8003bae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003bb2:	f7fc fb85 	bl	80002c0 <__aeabi_uldivmod>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	460b      	mov	r3, r1
 8003bba:	4611      	mov	r1, r2
 8003bbc:	4b38      	ldr	r3, [pc, #224]	@ (8003ca0 <UART_SetConfig+0x4e4>)
 8003bbe:	fba3 2301 	umull	r2, r3, r3, r1
 8003bc2:	095b      	lsrs	r3, r3, #5
 8003bc4:	2264      	movs	r2, #100	@ 0x64
 8003bc6:	fb02 f303 	mul.w	r3, r2, r3
 8003bca:	1acb      	subs	r3, r1, r3
 8003bcc:	011b      	lsls	r3, r3, #4
 8003bce:	3332      	adds	r3, #50	@ 0x32
 8003bd0:	4a33      	ldr	r2, [pc, #204]	@ (8003ca0 <UART_SetConfig+0x4e4>)
 8003bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd6:	095b      	lsrs	r3, r3, #5
 8003bd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bdc:	441c      	add	r4, r3
 8003bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003be2:	2200      	movs	r2, #0
 8003be4:	673b      	str	r3, [r7, #112]	@ 0x70
 8003be6:	677a      	str	r2, [r7, #116]	@ 0x74
 8003be8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003bec:	4642      	mov	r2, r8
 8003bee:	464b      	mov	r3, r9
 8003bf0:	1891      	adds	r1, r2, r2
 8003bf2:	60b9      	str	r1, [r7, #8]
 8003bf4:	415b      	adcs	r3, r3
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bfc:	4641      	mov	r1, r8
 8003bfe:	1851      	adds	r1, r2, r1
 8003c00:	6039      	str	r1, [r7, #0]
 8003c02:	4649      	mov	r1, r9
 8003c04:	414b      	adcs	r3, r1
 8003c06:	607b      	str	r3, [r7, #4]
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	f04f 0300 	mov.w	r3, #0
 8003c10:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c14:	4659      	mov	r1, fp
 8003c16:	00cb      	lsls	r3, r1, #3
 8003c18:	4651      	mov	r1, sl
 8003c1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c1e:	4651      	mov	r1, sl
 8003c20:	00ca      	lsls	r2, r1, #3
 8003c22:	4610      	mov	r0, r2
 8003c24:	4619      	mov	r1, r3
 8003c26:	4603      	mov	r3, r0
 8003c28:	4642      	mov	r2, r8
 8003c2a:	189b      	adds	r3, r3, r2
 8003c2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c2e:	464b      	mov	r3, r9
 8003c30:	460a      	mov	r2, r1
 8003c32:	eb42 0303 	adc.w	r3, r2, r3
 8003c36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c42:	667a      	str	r2, [r7, #100]	@ 0x64
 8003c44:	f04f 0200 	mov.w	r2, #0
 8003c48:	f04f 0300 	mov.w	r3, #0
 8003c4c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003c50:	4649      	mov	r1, r9
 8003c52:	008b      	lsls	r3, r1, #2
 8003c54:	4641      	mov	r1, r8
 8003c56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c5a:	4641      	mov	r1, r8
 8003c5c:	008a      	lsls	r2, r1, #2
 8003c5e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003c62:	f7fc fb2d 	bl	80002c0 <__aeabi_uldivmod>
 8003c66:	4602      	mov	r2, r0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ca0 <UART_SetConfig+0x4e4>)
 8003c6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c70:	095b      	lsrs	r3, r3, #5
 8003c72:	2164      	movs	r1, #100	@ 0x64
 8003c74:	fb01 f303 	mul.w	r3, r1, r3
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	3332      	adds	r3, #50	@ 0x32
 8003c7e:	4a08      	ldr	r2, [pc, #32]	@ (8003ca0 <UART_SetConfig+0x4e4>)
 8003c80:	fba2 2303 	umull	r2, r3, r2, r3
 8003c84:	095b      	lsrs	r3, r3, #5
 8003c86:	f003 020f 	and.w	r2, r3, #15
 8003c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4422      	add	r2, r4
 8003c92:	609a      	str	r2, [r3, #8]
}
 8003c94:	bf00      	nop
 8003c96:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ca0:	51eb851f 	.word	0x51eb851f

08003ca4 <std>:
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	b510      	push	{r4, lr}
 8003ca8:	4604      	mov	r4, r0
 8003caa:	e9c0 3300 	strd	r3, r3, [r0]
 8003cae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003cb2:	6083      	str	r3, [r0, #8]
 8003cb4:	8181      	strh	r1, [r0, #12]
 8003cb6:	6643      	str	r3, [r0, #100]	@ 0x64
 8003cb8:	81c2      	strh	r2, [r0, #14]
 8003cba:	6183      	str	r3, [r0, #24]
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	2208      	movs	r2, #8
 8003cc0:	305c      	adds	r0, #92	@ 0x5c
 8003cc2:	f000 f928 	bl	8003f16 <memset>
 8003cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8003cfc <std+0x58>)
 8003cc8:	6263      	str	r3, [r4, #36]	@ 0x24
 8003cca:	4b0d      	ldr	r3, [pc, #52]	@ (8003d00 <std+0x5c>)
 8003ccc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003cce:	4b0d      	ldr	r3, [pc, #52]	@ (8003d04 <std+0x60>)
 8003cd0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8003d08 <std+0x64>)
 8003cd4:	6323      	str	r3, [r4, #48]	@ 0x30
 8003cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8003d0c <std+0x68>)
 8003cd8:	6224      	str	r4, [r4, #32]
 8003cda:	429c      	cmp	r4, r3
 8003cdc:	d006      	beq.n	8003cec <std+0x48>
 8003cde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003ce2:	4294      	cmp	r4, r2
 8003ce4:	d002      	beq.n	8003cec <std+0x48>
 8003ce6:	33d0      	adds	r3, #208	@ 0xd0
 8003ce8:	429c      	cmp	r4, r3
 8003cea:	d105      	bne.n	8003cf8 <std+0x54>
 8003cec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cf4:	f000 b988 	b.w	8004008 <__retarget_lock_init_recursive>
 8003cf8:	bd10      	pop	{r4, pc}
 8003cfa:	bf00      	nop
 8003cfc:	08003e91 	.word	0x08003e91
 8003d00:	08003eb3 	.word	0x08003eb3
 8003d04:	08003eeb 	.word	0x08003eeb
 8003d08:	08003f0f 	.word	0x08003f0f
 8003d0c:	20000160 	.word	0x20000160

08003d10 <stdio_exit_handler>:
 8003d10:	4a02      	ldr	r2, [pc, #8]	@ (8003d1c <stdio_exit_handler+0xc>)
 8003d12:	4903      	ldr	r1, [pc, #12]	@ (8003d20 <stdio_exit_handler+0x10>)
 8003d14:	4803      	ldr	r0, [pc, #12]	@ (8003d24 <stdio_exit_handler+0x14>)
 8003d16:	f000 b869 	b.w	8003dec <_fwalk_sglue>
 8003d1a:	bf00      	nop
 8003d1c:	20000010 	.word	0x20000010
 8003d20:	08004b55 	.word	0x08004b55
 8003d24:	20000020 	.word	0x20000020

08003d28 <cleanup_stdio>:
 8003d28:	6841      	ldr	r1, [r0, #4]
 8003d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d5c <cleanup_stdio+0x34>)
 8003d2c:	4299      	cmp	r1, r3
 8003d2e:	b510      	push	{r4, lr}
 8003d30:	4604      	mov	r4, r0
 8003d32:	d001      	beq.n	8003d38 <cleanup_stdio+0x10>
 8003d34:	f000 ff0e 	bl	8004b54 <_fflush_r>
 8003d38:	68a1      	ldr	r1, [r4, #8]
 8003d3a:	4b09      	ldr	r3, [pc, #36]	@ (8003d60 <cleanup_stdio+0x38>)
 8003d3c:	4299      	cmp	r1, r3
 8003d3e:	d002      	beq.n	8003d46 <cleanup_stdio+0x1e>
 8003d40:	4620      	mov	r0, r4
 8003d42:	f000 ff07 	bl	8004b54 <_fflush_r>
 8003d46:	68e1      	ldr	r1, [r4, #12]
 8003d48:	4b06      	ldr	r3, [pc, #24]	@ (8003d64 <cleanup_stdio+0x3c>)
 8003d4a:	4299      	cmp	r1, r3
 8003d4c:	d004      	beq.n	8003d58 <cleanup_stdio+0x30>
 8003d4e:	4620      	mov	r0, r4
 8003d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d54:	f000 befe 	b.w	8004b54 <_fflush_r>
 8003d58:	bd10      	pop	{r4, pc}
 8003d5a:	bf00      	nop
 8003d5c:	20000160 	.word	0x20000160
 8003d60:	200001c8 	.word	0x200001c8
 8003d64:	20000230 	.word	0x20000230

08003d68 <global_stdio_init.part.0>:
 8003d68:	b510      	push	{r4, lr}
 8003d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8003d98 <global_stdio_init.part.0+0x30>)
 8003d6c:	4c0b      	ldr	r4, [pc, #44]	@ (8003d9c <global_stdio_init.part.0+0x34>)
 8003d6e:	4a0c      	ldr	r2, [pc, #48]	@ (8003da0 <global_stdio_init.part.0+0x38>)
 8003d70:	601a      	str	r2, [r3, #0]
 8003d72:	4620      	mov	r0, r4
 8003d74:	2200      	movs	r2, #0
 8003d76:	2104      	movs	r1, #4
 8003d78:	f7ff ff94 	bl	8003ca4 <std>
 8003d7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003d80:	2201      	movs	r2, #1
 8003d82:	2109      	movs	r1, #9
 8003d84:	f7ff ff8e 	bl	8003ca4 <std>
 8003d88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d92:	2112      	movs	r1, #18
 8003d94:	f7ff bf86 	b.w	8003ca4 <std>
 8003d98:	20000298 	.word	0x20000298
 8003d9c:	20000160 	.word	0x20000160
 8003da0:	08003d11 	.word	0x08003d11

08003da4 <__sfp_lock_acquire>:
 8003da4:	4801      	ldr	r0, [pc, #4]	@ (8003dac <__sfp_lock_acquire+0x8>)
 8003da6:	f000 b930 	b.w	800400a <__retarget_lock_acquire_recursive>
 8003daa:	bf00      	nop
 8003dac:	200002a1 	.word	0x200002a1

08003db0 <__sfp_lock_release>:
 8003db0:	4801      	ldr	r0, [pc, #4]	@ (8003db8 <__sfp_lock_release+0x8>)
 8003db2:	f000 b92b 	b.w	800400c <__retarget_lock_release_recursive>
 8003db6:	bf00      	nop
 8003db8:	200002a1 	.word	0x200002a1

08003dbc <__sinit>:
 8003dbc:	b510      	push	{r4, lr}
 8003dbe:	4604      	mov	r4, r0
 8003dc0:	f7ff fff0 	bl	8003da4 <__sfp_lock_acquire>
 8003dc4:	6a23      	ldr	r3, [r4, #32]
 8003dc6:	b11b      	cbz	r3, 8003dd0 <__sinit+0x14>
 8003dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dcc:	f7ff bff0 	b.w	8003db0 <__sfp_lock_release>
 8003dd0:	4b04      	ldr	r3, [pc, #16]	@ (8003de4 <__sinit+0x28>)
 8003dd2:	6223      	str	r3, [r4, #32]
 8003dd4:	4b04      	ldr	r3, [pc, #16]	@ (8003de8 <__sinit+0x2c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1f5      	bne.n	8003dc8 <__sinit+0xc>
 8003ddc:	f7ff ffc4 	bl	8003d68 <global_stdio_init.part.0>
 8003de0:	e7f2      	b.n	8003dc8 <__sinit+0xc>
 8003de2:	bf00      	nop
 8003de4:	08003d29 	.word	0x08003d29
 8003de8:	20000298 	.word	0x20000298

08003dec <_fwalk_sglue>:
 8003dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003df0:	4607      	mov	r7, r0
 8003df2:	4688      	mov	r8, r1
 8003df4:	4614      	mov	r4, r2
 8003df6:	2600      	movs	r6, #0
 8003df8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003dfc:	f1b9 0901 	subs.w	r9, r9, #1
 8003e00:	d505      	bpl.n	8003e0e <_fwalk_sglue+0x22>
 8003e02:	6824      	ldr	r4, [r4, #0]
 8003e04:	2c00      	cmp	r4, #0
 8003e06:	d1f7      	bne.n	8003df8 <_fwalk_sglue+0xc>
 8003e08:	4630      	mov	r0, r6
 8003e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e0e:	89ab      	ldrh	r3, [r5, #12]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d907      	bls.n	8003e24 <_fwalk_sglue+0x38>
 8003e14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	d003      	beq.n	8003e24 <_fwalk_sglue+0x38>
 8003e1c:	4629      	mov	r1, r5
 8003e1e:	4638      	mov	r0, r7
 8003e20:	47c0      	blx	r8
 8003e22:	4306      	orrs	r6, r0
 8003e24:	3568      	adds	r5, #104	@ 0x68
 8003e26:	e7e9      	b.n	8003dfc <_fwalk_sglue+0x10>

08003e28 <iprintf>:
 8003e28:	b40f      	push	{r0, r1, r2, r3}
 8003e2a:	b507      	push	{r0, r1, r2, lr}
 8003e2c:	4906      	ldr	r1, [pc, #24]	@ (8003e48 <iprintf+0x20>)
 8003e2e:	ab04      	add	r3, sp, #16
 8003e30:	6808      	ldr	r0, [r1, #0]
 8003e32:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e36:	6881      	ldr	r1, [r0, #8]
 8003e38:	9301      	str	r3, [sp, #4]
 8003e3a:	f000 fb63 	bl	8004504 <_vfiprintf_r>
 8003e3e:	b003      	add	sp, #12
 8003e40:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e44:	b004      	add	sp, #16
 8003e46:	4770      	bx	lr
 8003e48:	2000001c 	.word	0x2000001c

08003e4c <siprintf>:
 8003e4c:	b40e      	push	{r1, r2, r3}
 8003e4e:	b510      	push	{r4, lr}
 8003e50:	b09d      	sub	sp, #116	@ 0x74
 8003e52:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003e54:	9002      	str	r0, [sp, #8]
 8003e56:	9006      	str	r0, [sp, #24]
 8003e58:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003e5c:	480a      	ldr	r0, [pc, #40]	@ (8003e88 <siprintf+0x3c>)
 8003e5e:	9107      	str	r1, [sp, #28]
 8003e60:	9104      	str	r1, [sp, #16]
 8003e62:	490a      	ldr	r1, [pc, #40]	@ (8003e8c <siprintf+0x40>)
 8003e64:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e68:	9105      	str	r1, [sp, #20]
 8003e6a:	2400      	movs	r4, #0
 8003e6c:	a902      	add	r1, sp, #8
 8003e6e:	6800      	ldr	r0, [r0, #0]
 8003e70:	9301      	str	r3, [sp, #4]
 8003e72:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003e74:	f000 fa20 	bl	80042b8 <_svfiprintf_r>
 8003e78:	9b02      	ldr	r3, [sp, #8]
 8003e7a:	701c      	strb	r4, [r3, #0]
 8003e7c:	b01d      	add	sp, #116	@ 0x74
 8003e7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e82:	b003      	add	sp, #12
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	2000001c 	.word	0x2000001c
 8003e8c:	ffff0208 	.word	0xffff0208

08003e90 <__sread>:
 8003e90:	b510      	push	{r4, lr}
 8003e92:	460c      	mov	r4, r1
 8003e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e98:	f000 f868 	bl	8003f6c <_read_r>
 8003e9c:	2800      	cmp	r0, #0
 8003e9e:	bfab      	itete	ge
 8003ea0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003ea2:	89a3      	ldrhlt	r3, [r4, #12]
 8003ea4:	181b      	addge	r3, r3, r0
 8003ea6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003eaa:	bfac      	ite	ge
 8003eac:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003eae:	81a3      	strhlt	r3, [r4, #12]
 8003eb0:	bd10      	pop	{r4, pc}

08003eb2 <__swrite>:
 8003eb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003eb6:	461f      	mov	r7, r3
 8003eb8:	898b      	ldrh	r3, [r1, #12]
 8003eba:	05db      	lsls	r3, r3, #23
 8003ebc:	4605      	mov	r5, r0
 8003ebe:	460c      	mov	r4, r1
 8003ec0:	4616      	mov	r6, r2
 8003ec2:	d505      	bpl.n	8003ed0 <__swrite+0x1e>
 8003ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ec8:	2302      	movs	r3, #2
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f000 f83c 	bl	8003f48 <_lseek_r>
 8003ed0:	89a3      	ldrh	r3, [r4, #12]
 8003ed2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ed6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003eda:	81a3      	strh	r3, [r4, #12]
 8003edc:	4632      	mov	r2, r6
 8003ede:	463b      	mov	r3, r7
 8003ee0:	4628      	mov	r0, r5
 8003ee2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ee6:	f000 b853 	b.w	8003f90 <_write_r>

08003eea <__sseek>:
 8003eea:	b510      	push	{r4, lr}
 8003eec:	460c      	mov	r4, r1
 8003eee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ef2:	f000 f829 	bl	8003f48 <_lseek_r>
 8003ef6:	1c43      	adds	r3, r0, #1
 8003ef8:	89a3      	ldrh	r3, [r4, #12]
 8003efa:	bf15      	itete	ne
 8003efc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003efe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003f02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003f06:	81a3      	strheq	r3, [r4, #12]
 8003f08:	bf18      	it	ne
 8003f0a:	81a3      	strhne	r3, [r4, #12]
 8003f0c:	bd10      	pop	{r4, pc}

08003f0e <__sclose>:
 8003f0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f12:	f000 b809 	b.w	8003f28 <_close_r>

08003f16 <memset>:
 8003f16:	4402      	add	r2, r0
 8003f18:	4603      	mov	r3, r0
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d100      	bne.n	8003f20 <memset+0xa>
 8003f1e:	4770      	bx	lr
 8003f20:	f803 1b01 	strb.w	r1, [r3], #1
 8003f24:	e7f9      	b.n	8003f1a <memset+0x4>
	...

08003f28 <_close_r>:
 8003f28:	b538      	push	{r3, r4, r5, lr}
 8003f2a:	4d06      	ldr	r5, [pc, #24]	@ (8003f44 <_close_r+0x1c>)
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	4604      	mov	r4, r0
 8003f30:	4608      	mov	r0, r1
 8003f32:	602b      	str	r3, [r5, #0]
 8003f34:	f7fc ffe3 	bl	8000efe <_close>
 8003f38:	1c43      	adds	r3, r0, #1
 8003f3a:	d102      	bne.n	8003f42 <_close_r+0x1a>
 8003f3c:	682b      	ldr	r3, [r5, #0]
 8003f3e:	b103      	cbz	r3, 8003f42 <_close_r+0x1a>
 8003f40:	6023      	str	r3, [r4, #0]
 8003f42:	bd38      	pop	{r3, r4, r5, pc}
 8003f44:	2000029c 	.word	0x2000029c

08003f48 <_lseek_r>:
 8003f48:	b538      	push	{r3, r4, r5, lr}
 8003f4a:	4d07      	ldr	r5, [pc, #28]	@ (8003f68 <_lseek_r+0x20>)
 8003f4c:	4604      	mov	r4, r0
 8003f4e:	4608      	mov	r0, r1
 8003f50:	4611      	mov	r1, r2
 8003f52:	2200      	movs	r2, #0
 8003f54:	602a      	str	r2, [r5, #0]
 8003f56:	461a      	mov	r2, r3
 8003f58:	f7fc fff8 	bl	8000f4c <_lseek>
 8003f5c:	1c43      	adds	r3, r0, #1
 8003f5e:	d102      	bne.n	8003f66 <_lseek_r+0x1e>
 8003f60:	682b      	ldr	r3, [r5, #0]
 8003f62:	b103      	cbz	r3, 8003f66 <_lseek_r+0x1e>
 8003f64:	6023      	str	r3, [r4, #0]
 8003f66:	bd38      	pop	{r3, r4, r5, pc}
 8003f68:	2000029c 	.word	0x2000029c

08003f6c <_read_r>:
 8003f6c:	b538      	push	{r3, r4, r5, lr}
 8003f6e:	4d07      	ldr	r5, [pc, #28]	@ (8003f8c <_read_r+0x20>)
 8003f70:	4604      	mov	r4, r0
 8003f72:	4608      	mov	r0, r1
 8003f74:	4611      	mov	r1, r2
 8003f76:	2200      	movs	r2, #0
 8003f78:	602a      	str	r2, [r5, #0]
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	f7fc ff86 	bl	8000e8c <_read>
 8003f80:	1c43      	adds	r3, r0, #1
 8003f82:	d102      	bne.n	8003f8a <_read_r+0x1e>
 8003f84:	682b      	ldr	r3, [r5, #0]
 8003f86:	b103      	cbz	r3, 8003f8a <_read_r+0x1e>
 8003f88:	6023      	str	r3, [r4, #0]
 8003f8a:	bd38      	pop	{r3, r4, r5, pc}
 8003f8c:	2000029c 	.word	0x2000029c

08003f90 <_write_r>:
 8003f90:	b538      	push	{r3, r4, r5, lr}
 8003f92:	4d07      	ldr	r5, [pc, #28]	@ (8003fb0 <_write_r+0x20>)
 8003f94:	4604      	mov	r4, r0
 8003f96:	4608      	mov	r0, r1
 8003f98:	4611      	mov	r1, r2
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	602a      	str	r2, [r5, #0]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	f7fc ff91 	bl	8000ec6 <_write>
 8003fa4:	1c43      	adds	r3, r0, #1
 8003fa6:	d102      	bne.n	8003fae <_write_r+0x1e>
 8003fa8:	682b      	ldr	r3, [r5, #0]
 8003faa:	b103      	cbz	r3, 8003fae <_write_r+0x1e>
 8003fac:	6023      	str	r3, [r4, #0]
 8003fae:	bd38      	pop	{r3, r4, r5, pc}
 8003fb0:	2000029c 	.word	0x2000029c

08003fb4 <__errno>:
 8003fb4:	4b01      	ldr	r3, [pc, #4]	@ (8003fbc <__errno+0x8>)
 8003fb6:	6818      	ldr	r0, [r3, #0]
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	2000001c 	.word	0x2000001c

08003fc0 <__libc_init_array>:
 8003fc0:	b570      	push	{r4, r5, r6, lr}
 8003fc2:	4d0d      	ldr	r5, [pc, #52]	@ (8003ff8 <__libc_init_array+0x38>)
 8003fc4:	4c0d      	ldr	r4, [pc, #52]	@ (8003ffc <__libc_init_array+0x3c>)
 8003fc6:	1b64      	subs	r4, r4, r5
 8003fc8:	10a4      	asrs	r4, r4, #2
 8003fca:	2600      	movs	r6, #0
 8003fcc:	42a6      	cmp	r6, r4
 8003fce:	d109      	bne.n	8003fe4 <__libc_init_array+0x24>
 8003fd0:	4d0b      	ldr	r5, [pc, #44]	@ (8004000 <__libc_init_array+0x40>)
 8003fd2:	4c0c      	ldr	r4, [pc, #48]	@ (8004004 <__libc_init_array+0x44>)
 8003fd4:	f000 ff6c 	bl	8004eb0 <_init>
 8003fd8:	1b64      	subs	r4, r4, r5
 8003fda:	10a4      	asrs	r4, r4, #2
 8003fdc:	2600      	movs	r6, #0
 8003fde:	42a6      	cmp	r6, r4
 8003fe0:	d105      	bne.n	8003fee <__libc_init_array+0x2e>
 8003fe2:	bd70      	pop	{r4, r5, r6, pc}
 8003fe4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fe8:	4798      	blx	r3
 8003fea:	3601      	adds	r6, #1
 8003fec:	e7ee      	b.n	8003fcc <__libc_init_array+0xc>
 8003fee:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ff2:	4798      	blx	r3
 8003ff4:	3601      	adds	r6, #1
 8003ff6:	e7f2      	b.n	8003fde <__libc_init_array+0x1e>
 8003ff8:	08004fbc 	.word	0x08004fbc
 8003ffc:	08004fbc 	.word	0x08004fbc
 8004000:	08004fbc 	.word	0x08004fbc
 8004004:	08004fc0 	.word	0x08004fc0

08004008 <__retarget_lock_init_recursive>:
 8004008:	4770      	bx	lr

0800400a <__retarget_lock_acquire_recursive>:
 800400a:	4770      	bx	lr

0800400c <__retarget_lock_release_recursive>:
 800400c:	4770      	bx	lr
	...

08004010 <_free_r>:
 8004010:	b538      	push	{r3, r4, r5, lr}
 8004012:	4605      	mov	r5, r0
 8004014:	2900      	cmp	r1, #0
 8004016:	d041      	beq.n	800409c <_free_r+0x8c>
 8004018:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800401c:	1f0c      	subs	r4, r1, #4
 800401e:	2b00      	cmp	r3, #0
 8004020:	bfb8      	it	lt
 8004022:	18e4      	addlt	r4, r4, r3
 8004024:	f000 f8e0 	bl	80041e8 <__malloc_lock>
 8004028:	4a1d      	ldr	r2, [pc, #116]	@ (80040a0 <_free_r+0x90>)
 800402a:	6813      	ldr	r3, [r2, #0]
 800402c:	b933      	cbnz	r3, 800403c <_free_r+0x2c>
 800402e:	6063      	str	r3, [r4, #4]
 8004030:	6014      	str	r4, [r2, #0]
 8004032:	4628      	mov	r0, r5
 8004034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004038:	f000 b8dc 	b.w	80041f4 <__malloc_unlock>
 800403c:	42a3      	cmp	r3, r4
 800403e:	d908      	bls.n	8004052 <_free_r+0x42>
 8004040:	6820      	ldr	r0, [r4, #0]
 8004042:	1821      	adds	r1, r4, r0
 8004044:	428b      	cmp	r3, r1
 8004046:	bf01      	itttt	eq
 8004048:	6819      	ldreq	r1, [r3, #0]
 800404a:	685b      	ldreq	r3, [r3, #4]
 800404c:	1809      	addeq	r1, r1, r0
 800404e:	6021      	streq	r1, [r4, #0]
 8004050:	e7ed      	b.n	800402e <_free_r+0x1e>
 8004052:	461a      	mov	r2, r3
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	b10b      	cbz	r3, 800405c <_free_r+0x4c>
 8004058:	42a3      	cmp	r3, r4
 800405a:	d9fa      	bls.n	8004052 <_free_r+0x42>
 800405c:	6811      	ldr	r1, [r2, #0]
 800405e:	1850      	adds	r0, r2, r1
 8004060:	42a0      	cmp	r0, r4
 8004062:	d10b      	bne.n	800407c <_free_r+0x6c>
 8004064:	6820      	ldr	r0, [r4, #0]
 8004066:	4401      	add	r1, r0
 8004068:	1850      	adds	r0, r2, r1
 800406a:	4283      	cmp	r3, r0
 800406c:	6011      	str	r1, [r2, #0]
 800406e:	d1e0      	bne.n	8004032 <_free_r+0x22>
 8004070:	6818      	ldr	r0, [r3, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	6053      	str	r3, [r2, #4]
 8004076:	4408      	add	r0, r1
 8004078:	6010      	str	r0, [r2, #0]
 800407a:	e7da      	b.n	8004032 <_free_r+0x22>
 800407c:	d902      	bls.n	8004084 <_free_r+0x74>
 800407e:	230c      	movs	r3, #12
 8004080:	602b      	str	r3, [r5, #0]
 8004082:	e7d6      	b.n	8004032 <_free_r+0x22>
 8004084:	6820      	ldr	r0, [r4, #0]
 8004086:	1821      	adds	r1, r4, r0
 8004088:	428b      	cmp	r3, r1
 800408a:	bf04      	itt	eq
 800408c:	6819      	ldreq	r1, [r3, #0]
 800408e:	685b      	ldreq	r3, [r3, #4]
 8004090:	6063      	str	r3, [r4, #4]
 8004092:	bf04      	itt	eq
 8004094:	1809      	addeq	r1, r1, r0
 8004096:	6021      	streq	r1, [r4, #0]
 8004098:	6054      	str	r4, [r2, #4]
 800409a:	e7ca      	b.n	8004032 <_free_r+0x22>
 800409c:	bd38      	pop	{r3, r4, r5, pc}
 800409e:	bf00      	nop
 80040a0:	200002a8 	.word	0x200002a8

080040a4 <sbrk_aligned>:
 80040a4:	b570      	push	{r4, r5, r6, lr}
 80040a6:	4e0f      	ldr	r6, [pc, #60]	@ (80040e4 <sbrk_aligned+0x40>)
 80040a8:	460c      	mov	r4, r1
 80040aa:	6831      	ldr	r1, [r6, #0]
 80040ac:	4605      	mov	r5, r0
 80040ae:	b911      	cbnz	r1, 80040b6 <sbrk_aligned+0x12>
 80040b0:	f000 fe26 	bl	8004d00 <_sbrk_r>
 80040b4:	6030      	str	r0, [r6, #0]
 80040b6:	4621      	mov	r1, r4
 80040b8:	4628      	mov	r0, r5
 80040ba:	f000 fe21 	bl	8004d00 <_sbrk_r>
 80040be:	1c43      	adds	r3, r0, #1
 80040c0:	d103      	bne.n	80040ca <sbrk_aligned+0x26>
 80040c2:	f04f 34ff 	mov.w	r4, #4294967295
 80040c6:	4620      	mov	r0, r4
 80040c8:	bd70      	pop	{r4, r5, r6, pc}
 80040ca:	1cc4      	adds	r4, r0, #3
 80040cc:	f024 0403 	bic.w	r4, r4, #3
 80040d0:	42a0      	cmp	r0, r4
 80040d2:	d0f8      	beq.n	80040c6 <sbrk_aligned+0x22>
 80040d4:	1a21      	subs	r1, r4, r0
 80040d6:	4628      	mov	r0, r5
 80040d8:	f000 fe12 	bl	8004d00 <_sbrk_r>
 80040dc:	3001      	adds	r0, #1
 80040de:	d1f2      	bne.n	80040c6 <sbrk_aligned+0x22>
 80040e0:	e7ef      	b.n	80040c2 <sbrk_aligned+0x1e>
 80040e2:	bf00      	nop
 80040e4:	200002a4 	.word	0x200002a4

080040e8 <_malloc_r>:
 80040e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040ec:	1ccd      	adds	r5, r1, #3
 80040ee:	f025 0503 	bic.w	r5, r5, #3
 80040f2:	3508      	adds	r5, #8
 80040f4:	2d0c      	cmp	r5, #12
 80040f6:	bf38      	it	cc
 80040f8:	250c      	movcc	r5, #12
 80040fa:	2d00      	cmp	r5, #0
 80040fc:	4606      	mov	r6, r0
 80040fe:	db01      	blt.n	8004104 <_malloc_r+0x1c>
 8004100:	42a9      	cmp	r1, r5
 8004102:	d904      	bls.n	800410e <_malloc_r+0x26>
 8004104:	230c      	movs	r3, #12
 8004106:	6033      	str	r3, [r6, #0]
 8004108:	2000      	movs	r0, #0
 800410a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800410e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80041e4 <_malloc_r+0xfc>
 8004112:	f000 f869 	bl	80041e8 <__malloc_lock>
 8004116:	f8d8 3000 	ldr.w	r3, [r8]
 800411a:	461c      	mov	r4, r3
 800411c:	bb44      	cbnz	r4, 8004170 <_malloc_r+0x88>
 800411e:	4629      	mov	r1, r5
 8004120:	4630      	mov	r0, r6
 8004122:	f7ff ffbf 	bl	80040a4 <sbrk_aligned>
 8004126:	1c43      	adds	r3, r0, #1
 8004128:	4604      	mov	r4, r0
 800412a:	d158      	bne.n	80041de <_malloc_r+0xf6>
 800412c:	f8d8 4000 	ldr.w	r4, [r8]
 8004130:	4627      	mov	r7, r4
 8004132:	2f00      	cmp	r7, #0
 8004134:	d143      	bne.n	80041be <_malloc_r+0xd6>
 8004136:	2c00      	cmp	r4, #0
 8004138:	d04b      	beq.n	80041d2 <_malloc_r+0xea>
 800413a:	6823      	ldr	r3, [r4, #0]
 800413c:	4639      	mov	r1, r7
 800413e:	4630      	mov	r0, r6
 8004140:	eb04 0903 	add.w	r9, r4, r3
 8004144:	f000 fddc 	bl	8004d00 <_sbrk_r>
 8004148:	4581      	cmp	r9, r0
 800414a:	d142      	bne.n	80041d2 <_malloc_r+0xea>
 800414c:	6821      	ldr	r1, [r4, #0]
 800414e:	1a6d      	subs	r5, r5, r1
 8004150:	4629      	mov	r1, r5
 8004152:	4630      	mov	r0, r6
 8004154:	f7ff ffa6 	bl	80040a4 <sbrk_aligned>
 8004158:	3001      	adds	r0, #1
 800415a:	d03a      	beq.n	80041d2 <_malloc_r+0xea>
 800415c:	6823      	ldr	r3, [r4, #0]
 800415e:	442b      	add	r3, r5
 8004160:	6023      	str	r3, [r4, #0]
 8004162:	f8d8 3000 	ldr.w	r3, [r8]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	bb62      	cbnz	r2, 80041c4 <_malloc_r+0xdc>
 800416a:	f8c8 7000 	str.w	r7, [r8]
 800416e:	e00f      	b.n	8004190 <_malloc_r+0xa8>
 8004170:	6822      	ldr	r2, [r4, #0]
 8004172:	1b52      	subs	r2, r2, r5
 8004174:	d420      	bmi.n	80041b8 <_malloc_r+0xd0>
 8004176:	2a0b      	cmp	r2, #11
 8004178:	d917      	bls.n	80041aa <_malloc_r+0xc2>
 800417a:	1961      	adds	r1, r4, r5
 800417c:	42a3      	cmp	r3, r4
 800417e:	6025      	str	r5, [r4, #0]
 8004180:	bf18      	it	ne
 8004182:	6059      	strne	r1, [r3, #4]
 8004184:	6863      	ldr	r3, [r4, #4]
 8004186:	bf08      	it	eq
 8004188:	f8c8 1000 	streq.w	r1, [r8]
 800418c:	5162      	str	r2, [r4, r5]
 800418e:	604b      	str	r3, [r1, #4]
 8004190:	4630      	mov	r0, r6
 8004192:	f000 f82f 	bl	80041f4 <__malloc_unlock>
 8004196:	f104 000b 	add.w	r0, r4, #11
 800419a:	1d23      	adds	r3, r4, #4
 800419c:	f020 0007 	bic.w	r0, r0, #7
 80041a0:	1ac2      	subs	r2, r0, r3
 80041a2:	bf1c      	itt	ne
 80041a4:	1a1b      	subne	r3, r3, r0
 80041a6:	50a3      	strne	r3, [r4, r2]
 80041a8:	e7af      	b.n	800410a <_malloc_r+0x22>
 80041aa:	6862      	ldr	r2, [r4, #4]
 80041ac:	42a3      	cmp	r3, r4
 80041ae:	bf0c      	ite	eq
 80041b0:	f8c8 2000 	streq.w	r2, [r8]
 80041b4:	605a      	strne	r2, [r3, #4]
 80041b6:	e7eb      	b.n	8004190 <_malloc_r+0xa8>
 80041b8:	4623      	mov	r3, r4
 80041ba:	6864      	ldr	r4, [r4, #4]
 80041bc:	e7ae      	b.n	800411c <_malloc_r+0x34>
 80041be:	463c      	mov	r4, r7
 80041c0:	687f      	ldr	r7, [r7, #4]
 80041c2:	e7b6      	b.n	8004132 <_malloc_r+0x4a>
 80041c4:	461a      	mov	r2, r3
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	42a3      	cmp	r3, r4
 80041ca:	d1fb      	bne.n	80041c4 <_malloc_r+0xdc>
 80041cc:	2300      	movs	r3, #0
 80041ce:	6053      	str	r3, [r2, #4]
 80041d0:	e7de      	b.n	8004190 <_malloc_r+0xa8>
 80041d2:	230c      	movs	r3, #12
 80041d4:	6033      	str	r3, [r6, #0]
 80041d6:	4630      	mov	r0, r6
 80041d8:	f000 f80c 	bl	80041f4 <__malloc_unlock>
 80041dc:	e794      	b.n	8004108 <_malloc_r+0x20>
 80041de:	6005      	str	r5, [r0, #0]
 80041e0:	e7d6      	b.n	8004190 <_malloc_r+0xa8>
 80041e2:	bf00      	nop
 80041e4:	200002a8 	.word	0x200002a8

080041e8 <__malloc_lock>:
 80041e8:	4801      	ldr	r0, [pc, #4]	@ (80041f0 <__malloc_lock+0x8>)
 80041ea:	f7ff bf0e 	b.w	800400a <__retarget_lock_acquire_recursive>
 80041ee:	bf00      	nop
 80041f0:	200002a0 	.word	0x200002a0

080041f4 <__malloc_unlock>:
 80041f4:	4801      	ldr	r0, [pc, #4]	@ (80041fc <__malloc_unlock+0x8>)
 80041f6:	f7ff bf09 	b.w	800400c <__retarget_lock_release_recursive>
 80041fa:	bf00      	nop
 80041fc:	200002a0 	.word	0x200002a0

08004200 <__ssputs_r>:
 8004200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004204:	688e      	ldr	r6, [r1, #8]
 8004206:	461f      	mov	r7, r3
 8004208:	42be      	cmp	r6, r7
 800420a:	680b      	ldr	r3, [r1, #0]
 800420c:	4682      	mov	sl, r0
 800420e:	460c      	mov	r4, r1
 8004210:	4690      	mov	r8, r2
 8004212:	d82d      	bhi.n	8004270 <__ssputs_r+0x70>
 8004214:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004218:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800421c:	d026      	beq.n	800426c <__ssputs_r+0x6c>
 800421e:	6965      	ldr	r5, [r4, #20]
 8004220:	6909      	ldr	r1, [r1, #16]
 8004222:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004226:	eba3 0901 	sub.w	r9, r3, r1
 800422a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800422e:	1c7b      	adds	r3, r7, #1
 8004230:	444b      	add	r3, r9
 8004232:	106d      	asrs	r5, r5, #1
 8004234:	429d      	cmp	r5, r3
 8004236:	bf38      	it	cc
 8004238:	461d      	movcc	r5, r3
 800423a:	0553      	lsls	r3, r2, #21
 800423c:	d527      	bpl.n	800428e <__ssputs_r+0x8e>
 800423e:	4629      	mov	r1, r5
 8004240:	f7ff ff52 	bl	80040e8 <_malloc_r>
 8004244:	4606      	mov	r6, r0
 8004246:	b360      	cbz	r0, 80042a2 <__ssputs_r+0xa2>
 8004248:	6921      	ldr	r1, [r4, #16]
 800424a:	464a      	mov	r2, r9
 800424c:	f000 fd68 	bl	8004d20 <memcpy>
 8004250:	89a3      	ldrh	r3, [r4, #12]
 8004252:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004256:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800425a:	81a3      	strh	r3, [r4, #12]
 800425c:	6126      	str	r6, [r4, #16]
 800425e:	6165      	str	r5, [r4, #20]
 8004260:	444e      	add	r6, r9
 8004262:	eba5 0509 	sub.w	r5, r5, r9
 8004266:	6026      	str	r6, [r4, #0]
 8004268:	60a5      	str	r5, [r4, #8]
 800426a:	463e      	mov	r6, r7
 800426c:	42be      	cmp	r6, r7
 800426e:	d900      	bls.n	8004272 <__ssputs_r+0x72>
 8004270:	463e      	mov	r6, r7
 8004272:	6820      	ldr	r0, [r4, #0]
 8004274:	4632      	mov	r2, r6
 8004276:	4641      	mov	r1, r8
 8004278:	f000 fd28 	bl	8004ccc <memmove>
 800427c:	68a3      	ldr	r3, [r4, #8]
 800427e:	1b9b      	subs	r3, r3, r6
 8004280:	60a3      	str	r3, [r4, #8]
 8004282:	6823      	ldr	r3, [r4, #0]
 8004284:	4433      	add	r3, r6
 8004286:	6023      	str	r3, [r4, #0]
 8004288:	2000      	movs	r0, #0
 800428a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800428e:	462a      	mov	r2, r5
 8004290:	f000 fd54 	bl	8004d3c <_realloc_r>
 8004294:	4606      	mov	r6, r0
 8004296:	2800      	cmp	r0, #0
 8004298:	d1e0      	bne.n	800425c <__ssputs_r+0x5c>
 800429a:	6921      	ldr	r1, [r4, #16]
 800429c:	4650      	mov	r0, sl
 800429e:	f7ff feb7 	bl	8004010 <_free_r>
 80042a2:	230c      	movs	r3, #12
 80042a4:	f8ca 3000 	str.w	r3, [sl]
 80042a8:	89a3      	ldrh	r3, [r4, #12]
 80042aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042ae:	81a3      	strh	r3, [r4, #12]
 80042b0:	f04f 30ff 	mov.w	r0, #4294967295
 80042b4:	e7e9      	b.n	800428a <__ssputs_r+0x8a>
	...

080042b8 <_svfiprintf_r>:
 80042b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042bc:	4698      	mov	r8, r3
 80042be:	898b      	ldrh	r3, [r1, #12]
 80042c0:	061b      	lsls	r3, r3, #24
 80042c2:	b09d      	sub	sp, #116	@ 0x74
 80042c4:	4607      	mov	r7, r0
 80042c6:	460d      	mov	r5, r1
 80042c8:	4614      	mov	r4, r2
 80042ca:	d510      	bpl.n	80042ee <_svfiprintf_r+0x36>
 80042cc:	690b      	ldr	r3, [r1, #16]
 80042ce:	b973      	cbnz	r3, 80042ee <_svfiprintf_r+0x36>
 80042d0:	2140      	movs	r1, #64	@ 0x40
 80042d2:	f7ff ff09 	bl	80040e8 <_malloc_r>
 80042d6:	6028      	str	r0, [r5, #0]
 80042d8:	6128      	str	r0, [r5, #16]
 80042da:	b930      	cbnz	r0, 80042ea <_svfiprintf_r+0x32>
 80042dc:	230c      	movs	r3, #12
 80042de:	603b      	str	r3, [r7, #0]
 80042e0:	f04f 30ff 	mov.w	r0, #4294967295
 80042e4:	b01d      	add	sp, #116	@ 0x74
 80042e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042ea:	2340      	movs	r3, #64	@ 0x40
 80042ec:	616b      	str	r3, [r5, #20]
 80042ee:	2300      	movs	r3, #0
 80042f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80042f2:	2320      	movs	r3, #32
 80042f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80042f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80042fc:	2330      	movs	r3, #48	@ 0x30
 80042fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800449c <_svfiprintf_r+0x1e4>
 8004302:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004306:	f04f 0901 	mov.w	r9, #1
 800430a:	4623      	mov	r3, r4
 800430c:	469a      	mov	sl, r3
 800430e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004312:	b10a      	cbz	r2, 8004318 <_svfiprintf_r+0x60>
 8004314:	2a25      	cmp	r2, #37	@ 0x25
 8004316:	d1f9      	bne.n	800430c <_svfiprintf_r+0x54>
 8004318:	ebba 0b04 	subs.w	fp, sl, r4
 800431c:	d00b      	beq.n	8004336 <_svfiprintf_r+0x7e>
 800431e:	465b      	mov	r3, fp
 8004320:	4622      	mov	r2, r4
 8004322:	4629      	mov	r1, r5
 8004324:	4638      	mov	r0, r7
 8004326:	f7ff ff6b 	bl	8004200 <__ssputs_r>
 800432a:	3001      	adds	r0, #1
 800432c:	f000 80a7 	beq.w	800447e <_svfiprintf_r+0x1c6>
 8004330:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004332:	445a      	add	r2, fp
 8004334:	9209      	str	r2, [sp, #36]	@ 0x24
 8004336:	f89a 3000 	ldrb.w	r3, [sl]
 800433a:	2b00      	cmp	r3, #0
 800433c:	f000 809f 	beq.w	800447e <_svfiprintf_r+0x1c6>
 8004340:	2300      	movs	r3, #0
 8004342:	f04f 32ff 	mov.w	r2, #4294967295
 8004346:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800434a:	f10a 0a01 	add.w	sl, sl, #1
 800434e:	9304      	str	r3, [sp, #16]
 8004350:	9307      	str	r3, [sp, #28]
 8004352:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004356:	931a      	str	r3, [sp, #104]	@ 0x68
 8004358:	4654      	mov	r4, sl
 800435a:	2205      	movs	r2, #5
 800435c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004360:	484e      	ldr	r0, [pc, #312]	@ (800449c <_svfiprintf_r+0x1e4>)
 8004362:	f7fb ff5d 	bl	8000220 <memchr>
 8004366:	9a04      	ldr	r2, [sp, #16]
 8004368:	b9d8      	cbnz	r0, 80043a2 <_svfiprintf_r+0xea>
 800436a:	06d0      	lsls	r0, r2, #27
 800436c:	bf44      	itt	mi
 800436e:	2320      	movmi	r3, #32
 8004370:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004374:	0711      	lsls	r1, r2, #28
 8004376:	bf44      	itt	mi
 8004378:	232b      	movmi	r3, #43	@ 0x2b
 800437a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800437e:	f89a 3000 	ldrb.w	r3, [sl]
 8004382:	2b2a      	cmp	r3, #42	@ 0x2a
 8004384:	d015      	beq.n	80043b2 <_svfiprintf_r+0xfa>
 8004386:	9a07      	ldr	r2, [sp, #28]
 8004388:	4654      	mov	r4, sl
 800438a:	2000      	movs	r0, #0
 800438c:	f04f 0c0a 	mov.w	ip, #10
 8004390:	4621      	mov	r1, r4
 8004392:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004396:	3b30      	subs	r3, #48	@ 0x30
 8004398:	2b09      	cmp	r3, #9
 800439a:	d94b      	bls.n	8004434 <_svfiprintf_r+0x17c>
 800439c:	b1b0      	cbz	r0, 80043cc <_svfiprintf_r+0x114>
 800439e:	9207      	str	r2, [sp, #28]
 80043a0:	e014      	b.n	80043cc <_svfiprintf_r+0x114>
 80043a2:	eba0 0308 	sub.w	r3, r0, r8
 80043a6:	fa09 f303 	lsl.w	r3, r9, r3
 80043aa:	4313      	orrs	r3, r2
 80043ac:	9304      	str	r3, [sp, #16]
 80043ae:	46a2      	mov	sl, r4
 80043b0:	e7d2      	b.n	8004358 <_svfiprintf_r+0xa0>
 80043b2:	9b03      	ldr	r3, [sp, #12]
 80043b4:	1d19      	adds	r1, r3, #4
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	9103      	str	r1, [sp, #12]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	bfbb      	ittet	lt
 80043be:	425b      	neglt	r3, r3
 80043c0:	f042 0202 	orrlt.w	r2, r2, #2
 80043c4:	9307      	strge	r3, [sp, #28]
 80043c6:	9307      	strlt	r3, [sp, #28]
 80043c8:	bfb8      	it	lt
 80043ca:	9204      	strlt	r2, [sp, #16]
 80043cc:	7823      	ldrb	r3, [r4, #0]
 80043ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80043d0:	d10a      	bne.n	80043e8 <_svfiprintf_r+0x130>
 80043d2:	7863      	ldrb	r3, [r4, #1]
 80043d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80043d6:	d132      	bne.n	800443e <_svfiprintf_r+0x186>
 80043d8:	9b03      	ldr	r3, [sp, #12]
 80043da:	1d1a      	adds	r2, r3, #4
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	9203      	str	r2, [sp, #12]
 80043e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80043e4:	3402      	adds	r4, #2
 80043e6:	9305      	str	r3, [sp, #20]
 80043e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80044ac <_svfiprintf_r+0x1f4>
 80043ec:	7821      	ldrb	r1, [r4, #0]
 80043ee:	2203      	movs	r2, #3
 80043f0:	4650      	mov	r0, sl
 80043f2:	f7fb ff15 	bl	8000220 <memchr>
 80043f6:	b138      	cbz	r0, 8004408 <_svfiprintf_r+0x150>
 80043f8:	9b04      	ldr	r3, [sp, #16]
 80043fa:	eba0 000a 	sub.w	r0, r0, sl
 80043fe:	2240      	movs	r2, #64	@ 0x40
 8004400:	4082      	lsls	r2, r0
 8004402:	4313      	orrs	r3, r2
 8004404:	3401      	adds	r4, #1
 8004406:	9304      	str	r3, [sp, #16]
 8004408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800440c:	4824      	ldr	r0, [pc, #144]	@ (80044a0 <_svfiprintf_r+0x1e8>)
 800440e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004412:	2206      	movs	r2, #6
 8004414:	f7fb ff04 	bl	8000220 <memchr>
 8004418:	2800      	cmp	r0, #0
 800441a:	d036      	beq.n	800448a <_svfiprintf_r+0x1d2>
 800441c:	4b21      	ldr	r3, [pc, #132]	@ (80044a4 <_svfiprintf_r+0x1ec>)
 800441e:	bb1b      	cbnz	r3, 8004468 <_svfiprintf_r+0x1b0>
 8004420:	9b03      	ldr	r3, [sp, #12]
 8004422:	3307      	adds	r3, #7
 8004424:	f023 0307 	bic.w	r3, r3, #7
 8004428:	3308      	adds	r3, #8
 800442a:	9303      	str	r3, [sp, #12]
 800442c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800442e:	4433      	add	r3, r6
 8004430:	9309      	str	r3, [sp, #36]	@ 0x24
 8004432:	e76a      	b.n	800430a <_svfiprintf_r+0x52>
 8004434:	fb0c 3202 	mla	r2, ip, r2, r3
 8004438:	460c      	mov	r4, r1
 800443a:	2001      	movs	r0, #1
 800443c:	e7a8      	b.n	8004390 <_svfiprintf_r+0xd8>
 800443e:	2300      	movs	r3, #0
 8004440:	3401      	adds	r4, #1
 8004442:	9305      	str	r3, [sp, #20]
 8004444:	4619      	mov	r1, r3
 8004446:	f04f 0c0a 	mov.w	ip, #10
 800444a:	4620      	mov	r0, r4
 800444c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004450:	3a30      	subs	r2, #48	@ 0x30
 8004452:	2a09      	cmp	r2, #9
 8004454:	d903      	bls.n	800445e <_svfiprintf_r+0x1a6>
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0c6      	beq.n	80043e8 <_svfiprintf_r+0x130>
 800445a:	9105      	str	r1, [sp, #20]
 800445c:	e7c4      	b.n	80043e8 <_svfiprintf_r+0x130>
 800445e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004462:	4604      	mov	r4, r0
 8004464:	2301      	movs	r3, #1
 8004466:	e7f0      	b.n	800444a <_svfiprintf_r+0x192>
 8004468:	ab03      	add	r3, sp, #12
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	462a      	mov	r2, r5
 800446e:	4b0e      	ldr	r3, [pc, #56]	@ (80044a8 <_svfiprintf_r+0x1f0>)
 8004470:	a904      	add	r1, sp, #16
 8004472:	4638      	mov	r0, r7
 8004474:	f3af 8000 	nop.w
 8004478:	1c42      	adds	r2, r0, #1
 800447a:	4606      	mov	r6, r0
 800447c:	d1d6      	bne.n	800442c <_svfiprintf_r+0x174>
 800447e:	89ab      	ldrh	r3, [r5, #12]
 8004480:	065b      	lsls	r3, r3, #25
 8004482:	f53f af2d 	bmi.w	80042e0 <_svfiprintf_r+0x28>
 8004486:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004488:	e72c      	b.n	80042e4 <_svfiprintf_r+0x2c>
 800448a:	ab03      	add	r3, sp, #12
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	462a      	mov	r2, r5
 8004490:	4b05      	ldr	r3, [pc, #20]	@ (80044a8 <_svfiprintf_r+0x1f0>)
 8004492:	a904      	add	r1, sp, #16
 8004494:	4638      	mov	r0, r7
 8004496:	f000 f9bb 	bl	8004810 <_printf_i>
 800449a:	e7ed      	b.n	8004478 <_svfiprintf_r+0x1c0>
 800449c:	08004f80 	.word	0x08004f80
 80044a0:	08004f8a 	.word	0x08004f8a
 80044a4:	00000000 	.word	0x00000000
 80044a8:	08004201 	.word	0x08004201
 80044ac:	08004f86 	.word	0x08004f86

080044b0 <__sfputc_r>:
 80044b0:	6893      	ldr	r3, [r2, #8]
 80044b2:	3b01      	subs	r3, #1
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	b410      	push	{r4}
 80044b8:	6093      	str	r3, [r2, #8]
 80044ba:	da08      	bge.n	80044ce <__sfputc_r+0x1e>
 80044bc:	6994      	ldr	r4, [r2, #24]
 80044be:	42a3      	cmp	r3, r4
 80044c0:	db01      	blt.n	80044c6 <__sfputc_r+0x16>
 80044c2:	290a      	cmp	r1, #10
 80044c4:	d103      	bne.n	80044ce <__sfputc_r+0x1e>
 80044c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044ca:	f000 bb6b 	b.w	8004ba4 <__swbuf_r>
 80044ce:	6813      	ldr	r3, [r2, #0]
 80044d0:	1c58      	adds	r0, r3, #1
 80044d2:	6010      	str	r0, [r2, #0]
 80044d4:	7019      	strb	r1, [r3, #0]
 80044d6:	4608      	mov	r0, r1
 80044d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044dc:	4770      	bx	lr

080044de <__sfputs_r>:
 80044de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e0:	4606      	mov	r6, r0
 80044e2:	460f      	mov	r7, r1
 80044e4:	4614      	mov	r4, r2
 80044e6:	18d5      	adds	r5, r2, r3
 80044e8:	42ac      	cmp	r4, r5
 80044ea:	d101      	bne.n	80044f0 <__sfputs_r+0x12>
 80044ec:	2000      	movs	r0, #0
 80044ee:	e007      	b.n	8004500 <__sfputs_r+0x22>
 80044f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044f4:	463a      	mov	r2, r7
 80044f6:	4630      	mov	r0, r6
 80044f8:	f7ff ffda 	bl	80044b0 <__sfputc_r>
 80044fc:	1c43      	adds	r3, r0, #1
 80044fe:	d1f3      	bne.n	80044e8 <__sfputs_r+0xa>
 8004500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004504 <_vfiprintf_r>:
 8004504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004508:	460d      	mov	r5, r1
 800450a:	b09d      	sub	sp, #116	@ 0x74
 800450c:	4614      	mov	r4, r2
 800450e:	4698      	mov	r8, r3
 8004510:	4606      	mov	r6, r0
 8004512:	b118      	cbz	r0, 800451c <_vfiprintf_r+0x18>
 8004514:	6a03      	ldr	r3, [r0, #32]
 8004516:	b90b      	cbnz	r3, 800451c <_vfiprintf_r+0x18>
 8004518:	f7ff fc50 	bl	8003dbc <__sinit>
 800451c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800451e:	07d9      	lsls	r1, r3, #31
 8004520:	d405      	bmi.n	800452e <_vfiprintf_r+0x2a>
 8004522:	89ab      	ldrh	r3, [r5, #12]
 8004524:	059a      	lsls	r2, r3, #22
 8004526:	d402      	bmi.n	800452e <_vfiprintf_r+0x2a>
 8004528:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800452a:	f7ff fd6e 	bl	800400a <__retarget_lock_acquire_recursive>
 800452e:	89ab      	ldrh	r3, [r5, #12]
 8004530:	071b      	lsls	r3, r3, #28
 8004532:	d501      	bpl.n	8004538 <_vfiprintf_r+0x34>
 8004534:	692b      	ldr	r3, [r5, #16]
 8004536:	b99b      	cbnz	r3, 8004560 <_vfiprintf_r+0x5c>
 8004538:	4629      	mov	r1, r5
 800453a:	4630      	mov	r0, r6
 800453c:	f000 fb70 	bl	8004c20 <__swsetup_r>
 8004540:	b170      	cbz	r0, 8004560 <_vfiprintf_r+0x5c>
 8004542:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004544:	07dc      	lsls	r4, r3, #31
 8004546:	d504      	bpl.n	8004552 <_vfiprintf_r+0x4e>
 8004548:	f04f 30ff 	mov.w	r0, #4294967295
 800454c:	b01d      	add	sp, #116	@ 0x74
 800454e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004552:	89ab      	ldrh	r3, [r5, #12]
 8004554:	0598      	lsls	r0, r3, #22
 8004556:	d4f7      	bmi.n	8004548 <_vfiprintf_r+0x44>
 8004558:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800455a:	f7ff fd57 	bl	800400c <__retarget_lock_release_recursive>
 800455e:	e7f3      	b.n	8004548 <_vfiprintf_r+0x44>
 8004560:	2300      	movs	r3, #0
 8004562:	9309      	str	r3, [sp, #36]	@ 0x24
 8004564:	2320      	movs	r3, #32
 8004566:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800456a:	f8cd 800c 	str.w	r8, [sp, #12]
 800456e:	2330      	movs	r3, #48	@ 0x30
 8004570:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004720 <_vfiprintf_r+0x21c>
 8004574:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004578:	f04f 0901 	mov.w	r9, #1
 800457c:	4623      	mov	r3, r4
 800457e:	469a      	mov	sl, r3
 8004580:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004584:	b10a      	cbz	r2, 800458a <_vfiprintf_r+0x86>
 8004586:	2a25      	cmp	r2, #37	@ 0x25
 8004588:	d1f9      	bne.n	800457e <_vfiprintf_r+0x7a>
 800458a:	ebba 0b04 	subs.w	fp, sl, r4
 800458e:	d00b      	beq.n	80045a8 <_vfiprintf_r+0xa4>
 8004590:	465b      	mov	r3, fp
 8004592:	4622      	mov	r2, r4
 8004594:	4629      	mov	r1, r5
 8004596:	4630      	mov	r0, r6
 8004598:	f7ff ffa1 	bl	80044de <__sfputs_r>
 800459c:	3001      	adds	r0, #1
 800459e:	f000 80a7 	beq.w	80046f0 <_vfiprintf_r+0x1ec>
 80045a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80045a4:	445a      	add	r2, fp
 80045a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80045a8:	f89a 3000 	ldrb.w	r3, [sl]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 809f 	beq.w	80046f0 <_vfiprintf_r+0x1ec>
 80045b2:	2300      	movs	r3, #0
 80045b4:	f04f 32ff 	mov.w	r2, #4294967295
 80045b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045bc:	f10a 0a01 	add.w	sl, sl, #1
 80045c0:	9304      	str	r3, [sp, #16]
 80045c2:	9307      	str	r3, [sp, #28]
 80045c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80045c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80045ca:	4654      	mov	r4, sl
 80045cc:	2205      	movs	r2, #5
 80045ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045d2:	4853      	ldr	r0, [pc, #332]	@ (8004720 <_vfiprintf_r+0x21c>)
 80045d4:	f7fb fe24 	bl	8000220 <memchr>
 80045d8:	9a04      	ldr	r2, [sp, #16]
 80045da:	b9d8      	cbnz	r0, 8004614 <_vfiprintf_r+0x110>
 80045dc:	06d1      	lsls	r1, r2, #27
 80045de:	bf44      	itt	mi
 80045e0:	2320      	movmi	r3, #32
 80045e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80045e6:	0713      	lsls	r3, r2, #28
 80045e8:	bf44      	itt	mi
 80045ea:	232b      	movmi	r3, #43	@ 0x2b
 80045ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80045f0:	f89a 3000 	ldrb.w	r3, [sl]
 80045f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80045f6:	d015      	beq.n	8004624 <_vfiprintf_r+0x120>
 80045f8:	9a07      	ldr	r2, [sp, #28]
 80045fa:	4654      	mov	r4, sl
 80045fc:	2000      	movs	r0, #0
 80045fe:	f04f 0c0a 	mov.w	ip, #10
 8004602:	4621      	mov	r1, r4
 8004604:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004608:	3b30      	subs	r3, #48	@ 0x30
 800460a:	2b09      	cmp	r3, #9
 800460c:	d94b      	bls.n	80046a6 <_vfiprintf_r+0x1a2>
 800460e:	b1b0      	cbz	r0, 800463e <_vfiprintf_r+0x13a>
 8004610:	9207      	str	r2, [sp, #28]
 8004612:	e014      	b.n	800463e <_vfiprintf_r+0x13a>
 8004614:	eba0 0308 	sub.w	r3, r0, r8
 8004618:	fa09 f303 	lsl.w	r3, r9, r3
 800461c:	4313      	orrs	r3, r2
 800461e:	9304      	str	r3, [sp, #16]
 8004620:	46a2      	mov	sl, r4
 8004622:	e7d2      	b.n	80045ca <_vfiprintf_r+0xc6>
 8004624:	9b03      	ldr	r3, [sp, #12]
 8004626:	1d19      	adds	r1, r3, #4
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	9103      	str	r1, [sp, #12]
 800462c:	2b00      	cmp	r3, #0
 800462e:	bfbb      	ittet	lt
 8004630:	425b      	neglt	r3, r3
 8004632:	f042 0202 	orrlt.w	r2, r2, #2
 8004636:	9307      	strge	r3, [sp, #28]
 8004638:	9307      	strlt	r3, [sp, #28]
 800463a:	bfb8      	it	lt
 800463c:	9204      	strlt	r2, [sp, #16]
 800463e:	7823      	ldrb	r3, [r4, #0]
 8004640:	2b2e      	cmp	r3, #46	@ 0x2e
 8004642:	d10a      	bne.n	800465a <_vfiprintf_r+0x156>
 8004644:	7863      	ldrb	r3, [r4, #1]
 8004646:	2b2a      	cmp	r3, #42	@ 0x2a
 8004648:	d132      	bne.n	80046b0 <_vfiprintf_r+0x1ac>
 800464a:	9b03      	ldr	r3, [sp, #12]
 800464c:	1d1a      	adds	r2, r3, #4
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	9203      	str	r2, [sp, #12]
 8004652:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004656:	3402      	adds	r4, #2
 8004658:	9305      	str	r3, [sp, #20]
 800465a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004730 <_vfiprintf_r+0x22c>
 800465e:	7821      	ldrb	r1, [r4, #0]
 8004660:	2203      	movs	r2, #3
 8004662:	4650      	mov	r0, sl
 8004664:	f7fb fddc 	bl	8000220 <memchr>
 8004668:	b138      	cbz	r0, 800467a <_vfiprintf_r+0x176>
 800466a:	9b04      	ldr	r3, [sp, #16]
 800466c:	eba0 000a 	sub.w	r0, r0, sl
 8004670:	2240      	movs	r2, #64	@ 0x40
 8004672:	4082      	lsls	r2, r0
 8004674:	4313      	orrs	r3, r2
 8004676:	3401      	adds	r4, #1
 8004678:	9304      	str	r3, [sp, #16]
 800467a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800467e:	4829      	ldr	r0, [pc, #164]	@ (8004724 <_vfiprintf_r+0x220>)
 8004680:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004684:	2206      	movs	r2, #6
 8004686:	f7fb fdcb 	bl	8000220 <memchr>
 800468a:	2800      	cmp	r0, #0
 800468c:	d03f      	beq.n	800470e <_vfiprintf_r+0x20a>
 800468e:	4b26      	ldr	r3, [pc, #152]	@ (8004728 <_vfiprintf_r+0x224>)
 8004690:	bb1b      	cbnz	r3, 80046da <_vfiprintf_r+0x1d6>
 8004692:	9b03      	ldr	r3, [sp, #12]
 8004694:	3307      	adds	r3, #7
 8004696:	f023 0307 	bic.w	r3, r3, #7
 800469a:	3308      	adds	r3, #8
 800469c:	9303      	str	r3, [sp, #12]
 800469e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046a0:	443b      	add	r3, r7
 80046a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80046a4:	e76a      	b.n	800457c <_vfiprintf_r+0x78>
 80046a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80046aa:	460c      	mov	r4, r1
 80046ac:	2001      	movs	r0, #1
 80046ae:	e7a8      	b.n	8004602 <_vfiprintf_r+0xfe>
 80046b0:	2300      	movs	r3, #0
 80046b2:	3401      	adds	r4, #1
 80046b4:	9305      	str	r3, [sp, #20]
 80046b6:	4619      	mov	r1, r3
 80046b8:	f04f 0c0a 	mov.w	ip, #10
 80046bc:	4620      	mov	r0, r4
 80046be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046c2:	3a30      	subs	r2, #48	@ 0x30
 80046c4:	2a09      	cmp	r2, #9
 80046c6:	d903      	bls.n	80046d0 <_vfiprintf_r+0x1cc>
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0c6      	beq.n	800465a <_vfiprintf_r+0x156>
 80046cc:	9105      	str	r1, [sp, #20]
 80046ce:	e7c4      	b.n	800465a <_vfiprintf_r+0x156>
 80046d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80046d4:	4604      	mov	r4, r0
 80046d6:	2301      	movs	r3, #1
 80046d8:	e7f0      	b.n	80046bc <_vfiprintf_r+0x1b8>
 80046da:	ab03      	add	r3, sp, #12
 80046dc:	9300      	str	r3, [sp, #0]
 80046de:	462a      	mov	r2, r5
 80046e0:	4b12      	ldr	r3, [pc, #72]	@ (800472c <_vfiprintf_r+0x228>)
 80046e2:	a904      	add	r1, sp, #16
 80046e4:	4630      	mov	r0, r6
 80046e6:	f3af 8000 	nop.w
 80046ea:	4607      	mov	r7, r0
 80046ec:	1c78      	adds	r0, r7, #1
 80046ee:	d1d6      	bne.n	800469e <_vfiprintf_r+0x19a>
 80046f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80046f2:	07d9      	lsls	r1, r3, #31
 80046f4:	d405      	bmi.n	8004702 <_vfiprintf_r+0x1fe>
 80046f6:	89ab      	ldrh	r3, [r5, #12]
 80046f8:	059a      	lsls	r2, r3, #22
 80046fa:	d402      	bmi.n	8004702 <_vfiprintf_r+0x1fe>
 80046fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80046fe:	f7ff fc85 	bl	800400c <__retarget_lock_release_recursive>
 8004702:	89ab      	ldrh	r3, [r5, #12]
 8004704:	065b      	lsls	r3, r3, #25
 8004706:	f53f af1f 	bmi.w	8004548 <_vfiprintf_r+0x44>
 800470a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800470c:	e71e      	b.n	800454c <_vfiprintf_r+0x48>
 800470e:	ab03      	add	r3, sp, #12
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	462a      	mov	r2, r5
 8004714:	4b05      	ldr	r3, [pc, #20]	@ (800472c <_vfiprintf_r+0x228>)
 8004716:	a904      	add	r1, sp, #16
 8004718:	4630      	mov	r0, r6
 800471a:	f000 f879 	bl	8004810 <_printf_i>
 800471e:	e7e4      	b.n	80046ea <_vfiprintf_r+0x1e6>
 8004720:	08004f80 	.word	0x08004f80
 8004724:	08004f8a 	.word	0x08004f8a
 8004728:	00000000 	.word	0x00000000
 800472c:	080044df 	.word	0x080044df
 8004730:	08004f86 	.word	0x08004f86

08004734 <_printf_common>:
 8004734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004738:	4616      	mov	r6, r2
 800473a:	4698      	mov	r8, r3
 800473c:	688a      	ldr	r2, [r1, #8]
 800473e:	690b      	ldr	r3, [r1, #16]
 8004740:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004744:	4293      	cmp	r3, r2
 8004746:	bfb8      	it	lt
 8004748:	4613      	movlt	r3, r2
 800474a:	6033      	str	r3, [r6, #0]
 800474c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004750:	4607      	mov	r7, r0
 8004752:	460c      	mov	r4, r1
 8004754:	b10a      	cbz	r2, 800475a <_printf_common+0x26>
 8004756:	3301      	adds	r3, #1
 8004758:	6033      	str	r3, [r6, #0]
 800475a:	6823      	ldr	r3, [r4, #0]
 800475c:	0699      	lsls	r1, r3, #26
 800475e:	bf42      	ittt	mi
 8004760:	6833      	ldrmi	r3, [r6, #0]
 8004762:	3302      	addmi	r3, #2
 8004764:	6033      	strmi	r3, [r6, #0]
 8004766:	6825      	ldr	r5, [r4, #0]
 8004768:	f015 0506 	ands.w	r5, r5, #6
 800476c:	d106      	bne.n	800477c <_printf_common+0x48>
 800476e:	f104 0a19 	add.w	sl, r4, #25
 8004772:	68e3      	ldr	r3, [r4, #12]
 8004774:	6832      	ldr	r2, [r6, #0]
 8004776:	1a9b      	subs	r3, r3, r2
 8004778:	42ab      	cmp	r3, r5
 800477a:	dc26      	bgt.n	80047ca <_printf_common+0x96>
 800477c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004780:	6822      	ldr	r2, [r4, #0]
 8004782:	3b00      	subs	r3, #0
 8004784:	bf18      	it	ne
 8004786:	2301      	movne	r3, #1
 8004788:	0692      	lsls	r2, r2, #26
 800478a:	d42b      	bmi.n	80047e4 <_printf_common+0xb0>
 800478c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004790:	4641      	mov	r1, r8
 8004792:	4638      	mov	r0, r7
 8004794:	47c8      	blx	r9
 8004796:	3001      	adds	r0, #1
 8004798:	d01e      	beq.n	80047d8 <_printf_common+0xa4>
 800479a:	6823      	ldr	r3, [r4, #0]
 800479c:	6922      	ldr	r2, [r4, #16]
 800479e:	f003 0306 	and.w	r3, r3, #6
 80047a2:	2b04      	cmp	r3, #4
 80047a4:	bf02      	ittt	eq
 80047a6:	68e5      	ldreq	r5, [r4, #12]
 80047a8:	6833      	ldreq	r3, [r6, #0]
 80047aa:	1aed      	subeq	r5, r5, r3
 80047ac:	68a3      	ldr	r3, [r4, #8]
 80047ae:	bf0c      	ite	eq
 80047b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047b4:	2500      	movne	r5, #0
 80047b6:	4293      	cmp	r3, r2
 80047b8:	bfc4      	itt	gt
 80047ba:	1a9b      	subgt	r3, r3, r2
 80047bc:	18ed      	addgt	r5, r5, r3
 80047be:	2600      	movs	r6, #0
 80047c0:	341a      	adds	r4, #26
 80047c2:	42b5      	cmp	r5, r6
 80047c4:	d11a      	bne.n	80047fc <_printf_common+0xc8>
 80047c6:	2000      	movs	r0, #0
 80047c8:	e008      	b.n	80047dc <_printf_common+0xa8>
 80047ca:	2301      	movs	r3, #1
 80047cc:	4652      	mov	r2, sl
 80047ce:	4641      	mov	r1, r8
 80047d0:	4638      	mov	r0, r7
 80047d2:	47c8      	blx	r9
 80047d4:	3001      	adds	r0, #1
 80047d6:	d103      	bne.n	80047e0 <_printf_common+0xac>
 80047d8:	f04f 30ff 	mov.w	r0, #4294967295
 80047dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047e0:	3501      	adds	r5, #1
 80047e2:	e7c6      	b.n	8004772 <_printf_common+0x3e>
 80047e4:	18e1      	adds	r1, r4, r3
 80047e6:	1c5a      	adds	r2, r3, #1
 80047e8:	2030      	movs	r0, #48	@ 0x30
 80047ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80047ee:	4422      	add	r2, r4
 80047f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80047f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80047f8:	3302      	adds	r3, #2
 80047fa:	e7c7      	b.n	800478c <_printf_common+0x58>
 80047fc:	2301      	movs	r3, #1
 80047fe:	4622      	mov	r2, r4
 8004800:	4641      	mov	r1, r8
 8004802:	4638      	mov	r0, r7
 8004804:	47c8      	blx	r9
 8004806:	3001      	adds	r0, #1
 8004808:	d0e6      	beq.n	80047d8 <_printf_common+0xa4>
 800480a:	3601      	adds	r6, #1
 800480c:	e7d9      	b.n	80047c2 <_printf_common+0x8e>
	...

08004810 <_printf_i>:
 8004810:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004814:	7e0f      	ldrb	r7, [r1, #24]
 8004816:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004818:	2f78      	cmp	r7, #120	@ 0x78
 800481a:	4691      	mov	r9, r2
 800481c:	4680      	mov	r8, r0
 800481e:	460c      	mov	r4, r1
 8004820:	469a      	mov	sl, r3
 8004822:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004826:	d807      	bhi.n	8004838 <_printf_i+0x28>
 8004828:	2f62      	cmp	r7, #98	@ 0x62
 800482a:	d80a      	bhi.n	8004842 <_printf_i+0x32>
 800482c:	2f00      	cmp	r7, #0
 800482e:	f000 80d1 	beq.w	80049d4 <_printf_i+0x1c4>
 8004832:	2f58      	cmp	r7, #88	@ 0x58
 8004834:	f000 80b8 	beq.w	80049a8 <_printf_i+0x198>
 8004838:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800483c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004840:	e03a      	b.n	80048b8 <_printf_i+0xa8>
 8004842:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004846:	2b15      	cmp	r3, #21
 8004848:	d8f6      	bhi.n	8004838 <_printf_i+0x28>
 800484a:	a101      	add	r1, pc, #4	@ (adr r1, 8004850 <_printf_i+0x40>)
 800484c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004850:	080048a9 	.word	0x080048a9
 8004854:	080048bd 	.word	0x080048bd
 8004858:	08004839 	.word	0x08004839
 800485c:	08004839 	.word	0x08004839
 8004860:	08004839 	.word	0x08004839
 8004864:	08004839 	.word	0x08004839
 8004868:	080048bd 	.word	0x080048bd
 800486c:	08004839 	.word	0x08004839
 8004870:	08004839 	.word	0x08004839
 8004874:	08004839 	.word	0x08004839
 8004878:	08004839 	.word	0x08004839
 800487c:	080049bb 	.word	0x080049bb
 8004880:	080048e7 	.word	0x080048e7
 8004884:	08004975 	.word	0x08004975
 8004888:	08004839 	.word	0x08004839
 800488c:	08004839 	.word	0x08004839
 8004890:	080049dd 	.word	0x080049dd
 8004894:	08004839 	.word	0x08004839
 8004898:	080048e7 	.word	0x080048e7
 800489c:	08004839 	.word	0x08004839
 80048a0:	08004839 	.word	0x08004839
 80048a4:	0800497d 	.word	0x0800497d
 80048a8:	6833      	ldr	r3, [r6, #0]
 80048aa:	1d1a      	adds	r2, r3, #4
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6032      	str	r2, [r6, #0]
 80048b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80048b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80048b8:	2301      	movs	r3, #1
 80048ba:	e09c      	b.n	80049f6 <_printf_i+0x1e6>
 80048bc:	6833      	ldr	r3, [r6, #0]
 80048be:	6820      	ldr	r0, [r4, #0]
 80048c0:	1d19      	adds	r1, r3, #4
 80048c2:	6031      	str	r1, [r6, #0]
 80048c4:	0606      	lsls	r6, r0, #24
 80048c6:	d501      	bpl.n	80048cc <_printf_i+0xbc>
 80048c8:	681d      	ldr	r5, [r3, #0]
 80048ca:	e003      	b.n	80048d4 <_printf_i+0xc4>
 80048cc:	0645      	lsls	r5, r0, #25
 80048ce:	d5fb      	bpl.n	80048c8 <_printf_i+0xb8>
 80048d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80048d4:	2d00      	cmp	r5, #0
 80048d6:	da03      	bge.n	80048e0 <_printf_i+0xd0>
 80048d8:	232d      	movs	r3, #45	@ 0x2d
 80048da:	426d      	negs	r5, r5
 80048dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048e0:	4858      	ldr	r0, [pc, #352]	@ (8004a44 <_printf_i+0x234>)
 80048e2:	230a      	movs	r3, #10
 80048e4:	e011      	b.n	800490a <_printf_i+0xfa>
 80048e6:	6821      	ldr	r1, [r4, #0]
 80048e8:	6833      	ldr	r3, [r6, #0]
 80048ea:	0608      	lsls	r0, r1, #24
 80048ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80048f0:	d402      	bmi.n	80048f8 <_printf_i+0xe8>
 80048f2:	0649      	lsls	r1, r1, #25
 80048f4:	bf48      	it	mi
 80048f6:	b2ad      	uxthmi	r5, r5
 80048f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80048fa:	4852      	ldr	r0, [pc, #328]	@ (8004a44 <_printf_i+0x234>)
 80048fc:	6033      	str	r3, [r6, #0]
 80048fe:	bf14      	ite	ne
 8004900:	230a      	movne	r3, #10
 8004902:	2308      	moveq	r3, #8
 8004904:	2100      	movs	r1, #0
 8004906:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800490a:	6866      	ldr	r6, [r4, #4]
 800490c:	60a6      	str	r6, [r4, #8]
 800490e:	2e00      	cmp	r6, #0
 8004910:	db05      	blt.n	800491e <_printf_i+0x10e>
 8004912:	6821      	ldr	r1, [r4, #0]
 8004914:	432e      	orrs	r6, r5
 8004916:	f021 0104 	bic.w	r1, r1, #4
 800491a:	6021      	str	r1, [r4, #0]
 800491c:	d04b      	beq.n	80049b6 <_printf_i+0x1a6>
 800491e:	4616      	mov	r6, r2
 8004920:	fbb5 f1f3 	udiv	r1, r5, r3
 8004924:	fb03 5711 	mls	r7, r3, r1, r5
 8004928:	5dc7      	ldrb	r7, [r0, r7]
 800492a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800492e:	462f      	mov	r7, r5
 8004930:	42bb      	cmp	r3, r7
 8004932:	460d      	mov	r5, r1
 8004934:	d9f4      	bls.n	8004920 <_printf_i+0x110>
 8004936:	2b08      	cmp	r3, #8
 8004938:	d10b      	bne.n	8004952 <_printf_i+0x142>
 800493a:	6823      	ldr	r3, [r4, #0]
 800493c:	07df      	lsls	r7, r3, #31
 800493e:	d508      	bpl.n	8004952 <_printf_i+0x142>
 8004940:	6923      	ldr	r3, [r4, #16]
 8004942:	6861      	ldr	r1, [r4, #4]
 8004944:	4299      	cmp	r1, r3
 8004946:	bfde      	ittt	le
 8004948:	2330      	movle	r3, #48	@ 0x30
 800494a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800494e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004952:	1b92      	subs	r2, r2, r6
 8004954:	6122      	str	r2, [r4, #16]
 8004956:	f8cd a000 	str.w	sl, [sp]
 800495a:	464b      	mov	r3, r9
 800495c:	aa03      	add	r2, sp, #12
 800495e:	4621      	mov	r1, r4
 8004960:	4640      	mov	r0, r8
 8004962:	f7ff fee7 	bl	8004734 <_printf_common>
 8004966:	3001      	adds	r0, #1
 8004968:	d14a      	bne.n	8004a00 <_printf_i+0x1f0>
 800496a:	f04f 30ff 	mov.w	r0, #4294967295
 800496e:	b004      	add	sp, #16
 8004970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004974:	6823      	ldr	r3, [r4, #0]
 8004976:	f043 0320 	orr.w	r3, r3, #32
 800497a:	6023      	str	r3, [r4, #0]
 800497c:	4832      	ldr	r0, [pc, #200]	@ (8004a48 <_printf_i+0x238>)
 800497e:	2778      	movs	r7, #120	@ 0x78
 8004980:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004984:	6823      	ldr	r3, [r4, #0]
 8004986:	6831      	ldr	r1, [r6, #0]
 8004988:	061f      	lsls	r7, r3, #24
 800498a:	f851 5b04 	ldr.w	r5, [r1], #4
 800498e:	d402      	bmi.n	8004996 <_printf_i+0x186>
 8004990:	065f      	lsls	r7, r3, #25
 8004992:	bf48      	it	mi
 8004994:	b2ad      	uxthmi	r5, r5
 8004996:	6031      	str	r1, [r6, #0]
 8004998:	07d9      	lsls	r1, r3, #31
 800499a:	bf44      	itt	mi
 800499c:	f043 0320 	orrmi.w	r3, r3, #32
 80049a0:	6023      	strmi	r3, [r4, #0]
 80049a2:	b11d      	cbz	r5, 80049ac <_printf_i+0x19c>
 80049a4:	2310      	movs	r3, #16
 80049a6:	e7ad      	b.n	8004904 <_printf_i+0xf4>
 80049a8:	4826      	ldr	r0, [pc, #152]	@ (8004a44 <_printf_i+0x234>)
 80049aa:	e7e9      	b.n	8004980 <_printf_i+0x170>
 80049ac:	6823      	ldr	r3, [r4, #0]
 80049ae:	f023 0320 	bic.w	r3, r3, #32
 80049b2:	6023      	str	r3, [r4, #0]
 80049b4:	e7f6      	b.n	80049a4 <_printf_i+0x194>
 80049b6:	4616      	mov	r6, r2
 80049b8:	e7bd      	b.n	8004936 <_printf_i+0x126>
 80049ba:	6833      	ldr	r3, [r6, #0]
 80049bc:	6825      	ldr	r5, [r4, #0]
 80049be:	6961      	ldr	r1, [r4, #20]
 80049c0:	1d18      	adds	r0, r3, #4
 80049c2:	6030      	str	r0, [r6, #0]
 80049c4:	062e      	lsls	r6, r5, #24
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	d501      	bpl.n	80049ce <_printf_i+0x1be>
 80049ca:	6019      	str	r1, [r3, #0]
 80049cc:	e002      	b.n	80049d4 <_printf_i+0x1c4>
 80049ce:	0668      	lsls	r0, r5, #25
 80049d0:	d5fb      	bpl.n	80049ca <_printf_i+0x1ba>
 80049d2:	8019      	strh	r1, [r3, #0]
 80049d4:	2300      	movs	r3, #0
 80049d6:	6123      	str	r3, [r4, #16]
 80049d8:	4616      	mov	r6, r2
 80049da:	e7bc      	b.n	8004956 <_printf_i+0x146>
 80049dc:	6833      	ldr	r3, [r6, #0]
 80049de:	1d1a      	adds	r2, r3, #4
 80049e0:	6032      	str	r2, [r6, #0]
 80049e2:	681e      	ldr	r6, [r3, #0]
 80049e4:	6862      	ldr	r2, [r4, #4]
 80049e6:	2100      	movs	r1, #0
 80049e8:	4630      	mov	r0, r6
 80049ea:	f7fb fc19 	bl	8000220 <memchr>
 80049ee:	b108      	cbz	r0, 80049f4 <_printf_i+0x1e4>
 80049f0:	1b80      	subs	r0, r0, r6
 80049f2:	6060      	str	r0, [r4, #4]
 80049f4:	6863      	ldr	r3, [r4, #4]
 80049f6:	6123      	str	r3, [r4, #16]
 80049f8:	2300      	movs	r3, #0
 80049fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049fe:	e7aa      	b.n	8004956 <_printf_i+0x146>
 8004a00:	6923      	ldr	r3, [r4, #16]
 8004a02:	4632      	mov	r2, r6
 8004a04:	4649      	mov	r1, r9
 8004a06:	4640      	mov	r0, r8
 8004a08:	47d0      	blx	sl
 8004a0a:	3001      	adds	r0, #1
 8004a0c:	d0ad      	beq.n	800496a <_printf_i+0x15a>
 8004a0e:	6823      	ldr	r3, [r4, #0]
 8004a10:	079b      	lsls	r3, r3, #30
 8004a12:	d413      	bmi.n	8004a3c <_printf_i+0x22c>
 8004a14:	68e0      	ldr	r0, [r4, #12]
 8004a16:	9b03      	ldr	r3, [sp, #12]
 8004a18:	4298      	cmp	r0, r3
 8004a1a:	bfb8      	it	lt
 8004a1c:	4618      	movlt	r0, r3
 8004a1e:	e7a6      	b.n	800496e <_printf_i+0x15e>
 8004a20:	2301      	movs	r3, #1
 8004a22:	4632      	mov	r2, r6
 8004a24:	4649      	mov	r1, r9
 8004a26:	4640      	mov	r0, r8
 8004a28:	47d0      	blx	sl
 8004a2a:	3001      	adds	r0, #1
 8004a2c:	d09d      	beq.n	800496a <_printf_i+0x15a>
 8004a2e:	3501      	adds	r5, #1
 8004a30:	68e3      	ldr	r3, [r4, #12]
 8004a32:	9903      	ldr	r1, [sp, #12]
 8004a34:	1a5b      	subs	r3, r3, r1
 8004a36:	42ab      	cmp	r3, r5
 8004a38:	dcf2      	bgt.n	8004a20 <_printf_i+0x210>
 8004a3a:	e7eb      	b.n	8004a14 <_printf_i+0x204>
 8004a3c:	2500      	movs	r5, #0
 8004a3e:	f104 0619 	add.w	r6, r4, #25
 8004a42:	e7f5      	b.n	8004a30 <_printf_i+0x220>
 8004a44:	08004f91 	.word	0x08004f91
 8004a48:	08004fa2 	.word	0x08004fa2

08004a4c <__sflush_r>:
 8004a4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a54:	0716      	lsls	r6, r2, #28
 8004a56:	4605      	mov	r5, r0
 8004a58:	460c      	mov	r4, r1
 8004a5a:	d454      	bmi.n	8004b06 <__sflush_r+0xba>
 8004a5c:	684b      	ldr	r3, [r1, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	dc02      	bgt.n	8004a68 <__sflush_r+0x1c>
 8004a62:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	dd48      	ble.n	8004afa <__sflush_r+0xae>
 8004a68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a6a:	2e00      	cmp	r6, #0
 8004a6c:	d045      	beq.n	8004afa <__sflush_r+0xae>
 8004a6e:	2300      	movs	r3, #0
 8004a70:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004a74:	682f      	ldr	r7, [r5, #0]
 8004a76:	6a21      	ldr	r1, [r4, #32]
 8004a78:	602b      	str	r3, [r5, #0]
 8004a7a:	d030      	beq.n	8004ade <__sflush_r+0x92>
 8004a7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004a7e:	89a3      	ldrh	r3, [r4, #12]
 8004a80:	0759      	lsls	r1, r3, #29
 8004a82:	d505      	bpl.n	8004a90 <__sflush_r+0x44>
 8004a84:	6863      	ldr	r3, [r4, #4]
 8004a86:	1ad2      	subs	r2, r2, r3
 8004a88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004a8a:	b10b      	cbz	r3, 8004a90 <__sflush_r+0x44>
 8004a8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004a8e:	1ad2      	subs	r2, r2, r3
 8004a90:	2300      	movs	r3, #0
 8004a92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a94:	6a21      	ldr	r1, [r4, #32]
 8004a96:	4628      	mov	r0, r5
 8004a98:	47b0      	blx	r6
 8004a9a:	1c43      	adds	r3, r0, #1
 8004a9c:	89a3      	ldrh	r3, [r4, #12]
 8004a9e:	d106      	bne.n	8004aae <__sflush_r+0x62>
 8004aa0:	6829      	ldr	r1, [r5, #0]
 8004aa2:	291d      	cmp	r1, #29
 8004aa4:	d82b      	bhi.n	8004afe <__sflush_r+0xb2>
 8004aa6:	4a2a      	ldr	r2, [pc, #168]	@ (8004b50 <__sflush_r+0x104>)
 8004aa8:	40ca      	lsrs	r2, r1
 8004aaa:	07d6      	lsls	r6, r2, #31
 8004aac:	d527      	bpl.n	8004afe <__sflush_r+0xb2>
 8004aae:	2200      	movs	r2, #0
 8004ab0:	6062      	str	r2, [r4, #4]
 8004ab2:	04d9      	lsls	r1, r3, #19
 8004ab4:	6922      	ldr	r2, [r4, #16]
 8004ab6:	6022      	str	r2, [r4, #0]
 8004ab8:	d504      	bpl.n	8004ac4 <__sflush_r+0x78>
 8004aba:	1c42      	adds	r2, r0, #1
 8004abc:	d101      	bne.n	8004ac2 <__sflush_r+0x76>
 8004abe:	682b      	ldr	r3, [r5, #0]
 8004ac0:	b903      	cbnz	r3, 8004ac4 <__sflush_r+0x78>
 8004ac2:	6560      	str	r0, [r4, #84]	@ 0x54
 8004ac4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ac6:	602f      	str	r7, [r5, #0]
 8004ac8:	b1b9      	cbz	r1, 8004afa <__sflush_r+0xae>
 8004aca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004ace:	4299      	cmp	r1, r3
 8004ad0:	d002      	beq.n	8004ad8 <__sflush_r+0x8c>
 8004ad2:	4628      	mov	r0, r5
 8004ad4:	f7ff fa9c 	bl	8004010 <_free_r>
 8004ad8:	2300      	movs	r3, #0
 8004ada:	6363      	str	r3, [r4, #52]	@ 0x34
 8004adc:	e00d      	b.n	8004afa <__sflush_r+0xae>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	4628      	mov	r0, r5
 8004ae2:	47b0      	blx	r6
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	1c50      	adds	r0, r2, #1
 8004ae8:	d1c9      	bne.n	8004a7e <__sflush_r+0x32>
 8004aea:	682b      	ldr	r3, [r5, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d0c6      	beq.n	8004a7e <__sflush_r+0x32>
 8004af0:	2b1d      	cmp	r3, #29
 8004af2:	d001      	beq.n	8004af8 <__sflush_r+0xac>
 8004af4:	2b16      	cmp	r3, #22
 8004af6:	d11e      	bne.n	8004b36 <__sflush_r+0xea>
 8004af8:	602f      	str	r7, [r5, #0]
 8004afa:	2000      	movs	r0, #0
 8004afc:	e022      	b.n	8004b44 <__sflush_r+0xf8>
 8004afe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b02:	b21b      	sxth	r3, r3
 8004b04:	e01b      	b.n	8004b3e <__sflush_r+0xf2>
 8004b06:	690f      	ldr	r7, [r1, #16]
 8004b08:	2f00      	cmp	r7, #0
 8004b0a:	d0f6      	beq.n	8004afa <__sflush_r+0xae>
 8004b0c:	0793      	lsls	r3, r2, #30
 8004b0e:	680e      	ldr	r6, [r1, #0]
 8004b10:	bf08      	it	eq
 8004b12:	694b      	ldreq	r3, [r1, #20]
 8004b14:	600f      	str	r7, [r1, #0]
 8004b16:	bf18      	it	ne
 8004b18:	2300      	movne	r3, #0
 8004b1a:	eba6 0807 	sub.w	r8, r6, r7
 8004b1e:	608b      	str	r3, [r1, #8]
 8004b20:	f1b8 0f00 	cmp.w	r8, #0
 8004b24:	dde9      	ble.n	8004afa <__sflush_r+0xae>
 8004b26:	6a21      	ldr	r1, [r4, #32]
 8004b28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004b2a:	4643      	mov	r3, r8
 8004b2c:	463a      	mov	r2, r7
 8004b2e:	4628      	mov	r0, r5
 8004b30:	47b0      	blx	r6
 8004b32:	2800      	cmp	r0, #0
 8004b34:	dc08      	bgt.n	8004b48 <__sflush_r+0xfc>
 8004b36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b3e:	81a3      	strh	r3, [r4, #12]
 8004b40:	f04f 30ff 	mov.w	r0, #4294967295
 8004b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b48:	4407      	add	r7, r0
 8004b4a:	eba8 0800 	sub.w	r8, r8, r0
 8004b4e:	e7e7      	b.n	8004b20 <__sflush_r+0xd4>
 8004b50:	20400001 	.word	0x20400001

08004b54 <_fflush_r>:
 8004b54:	b538      	push	{r3, r4, r5, lr}
 8004b56:	690b      	ldr	r3, [r1, #16]
 8004b58:	4605      	mov	r5, r0
 8004b5a:	460c      	mov	r4, r1
 8004b5c:	b913      	cbnz	r3, 8004b64 <_fflush_r+0x10>
 8004b5e:	2500      	movs	r5, #0
 8004b60:	4628      	mov	r0, r5
 8004b62:	bd38      	pop	{r3, r4, r5, pc}
 8004b64:	b118      	cbz	r0, 8004b6e <_fflush_r+0x1a>
 8004b66:	6a03      	ldr	r3, [r0, #32]
 8004b68:	b90b      	cbnz	r3, 8004b6e <_fflush_r+0x1a>
 8004b6a:	f7ff f927 	bl	8003dbc <__sinit>
 8004b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d0f3      	beq.n	8004b5e <_fflush_r+0xa>
 8004b76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004b78:	07d0      	lsls	r0, r2, #31
 8004b7a:	d404      	bmi.n	8004b86 <_fflush_r+0x32>
 8004b7c:	0599      	lsls	r1, r3, #22
 8004b7e:	d402      	bmi.n	8004b86 <_fflush_r+0x32>
 8004b80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b82:	f7ff fa42 	bl	800400a <__retarget_lock_acquire_recursive>
 8004b86:	4628      	mov	r0, r5
 8004b88:	4621      	mov	r1, r4
 8004b8a:	f7ff ff5f 	bl	8004a4c <__sflush_r>
 8004b8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b90:	07da      	lsls	r2, r3, #31
 8004b92:	4605      	mov	r5, r0
 8004b94:	d4e4      	bmi.n	8004b60 <_fflush_r+0xc>
 8004b96:	89a3      	ldrh	r3, [r4, #12]
 8004b98:	059b      	lsls	r3, r3, #22
 8004b9a:	d4e1      	bmi.n	8004b60 <_fflush_r+0xc>
 8004b9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b9e:	f7ff fa35 	bl	800400c <__retarget_lock_release_recursive>
 8004ba2:	e7dd      	b.n	8004b60 <_fflush_r+0xc>

08004ba4 <__swbuf_r>:
 8004ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ba6:	460e      	mov	r6, r1
 8004ba8:	4614      	mov	r4, r2
 8004baa:	4605      	mov	r5, r0
 8004bac:	b118      	cbz	r0, 8004bb6 <__swbuf_r+0x12>
 8004bae:	6a03      	ldr	r3, [r0, #32]
 8004bb0:	b90b      	cbnz	r3, 8004bb6 <__swbuf_r+0x12>
 8004bb2:	f7ff f903 	bl	8003dbc <__sinit>
 8004bb6:	69a3      	ldr	r3, [r4, #24]
 8004bb8:	60a3      	str	r3, [r4, #8]
 8004bba:	89a3      	ldrh	r3, [r4, #12]
 8004bbc:	071a      	lsls	r2, r3, #28
 8004bbe:	d501      	bpl.n	8004bc4 <__swbuf_r+0x20>
 8004bc0:	6923      	ldr	r3, [r4, #16]
 8004bc2:	b943      	cbnz	r3, 8004bd6 <__swbuf_r+0x32>
 8004bc4:	4621      	mov	r1, r4
 8004bc6:	4628      	mov	r0, r5
 8004bc8:	f000 f82a 	bl	8004c20 <__swsetup_r>
 8004bcc:	b118      	cbz	r0, 8004bd6 <__swbuf_r+0x32>
 8004bce:	f04f 37ff 	mov.w	r7, #4294967295
 8004bd2:	4638      	mov	r0, r7
 8004bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bd6:	6823      	ldr	r3, [r4, #0]
 8004bd8:	6922      	ldr	r2, [r4, #16]
 8004bda:	1a98      	subs	r0, r3, r2
 8004bdc:	6963      	ldr	r3, [r4, #20]
 8004bde:	b2f6      	uxtb	r6, r6
 8004be0:	4283      	cmp	r3, r0
 8004be2:	4637      	mov	r7, r6
 8004be4:	dc05      	bgt.n	8004bf2 <__swbuf_r+0x4e>
 8004be6:	4621      	mov	r1, r4
 8004be8:	4628      	mov	r0, r5
 8004bea:	f7ff ffb3 	bl	8004b54 <_fflush_r>
 8004bee:	2800      	cmp	r0, #0
 8004bf0:	d1ed      	bne.n	8004bce <__swbuf_r+0x2a>
 8004bf2:	68a3      	ldr	r3, [r4, #8]
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	60a3      	str	r3, [r4, #8]
 8004bf8:	6823      	ldr	r3, [r4, #0]
 8004bfa:	1c5a      	adds	r2, r3, #1
 8004bfc:	6022      	str	r2, [r4, #0]
 8004bfe:	701e      	strb	r6, [r3, #0]
 8004c00:	6962      	ldr	r2, [r4, #20]
 8004c02:	1c43      	adds	r3, r0, #1
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d004      	beq.n	8004c12 <__swbuf_r+0x6e>
 8004c08:	89a3      	ldrh	r3, [r4, #12]
 8004c0a:	07db      	lsls	r3, r3, #31
 8004c0c:	d5e1      	bpl.n	8004bd2 <__swbuf_r+0x2e>
 8004c0e:	2e0a      	cmp	r6, #10
 8004c10:	d1df      	bne.n	8004bd2 <__swbuf_r+0x2e>
 8004c12:	4621      	mov	r1, r4
 8004c14:	4628      	mov	r0, r5
 8004c16:	f7ff ff9d 	bl	8004b54 <_fflush_r>
 8004c1a:	2800      	cmp	r0, #0
 8004c1c:	d0d9      	beq.n	8004bd2 <__swbuf_r+0x2e>
 8004c1e:	e7d6      	b.n	8004bce <__swbuf_r+0x2a>

08004c20 <__swsetup_r>:
 8004c20:	b538      	push	{r3, r4, r5, lr}
 8004c22:	4b29      	ldr	r3, [pc, #164]	@ (8004cc8 <__swsetup_r+0xa8>)
 8004c24:	4605      	mov	r5, r0
 8004c26:	6818      	ldr	r0, [r3, #0]
 8004c28:	460c      	mov	r4, r1
 8004c2a:	b118      	cbz	r0, 8004c34 <__swsetup_r+0x14>
 8004c2c:	6a03      	ldr	r3, [r0, #32]
 8004c2e:	b90b      	cbnz	r3, 8004c34 <__swsetup_r+0x14>
 8004c30:	f7ff f8c4 	bl	8003dbc <__sinit>
 8004c34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c38:	0719      	lsls	r1, r3, #28
 8004c3a:	d422      	bmi.n	8004c82 <__swsetup_r+0x62>
 8004c3c:	06da      	lsls	r2, r3, #27
 8004c3e:	d407      	bmi.n	8004c50 <__swsetup_r+0x30>
 8004c40:	2209      	movs	r2, #9
 8004c42:	602a      	str	r2, [r5, #0]
 8004c44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c48:	81a3      	strh	r3, [r4, #12]
 8004c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c4e:	e033      	b.n	8004cb8 <__swsetup_r+0x98>
 8004c50:	0758      	lsls	r0, r3, #29
 8004c52:	d512      	bpl.n	8004c7a <__swsetup_r+0x5a>
 8004c54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c56:	b141      	cbz	r1, 8004c6a <__swsetup_r+0x4a>
 8004c58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c5c:	4299      	cmp	r1, r3
 8004c5e:	d002      	beq.n	8004c66 <__swsetup_r+0x46>
 8004c60:	4628      	mov	r0, r5
 8004c62:	f7ff f9d5 	bl	8004010 <_free_r>
 8004c66:	2300      	movs	r3, #0
 8004c68:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c6a:	89a3      	ldrh	r3, [r4, #12]
 8004c6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004c70:	81a3      	strh	r3, [r4, #12]
 8004c72:	2300      	movs	r3, #0
 8004c74:	6063      	str	r3, [r4, #4]
 8004c76:	6923      	ldr	r3, [r4, #16]
 8004c78:	6023      	str	r3, [r4, #0]
 8004c7a:	89a3      	ldrh	r3, [r4, #12]
 8004c7c:	f043 0308 	orr.w	r3, r3, #8
 8004c80:	81a3      	strh	r3, [r4, #12]
 8004c82:	6923      	ldr	r3, [r4, #16]
 8004c84:	b94b      	cbnz	r3, 8004c9a <__swsetup_r+0x7a>
 8004c86:	89a3      	ldrh	r3, [r4, #12]
 8004c88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004c8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c90:	d003      	beq.n	8004c9a <__swsetup_r+0x7a>
 8004c92:	4621      	mov	r1, r4
 8004c94:	4628      	mov	r0, r5
 8004c96:	f000 f8a5 	bl	8004de4 <__smakebuf_r>
 8004c9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c9e:	f013 0201 	ands.w	r2, r3, #1
 8004ca2:	d00a      	beq.n	8004cba <__swsetup_r+0x9a>
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	60a2      	str	r2, [r4, #8]
 8004ca8:	6962      	ldr	r2, [r4, #20]
 8004caa:	4252      	negs	r2, r2
 8004cac:	61a2      	str	r2, [r4, #24]
 8004cae:	6922      	ldr	r2, [r4, #16]
 8004cb0:	b942      	cbnz	r2, 8004cc4 <__swsetup_r+0xa4>
 8004cb2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004cb6:	d1c5      	bne.n	8004c44 <__swsetup_r+0x24>
 8004cb8:	bd38      	pop	{r3, r4, r5, pc}
 8004cba:	0799      	lsls	r1, r3, #30
 8004cbc:	bf58      	it	pl
 8004cbe:	6962      	ldrpl	r2, [r4, #20]
 8004cc0:	60a2      	str	r2, [r4, #8]
 8004cc2:	e7f4      	b.n	8004cae <__swsetup_r+0x8e>
 8004cc4:	2000      	movs	r0, #0
 8004cc6:	e7f7      	b.n	8004cb8 <__swsetup_r+0x98>
 8004cc8:	2000001c 	.word	0x2000001c

08004ccc <memmove>:
 8004ccc:	4288      	cmp	r0, r1
 8004cce:	b510      	push	{r4, lr}
 8004cd0:	eb01 0402 	add.w	r4, r1, r2
 8004cd4:	d902      	bls.n	8004cdc <memmove+0x10>
 8004cd6:	4284      	cmp	r4, r0
 8004cd8:	4623      	mov	r3, r4
 8004cda:	d807      	bhi.n	8004cec <memmove+0x20>
 8004cdc:	1e43      	subs	r3, r0, #1
 8004cde:	42a1      	cmp	r1, r4
 8004ce0:	d008      	beq.n	8004cf4 <memmove+0x28>
 8004ce2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ce6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004cea:	e7f8      	b.n	8004cde <memmove+0x12>
 8004cec:	4402      	add	r2, r0
 8004cee:	4601      	mov	r1, r0
 8004cf0:	428a      	cmp	r2, r1
 8004cf2:	d100      	bne.n	8004cf6 <memmove+0x2a>
 8004cf4:	bd10      	pop	{r4, pc}
 8004cf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004cfe:	e7f7      	b.n	8004cf0 <memmove+0x24>

08004d00 <_sbrk_r>:
 8004d00:	b538      	push	{r3, r4, r5, lr}
 8004d02:	4d06      	ldr	r5, [pc, #24]	@ (8004d1c <_sbrk_r+0x1c>)
 8004d04:	2300      	movs	r3, #0
 8004d06:	4604      	mov	r4, r0
 8004d08:	4608      	mov	r0, r1
 8004d0a:	602b      	str	r3, [r5, #0]
 8004d0c:	f7fc f92c 	bl	8000f68 <_sbrk>
 8004d10:	1c43      	adds	r3, r0, #1
 8004d12:	d102      	bne.n	8004d1a <_sbrk_r+0x1a>
 8004d14:	682b      	ldr	r3, [r5, #0]
 8004d16:	b103      	cbz	r3, 8004d1a <_sbrk_r+0x1a>
 8004d18:	6023      	str	r3, [r4, #0]
 8004d1a:	bd38      	pop	{r3, r4, r5, pc}
 8004d1c:	2000029c 	.word	0x2000029c

08004d20 <memcpy>:
 8004d20:	440a      	add	r2, r1
 8004d22:	4291      	cmp	r1, r2
 8004d24:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d28:	d100      	bne.n	8004d2c <memcpy+0xc>
 8004d2a:	4770      	bx	lr
 8004d2c:	b510      	push	{r4, lr}
 8004d2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d36:	4291      	cmp	r1, r2
 8004d38:	d1f9      	bne.n	8004d2e <memcpy+0xe>
 8004d3a:	bd10      	pop	{r4, pc}

08004d3c <_realloc_r>:
 8004d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d40:	4607      	mov	r7, r0
 8004d42:	4614      	mov	r4, r2
 8004d44:	460d      	mov	r5, r1
 8004d46:	b921      	cbnz	r1, 8004d52 <_realloc_r+0x16>
 8004d48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d4c:	4611      	mov	r1, r2
 8004d4e:	f7ff b9cb 	b.w	80040e8 <_malloc_r>
 8004d52:	b92a      	cbnz	r2, 8004d60 <_realloc_r+0x24>
 8004d54:	f7ff f95c 	bl	8004010 <_free_r>
 8004d58:	4625      	mov	r5, r4
 8004d5a:	4628      	mov	r0, r5
 8004d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d60:	f000 f89e 	bl	8004ea0 <_malloc_usable_size_r>
 8004d64:	4284      	cmp	r4, r0
 8004d66:	4606      	mov	r6, r0
 8004d68:	d802      	bhi.n	8004d70 <_realloc_r+0x34>
 8004d6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004d6e:	d8f4      	bhi.n	8004d5a <_realloc_r+0x1e>
 8004d70:	4621      	mov	r1, r4
 8004d72:	4638      	mov	r0, r7
 8004d74:	f7ff f9b8 	bl	80040e8 <_malloc_r>
 8004d78:	4680      	mov	r8, r0
 8004d7a:	b908      	cbnz	r0, 8004d80 <_realloc_r+0x44>
 8004d7c:	4645      	mov	r5, r8
 8004d7e:	e7ec      	b.n	8004d5a <_realloc_r+0x1e>
 8004d80:	42b4      	cmp	r4, r6
 8004d82:	4622      	mov	r2, r4
 8004d84:	4629      	mov	r1, r5
 8004d86:	bf28      	it	cs
 8004d88:	4632      	movcs	r2, r6
 8004d8a:	f7ff ffc9 	bl	8004d20 <memcpy>
 8004d8e:	4629      	mov	r1, r5
 8004d90:	4638      	mov	r0, r7
 8004d92:	f7ff f93d 	bl	8004010 <_free_r>
 8004d96:	e7f1      	b.n	8004d7c <_realloc_r+0x40>

08004d98 <__swhatbuf_r>:
 8004d98:	b570      	push	{r4, r5, r6, lr}
 8004d9a:	460c      	mov	r4, r1
 8004d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004da0:	2900      	cmp	r1, #0
 8004da2:	b096      	sub	sp, #88	@ 0x58
 8004da4:	4615      	mov	r5, r2
 8004da6:	461e      	mov	r6, r3
 8004da8:	da0d      	bge.n	8004dc6 <__swhatbuf_r+0x2e>
 8004daa:	89a3      	ldrh	r3, [r4, #12]
 8004dac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004db0:	f04f 0100 	mov.w	r1, #0
 8004db4:	bf14      	ite	ne
 8004db6:	2340      	movne	r3, #64	@ 0x40
 8004db8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004dbc:	2000      	movs	r0, #0
 8004dbe:	6031      	str	r1, [r6, #0]
 8004dc0:	602b      	str	r3, [r5, #0]
 8004dc2:	b016      	add	sp, #88	@ 0x58
 8004dc4:	bd70      	pop	{r4, r5, r6, pc}
 8004dc6:	466a      	mov	r2, sp
 8004dc8:	f000 f848 	bl	8004e5c <_fstat_r>
 8004dcc:	2800      	cmp	r0, #0
 8004dce:	dbec      	blt.n	8004daa <__swhatbuf_r+0x12>
 8004dd0:	9901      	ldr	r1, [sp, #4]
 8004dd2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004dd6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004dda:	4259      	negs	r1, r3
 8004ddc:	4159      	adcs	r1, r3
 8004dde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004de2:	e7eb      	b.n	8004dbc <__swhatbuf_r+0x24>

08004de4 <__smakebuf_r>:
 8004de4:	898b      	ldrh	r3, [r1, #12]
 8004de6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004de8:	079d      	lsls	r5, r3, #30
 8004dea:	4606      	mov	r6, r0
 8004dec:	460c      	mov	r4, r1
 8004dee:	d507      	bpl.n	8004e00 <__smakebuf_r+0x1c>
 8004df0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004df4:	6023      	str	r3, [r4, #0]
 8004df6:	6123      	str	r3, [r4, #16]
 8004df8:	2301      	movs	r3, #1
 8004dfa:	6163      	str	r3, [r4, #20]
 8004dfc:	b003      	add	sp, #12
 8004dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e00:	ab01      	add	r3, sp, #4
 8004e02:	466a      	mov	r2, sp
 8004e04:	f7ff ffc8 	bl	8004d98 <__swhatbuf_r>
 8004e08:	9f00      	ldr	r7, [sp, #0]
 8004e0a:	4605      	mov	r5, r0
 8004e0c:	4639      	mov	r1, r7
 8004e0e:	4630      	mov	r0, r6
 8004e10:	f7ff f96a 	bl	80040e8 <_malloc_r>
 8004e14:	b948      	cbnz	r0, 8004e2a <__smakebuf_r+0x46>
 8004e16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e1a:	059a      	lsls	r2, r3, #22
 8004e1c:	d4ee      	bmi.n	8004dfc <__smakebuf_r+0x18>
 8004e1e:	f023 0303 	bic.w	r3, r3, #3
 8004e22:	f043 0302 	orr.w	r3, r3, #2
 8004e26:	81a3      	strh	r3, [r4, #12]
 8004e28:	e7e2      	b.n	8004df0 <__smakebuf_r+0xc>
 8004e2a:	89a3      	ldrh	r3, [r4, #12]
 8004e2c:	6020      	str	r0, [r4, #0]
 8004e2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e32:	81a3      	strh	r3, [r4, #12]
 8004e34:	9b01      	ldr	r3, [sp, #4]
 8004e36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004e3a:	b15b      	cbz	r3, 8004e54 <__smakebuf_r+0x70>
 8004e3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e40:	4630      	mov	r0, r6
 8004e42:	f000 f81d 	bl	8004e80 <_isatty_r>
 8004e46:	b128      	cbz	r0, 8004e54 <__smakebuf_r+0x70>
 8004e48:	89a3      	ldrh	r3, [r4, #12]
 8004e4a:	f023 0303 	bic.w	r3, r3, #3
 8004e4e:	f043 0301 	orr.w	r3, r3, #1
 8004e52:	81a3      	strh	r3, [r4, #12]
 8004e54:	89a3      	ldrh	r3, [r4, #12]
 8004e56:	431d      	orrs	r5, r3
 8004e58:	81a5      	strh	r5, [r4, #12]
 8004e5a:	e7cf      	b.n	8004dfc <__smakebuf_r+0x18>

08004e5c <_fstat_r>:
 8004e5c:	b538      	push	{r3, r4, r5, lr}
 8004e5e:	4d07      	ldr	r5, [pc, #28]	@ (8004e7c <_fstat_r+0x20>)
 8004e60:	2300      	movs	r3, #0
 8004e62:	4604      	mov	r4, r0
 8004e64:	4608      	mov	r0, r1
 8004e66:	4611      	mov	r1, r2
 8004e68:	602b      	str	r3, [r5, #0]
 8004e6a:	f7fc f854 	bl	8000f16 <_fstat>
 8004e6e:	1c43      	adds	r3, r0, #1
 8004e70:	d102      	bne.n	8004e78 <_fstat_r+0x1c>
 8004e72:	682b      	ldr	r3, [r5, #0]
 8004e74:	b103      	cbz	r3, 8004e78 <_fstat_r+0x1c>
 8004e76:	6023      	str	r3, [r4, #0]
 8004e78:	bd38      	pop	{r3, r4, r5, pc}
 8004e7a:	bf00      	nop
 8004e7c:	2000029c 	.word	0x2000029c

08004e80 <_isatty_r>:
 8004e80:	b538      	push	{r3, r4, r5, lr}
 8004e82:	4d06      	ldr	r5, [pc, #24]	@ (8004e9c <_isatty_r+0x1c>)
 8004e84:	2300      	movs	r3, #0
 8004e86:	4604      	mov	r4, r0
 8004e88:	4608      	mov	r0, r1
 8004e8a:	602b      	str	r3, [r5, #0]
 8004e8c:	f7fc f853 	bl	8000f36 <_isatty>
 8004e90:	1c43      	adds	r3, r0, #1
 8004e92:	d102      	bne.n	8004e9a <_isatty_r+0x1a>
 8004e94:	682b      	ldr	r3, [r5, #0]
 8004e96:	b103      	cbz	r3, 8004e9a <_isatty_r+0x1a>
 8004e98:	6023      	str	r3, [r4, #0]
 8004e9a:	bd38      	pop	{r3, r4, r5, pc}
 8004e9c:	2000029c 	.word	0x2000029c

08004ea0 <_malloc_usable_size_r>:
 8004ea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ea4:	1f18      	subs	r0, r3, #4
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	bfbc      	itt	lt
 8004eaa:	580b      	ldrlt	r3, [r1, r0]
 8004eac:	18c0      	addlt	r0, r0, r3
 8004eae:	4770      	bx	lr

08004eb0 <_init>:
 8004eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eb2:	bf00      	nop
 8004eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eb6:	bc08      	pop	{r3}
 8004eb8:	469e      	mov	lr, r3
 8004eba:	4770      	bx	lr

08004ebc <_fini>:
 8004ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ebe:	bf00      	nop
 8004ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ec2:	bc08      	pop	{r3}
 8004ec4:	469e      	mov	lr, r3
 8004ec6:	4770      	bx	lr
