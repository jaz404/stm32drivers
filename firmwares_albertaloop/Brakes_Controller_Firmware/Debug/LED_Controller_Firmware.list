
Brakes_Controller_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005940  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08005b10  08005b10  00006b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d08  08005d08  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005d08  08005d08  00006d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d10  08005d10  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d10  08005d10  00006d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d14  08005d14  00006d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005d18  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001050  20000060  08005d78  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010b0  08005d78  000070b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd61  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002247  00000000  00000000  00016df1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  00019038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b18  00000000  00000000  00019e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002282e  00000000  00000000  0001a978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000111d2  00000000  00000000  0003d1a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3b3a  00000000  00000000  0004e378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00121eb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004160  00000000  00000000  00121ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  00126058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005af8 	.word	0x08005af8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08005af8 	.word	0x08005af8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <SysTick_Handler>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SysTick_Handler (void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80005b4:	f000 ffc4 	bl	8001540 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80005b8:	f001 fd32 	bl	8002020 <HAL_SYSTICK_IRQHandler>
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}

080005c0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN_TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 80005c4:	4802      	ldr	r0, [pc, #8]	@ (80005d0 <CAN1_TX_IRQHandler+0x10>)
 80005c6:	f001 f9ec 	bl	80019a2 <HAL_CAN_IRQHandler>
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	200000c0 	.word	0x200000c0

080005d4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN_RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 80005d8:	4802      	ldr	r0, [pc, #8]	@ (80005e4 <CAN1_RX0_IRQHandler+0x10>)
 80005da:	f001 f9e2 	bl	80019a2 <HAL_CAN_IRQHandler>
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	200000c0 	.word	0x200000c0

080005e8 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 80005ec:	4802      	ldr	r0, [pc, #8]	@ (80005f8 <CAN1_SCE_IRQHandler+0x10>)
 80005ee:	f001 f9d8 	bl	80019a2 <HAL_CAN_IRQHandler>
}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	200000c0 	.word	0x200000c0

080005fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htimer6);
 8000600:	4802      	ldr	r0, [pc, #8]	@ (800060c <TIM6_DAC_IRQHandler+0x10>)
 8000602:	f003 fa91 	bl	8003b28 <HAL_TIM_IRQHandler>
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	200000e8 	.word	0x200000e8

08000610 <EXTI15_10_IRQHandler>:
/**
  * @brief This function handles EXTI line[15:10] interrupts.
  * Waits for button to be pressed then sends the CAN bus message
  */
void EXTI15_10_IRQHandler(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htimer6);
 8000614:	4804      	ldr	r0, [pc, #16]	@ (8000628 <EXTI15_10_IRQHandler+0x18>)
 8000616:	f002 ff23 	bl	8003460 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800061a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800061e:	f002 f8c3 	bl	80027a8 <HAL_GPIO_EXTI_IRQHandler>
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	200000e8 	.word	0x200000e8

0800062c <HAL_TIM_PWM_PulseFinishedCallback>:

uint8_t LED_Data[MAX_LED][4];
uint8_t LED_Mod[MAX_LED][4];  // for brightness

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000634:	2100      	movs	r1, #0
 8000636:	4805      	ldr	r0, [pc, #20]	@ (800064c <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000638:	f003 f9a4 	bl	8003984 <HAL_TIM_PWM_Stop_DMA>
  datasentflag=1;
 800063c:	4b04      	ldr	r3, [pc, #16]	@ (8000650 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800063e:	2201      	movs	r2, #1
 8000640:	601a      	str	r2, [r3, #0]
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000130 	.word	0x20000130
 8000650:	200001f8 	.word	0x200001f8

08000654 <Set_LED>:

void Set_LED(int LEDnum, int Red, int Green, int Blue)
{
 8000654:	b480      	push	{r7}
 8000656:	b089      	sub	sp, #36	@ 0x24
 8000658:	af00      	add	r7, sp, #0
 800065a:	6178      	str	r0, [r7, #20]
 800065c:	6139      	str	r1, [r7, #16]
 800065e:	60fa      	str	r2, [r7, #12]
 8000660:	60bb      	str	r3, [r7, #8]
    float brightness_scale = 0.4f;  // 40% brightness
 8000662:	4b25      	ldr	r3, [pc, #148]	@ (80006f8 <Set_LED+0xa4>)
 8000664:	61fb      	str	r3, [r7, #28]

    LED_Data[LEDnum][0] = LEDnum;
 8000666:	697b      	ldr	r3, [r7, #20]
 8000668:	b2d9      	uxtb	r1, r3
 800066a:	4a24      	ldr	r2, [pc, #144]	@ (80006fc <Set_LED+0xa8>)
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
    LED_Data[LEDnum][1] = (int)(Green * brightness_scale);
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	ee07 3a90 	vmov	s15, r3
 8000678:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800067c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000680:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000684:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000688:	edc7 7a01 	vstr	s15, [r7, #4]
 800068c:	7939      	ldrb	r1, [r7, #4]
 800068e:	4a1b      	ldr	r2, [pc, #108]	@ (80006fc <Set_LED+0xa8>)
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	4413      	add	r3, r2
 8000696:	460a      	mov	r2, r1
 8000698:	705a      	strb	r2, [r3, #1]
    LED_Data[LEDnum][2] = (int)(Red * brightness_scale);
 800069a:	693b      	ldr	r3, [r7, #16]
 800069c:	ee07 3a90 	vmov	s15, r3
 80006a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80006a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006b0:	edc7 7a01 	vstr	s15, [r7, #4]
 80006b4:	7939      	ldrb	r1, [r7, #4]
 80006b6:	4a11      	ldr	r2, [pc, #68]	@ (80006fc <Set_LED+0xa8>)
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	4413      	add	r3, r2
 80006be:	460a      	mov	r2, r1
 80006c0:	709a      	strb	r2, [r3, #2]
    LED_Data[LEDnum][3] = (int)(Blue * brightness_scale);
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	ee07 3a90 	vmov	s15, r3
 80006c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006cc:	edd7 7a07 	vldr	s15, [r7, #28]
 80006d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006d8:	edc7 7a01 	vstr	s15, [r7, #4]
 80006dc:	7939      	ldrb	r1, [r7, #4]
 80006de:	4a07      	ldr	r2, [pc, #28]	@ (80006fc <Set_LED+0xa8>)
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	4413      	add	r3, r2
 80006e6:	460a      	mov	r2, r1
 80006e8:	70da      	strb	r2, [r3, #3]
}
 80006ea:	bf00      	nop
 80006ec:	3724      	adds	r7, #36	@ 0x24
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	3ecccccd 	.word	0x3ecccccd
 80006fc:	20000e60 	.word	0x20000e60

08000700 <WS2812_Send>:


#define PI 3.14159265

void WS2812_Send (void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b086      	sub	sp, #24
 8000704:	af00      	add	r7, sp, #0
  uint32_t indx=0;
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]
  uint32_t color;


  for (int i= 0; i<MAX_LED; i++)
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
 800070e:	e036      	b.n	800077e <WS2812_Send+0x7e>
  {
      color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 8000710:	4a2e      	ldr	r2, [pc, #184]	@ (80007cc <WS2812_Send+0xcc>)
 8000712:	693b      	ldr	r3, [r7, #16]
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	4413      	add	r3, r2
 8000718:	785b      	ldrb	r3, [r3, #1]
 800071a:	041a      	lsls	r2, r3, #16
 800071c:	492b      	ldr	r1, [pc, #172]	@ (80007cc <WS2812_Send+0xcc>)
 800071e:	693b      	ldr	r3, [r7, #16]
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	440b      	add	r3, r1
 8000724:	789b      	ldrb	r3, [r3, #2]
 8000726:	021b      	lsls	r3, r3, #8
 8000728:	431a      	orrs	r2, r3
 800072a:	4928      	ldr	r1, [pc, #160]	@ (80007cc <WS2812_Send+0xcc>)
 800072c:	693b      	ldr	r3, [r7, #16]
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	440b      	add	r3, r1
 8000732:	78db      	ldrb	r3, [r3, #3]
 8000734:	4313      	orrs	r3, r2
 8000736:	607b      	str	r3, [r7, #4]

    for (int i=23; i>=0; i--)
 8000738:	2317      	movs	r3, #23
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	e019      	b.n	8000772 <WS2812_Send+0x72>
    {

      if (color & (1 << i))
 800073e:	2201      	movs	r2, #1
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	fa02 f303 	lsl.w	r3, r2, r3
 8000746:	461a      	mov	r2, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	4013      	ands	r3, r2
 800074c:	2b00      	cmp	r3, #0
 800074e:	d005      	beq.n	800075c <WS2812_Send+0x5c>
          pwmData[indx] = 42;  // 2/3 of 63
 8000750:	4a1f      	ldr	r2, [pc, #124]	@ (80007d0 <WS2812_Send+0xd0>)
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	212a      	movs	r1, #42	@ 0x2a
 8000756:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800075a:	e004      	b.n	8000766 <WS2812_Send+0x66>
      else
          pwmData[indx] = 21;  // 1/3 of 63
 800075c:	4a1c      	ldr	r2, [pc, #112]	@ (80007d0 <WS2812_Send+0xd0>)
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	2115      	movs	r1, #21
 8000762:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      indx++;
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	3301      	adds	r3, #1
 800076a:	617b      	str	r3, [r7, #20]
    for (int i=23; i>=0; i--)
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	3b01      	subs	r3, #1
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	2b00      	cmp	r3, #0
 8000776:	dae2      	bge.n	800073e <WS2812_Send+0x3e>
  for (int i= 0; i<MAX_LED; i++)
 8000778:	693b      	ldr	r3, [r7, #16]
 800077a:	3301      	adds	r3, #1
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	693b      	ldr	r3, [r7, #16]
 8000780:	2b3f      	cmp	r3, #63	@ 0x3f
 8000782:	ddc5      	ble.n	8000710 <WS2812_Send+0x10>
    }

  }

  for (int i=0; i<50; i++)
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	e00a      	b.n	80007a0 <WS2812_Send+0xa0>
  {
    pwmData[indx] = 0;
 800078a:	4a11      	ldr	r2, [pc, #68]	@ (80007d0 <WS2812_Send+0xd0>)
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	2100      	movs	r1, #0
 8000790:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    indx++;
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	3301      	adds	r3, #1
 8000798:	617b      	str	r3, [r7, #20]
  for (int i=0; i<50; i++)
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	3301      	adds	r3, #1
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	2b31      	cmp	r3, #49	@ 0x31
 80007a4:	ddf1      	ble.n	800078a <WS2812_Send+0x8a>
  }

  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	4a09      	ldr	r2, [pc, #36]	@ (80007d0 <WS2812_Send+0xd0>)
 80007ac:	2100      	movs	r1, #0
 80007ae:	4809      	ldr	r0, [pc, #36]	@ (80007d4 <WS2812_Send+0xd4>)
 80007b0:	f002 ff20 	bl	80035f4 <HAL_TIM_PWM_Start_DMA>
  while (!datasentflag){};
 80007b4:	bf00      	nop
 80007b6:	4b08      	ldr	r3, [pc, #32]	@ (80007d8 <WS2812_Send+0xd8>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d0fb      	beq.n	80007b6 <WS2812_Send+0xb6>
  datasentflag = 0;
 80007be:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <WS2812_Send+0xd8>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
}
 80007c4:	bf00      	nop
 80007c6:	3718      	adds	r7, #24
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000e60 	.word	0x20000e60
 80007d0:	200001fc 	.word	0x200001fc
 80007d4:	20000130 	.word	0x20000130
 80007d8:	200001f8 	.word	0x200001f8

080007dc <main>:
    LED_Data[i][3] = 0;
  }
}

int main(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
  HAL_Init();
 80007e2:	f000 fe5b 	bl	800149c <HAL_Init>
  SystemClock_Config_HSE(SYS_CLOCK_FREQ_50_MHZ);
 80007e6:	2032      	movs	r0, #50	@ 0x32
 80007e8:	f000 f844 	bl	8000874 <SystemClock_Config_HSE>
  GPIO_Init();
 80007ec:	f000 f926 	bl	8000a3c <GPIO_Init>
  UART2_Init();
 80007f0:	f000 fa18 	bl	8000c24 <UART2_Init>
//  TIMER6_Init();
  DMA_Init();
 80007f4:	f000 f8d8 	bl	80009a8 <DMA_Init>
  TIM1_Init();
 80007f8:	f000 f974 	bl	8000ae4 <TIM1_Init>
//    Error_handler();
//  }
//  // Start the TIMER interrupt
//  HAL_TIM_Base_Start_IT(&htimer6);
//  tim1_dma_selftest();
  Set_LED(0, 255, 0, 0);
 80007fc:	2300      	movs	r3, #0
 80007fe:	2200      	movs	r2, #0
 8000800:	21ff      	movs	r1, #255	@ 0xff
 8000802:	2000      	movs	r0, #0
 8000804:	f7ff ff26 	bl	8000654 <Set_LED>
  WS2812_Send();
 8000808:	f7ff ff7a 	bl	8000700 <WS2812_Send>

  uint32_t last_change_time = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	607b      	str	r3, [r7, #4]
  uint32_t state_duration_ms = 5000;  // 5 seconds per state
 8000810:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000814:	603b      	str	r3, [r7, #0]

    while (1) {
      LED_Manage_Output();
 8000816:	f000 fb7f 	bl	8000f18 <LED_Manage_Output>
        effStep++;
 800081a:	4b13      	ldr	r3, [pc, #76]	@ (8000868 <main+0x8c>)
 800081c:	881b      	ldrh	r3, [r3, #0]
 800081e:	3301      	adds	r3, #1
 8000820:	b29a      	uxth	r2, r3
 8000822:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <main+0x8c>)
 8000824:	801a      	strh	r2, [r3, #0]

        // Change state every 5 seconds
        if (HAL_GetTick() - last_change_time >= state_duration_ms) {
 8000826:	f000 fe9f 	bl	8001568 <HAL_GetTick>
 800082a:	4602      	mov	r2, r0
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	1ad3      	subs	r3, r2, r3
 8000830:	683a      	ldr	r2, [r7, #0]
 8000832:	429a      	cmp	r2, r3
 8000834:	d813      	bhi.n	800085e <main+0x82>
            fsm_state = (fsm_state + 1) % 7;  // Cycle 0→1→...→6→0
 8000836:	4b0d      	ldr	r3, [pc, #52]	@ (800086c <main+0x90>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	1c5a      	adds	r2, r3, #1
 800083c:	4b0c      	ldr	r3, [pc, #48]	@ (8000870 <main+0x94>)
 800083e:	fb83 1302 	smull	r1, r3, r3, r2
 8000842:	4413      	add	r3, r2
 8000844:	1099      	asrs	r1, r3, #2
 8000846:	17d3      	asrs	r3, r2, #31
 8000848:	1ac9      	subs	r1, r1, r3
 800084a:	460b      	mov	r3, r1
 800084c:	00db      	lsls	r3, r3, #3
 800084e:	1a5b      	subs	r3, r3, r1
 8000850:	1ad1      	subs	r1, r2, r3
 8000852:	b2ca      	uxtb	r2, r1
 8000854:	4b05      	ldr	r3, [pc, #20]	@ (800086c <main+0x90>)
 8000856:	701a      	strb	r2, [r3, #0]
            last_change_time = HAL_GetTick();
 8000858:	f000 fe86 	bl	8001568 <HAL_GetTick>
 800085c:	6078      	str	r0, [r7, #4]
        }

        HAL_Delay(30);
 800085e:	201e      	movs	r0, #30
 8000860:	f000 fe8e 	bl	8001580 <HAL_Delay>
      LED_Manage_Output();
 8000864:	e7d7      	b.n	8000816 <main+0x3a>
 8000866:	bf00      	nop
 8000868:	200001d8 	.word	0x200001d8
 800086c:	20000000 	.word	0x20000000
 8000870:	92492493 	.word	0x92492493

08000874 <SystemClock_Config_HSE>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config_HSE(uint8_t clock_freq)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b096      	sub	sp, #88	@ 0x58
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
  RCC_OscInitTypeDef Osc_Init;
  RCC_ClkInitTypeDef Clock_Init;
  uint8_t flash_latency=0;
 800087e:	2300      	movs	r3, #0
 8000880:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

  Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSE ;
 8000884:	2301      	movs	r3, #1
 8000886:	61fb      	str	r3, [r7, #28]
  Osc_Init.HSEState = RCC_HSE_ON;
 8000888:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800088c:	623b      	str	r3, [r7, #32]
  Osc_Init.PLL.PLLState = RCC_PLL_ON;
 800088e:	2302      	movs	r3, #2
 8000890:	637b      	str	r3, [r7, #52]	@ 0x34
  Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000892:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000896:	63bb      	str	r3, [r7, #56]	@ 0x38

  switch(clock_freq) {
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	2b78      	cmp	r3, #120	@ 0x78
 800089c:	d038      	beq.n	8000910 <SystemClock_Config_HSE+0x9c>
 800089e:	2b78      	cmp	r3, #120	@ 0x78
 80008a0:	dc7c      	bgt.n	800099c <SystemClock_Config_HSE+0x128>
 80008a2:	2b32      	cmp	r3, #50	@ 0x32
 80008a4:	d002      	beq.n	80008ac <SystemClock_Config_HSE+0x38>
 80008a6:	2b54      	cmp	r3, #84	@ 0x54
 80008a8:	d019      	beq.n	80008de <SystemClock_Config_HSE+0x6a>
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
    flash_latency = 3;
    break;

  default:
    return ;
 80008aa:	e077      	b.n	800099c <SystemClock_Config_HSE+0x128>
    Osc_Init.PLL.PLLM = 4;
 80008ac:	2304      	movs	r3, #4
 80008ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
    Osc_Init.PLL.PLLN = 50;
 80008b0:	2332      	movs	r3, #50	@ 0x32
 80008b2:	643b      	str	r3, [r7, #64]	@ 0x40
    Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80008b4:	2302      	movs	r3, #2
 80008b6:	647b      	str	r3, [r7, #68]	@ 0x44
    Osc_Init.PLL.PLLQ = 2;
 80008b8:	2302      	movs	r3, #2
 80008ba:	64bb      	str	r3, [r7, #72]	@ 0x48
    Osc_Init.PLL.PLLR = 2;
 80008bc:	2302      	movs	r3, #2
 80008be:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 80008c0:	230f      	movs	r3, #15
 80008c2:	60bb      	str	r3, [r7, #8]
    Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c4:	2302      	movs	r3, #2
 80008c6:	60fb      	str	r3, [r7, #12]
    Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	613b      	str	r3, [r7, #16]
    Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80008cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008d0:	617b      	str	r3, [r7, #20]
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
    flash_latency = 1;
 80008d6:	2301      	movs	r3, #1
 80008d8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    break;
 80008dc:	e032      	b.n	8000944 <SystemClock_Config_HSE+0xd0>
    Osc_Init.PLL.PLLM = 4;
 80008de:	2304      	movs	r3, #4
 80008e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    Osc_Init.PLL.PLLN = 84;
 80008e2:	2354      	movs	r3, #84	@ 0x54
 80008e4:	643b      	str	r3, [r7, #64]	@ 0x40
    Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80008e6:	2302      	movs	r3, #2
 80008e8:	647b      	str	r3, [r7, #68]	@ 0x44
    Osc_Init.PLL.PLLQ = 2;
 80008ea:	2302      	movs	r3, #2
 80008ec:	64bb      	str	r3, [r7, #72]	@ 0x48
    Osc_Init.PLL.PLLR = 2;
 80008ee:	2302      	movs	r3, #2
 80008f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 80008f2:	230f      	movs	r3, #15
 80008f4:	60bb      	str	r3, [r7, #8]
    Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f6:	2302      	movs	r3, #2
 80008f8:	60fb      	str	r3, [r7, #12]
    Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
    Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80008fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000902:	617b      	str	r3, [r7, #20]
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	61bb      	str	r3, [r7, #24]
    flash_latency = 2;
 8000908:	2302      	movs	r3, #2
 800090a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    break;
 800090e:	e019      	b.n	8000944 <SystemClock_Config_HSE+0xd0>
    Osc_Init.PLL.PLLM = 4;
 8000910:	2304      	movs	r3, #4
 8000912:	63fb      	str	r3, [r7, #60]	@ 0x3c
    Osc_Init.PLL.PLLN = 120;
 8000914:	2378      	movs	r3, #120	@ 0x78
 8000916:	643b      	str	r3, [r7, #64]	@ 0x40
    Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000918:	2302      	movs	r3, #2
 800091a:	647b      	str	r3, [r7, #68]	@ 0x44
    Osc_Init.PLL.PLLQ = 2;
 800091c:	2302      	movs	r3, #2
 800091e:	64bb      	str	r3, [r7, #72]	@ 0x48
    Osc_Init.PLL.PLLR = 2;
 8000920:	2302      	movs	r3, #2
 8000922:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 8000924:	230f      	movs	r3, #15
 8000926:	60bb      	str	r3, [r7, #8]
    Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000928:	2302      	movs	r3, #2
 800092a:	60fb      	str	r3, [r7, #12]
    Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	613b      	str	r3, [r7, #16]
    Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 8000930:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000934:	617b      	str	r3, [r7, #20]
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000936:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800093a:	61bb      	str	r3, [r7, #24]
    flash_latency = 3;
 800093c:	2303      	movs	r3, #3
 800093e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    break;
 8000942:	bf00      	nop
  }

  if (HAL_RCC_OscConfig(&Osc_Init) != HAL_OK)
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4618      	mov	r0, r3
 800094a:	f002 fa9b 	bl	8002e84 <HAL_RCC_OscConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config_HSE+0xe4>
  {
    Error_handler();
 8000954:	f000 fc16 	bl	8001184 <Error_handler>
  }

  if (HAL_RCC_ClockConfig(&Clock_Init, flash_latency) != HAL_OK)
 8000958:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800095c:	f107 0308 	add.w	r3, r7, #8
 8000960:	4611      	mov	r1, r2
 8000962:	4618      	mov	r0, r3
 8000964:	f001 ff44 	bl	80027f0 <HAL_RCC_ClockConfig>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <SystemClock_Config_HSE+0xfe>
  {
    Error_handler();
 800096e:	f000 fc09 	bl	8001184 <Error_handler>
  }

  /*Configure the systick timer interrupt frequency (for every 1 ms) */
  uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 8000972:	f002 f823 	bl	80029bc <HAL_RCC_GetHCLKFreq>
 8000976:	6538      	str	r0, [r7, #80]	@ 0x50
  HAL_SYSTICK_Config(hclk_freq/1000);
 8000978:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800097a:	4a0a      	ldr	r2, [pc, #40]	@ (80009a4 <SystemClock_Config_HSE+0x130>)
 800097c:	fba2 2303 	umull	r2, r3, r2, r3
 8000980:	099b      	lsrs	r3, r3, #6
 8000982:	4618      	mov	r0, r3
 8000984:	f001 fb23 	bl	8001fce <HAL_SYSTICK_Config>

  /**Configure the Systick
  */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000988:	2004      	movs	r0, #4
 800098a:	f001 fb2d 	bl	8001fe8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2100      	movs	r1, #0
 8000992:	f04f 30ff 	mov.w	r0, #4294967295
 8000996:	f001 faf0 	bl	8001f7a <HAL_NVIC_SetPriority>
 800099a:	e000      	b.n	800099e <SystemClock_Config_HSE+0x12a>
    return ;
 800099c:	bf00      	nop
}
 800099e:	3758      	adds	r7, #88	@ 0x58
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	10624dd3 	.word	0x10624dd3

080009a8 <DMA_Init>:

/**
  * Enable DMA controller clock
  */
void DMA_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	4b0c      	ldr	r3, [pc, #48]	@ (80009e4 <DMA_Init+0x3c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	4a0b      	ldr	r2, [pc, #44]	@ (80009e4 <DMA_Init+0x3c>)
 80009b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80009bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009be:	4b09      	ldr	r3, [pc, #36]	@ (80009e4 <DMA_Init+0x3c>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2100      	movs	r1, #0
 80009ce:	2039      	movs	r0, #57	@ 0x39
 80009d0:	f001 fad3 	bl	8001f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80009d4:	2039      	movs	r0, #57	@ 0x39
 80009d6:	f001 faec 	bl	8001fb2 <HAL_NVIC_EnableIRQ>

}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800

080009e8 <CAN1_Tx>:
/**
  * @brief  Transmit a message via CAN1.
  * @retval None
  */
void CAN1_Tx()
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b088      	sub	sp, #32
 80009ec:	af00      	add	r7, sp, #0
  CAN_TxHeaderTypeDef TxHeader;
  uint32_t TxMailbox;
  uint8_t message;

  TxHeader.DLC = 1;
 80009ee:	2301      	movs	r3, #1
 80009f0:	61bb      	str	r3, [r7, #24]
  TxHeader.StdId = 0x499;
 80009f2:	f240 4399 	movw	r3, #1177	@ 0x499
 80009f6:	60bb      	str	r3, [r7, #8]
  TxHeader.IDE   = CAN_ID_STD;
 80009f8:	2300      	movs	r3, #0
 80009fa:	613b      	str	r3, [r7, #16]

  TxHeader.RTR = CAN_RTR_DATA;
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]

  message = fsm_state;
 8000a00:	4b0b      	ldr	r3, [pc, #44]	@ (8000a30 <CAN1_Tx+0x48>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	70fb      	strb	r3, [r7, #3]

  // board led blinks on tx
  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8000a06:	2120      	movs	r1, #32
 8000a08:	480a      	ldr	r0, [pc, #40]	@ (8000a34 <CAN1_Tx+0x4c>)
 8000a0a:	f001 feb3 	bl	8002774 <HAL_GPIO_TogglePin>
  // send the message

  if( HAL_CAN_AddTxMessage(&hcan1,&TxHeader,&message,&TxMailbox) != HAL_OK)
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	1cfa      	adds	r2, r7, #3
 8000a12:	f107 0108 	add.w	r1, r7, #8
 8000a16:	4808      	ldr	r0, [pc, #32]	@ (8000a38 <CAN1_Tx+0x50>)
 8000a18:	f000 fdd6 	bl	80015c8 <HAL_CAN_AddTxMessage>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <CAN1_Tx+0x3e>
  {
    Error_handler();
 8000a22:	f000 fbaf 	bl	8001184 <Error_handler>
  }
}
 8000a26:	bf00      	nop
 8000a28:	3720      	adds	r7, #32
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000000 	.word	0x20000000
 8000a34:	40020000 	.word	0x40020000
 8000a38:	200000c0 	.word	0x200000c0

08000a3c <GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void GPIO_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b088      	sub	sp, #32
 8000a40:	af00      	add	r7, sp, #0
  // enabling the clocks for the GPIO ports
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	4b24      	ldr	r3, [pc, #144]	@ (8000ad8 <GPIO_Init+0x9c>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	4a23      	ldr	r2, [pc, #140]	@ (8000ad8 <GPIO_Init+0x9c>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a52:	4b21      	ldr	r3, [pc, #132]	@ (8000ad8 <GPIO_Init+0x9c>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad8 <GPIO_Init+0x9c>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	4a1c      	ldr	r2, [pc, #112]	@ (8000ad8 <GPIO_Init+0x9c>)
 8000a68:	f043 0304 	orr.w	r3, r3, #4
 8000a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad8 <GPIO_Init+0x9c>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	f003 0304 	and.w	r3, r3, #4
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	603b      	str	r3, [r7, #0]
 8000a7e:	4b16      	ldr	r3, [pc, #88]	@ (8000ad8 <GPIO_Init+0x9c>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	4a15      	ldr	r2, [pc, #84]	@ (8000ad8 <GPIO_Init+0x9c>)
 8000a84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8a:	4b13      	ldr	r3, [pc, #76]	@ (8000ad8 <GPIO_Init+0x9c>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]

  // configure GPIOs
  GPIO_InitTypeDef ledgpio;
  ledgpio.Pin = GPIO_PIN_5;
 8000a96:	2320      	movs	r3, #32
 8000a98:	60fb      	str	r3, [r7, #12]
  ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	613b      	str	r3, [r7, #16]
  ledgpio.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA,&ledgpio);
 8000aa2:	f107 030c 	add.w	r3, r7, #12
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480c      	ldr	r0, [pc, #48]	@ (8000adc <GPIO_Init+0xa0>)
 8000aaa:	f001 fccf 	bl	800244c <HAL_GPIO_Init>

  // pin 13 set to interrup falling edge
  // button pin > gives interrupt
  ledgpio.Pin = GPIO_PIN_13;
 8000aae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ab2:	60fb      	str	r3, [r7, #12]
  ledgpio.Mode = GPIO_MODE_IT_FALLING;
 8000ab4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ab8:	613b      	str	r3, [r7, #16]
  ledgpio.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC,&ledgpio);
 8000abe:	f107 030c 	add.w	r3, r7, #12
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4806      	ldr	r0, [pc, #24]	@ (8000ae0 <GPIO_Init+0xa4>)
 8000ac6:	f001 fcc1 	bl	800244c <HAL_GPIO_Init>

  // enables the IRQ on pins 10-15
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000aca:	2028      	movs	r0, #40	@ 0x28
 8000acc:	f001 fa71 	bl	8001fb2 <HAL_NVIC_EnableIRQ>
}
 8000ad0:	bf00      	nop
 8000ad2:	3720      	adds	r7, #32
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40020000 	.word	0x40020000
 8000ae0:	40020800 	.word	0x40020800

08000ae4 <TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void TIM1_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b096      	sub	sp, #88	@ 0x58
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aea:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
 8000b10:	611a      	str	r2, [r3, #16]
 8000b12:	615a      	str	r2, [r3, #20]
 8000b14:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	2220      	movs	r2, #32
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f004 fb6b 	bl	80051f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b22:	4b3e      	ldr	r3, [pc, #248]	@ (8000c1c <TIM1_Init+0x138>)
 8000b24:	4a3e      	ldr	r2, [pc, #248]	@ (8000c20 <TIM1_Init+0x13c>)
 8000b26:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b28:	4b3c      	ldr	r3, [pc, #240]	@ (8000c1c <TIM1_Init+0x138>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2e:	4b3b      	ldr	r3, [pc, #236]	@ (8000c1c <TIM1_Init+0x138>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
//  htim1.Init.Period = 90-1;
  htim1.Init.Period = 63 - 1;  // 62 ticks
 8000b34:	4b39      	ldr	r3, [pc, #228]	@ (8000c1c <TIM1_Init+0x138>)
 8000b36:	223e      	movs	r2, #62	@ 0x3e
 8000b38:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b3a:	4b38      	ldr	r3, [pc, #224]	@ (8000c1c <TIM1_Init+0x138>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b40:	4b36      	ldr	r3, [pc, #216]	@ (8000c1c <TIM1_Init+0x138>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b46:	4b35      	ldr	r3, [pc, #212]	@ (8000c1c <TIM1_Init+0x138>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b4c:	4833      	ldr	r0, [pc, #204]	@ (8000c1c <TIM1_Init+0x138>)
 8000b4e:	f002 fc37 	bl	80033c0 <HAL_TIM_Base_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <TIM1_Init+0x78>
  {
    Error_handler();
 8000b58:	f000 fb14 	bl	8001184 <Error_handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b60:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b62:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b66:	4619      	mov	r1, r3
 8000b68:	482c      	ldr	r0, [pc, #176]	@ (8000c1c <TIM1_Init+0x138>)
 8000b6a:	f003 f9a7 	bl	8003ebc <HAL_TIM_ConfigClockSource>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <TIM1_Init+0x94>
  {
    Error_handler();
 8000b74:	f000 fb06 	bl	8001184 <Error_handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b78:	4828      	ldr	r0, [pc, #160]	@ (8000c1c <TIM1_Init+0x138>)
 8000b7a:	f002 fce1 	bl	8003540 <HAL_TIM_PWM_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <TIM1_Init+0xa4>
  {
    Error_handler();
 8000b84:	f000 fafe 	bl	8001184 <Error_handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b90:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b94:	4619      	mov	r1, r3
 8000b96:	4821      	ldr	r0, [pc, #132]	@ (8000c1c <TIM1_Init+0x138>)
 8000b98:	f003 fe6a 	bl	8004870 <HAL_TIMEx_MasterConfigSynchronization>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <TIM1_Init+0xc2>
  {
    Error_handler();
 8000ba2:	f000 faef 	bl	8001184 <Error_handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ba6:	2360      	movs	r3, #96	@ 0x60
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4814      	ldr	r0, [pc, #80]	@ (8000c1c <TIM1_Init+0x138>)
 8000bcc:	f003 f8b4 	bl	8003d38 <HAL_TIM_PWM_ConfigChannel>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <TIM1_Init+0xf6>
  {
    Error_handler();
 8000bd6:	f000 fad5 	bl	8001184 <Error_handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bf2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4807      	ldr	r0, [pc, #28]	@ (8000c1c <TIM1_Init+0x138>)
 8000bfe:	f003 feb3 	bl	8004968 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <TIM1_Init+0x128>
  {
    Error_handler();
 8000c08:	f000 fabc 	bl	8001184 <Error_handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c0c:	4803      	ldr	r0, [pc, #12]	@ (8000c1c <TIM1_Init+0x138>)
 8000c0e:	f000 fb99 	bl	8001344 <HAL_TIM_MspPostInit>

}
 8000c12:	bf00      	nop
 8000c14:	3758      	adds	r7, #88	@ 0x58
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000130 	.word	0x20000130
 8000c20:	40010000 	.word	0x40010000

08000c24 <UART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void UART2_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000c28:	4b0f      	ldr	r3, [pc, #60]	@ (8000c68 <UART2_Init+0x44>)
 8000c2a:	4a10      	ldr	r2, [pc, #64]	@ (8000c6c <UART2_Init+0x48>)
 8000c2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c68 <UART2_Init+0x44>)
 8000c30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c36:	4b0c      	ldr	r3, [pc, #48]	@ (8000c68 <UART2_Init+0x44>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c68 <UART2_Init+0x44>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c42:	4b09      	ldr	r3, [pc, #36]	@ (8000c68 <UART2_Init+0x44>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c48:	4b07      	ldr	r3, [pc, #28]	@ (8000c68 <UART2_Init+0x44>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	619a      	str	r2, [r3, #24]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c4e:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <UART2_Init+0x44>)
 8000c50:	220c      	movs	r2, #12
 8000c52:	615a      	str	r2, [r3, #20]
  if ( HAL_UART_Init(&huart2) != HAL_OK )
 8000c54:	4804      	ldr	r0, [pc, #16]	@ (8000c68 <UART2_Init+0x44>)
 8000c56:	f003 feed 	bl	8004a34 <HAL_UART_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <UART2_Init+0x40>
  {
    //There is a problem
    Error_handler();
 8000c60:	f000 fa90 	bl	8001184 <Error_handler>
  }
}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	2000007c 	.word	0x2000007c
 8000c6c:	40004400 	.word	0x40004400

08000c70 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b090      	sub	sp, #64	@ 0x40
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  char msg[50];
  sprintf(msg,"Message Transmitted:M0\r\n");
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	490a      	ldr	r1, [pc, #40]	@ (8000ca8 <HAL_CAN_TxMailbox0CompleteCallback+0x38>)
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f004 fa9a 	bl	80051b8 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000c84:	f107 030c 	add.w	r3, r7, #12
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fac1 	bl	8000210 <strlen>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	f107 010c 	add.w	r1, r7, #12
 8000c96:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9a:	4804      	ldr	r0, [pc, #16]	@ (8000cac <HAL_CAN_TxMailbox0CompleteCallback+0x3c>)
 8000c9c:	f003 ff17 	bl	8004ace <HAL_UART_Transmit>
}
 8000ca0:	bf00      	nop
 8000ca2:	3740      	adds	r7, #64	@ 0x40
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	08005b28 	.word	0x08005b28
 8000cac:	2000007c 	.word	0x2000007c

08000cb0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b090      	sub	sp, #64	@ 0x40
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  char msg[50];
  sprintf(msg,"Message Transmitted:M1\r\n");
 8000cb8:	f107 030c 	add.w	r3, r7, #12
 8000cbc:	490a      	ldr	r1, [pc, #40]	@ (8000ce8 <HAL_CAN_TxMailbox1CompleteCallback+0x38>)
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f004 fa7a 	bl	80051b8 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000cc4:	f107 030c 	add.w	r3, r7, #12
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff faa1 	bl	8000210 <strlen>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	f107 010c 	add.w	r1, r7, #12
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cda:	4804      	ldr	r0, [pc, #16]	@ (8000cec <HAL_CAN_TxMailbox1CompleteCallback+0x3c>)
 8000cdc:	f003 fef7 	bl	8004ace <HAL_UART_Transmit>
}
 8000ce0:	bf00      	nop
 8000ce2:	3740      	adds	r7, #64	@ 0x40
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	08005b44 	.word	0x08005b44
 8000cec:	2000007c 	.word	0x2000007c

08000cf0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b090      	sub	sp, #64	@ 0x40
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  char msg[50];
  sprintf(msg,"Message Transmitted:M2\r\n");
 8000cf8:	f107 030c 	add.w	r3, r7, #12
 8000cfc:	490a      	ldr	r1, [pc, #40]	@ (8000d28 <HAL_CAN_TxMailbox2CompleteCallback+0x38>)
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f004 fa5a 	bl	80051b8 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fa81 	bl	8000210 <strlen>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	f107 010c 	add.w	r1, r7, #12
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1a:	4804      	ldr	r0, [pc, #16]	@ (8000d2c <HAL_CAN_TxMailbox2CompleteCallback+0x3c>)
 8000d1c:	f003 fed7 	bl	8004ace <HAL_UART_Transmit>
}
 8000d20:	bf00      	nop
 8000d22:	3740      	adds	r7, #64	@ 0x40
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	08005b60 	.word	0x08005b60
 8000d2c:	2000007c 	.word	0x2000007c

08000d30 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b092      	sub	sp, #72	@ 0x48
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8000d38:	2120      	movs	r1, #32
 8000d3a:	4867      	ldr	r0, [pc, #412]	@ (8000ed8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 8000d3c:	f001 fd1a 	bl	8002774 <HAL_GPIO_TogglePin>

  uint8_t rcvd_msg[8]; // 8 is max cap for std CAN

  char msg[50];

  if(HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,&RxHeader,rcvd_msg) != HAL_OK)
 8000d40:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000d44:	4a65      	ldr	r2, [pc, #404]	@ (8000edc <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000d46:	2100      	movs	r1, #0
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f000 fd18 	bl	800177e <HAL_CAN_GetRxMessage>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
  {
    Error_handler();
 8000d54:	f000 fa16 	bl	8001184 <Error_handler>
  }

  // We can find what state the FSM is now from the msg
  if(RxHeader.StdId == 0x401 && RxHeader.RTR == 0 )
 8000d58:	4b60      	ldr	r3, [pc, #384]	@ (8000edc <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f240 4201 	movw	r2, #1025	@ 0x401
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d112      	bne.n	8000d8a <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
 8000d64:	4b5d      	ldr	r3, [pc, #372]	@ (8000edc <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d10e      	bne.n	8000d8a <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
  { // FAULT state

    fsm_state = 0;
 8000d6c:	4b5c      	ldr	r3, [pc, #368]	@ (8000ee0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	701a      	strb	r2, [r3, #0]
    LED_Manage_Output();
 8000d72:	f000 f8d1 	bl	8000f18 <LED_Manage_Output>
    sprintf(msg,"0x401 FAULT SATE INITIALIZED : #%x\r\n",rcvd_msg[0]);
 8000d76:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	f107 030c 	add.w	r3, r7, #12
 8000d80:	4958      	ldr	r1, [pc, #352]	@ (8000ee4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8000d82:	4618      	mov	r0, r3
 8000d84:	f004 fa18 	bl	80051b8 <siprintf>
 8000d88:	e094      	b.n	8000eb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>
  }

  else if ( RxHeader.StdId == 0x402 && RxHeader.RTR == 0)
 8000d8a:	4b54      	ldr	r3, [pc, #336]	@ (8000edc <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f240 4202 	movw	r2, #1026	@ 0x402
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d112      	bne.n	8000dbc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
 8000d96:	4b51      	ldr	r3, [pc, #324]	@ (8000edc <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000d98:	68db      	ldr	r3, [r3, #12]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d10e      	bne.n	8000dbc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
  { // SAFE TO APPROACH state

    fsm_state = 1;
 8000d9e:	4b50      	ldr	r3, [pc, #320]	@ (8000ee0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	701a      	strb	r2, [r3, #0]
    LED_Manage_Output();
 8000da4:	f000 f8b8 	bl	8000f18 <LED_Manage_Output>

    sprintf(msg,"0x402 SAFE TO APPROACH state INITIALIZED : #%x\r\n",rcvd_msg[0]);
 8000da8:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000dac:	461a      	mov	r2, r3
 8000dae:	f107 030c 	add.w	r3, r7, #12
 8000db2:	494d      	ldr	r1, [pc, #308]	@ (8000ee8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 8000db4:	4618      	mov	r0, r3
 8000db6:	f004 f9ff 	bl	80051b8 <siprintf>
 8000dba:	e07b      	b.n	8000eb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>
  }

  else if ( RxHeader.StdId == 0x403 && RxHeader.RTR == 0)
 8000dbc:	4b47      	ldr	r3, [pc, #284]	@ (8000edc <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f240 4203 	movw	r2, #1027	@ 0x403
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d112      	bne.n	8000dee <HAL_CAN_RxFifo0MsgPendingCallback+0xbe>
 8000dc8:	4b44      	ldr	r3, [pc, #272]	@ (8000edc <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d10e      	bne.n	8000dee <HAL_CAN_RxFifo0MsgPendingCallback+0xbe>
    { // RDY TO LAUNCH state

    fsm_state = 2;
 8000dd0:	4b43      	ldr	r3, [pc, #268]	@ (8000ee0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8000dd2:	2202      	movs	r2, #2
 8000dd4:	701a      	strb	r2, [r3, #0]
    LED_Manage_Output();
 8000dd6:	f000 f89f 	bl	8000f18 <LED_Manage_Output>
    sprintf(msg,"0x403 RDY TO LAUNCH state INITIALIZED : #%x\r\n",rcvd_msg[0]);
 8000dda:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000dde:	461a      	mov	r2, r3
 8000de0:	f107 030c 	add.w	r3, r7, #12
 8000de4:	4941      	ldr	r1, [pc, #260]	@ (8000eec <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 8000de6:	4618      	mov	r0, r3
 8000de8:	f004 f9e6 	bl	80051b8 <siprintf>
 8000dec:	e062      	b.n	8000eb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>
    }

  else if ( RxHeader.StdId == 0x404 && RxHeader.RTR == 0)
 8000dee:	4b3b      	ldr	r3, [pc, #236]	@ (8000edc <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f240 4204 	movw	r2, #1028	@ 0x404
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d112      	bne.n	8000e20 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>
 8000dfa:	4b38      	ldr	r3, [pc, #224]	@ (8000edc <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000dfc:	68db      	ldr	r3, [r3, #12]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d10e      	bne.n	8000e20 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>
    { // Launching - Omitted for KDAYS

    fsm_state = 3;
 8000e02:	4b37      	ldr	r3, [pc, #220]	@ (8000ee0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8000e04:	2203      	movs	r2, #3
 8000e06:	701a      	strb	r2, [r3, #0]
    LED_Manage_Output();
 8000e08:	f000 f886 	bl	8000f18 <LED_Manage_Output>

      sprintf(msg,"illegal 0x404 LAUNCH state INITIALIZED : #%x\r\n",rcvd_msg[0]);
 8000e0c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000e10:	461a      	mov	r2, r3
 8000e12:	f107 030c 	add.w	r3, r7, #12
 8000e16:	4936      	ldr	r1, [pc, #216]	@ (8000ef0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f004 f9cd 	bl	80051b8 <siprintf>
 8000e1e:	e049      	b.n	8000eb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>
    }
  else if ( RxHeader.StdId == 0x405 && RxHeader.RTR == 0)
 8000e20:	4b2e      	ldr	r3, [pc, #184]	@ (8000edc <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f240 4205 	movw	r2, #1029	@ 0x405
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d112      	bne.n	8000e52 <HAL_CAN_RxFifo0MsgPendingCallback+0x122>
 8000e2c:	4b2b      	ldr	r3, [pc, #172]	@ (8000edc <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d10e      	bne.n	8000e52 <HAL_CAN_RxFifo0MsgPendingCallback+0x122>
    { // CRAWLING state

    fsm_state = 4;
 8000e34:	4b2a      	ldr	r3, [pc, #168]	@ (8000ee0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8000e36:	2204      	movs	r2, #4
 8000e38:	701a      	strb	r2, [r3, #0]
    LED_Manage_Output();
 8000e3a:	f000 f86d 	bl	8000f18 <LED_Manage_Output>
    sprintf(msg,"0x405 CRAWLING state INITIALIZED : #%x\r\n",rcvd_msg[0]);
 8000e3e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000e42:	461a      	mov	r2, r3
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	492a      	ldr	r1, [pc, #168]	@ (8000ef4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f004 f9b4 	bl	80051b8 <siprintf>
 8000e50:	e030      	b.n	8000eb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>
    }
  else if ( RxHeader.StdId == 0x406 && RxHeader.RTR == 0)
 8000e52:	4b22      	ldr	r3, [pc, #136]	@ (8000edc <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f240 4206 	movw	r2, #1030	@ 0x406
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d112      	bne.n	8000e84 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
 8000e5e:	4b1f      	ldr	r3, [pc, #124]	@ (8000edc <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d10e      	bne.n	8000e84 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
    { // BRAKING state

    fsm_state = 5;
 8000e66:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8000e68:	2205      	movs	r2, #5
 8000e6a:	701a      	strb	r2, [r3, #0]
    LED_Manage_Output();
 8000e6c:	f000 f854 	bl	8000f18 <LED_Manage_Output>
    sprintf(msg,"0x406 BRAKING state INITIALIZED : #%x\r\n",rcvd_msg[0]);
 8000e70:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000e74:	461a      	mov	r2, r3
 8000e76:	f107 030c 	add.w	r3, r7, #12
 8000e7a:	491f      	ldr	r1, [pc, #124]	@ (8000ef8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f004 f99b 	bl	80051b8 <siprintf>
 8000e82:	e017      	b.n	8000eb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>
    }

  else if ( RxHeader.StdId == 0x407 && RxHeader.RTR == 0)
 8000e84:	4b15      	ldr	r3, [pc, #84]	@ (8000edc <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f240 4207 	movw	r2, #1031	@ 0x407
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d111      	bne.n	8000eb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>
 8000e90:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d10d      	bne.n	8000eb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>
    { // DEBUG sate

    fsm_state = 6;
 8000e98:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8000e9a:	2206      	movs	r2, #6
 8000e9c:	701a      	strb	r2, [r3, #0]
    LED_Manage_Output();
 8000e9e:	f000 f83b 	bl	8000f18 <LED_Manage_Output>
    sprintf(msg,"0x407 DEBUG state INITIALIZED : #%x\r\n",rcvd_msg[0]);
 8000ea2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	4913      	ldr	r1, [pc, #76]	@ (8000efc <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f004 f982 	bl	80051b8 <siprintf>
//  {
//    //its a reply ( data frame) by n2 to n1
//    sprintf(msg,"Reply Received : %#X\r\n",rcvd_msg[0] << 8 | rcvd_msg[1]);
//  }

   HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000eb4:	f107 030c 	add.w	r3, r7, #12
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff f9a9 	bl	8000210 <strlen>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	b29a      	uxth	r2, r3
 8000ec2:	f107 010c 	add.w	r1, r7, #12
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	480d      	ldr	r0, [pc, #52]	@ (8000f00 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000ecc:	f003 fdff 	bl	8004ace <HAL_UART_Transmit>
}
 8000ed0:	bf00      	nop
 8000ed2:	3748      	adds	r7, #72	@ 0x48
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40020000 	.word	0x40020000
 8000edc:	200001dc 	.word	0x200001dc
 8000ee0:	20000000 	.word	0x20000000
 8000ee4:	08005b7c 	.word	0x08005b7c
 8000ee8:	08005ba4 	.word	0x08005ba4
 8000eec:	08005bd8 	.word	0x08005bd8
 8000ef0:	08005c08 	.word	0x08005c08
 8000ef4:	08005c38 	.word	0x08005c38
 8000ef8:	08005c64 	.word	0x08005c64
 8000efc:	08005c8c 	.word	0x08005c8c
 8000f00:	2000007c 	.word	0x2000007c

08000f04 <HAL_TIM_PeriodElapsedCallback>:
  * We will send the heartbeat signal from this function
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{ // broadcasts heartbeat signal
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  CAN1_Tx();
 8000f0c:	f7ff fd6c 	bl	80009e8 <CAN1_Tx>
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <LED_Manage_Output>:


void LED_Manage_Output() {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
    uint8_t trail_len = led_count / 2;  // Half-strip trail
 8000f1e:	4b95      	ldr	r3, [pc, #596]	@ (8001174 <LED_Manage_Output+0x25c>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	085b      	lsrs	r3, r3, #1
 8000f24:	747b      	strb	r3, [r7, #17]
    uint16_t head = effStep % led_count;
 8000f26:	4b94      	ldr	r3, [pc, #592]	@ (8001178 <LED_Manage_Output+0x260>)
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	4a92      	ldr	r2, [pc, #584]	@ (8001174 <LED_Manage_Output+0x25c>)
 8000f2c:	7812      	ldrb	r2, [r2, #0]
 8000f2e:	fb93 f1f2 	sdiv	r1, r3, r2
 8000f32:	fb01 f202 	mul.w	r2, r1, r2
 8000f36:	1a9b      	subs	r3, r3, r2
 8000f38:	81fb      	strh	r3, [r7, #14]

    for (uint16_t i = 0; i < led_count; i++) {
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	82fb      	strh	r3, [r7, #22]
 8000f3e:	e10b      	b.n	8001158 <LED_Manage_Output+0x240>
        uint16_t distance = (i + led_count - head) % led_count;
 8000f40:	8afb      	ldrh	r3, [r7, #22]
 8000f42:	4a8c      	ldr	r2, [pc, #560]	@ (8001174 <LED_Manage_Output+0x25c>)
 8000f44:	7812      	ldrb	r2, [r2, #0]
 8000f46:	441a      	add	r2, r3
 8000f48:	89fb      	ldrh	r3, [r7, #14]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	4a89      	ldr	r2, [pc, #548]	@ (8001174 <LED_Manage_Output+0x25c>)
 8000f4e:	7812      	ldrb	r2, [r2, #0]
 8000f50:	fb93 f1f2 	sdiv	r1, r3, r2
 8000f54:	fb01 f202 	mul.w	r2, r1, r2
 8000f58:	1a9b      	subs	r3, r3, r2
 8000f5a:	81bb      	strh	r3, [r7, #12]

        switch (fsm_state) {
 8000f5c:	4b87      	ldr	r3, [pc, #540]	@ (800117c <LED_Manage_Output+0x264>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b06      	cmp	r3, #6
 8000f62:	f200 80f6 	bhi.w	8001152 <LED_Manage_Output+0x23a>
 8000f66:	a201      	add	r2, pc, #4	@ (adr r2, 8000f6c <LED_Manage_Output+0x54>)
 8000f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f6c:	08000f89 	.word	0x08000f89
 8000f70:	08000faf 	.word	0x08000faf
 8000f74:	08000fd5 	.word	0x08000fd5
 8000f78:	08000ffb 	.word	0x08000ffb
 8000f7c:	08001009 	.word	0x08001009
 8000f80:	0800109d 	.word	0x0800109d
 8000f84:	08001107 	.word	0x08001107
            case 0:  // Red trail
                if (distance < trail_len)
 8000f88:	7c7b      	ldrb	r3, [r7, #17]
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	89ba      	ldrh	r2, [r7, #12]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d206      	bcs.n	8000fa0 <LED_Manage_Output+0x88>
                    Set_LED(i, 255, 0, 0);
 8000f92:	8af8      	ldrh	r0, [r7, #22]
 8000f94:	2300      	movs	r3, #0
 8000f96:	2200      	movs	r2, #0
 8000f98:	21ff      	movs	r1, #255	@ 0xff
 8000f9a:	f7ff fb5b 	bl	8000654 <Set_LED>
                else
                    Set_LED(i, 0, 0, 0);
                break;
 8000f9e:	e0d8      	b.n	8001152 <LED_Manage_Output+0x23a>
                    Set_LED(i, 0, 0, 0);
 8000fa0:	8af8      	ldrh	r0, [r7, #22]
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	f7ff fb54 	bl	8000654 <Set_LED>
                break;
 8000fac:	e0d1      	b.n	8001152 <LED_Manage_Output+0x23a>

            case 1:  // Green trail
                if (distance < trail_len)
 8000fae:	7c7b      	ldrb	r3, [r7, #17]
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	89ba      	ldrh	r2, [r7, #12]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d206      	bcs.n	8000fc6 <LED_Manage_Output+0xae>
                    Set_LED(i, 0, 255, 0);
 8000fb8:	8af8      	ldrh	r0, [r7, #22]
 8000fba:	2300      	movs	r3, #0
 8000fbc:	22ff      	movs	r2, #255	@ 0xff
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	f7ff fb48 	bl	8000654 <Set_LED>
                else
                    Set_LED(i, 0, 0, 0);
                break;
 8000fc4:	e0c5      	b.n	8001152 <LED_Manage_Output+0x23a>
                    Set_LED(i, 0, 0, 0);
 8000fc6:	8af8      	ldrh	r0, [r7, #22]
 8000fc8:	2300      	movs	r3, #0
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2100      	movs	r1, #0
 8000fce:	f7ff fb41 	bl	8000654 <Set_LED>
                break;
 8000fd2:	e0be      	b.n	8001152 <LED_Manage_Output+0x23a>

            case 2:  // Blue trail
                if (distance < trail_len)
 8000fd4:	7c7b      	ldrb	r3, [r7, #17]
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	89ba      	ldrh	r2, [r7, #12]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d206      	bcs.n	8000fec <LED_Manage_Output+0xd4>
                    Set_LED(i, 0, 0, 255);
 8000fde:	8af8      	ldrh	r0, [r7, #22]
 8000fe0:	23ff      	movs	r3, #255	@ 0xff
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	f7ff fb35 	bl	8000654 <Set_LED>
                else
                    Set_LED(i, 0, 0, 0);
                break;
 8000fea:	e0b2      	b.n	8001152 <LED_Manage_Output+0x23a>
                    Set_LED(i, 0, 0, 0);
 8000fec:	8af8      	ldrh	r0, [r7, #22]
 8000fee:	2300      	movs	r3, #0
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	f7ff fb2e 	bl	8000654 <Set_LED>
                break;
 8000ff8:	e0ab      	b.n	8001152 <LED_Manage_Output+0x23a>

            case 3:  // Skip (off)
                Set_LED(i, 0, 0, 0);
 8000ffa:	8af8      	ldrh	r0, [r7, #22]
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	2200      	movs	r2, #0
 8001000:	2100      	movs	r1, #0
 8001002:	f7ff fb27 	bl	8000654 <Set_LED>
                break;
 8001006:	e0a4      	b.n	8001152 <LED_Manage_Output+0x23a>

            case 4:  // Moving split: half blue, half yellow — full strip lit, no gaps
            {
                uint16_t half = led_count / 2;
 8001008:	4b5a      	ldr	r3, [pc, #360]	@ (8001174 <LED_Manage_Output+0x25c>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	085b      	lsrs	r3, r3, #1
 800100e:	b2db      	uxtb	r3, r3
 8001010:	817b      	strh	r3, [r7, #10]
                uint16_t start = effStep % led_count;
 8001012:	4b59      	ldr	r3, [pc, #356]	@ (8001178 <LED_Manage_Output+0x260>)
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	4a57      	ldr	r2, [pc, #348]	@ (8001174 <LED_Manage_Output+0x25c>)
 8001018:	7812      	ldrb	r2, [r2, #0]
 800101a:	fb93 f1f2 	sdiv	r1, r3, r2
 800101e:	fb01 f202 	mul.w	r2, r1, r2
 8001022:	1a9b      	subs	r3, r3, r2
 8001024:	813b      	strh	r3, [r7, #8]

                for (uint16_t j = 0; j < half; j++) {
 8001026:	2300      	movs	r3, #0
 8001028:	82bb      	strh	r3, [r7, #20]
 800102a:	e013      	b.n	8001054 <LED_Manage_Output+0x13c>
                    uint16_t idx = (start + j) % led_count;
 800102c:	893a      	ldrh	r2, [r7, #8]
 800102e:	8abb      	ldrh	r3, [r7, #20]
 8001030:	4413      	add	r3, r2
 8001032:	4a50      	ldr	r2, [pc, #320]	@ (8001174 <LED_Manage_Output+0x25c>)
 8001034:	7812      	ldrb	r2, [r2, #0]
 8001036:	fb93 f1f2 	sdiv	r1, r3, r2
 800103a:	fb01 f202 	mul.w	r2, r1, r2
 800103e:	1a9b      	subs	r3, r3, r2
 8001040:	80bb      	strh	r3, [r7, #4]
                    Set_LED(idx, 0, 0, 255);  // Blue
 8001042:	88b8      	ldrh	r0, [r7, #4]
 8001044:	23ff      	movs	r3, #255	@ 0xff
 8001046:	2200      	movs	r2, #0
 8001048:	2100      	movs	r1, #0
 800104a:	f7ff fb03 	bl	8000654 <Set_LED>
                for (uint16_t j = 0; j < half; j++) {
 800104e:	8abb      	ldrh	r3, [r7, #20]
 8001050:	3301      	adds	r3, #1
 8001052:	82bb      	strh	r3, [r7, #20]
 8001054:	8aba      	ldrh	r2, [r7, #20]
 8001056:	897b      	ldrh	r3, [r7, #10]
 8001058:	429a      	cmp	r2, r3
 800105a:	d3e7      	bcc.n	800102c <LED_Manage_Output+0x114>
                }

                for (uint16_t j = 0; j < half; j++) {
 800105c:	2300      	movs	r3, #0
 800105e:	827b      	strh	r3, [r7, #18]
 8001060:	e015      	b.n	800108e <LED_Manage_Output+0x176>
                    uint16_t idx = (start + j + half) % led_count;
 8001062:	893a      	ldrh	r2, [r7, #8]
 8001064:	8a7b      	ldrh	r3, [r7, #18]
 8001066:	441a      	add	r2, r3
 8001068:	897b      	ldrh	r3, [r7, #10]
 800106a:	4413      	add	r3, r2
 800106c:	4a41      	ldr	r2, [pc, #260]	@ (8001174 <LED_Manage_Output+0x25c>)
 800106e:	7812      	ldrb	r2, [r2, #0]
 8001070:	fb93 f1f2 	sdiv	r1, r3, r2
 8001074:	fb01 f202 	mul.w	r2, r1, r2
 8001078:	1a9b      	subs	r3, r3, r2
 800107a:	80fb      	strh	r3, [r7, #6]
                    Set_LED(idx, 255, 255, 0);  // Yellow
 800107c:	88f8      	ldrh	r0, [r7, #6]
 800107e:	2300      	movs	r3, #0
 8001080:	22ff      	movs	r2, #255	@ 0xff
 8001082:	21ff      	movs	r1, #255	@ 0xff
 8001084:	f7ff fae6 	bl	8000654 <Set_LED>
                for (uint16_t j = 0; j < half; j++) {
 8001088:	8a7b      	ldrh	r3, [r7, #18]
 800108a:	3301      	adds	r3, #1
 800108c:	827b      	strh	r3, [r7, #18]
 800108e:	8a7a      	ldrh	r2, [r7, #18]
 8001090:	897b      	ldrh	r3, [r7, #10]
 8001092:	429a      	cmp	r2, r3
 8001094:	d3e5      	bcc.n	8001062 <LED_Manage_Output+0x14a>
                }

                WS2812_Send();
 8001096:	f7ff fb33 	bl	8000700 <WS2812_Send>
                break;
 800109a:	e05a      	b.n	8001152 <LED_Manage_Output+0x23a>
            }


            case 5:  // Blinking blue/yellow trail (on for 20 steps, off for 20 steps)
                if ((effStep / 20) % 2 == 0) {
 800109c:	4b36      	ldr	r3, [pc, #216]	@ (8001178 <LED_Manage_Output+0x260>)
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	4a37      	ldr	r2, [pc, #220]	@ (8001180 <LED_Manage_Output+0x268>)
 80010a2:	fba2 2303 	umull	r2, r3, r2, r3
 80010a6:	091b      	lsrs	r3, r3, #4
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d121      	bne.n	80010f8 <LED_Manage_Output+0x1e0>
                    if (distance < trail_len) {
 80010b4:	7c7b      	ldrb	r3, [r7, #17]
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	89ba      	ldrh	r2, [r7, #12]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d215      	bcs.n	80010ea <LED_Manage_Output+0x1d2>
                        if (i < led_count / 2)
 80010be:	4b2d      	ldr	r3, [pc, #180]	@ (8001174 <LED_Manage_Output+0x25c>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	085b      	lsrs	r3, r3, #1
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	461a      	mov	r2, r3
 80010c8:	8afb      	ldrh	r3, [r7, #22]
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d206      	bcs.n	80010dc <LED_Manage_Output+0x1c4>
                            Set_LED(i, 0, 0, 255);   // Blue
 80010ce:	8af8      	ldrh	r0, [r7, #22]
 80010d0:	23ff      	movs	r3, #255	@ 0xff
 80010d2:	2200      	movs	r2, #0
 80010d4:	2100      	movs	r1, #0
 80010d6:	f7ff fabd 	bl	8000654 <Set_LED>
                        Set_LED(i, 0, 0, 0);
                    }
                } else {
                    Set_LED(i, 0, 0, 0);  // Blink off
                }
                break;
 80010da:	e03a      	b.n	8001152 <LED_Manage_Output+0x23a>
                            Set_LED(i, 255, 255, 0); // Yellow
 80010dc:	8af8      	ldrh	r0, [r7, #22]
 80010de:	2300      	movs	r3, #0
 80010e0:	22ff      	movs	r2, #255	@ 0xff
 80010e2:	21ff      	movs	r1, #255	@ 0xff
 80010e4:	f7ff fab6 	bl	8000654 <Set_LED>
                break;
 80010e8:	e033      	b.n	8001152 <LED_Manage_Output+0x23a>
                        Set_LED(i, 0, 0, 0);
 80010ea:	8af8      	ldrh	r0, [r7, #22]
 80010ec:	2300      	movs	r3, #0
 80010ee:	2200      	movs	r2, #0
 80010f0:	2100      	movs	r1, #0
 80010f2:	f7ff faaf 	bl	8000654 <Set_LED>
                break;
 80010f6:	e02c      	b.n	8001152 <LED_Manage_Output+0x23a>
                    Set_LED(i, 0, 0, 0);  // Blink off
 80010f8:	8af8      	ldrh	r0, [r7, #22]
 80010fa:	2300      	movs	r3, #0
 80010fc:	2200      	movs	r2, #0
 80010fe:	2100      	movs	r1, #0
 8001100:	f7ff faa8 	bl	8000654 <Set_LED>
                break;
 8001104:	e025      	b.n	8001152 <LED_Manage_Output+0x23a>

            case 6:  // Blinking yellow trail
                if ((effStep / 20) % 2 == 0) {
 8001106:	4b1c      	ldr	r3, [pc, #112]	@ (8001178 <LED_Manage_Output+0x260>)
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	4a1d      	ldr	r2, [pc, #116]	@ (8001180 <LED_Manage_Output+0x268>)
 800110c:	fba2 2303 	umull	r2, r3, r2, r3
 8001110:	091b      	lsrs	r3, r3, #4
 8001112:	b29b      	uxth	r3, r3
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	b29b      	uxth	r3, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	d112      	bne.n	8001144 <LED_Manage_Output+0x22c>
                    if (distance < trail_len)
 800111e:	7c7b      	ldrb	r3, [r7, #17]
 8001120:	b29b      	uxth	r3, r3
 8001122:	89ba      	ldrh	r2, [r7, #12]
 8001124:	429a      	cmp	r2, r3
 8001126:	d206      	bcs.n	8001136 <LED_Manage_Output+0x21e>
                        Set_LED(i, 255, 255, 0);  // Yellow
 8001128:	8af8      	ldrh	r0, [r7, #22]
 800112a:	2300      	movs	r3, #0
 800112c:	22ff      	movs	r2, #255	@ 0xff
 800112e:	21ff      	movs	r1, #255	@ 0xff
 8001130:	f7ff fa90 	bl	8000654 <Set_LED>
                    else
                        Set_LED(i, 0, 0, 0);
                } else {
                    Set_LED(i, 0, 0, 0);  // Blink off
                }
                break;
 8001134:	e00c      	b.n	8001150 <LED_Manage_Output+0x238>
                        Set_LED(i, 0, 0, 0);
 8001136:	8af8      	ldrh	r0, [r7, #22]
 8001138:	2300      	movs	r3, #0
 800113a:	2200      	movs	r2, #0
 800113c:	2100      	movs	r1, #0
 800113e:	f7ff fa89 	bl	8000654 <Set_LED>
                break;
 8001142:	e005      	b.n	8001150 <LED_Manage_Output+0x238>
                    Set_LED(i, 0, 0, 0);  // Blink off
 8001144:	8af8      	ldrh	r0, [r7, #22]
 8001146:	2300      	movs	r3, #0
 8001148:	2200      	movs	r2, #0
 800114a:	2100      	movs	r1, #0
 800114c:	f7ff fa82 	bl	8000654 <Set_LED>
                break;
 8001150:	bf00      	nop
    for (uint16_t i = 0; i < led_count; i++) {
 8001152:	8afb      	ldrh	r3, [r7, #22]
 8001154:	3301      	adds	r3, #1
 8001156:	82fb      	strh	r3, [r7, #22]
 8001158:	4b06      	ldr	r3, [pc, #24]	@ (8001174 <LED_Manage_Output+0x25c>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	461a      	mov	r2, r3
 800115e:	8afb      	ldrh	r3, [r7, #22]
 8001160:	4293      	cmp	r3, r2
 8001162:	f4ff aeed 	bcc.w	8000f40 <LED_Manage_Output+0x28>
        }
    }

    WS2812_Send();
 8001166:	f7ff facb 	bl	8000700 <WS2812_Send>
}
 800116a:	bf00      	nop
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000001 	.word	0x20000001
 8001178:	200001d8 	.word	0x200001d8
 800117c:	20000000 	.word	0x20000000
 8001180:	cccccccd 	.word	0xcccccccd

08001184 <Error_handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  while(1);
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <Error_handler+0x4>

0800118c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  //Here will do low level processor specific inits.
  //1. Set up the priority grouping of the arm cortex mx processor
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001190:	2003      	movs	r0, #3
 8001192:	f000 fee7 	bl	8001f64 <HAL_NVIC_SetPriorityGrouping>

  //2. Enable the required system exceptions of the arm cortex mx processor
  SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8001196:	4b0d      	ldr	r3, [pc, #52]	@ (80011cc <HAL_MspInit+0x40>)
 8001198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800119a:	4a0c      	ldr	r2, [pc, #48]	@ (80011cc <HAL_MspInit+0x40>)
 800119c:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 80011a0:	6253      	str	r3, [r2, #36]	@ 0x24

  //3. configure the priority for the system exceptions
  HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2100      	movs	r1, #0
 80011a6:	f06f 000b 	mvn.w	r0, #11
 80011aa:	f000 fee6 	bl	8001f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2100      	movs	r1, #0
 80011b2:	f06f 000a 	mvn.w	r0, #10
 80011b6:	f000 fee0 	bl	8001f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	f06f 0009 	mvn.w	r0, #9
 80011c2:	f000 feda 	bl	8001f7a <HAL_NVIC_SetPriority>
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim_base)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  if (htim_base->Instance == TIM1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a30      	ldr	r2, [pc, #192]	@ (80012a0 <HAL_TIM_Base_MspInit+0xd0>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d13e      	bne.n	8001260 <HAL_TIM_Base_MspInit+0x90>
  {
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	4b2f      	ldr	r3, [pc, #188]	@ (80012a4 <HAL_TIM_Base_MspInit+0xd4>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ea:	4a2e      	ldr	r2, [pc, #184]	@ (80012a4 <HAL_TIM_Base_MspInit+0xd4>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011f2:	4b2c      	ldr	r3, [pc, #176]	@ (80012a4 <HAL_TIM_Base_MspInit+0xd4>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]

    // TIM1 DMA Init for CH1
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80011fe:	4b2a      	ldr	r3, [pc, #168]	@ (80012a8 <HAL_TIM_Base_MspInit+0xd8>)
 8001200:	4a2a      	ldr	r2, [pc, #168]	@ (80012ac <HAL_TIM_Base_MspInit+0xdc>)
 8001202:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001204:	4b28      	ldr	r3, [pc, #160]	@ (80012a8 <HAL_TIM_Base_MspInit+0xd8>)
 8001206:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800120a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800120c:	4b26      	ldr	r3, [pc, #152]	@ (80012a8 <HAL_TIM_Base_MspInit+0xd8>)
 800120e:	2240      	movs	r2, #64	@ 0x40
 8001210:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001212:	4b25      	ldr	r3, [pc, #148]	@ (80012a8 <HAL_TIM_Base_MspInit+0xd8>)
 8001214:	2200      	movs	r2, #0
 8001216:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001218:	4b23      	ldr	r3, [pc, #140]	@ (80012a8 <HAL_TIM_Base_MspInit+0xd8>)
 800121a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800121e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001220:	4b21      	ldr	r3, [pc, #132]	@ (80012a8 <HAL_TIM_Base_MspInit+0xd8>)
 8001222:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001226:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001228:	4b1f      	ldr	r3, [pc, #124]	@ (80012a8 <HAL_TIM_Base_MspInit+0xd8>)
 800122a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800122e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001230:	4b1d      	ldr	r3, [pc, #116]	@ (80012a8 <HAL_TIM_Base_MspInit+0xd8>)
 8001232:	2200      	movs	r2, #0
 8001234:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001236:	4b1c      	ldr	r3, [pc, #112]	@ (80012a8 <HAL_TIM_Base_MspInit+0xd8>)
 8001238:	2200      	movs	r2, #0
 800123a:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800123c:	4b1a      	ldr	r3, [pc, #104]	@ (80012a8 <HAL_TIM_Base_MspInit+0xd8>)
 800123e:	2200      	movs	r2, #0
 8001240:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001242:	4819      	ldr	r0, [pc, #100]	@ (80012a8 <HAL_TIM_Base_MspInit+0xd8>)
 8001244:	f000 fefa 	bl	800203c <HAL_DMA_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_handler();
 800124e:	f7ff ff99 	bl	8001184 <Error_handler>
    }

    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], hdma_tim1_ch1);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a14      	ldr	r2, [pc, #80]	@ (80012a8 <HAL_TIM_Base_MspInit+0xd8>)
 8001256:	625a      	str	r2, [r3, #36]	@ 0x24
 8001258:	4a13      	ldr	r2, [pc, #76]	@ (80012a8 <HAL_TIM_Base_MspInit+0xd8>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_RCC_TIM6_CLK_ENABLE();

    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
  }
}
 800125e:	e01a      	b.n	8001296 <HAL_TIM_Base_MspInit+0xc6>
  else if (htim_base->Instance == TIM6)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a12      	ldr	r2, [pc, #72]	@ (80012b0 <HAL_TIM_Base_MspInit+0xe0>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d115      	bne.n	8001296 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	4b0d      	ldr	r3, [pc, #52]	@ (80012a4 <HAL_TIM_Base_MspInit+0xd4>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001272:	4a0c      	ldr	r2, [pc, #48]	@ (80012a4 <HAL_TIM_Base_MspInit+0xd4>)
 8001274:	f043 0310 	orr.w	r3, r3, #16
 8001278:	6413      	str	r3, [r2, #64]	@ 0x40
 800127a:	4b0a      	ldr	r3, [pc, #40]	@ (80012a4 <HAL_TIM_Base_MspInit+0xd4>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127e:	f003 0310 	and.w	r3, r3, #16
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001286:	2036      	movs	r0, #54	@ 0x36
 8001288:	f000 fe93 	bl	8001fb2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800128c:	2200      	movs	r2, #0
 800128e:	210f      	movs	r1, #15
 8001290:	2036      	movs	r0, #54	@ 0x36
 8001292:	f000 fe72 	bl	8001f7a <HAL_NVIC_SetPriority>
}
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40010000 	.word	0x40010000
 80012a4:	40023800 	.word	0x40023800
 80012a8:	20000178 	.word	0x20000178
 80012ac:	40026428 	.word	0x40026428
 80012b0:	40001000 	.word	0x40001000

080012b4 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	@ 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef gpio_uart;
  //here we are going to do the low level inits. of the USART2 peripheral

  //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
  __HAL_RCC_USART2_CLK_ENABLE();
 80012bc:	2300      	movs	r3, #0
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	4b1e      	ldr	r3, [pc, #120]	@ (800133c <HAL_UART_MspInit+0x88>)
 80012c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c4:	4a1d      	ldr	r2, [pc, #116]	@ (800133c <HAL_UART_MspInit+0x88>)
 80012c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80012cc:	4b1b      	ldr	r3, [pc, #108]	@ (800133c <HAL_UART_MspInit+0x88>)
 80012ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	4b17      	ldr	r3, [pc, #92]	@ (800133c <HAL_UART_MspInit+0x88>)
 80012de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e0:	4a16      	ldr	r2, [pc, #88]	@ (800133c <HAL_UART_MspInit+0x88>)
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e8:	4b14      	ldr	r3, [pc, #80]	@ (800133c <HAL_UART_MspInit+0x88>)
 80012ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	68fb      	ldr	r3, [r7, #12]

  //2 . Do the pin muxing configurations
  gpio_uart.Pin = GPIO_PIN_2;
 80012f4:	2304      	movs	r3, #4
 80012f6:	617b      	str	r3, [r7, #20]
  gpio_uart.Mode =GPIO_MODE_AF_PP;
 80012f8:	2302      	movs	r3, #2
 80012fa:	61bb      	str	r3, [r7, #24]
  gpio_uart.Pull = GPIO_PULLUP;
 80012fc:	2301      	movs	r3, #1
 80012fe:	61fb      	str	r3, [r7, #28]
  gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
  gpio_uart.Alternate =  GPIO_AF7_USART2; //UART2_TX
 8001304:	2307      	movs	r3, #7
 8001306:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA,&gpio_uart);
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	4619      	mov	r1, r3
 800130e:	480c      	ldr	r0, [pc, #48]	@ (8001340 <HAL_UART_MspInit+0x8c>)
 8001310:	f001 f89c 	bl	800244c <HAL_GPIO_Init>

  gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 8001314:	2308      	movs	r3, #8
 8001316:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA,&gpio_uart);
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	4619      	mov	r1, r3
 800131e:	4808      	ldr	r0, [pc, #32]	@ (8001340 <HAL_UART_MspInit+0x8c>)
 8001320:	f001 f894 	bl	800244c <HAL_GPIO_Init>
  //3 . Enable the IRQ and set up the priority (NVIC settings )
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001324:	2026      	movs	r0, #38	@ 0x26
 8001326:	f000 fe44 	bl	8001fb2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 800132a:	2200      	movs	r2, #0
 800132c:	210f      	movs	r1, #15
 800132e:	2026      	movs	r0, #38	@ 0x26
 8001330:	f000 fe23 	bl	8001f7a <HAL_NVIC_SetPriority>
}
 8001334:	bf00      	nop
 8001336:	3728      	adds	r7, #40	@ 0x28
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40023800 	.word	0x40023800
 8001340:	40020000 	.word	0x40020000

08001344 <HAL_TIM_MspPostInit>:
}



void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b088      	sub	sp, #32
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 030c 	add.w	r3, r7, #12
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a12      	ldr	r2, [pc, #72]	@ (80013ac <HAL_TIM_MspPostInit+0x68>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d11e      	bne.n	80013a4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <HAL_TIM_MspPostInit+0x6c>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	4a10      	ldr	r2, [pc, #64]	@ (80013b0 <HAL_TIM_MspPostInit+0x6c>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6313      	str	r3, [r2, #48]	@ 0x30
 8001376:	4b0e      	ldr	r3, [pc, #56]	@ (80013b0 <HAL_TIM_MspPostInit+0x6c>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001382:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001386:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	2302      	movs	r3, #2
 800138a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2300      	movs	r3, #0
 8001392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001394:	2301      	movs	r3, #1
 8001396:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	4619      	mov	r1, r3
 800139e:	4805      	ldr	r0, [pc, #20]	@ (80013b4 <HAL_TIM_MspPostInit+0x70>)
 80013a0:	f001 f854 	bl	800244c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80013a4:	bf00      	nop
 80013a6:	3720      	adds	r7, #32
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40010000 	.word	0x40010000
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40020000 	.word	0x40020000

080013b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013c0:	4a14      	ldr	r2, [pc, #80]	@ (8001414 <_sbrk+0x5c>)
 80013c2:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <_sbrk+0x60>)
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013cc:	4b13      	ldr	r3, [pc, #76]	@ (800141c <_sbrk+0x64>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d102      	bne.n	80013da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013d4:	4b11      	ldr	r3, [pc, #68]	@ (800141c <_sbrk+0x64>)
 80013d6:	4a12      	ldr	r2, [pc, #72]	@ (8001420 <_sbrk+0x68>)
 80013d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013da:	4b10      	ldr	r3, [pc, #64]	@ (800141c <_sbrk+0x64>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d207      	bcs.n	80013f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013e8:	f003 ff0e 	bl	8005208 <__errno>
 80013ec:	4603      	mov	r3, r0
 80013ee:	220c      	movs	r2, #12
 80013f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013f2:	f04f 33ff 	mov.w	r3, #4294967295
 80013f6:	e009      	b.n	800140c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013f8:	4b08      	ldr	r3, [pc, #32]	@ (800141c <_sbrk+0x64>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013fe:	4b07      	ldr	r3, [pc, #28]	@ (800141c <_sbrk+0x64>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	4a05      	ldr	r2, [pc, #20]	@ (800141c <_sbrk+0x64>)
 8001408:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800140a:	68fb      	ldr	r3, [r7, #12]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20020000 	.word	0x20020000
 8001418:	00000400 	.word	0x00000400
 800141c:	20000f60 	.word	0x20000f60
 8001420:	200010b0 	.word	0x200010b0

08001424 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001428:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <SystemInit+0x20>)
 800142a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800142e:	4a05      	ldr	r2, [pc, #20]	@ (8001444 <SystemInit+0x20>)
 8001430:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001434:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001448:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001480 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800144c:	480d      	ldr	r0, [pc, #52]	@ (8001484 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800144e:	490e      	ldr	r1, [pc, #56]	@ (8001488 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001450:	4a0e      	ldr	r2, [pc, #56]	@ (800148c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001454:	e002      	b.n	800145c <LoopCopyDataInit>

08001456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145a:	3304      	adds	r3, #4

0800145c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800145c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001460:	d3f9      	bcc.n	8001456 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001462:	4a0b      	ldr	r2, [pc, #44]	@ (8001490 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001464:	4c0b      	ldr	r4, [pc, #44]	@ (8001494 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001468:	e001      	b.n	800146e <LoopFillZerobss>

0800146a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800146c:	3204      	adds	r2, #4

0800146e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001470:	d3fb      	bcc.n	800146a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001472:	f7ff ffd7 	bl	8001424 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001476:	f003 fecd 	bl	8005214 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800147a:	f7ff f9af 	bl	80007dc <main>
  bx  lr    
 800147e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001480:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001488:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800148c:	08005d18 	.word	0x08005d18
  ldr r2, =_sbss
 8001490:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001494:	200010b0 	.word	0x200010b0

08001498 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001498:	e7fe      	b.n	8001498 <ADC_IRQHandler>
	...

0800149c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014a0:	4b0e      	ldr	r3, [pc, #56]	@ (80014dc <HAL_Init+0x40>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a0d      	ldr	r2, [pc, #52]	@ (80014dc <HAL_Init+0x40>)
 80014a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014ac:	4b0b      	ldr	r3, [pc, #44]	@ (80014dc <HAL_Init+0x40>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a0a      	ldr	r2, [pc, #40]	@ (80014dc <HAL_Init+0x40>)
 80014b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014b8:	4b08      	ldr	r3, [pc, #32]	@ (80014dc <HAL_Init+0x40>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a07      	ldr	r2, [pc, #28]	@ (80014dc <HAL_Init+0x40>)
 80014be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c4:	2003      	movs	r0, #3
 80014c6:	f000 fd4d 	bl	8001f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ca:	2000      	movs	r0, #0
 80014cc:	f000 f808 	bl	80014e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014d0:	f7ff fe5c 	bl	800118c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40023c00 	.word	0x40023c00

080014e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014e8:	4b12      	ldr	r3, [pc, #72]	@ (8001534 <HAL_InitTick+0x54>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	4b12      	ldr	r3, [pc, #72]	@ (8001538 <HAL_InitTick+0x58>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	4619      	mov	r1, r3
 80014f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 fd65 	bl	8001fce <HAL_SYSTICK_Config>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e00e      	b.n	800152c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2b0f      	cmp	r3, #15
 8001512:	d80a      	bhi.n	800152a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001514:	2200      	movs	r2, #0
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	f04f 30ff 	mov.w	r0, #4294967295
 800151c:	f000 fd2d 	bl	8001f7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001520:	4a06      	ldr	r2, [pc, #24]	@ (800153c <HAL_InitTick+0x5c>)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001526:	2300      	movs	r3, #0
 8001528:	e000      	b.n	800152c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
}
 800152c:	4618      	mov	r0, r3
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000004 	.word	0x20000004
 8001538:	2000000c 	.word	0x2000000c
 800153c:	20000008 	.word	0x20000008

08001540 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001544:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <HAL_IncTick+0x20>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	461a      	mov	r2, r3
 800154a:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <HAL_IncTick+0x24>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4413      	add	r3, r2
 8001550:	4a04      	ldr	r2, [pc, #16]	@ (8001564 <HAL_IncTick+0x24>)
 8001552:	6013      	str	r3, [r2, #0]
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	2000000c 	.word	0x2000000c
 8001564:	20000f64 	.word	0x20000f64

08001568 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  return uwTick;
 800156c:	4b03      	ldr	r3, [pc, #12]	@ (800157c <HAL_GetTick+0x14>)
 800156e:	681b      	ldr	r3, [r3, #0]
}
 8001570:	4618      	mov	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	20000f64 	.word	0x20000f64

08001580 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001588:	f7ff ffee 	bl	8001568 <HAL_GetTick>
 800158c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001598:	d005      	beq.n	80015a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800159a:	4b0a      	ldr	r3, [pc, #40]	@ (80015c4 <HAL_Delay+0x44>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	461a      	mov	r2, r3
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4413      	add	r3, r2
 80015a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015a6:	bf00      	nop
 80015a8:	f7ff ffde 	bl	8001568 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d8f7      	bhi.n	80015a8 <HAL_Delay+0x28>
  {
  }
}
 80015b8:	bf00      	nop
 80015ba:	bf00      	nop
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	2000000c 	.word	0x2000000c

080015c8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b089      	sub	sp, #36	@ 0x24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
 80015d4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015dc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80015e6:	7ffb      	ldrb	r3, [r7, #31]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d003      	beq.n	80015f4 <HAL_CAN_AddTxMessage+0x2c>
 80015ec:	7ffb      	ldrb	r3, [r7, #31]
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	f040 80b8 	bne.w	8001764 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10a      	bne.n	8001614 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001604:	2b00      	cmp	r3, #0
 8001606:	d105      	bne.n	8001614 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800160e:	2b00      	cmp	r3, #0
 8001610:	f000 80a0 	beq.w	8001754 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	0e1b      	lsrs	r3, r3, #24
 8001618:	f003 0303 	and.w	r3, r3, #3
 800161c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	2b02      	cmp	r3, #2
 8001622:	d907      	bls.n	8001634 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001628:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e09e      	b.n	8001772 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001634:	2201      	movs	r2, #1
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	409a      	lsls	r2, r3
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d10d      	bne.n	8001662 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001650:	68f9      	ldr	r1, [r7, #12]
 8001652:	6809      	ldr	r1, [r1, #0]
 8001654:	431a      	orrs	r2, r3
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	3318      	adds	r3, #24
 800165a:	011b      	lsls	r3, r3, #4
 800165c:	440b      	add	r3, r1
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	e00f      	b.n	8001682 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800166c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001672:	68f9      	ldr	r1, [r7, #12]
 8001674:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001676:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	3318      	adds	r3, #24
 800167c:	011b      	lsls	r3, r3, #4
 800167e:	440b      	add	r3, r1
 8001680:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6819      	ldr	r1, [r3, #0]
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	691a      	ldr	r2, [r3, #16]
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	3318      	adds	r3, #24
 800168e:	011b      	lsls	r3, r3, #4
 8001690:	440b      	add	r3, r1
 8001692:	3304      	adds	r3, #4
 8001694:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	7d1b      	ldrb	r3, [r3, #20]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d111      	bne.n	80016c2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	3318      	adds	r3, #24
 80016a6:	011b      	lsls	r3, r3, #4
 80016a8:	4413      	add	r3, r2
 80016aa:	3304      	adds	r3, #4
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	6811      	ldr	r1, [r2, #0]
 80016b2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	3318      	adds	r3, #24
 80016ba:	011b      	lsls	r3, r3, #4
 80016bc:	440b      	add	r3, r1
 80016be:	3304      	adds	r3, #4
 80016c0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	3307      	adds	r3, #7
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	061a      	lsls	r2, r3, #24
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3306      	adds	r3, #6
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	041b      	lsls	r3, r3, #16
 80016d2:	431a      	orrs	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3305      	adds	r3, #5
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	021b      	lsls	r3, r3, #8
 80016dc:	4313      	orrs	r3, r2
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	3204      	adds	r2, #4
 80016e2:	7812      	ldrb	r2, [r2, #0]
 80016e4:	4610      	mov	r0, r2
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	6811      	ldr	r1, [r2, #0]
 80016ea:	ea43 0200 	orr.w	r2, r3, r0
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	011b      	lsls	r3, r3, #4
 80016f2:	440b      	add	r3, r1
 80016f4:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80016f8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3303      	adds	r3, #3
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	061a      	lsls	r2, r3, #24
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3302      	adds	r3, #2
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	041b      	lsls	r3, r3, #16
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3301      	adds	r3, #1
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	021b      	lsls	r3, r3, #8
 8001714:	4313      	orrs	r3, r2
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	7812      	ldrb	r2, [r2, #0]
 800171a:	4610      	mov	r0, r2
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	6811      	ldr	r1, [r2, #0]
 8001720:	ea43 0200 	orr.w	r2, r3, r0
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	011b      	lsls	r3, r3, #4
 8001728:	440b      	add	r3, r1
 800172a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800172e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	3318      	adds	r3, #24
 8001738:	011b      	lsls	r3, r3, #4
 800173a:	4413      	add	r3, r2
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	6811      	ldr	r1, [r2, #0]
 8001742:	f043 0201 	orr.w	r2, r3, #1
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	3318      	adds	r3, #24
 800174a:	011b      	lsls	r3, r3, #4
 800174c:	440b      	add	r3, r1
 800174e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001750:	2300      	movs	r3, #0
 8001752:	e00e      	b.n	8001772 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001758:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e006      	b.n	8001772 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001768:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
  }
}
 8001772:	4618      	mov	r0, r3
 8001774:	3724      	adds	r7, #36	@ 0x24
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800177e:	b480      	push	{r7}
 8001780:	b087      	sub	sp, #28
 8001782:	af00      	add	r7, sp, #0
 8001784:	60f8      	str	r0, [r7, #12]
 8001786:	60b9      	str	r1, [r7, #8]
 8001788:	607a      	str	r2, [r7, #4]
 800178a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001792:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001794:	7dfb      	ldrb	r3, [r7, #23]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d003      	beq.n	80017a2 <HAL_CAN_GetRxMessage+0x24>
 800179a:	7dfb      	ldrb	r3, [r7, #23]
 800179c:	2b02      	cmp	r3, #2
 800179e:	f040 80f3 	bne.w	8001988 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d10e      	bne.n	80017c6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	f003 0303 	and.w	r3, r3, #3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d116      	bne.n	80017e4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e0e7      	b.n	8001996 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	691b      	ldr	r3, [r3, #16]
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d107      	bne.n	80017e4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e0d8      	b.n	8001996 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	331b      	adds	r3, #27
 80017ec:	011b      	lsls	r3, r3, #4
 80017ee:	4413      	add	r3, r2
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0204 	and.w	r2, r3, #4
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10c      	bne.n	800181c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	331b      	adds	r3, #27
 800180a:	011b      	lsls	r3, r3, #4
 800180c:	4413      	add	r3, r2
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	0d5b      	lsrs	r3, r3, #21
 8001812:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	e00b      	b.n	8001834 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	331b      	adds	r3, #27
 8001824:	011b      	lsls	r3, r3, #4
 8001826:	4413      	add	r3, r2
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	08db      	lsrs	r3, r3, #3
 800182c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	331b      	adds	r3, #27
 800183c:	011b      	lsls	r3, r3, #4
 800183e:	4413      	add	r3, r2
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0202 	and.w	r2, r3, #2
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	331b      	adds	r3, #27
 8001852:	011b      	lsls	r3, r3, #4
 8001854:	4413      	add	r3, r2
 8001856:	3304      	adds	r3, #4
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 020f 	and.w	r2, r3, #15
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	331b      	adds	r3, #27
 800186a:	011b      	lsls	r3, r3, #4
 800186c:	4413      	add	r3, r2
 800186e:	3304      	adds	r3, #4
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	0a1b      	lsrs	r3, r3, #8
 8001874:	b2da      	uxtb	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	331b      	adds	r3, #27
 8001882:	011b      	lsls	r3, r3, #4
 8001884:	4413      	add	r3, r2
 8001886:	3304      	adds	r3, #4
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	0c1b      	lsrs	r3, r3, #16
 800188c:	b29a      	uxth	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	011b      	lsls	r3, r3, #4
 800189a:	4413      	add	r3, r2
 800189c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	011b      	lsls	r3, r3, #4
 80018b0:	4413      	add	r3, r2
 80018b2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	0a1a      	lsrs	r2, r3, #8
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	3301      	adds	r3, #1
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	011b      	lsls	r3, r3, #4
 80018ca:	4413      	add	r3, r2
 80018cc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	0c1a      	lsrs	r2, r3, #16
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	3302      	adds	r3, #2
 80018d8:	b2d2      	uxtb	r2, r2
 80018da:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	011b      	lsls	r3, r3, #4
 80018e4:	4413      	add	r3, r2
 80018e6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	0e1a      	lsrs	r2, r3, #24
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	3303      	adds	r3, #3
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	011b      	lsls	r3, r3, #4
 80018fe:	4413      	add	r3, r2
 8001900:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	3304      	adds	r3, #4
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	011b      	lsls	r3, r3, #4
 8001916:	4413      	add	r3, r2
 8001918:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	0a1a      	lsrs	r2, r3, #8
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	3305      	adds	r3, #5
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	011b      	lsls	r3, r3, #4
 8001930:	4413      	add	r3, r2
 8001932:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	0c1a      	lsrs	r2, r3, #16
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	3306      	adds	r3, #6
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	011b      	lsls	r3, r3, #4
 800194a:	4413      	add	r3, r2
 800194c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	0e1a      	lsrs	r2, r3, #24
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	3307      	adds	r3, #7
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d108      	bne.n	8001974 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68da      	ldr	r2, [r3, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f042 0220 	orr.w	r2, r2, #32
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	e007      	b.n	8001984 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	691a      	ldr	r2, [r3, #16]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f042 0220 	orr.w	r2, r2, #32
 8001982:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001984:	2300      	movs	r3, #0
 8001986:	e006      	b.n	8001996 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800198c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
  }
}
 8001996:	4618      	mov	r0, r3
 8001998:	371c      	adds	r7, #28
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b08a      	sub	sp, #40	@ 0x28
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	695b      	ldr	r3, [r3, #20]
 80019b4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80019de:	6a3b      	ldr	r3, [r7, #32]
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d07c      	beq.n	8001ae2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d023      	beq.n	8001a3a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2201      	movs	r2, #1
 80019f8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff f933 	bl	8000c70 <HAL_CAN_TxMailbox0CompleteCallback>
 8001a0a:	e016      	b.n	8001a3a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d004      	beq.n	8001a20 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a18:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a1e:	e00c      	b.n	8001a3a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	f003 0308 	and.w	r3, r3, #8
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d004      	beq.n	8001a34 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a30:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a32:	e002      	b.n	8001a3a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 f96b 	bl	8001d10 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d024      	beq.n	8001a8e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a4c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff f929 	bl	8000cb0 <HAL_CAN_TxMailbox1CompleteCallback>
 8001a5e:	e016      	b.n	8001a8e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d004      	beq.n	8001a74 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a70:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a72:	e00c      	b.n	8001a8e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d004      	beq.n	8001a88 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a84:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a86:	e002      	b.n	8001a8e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 f94b 	bl	8001d24 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d024      	beq.n	8001ae2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001aa0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d003      	beq.n	8001ab4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7ff f91f 	bl	8000cf0 <HAL_CAN_TxMailbox2CompleteCallback>
 8001ab2:	e016      	b.n	8001ae2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d004      	beq.n	8001ac8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ac4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ac6:	e00c      	b.n	8001ae2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d004      	beq.n	8001adc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ad8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ada:	e002      	b.n	8001ae2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 f92b 	bl	8001d38 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001ae2:	6a3b      	ldr	r3, [r7, #32]
 8001ae4:	f003 0308 	and.w	r3, r3, #8
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d00c      	beq.n	8001b06 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	f003 0310 	and.w	r3, r3, #16
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d007      	beq.n	8001b06 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001afc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2210      	movs	r2, #16
 8001b04:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001b06:	6a3b      	ldr	r3, [r7, #32]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d00b      	beq.n	8001b28 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d006      	beq.n	8001b28 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2208      	movs	r2, #8
 8001b20:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 f912 	bl	8001d4c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001b28:	6a3b      	ldr	r3, [r7, #32]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d009      	beq.n	8001b46 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	f003 0303 	and.w	r3, r3, #3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d002      	beq.n	8001b46 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff f8f5 	bl	8000d30 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b46:	6a3b      	ldr	r3, [r7, #32]
 8001b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d00c      	beq.n	8001b6a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	f003 0310 	and.w	r3, r3, #16
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d007      	beq.n	8001b6a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b60:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2210      	movs	r2, #16
 8001b68:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001b6a:	6a3b      	ldr	r3, [r7, #32]
 8001b6c:	f003 0320 	and.w	r3, r3, #32
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00b      	beq.n	8001b8c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	f003 0308 	and.w	r3, r3, #8
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d006      	beq.n	8001b8c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2208      	movs	r2, #8
 8001b84:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f8f4 	bl	8001d74 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001b8c:	6a3b      	ldr	r3, [r7, #32]
 8001b8e:	f003 0310 	and.w	r3, r3, #16
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d009      	beq.n	8001baa <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	f003 0303 	and.w	r3, r3, #3
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d002      	beq.n	8001baa <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 f8db 	bl	8001d60 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001baa:	6a3b      	ldr	r3, [r7, #32]
 8001bac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d00b      	beq.n	8001bcc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f003 0310 	and.w	r3, r3, #16
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d006      	beq.n	8001bcc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2210      	movs	r2, #16
 8001bc4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f8de 	bl	8001d88 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001bcc:	6a3b      	ldr	r3, [r7, #32]
 8001bce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00b      	beq.n	8001bee <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	f003 0308 	and.w	r3, r3, #8
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d006      	beq.n	8001bee <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2208      	movs	r2, #8
 8001be6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f8d7 	bl	8001d9c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001bee:	6a3b      	ldr	r3, [r7, #32]
 8001bf0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d07b      	beq.n	8001cf0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f003 0304 	and.w	r3, r3, #4
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d072      	beq.n	8001ce8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c02:	6a3b      	ldr	r3, [r7, #32]
 8001c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d008      	beq.n	8001c1e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c1e:	6a3b      	ldr	r3, [r7, #32]
 8001c20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d008      	beq.n	8001c3a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c34:	f043 0302 	orr.w	r3, r3, #2
 8001c38:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c3a:	6a3b      	ldr	r3, [r7, #32]
 8001c3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d008      	beq.n	8001c56 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c50:	f043 0304 	orr.w	r3, r3, #4
 8001c54:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c56:	6a3b      	ldr	r3, [r7, #32]
 8001c58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d043      	beq.n	8001ce8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d03e      	beq.n	8001ce8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c70:	2b60      	cmp	r3, #96	@ 0x60
 8001c72:	d02b      	beq.n	8001ccc <HAL_CAN_IRQHandler+0x32a>
 8001c74:	2b60      	cmp	r3, #96	@ 0x60
 8001c76:	d82e      	bhi.n	8001cd6 <HAL_CAN_IRQHandler+0x334>
 8001c78:	2b50      	cmp	r3, #80	@ 0x50
 8001c7a:	d022      	beq.n	8001cc2 <HAL_CAN_IRQHandler+0x320>
 8001c7c:	2b50      	cmp	r3, #80	@ 0x50
 8001c7e:	d82a      	bhi.n	8001cd6 <HAL_CAN_IRQHandler+0x334>
 8001c80:	2b40      	cmp	r3, #64	@ 0x40
 8001c82:	d019      	beq.n	8001cb8 <HAL_CAN_IRQHandler+0x316>
 8001c84:	2b40      	cmp	r3, #64	@ 0x40
 8001c86:	d826      	bhi.n	8001cd6 <HAL_CAN_IRQHandler+0x334>
 8001c88:	2b30      	cmp	r3, #48	@ 0x30
 8001c8a:	d010      	beq.n	8001cae <HAL_CAN_IRQHandler+0x30c>
 8001c8c:	2b30      	cmp	r3, #48	@ 0x30
 8001c8e:	d822      	bhi.n	8001cd6 <HAL_CAN_IRQHandler+0x334>
 8001c90:	2b10      	cmp	r3, #16
 8001c92:	d002      	beq.n	8001c9a <HAL_CAN_IRQHandler+0x2f8>
 8001c94:	2b20      	cmp	r3, #32
 8001c96:	d005      	beq.n	8001ca4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c98:	e01d      	b.n	8001cd6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9c:	f043 0308 	orr.w	r3, r3, #8
 8001ca0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ca2:	e019      	b.n	8001cd8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca6:	f043 0310 	orr.w	r3, r3, #16
 8001caa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cac:	e014      	b.n	8001cd8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb0:	f043 0320 	orr.w	r3, r3, #32
 8001cb4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cb6:	e00f      	b.n	8001cd8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cbe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cc0:	e00a      	b.n	8001cd8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cc8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cca:	e005      	b.n	8001cd8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cd2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cd4:	e000      	b.n	8001cd8 <HAL_CAN_IRQHandler+0x336>
            break;
 8001cd6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	699a      	ldr	r2, [r3, #24]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001ce6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2204      	movs	r2, #4
 8001cee:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d008      	beq.n	8001d08 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f854 	bl	8001db0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001d08:	bf00      	nop
 8001d0a:	3728      	adds	r7, #40	@ 0x28
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e08 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001de0:	4013      	ands	r3, r2
 8001de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001df0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001df6:	4a04      	ldr	r2, [pc, #16]	@ (8001e08 <__NVIC_SetPriorityGrouping+0x44>)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	60d3      	str	r3, [r2, #12]
}
 8001dfc:	bf00      	nop
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e10:	4b04      	ldr	r3, [pc, #16]	@ (8001e24 <__NVIC_GetPriorityGrouping+0x18>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	0a1b      	lsrs	r3, r3, #8
 8001e16:	f003 0307 	and.w	r3, r3, #7
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	db0b      	blt.n	8001e52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	f003 021f 	and.w	r2, r3, #31
 8001e40:	4907      	ldr	r1, [pc, #28]	@ (8001e60 <__NVIC_EnableIRQ+0x38>)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	095b      	lsrs	r3, r3, #5
 8001e48:	2001      	movs	r0, #1
 8001e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	e000e100 	.word	0xe000e100

08001e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	6039      	str	r1, [r7, #0]
 8001e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	db0a      	blt.n	8001e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	490c      	ldr	r1, [pc, #48]	@ (8001eb0 <__NVIC_SetPriority+0x4c>)
 8001e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e82:	0112      	lsls	r2, r2, #4
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	440b      	add	r3, r1
 8001e88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e8c:	e00a      	b.n	8001ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	4908      	ldr	r1, [pc, #32]	@ (8001eb4 <__NVIC_SetPriority+0x50>)
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	3b04      	subs	r3, #4
 8001e9c:	0112      	lsls	r2, r2, #4
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	761a      	strb	r2, [r3, #24]
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	e000e100 	.word	0xe000e100
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b089      	sub	sp, #36	@ 0x24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	f1c3 0307 	rsb	r3, r3, #7
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	bf28      	it	cs
 8001ed6:	2304      	movcs	r3, #4
 8001ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	3304      	adds	r3, #4
 8001ede:	2b06      	cmp	r3, #6
 8001ee0:	d902      	bls.n	8001ee8 <NVIC_EncodePriority+0x30>
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	3b03      	subs	r3, #3
 8001ee6:	e000      	b.n	8001eea <NVIC_EncodePriority+0x32>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eec:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43da      	mvns	r2, r3
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	401a      	ands	r2, r3
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f00:	f04f 31ff 	mov.w	r1, #4294967295
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0a:	43d9      	mvns	r1, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f10:	4313      	orrs	r3, r2
         );
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3724      	adds	r7, #36	@ 0x24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
	...

08001f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f30:	d301      	bcc.n	8001f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f32:	2301      	movs	r3, #1
 8001f34:	e00f      	b.n	8001f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f36:	4a0a      	ldr	r2, [pc, #40]	@ (8001f60 <SysTick_Config+0x40>)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f3e:	210f      	movs	r1, #15
 8001f40:	f04f 30ff 	mov.w	r0, #4294967295
 8001f44:	f7ff ff8e 	bl	8001e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f48:	4b05      	ldr	r3, [pc, #20]	@ (8001f60 <SysTick_Config+0x40>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f4e:	4b04      	ldr	r3, [pc, #16]	@ (8001f60 <SysTick_Config+0x40>)
 8001f50:	2207      	movs	r2, #7
 8001f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	e000e010 	.word	0xe000e010

08001f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff ff29 	bl	8001dc4 <__NVIC_SetPriorityGrouping>
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b086      	sub	sp, #24
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	4603      	mov	r3, r0
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	607a      	str	r2, [r7, #4]
 8001f86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f8c:	f7ff ff3e 	bl	8001e0c <__NVIC_GetPriorityGrouping>
 8001f90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	68b9      	ldr	r1, [r7, #8]
 8001f96:	6978      	ldr	r0, [r7, #20]
 8001f98:	f7ff ff8e 	bl	8001eb8 <NVIC_EncodePriority>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff5d 	bl	8001e64 <__NVIC_SetPriority>
}
 8001faa:	bf00      	nop
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	4603      	mov	r3, r0
 8001fba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff ff31 	bl	8001e28 <__NVIC_EnableIRQ>
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff ffa2 	bl	8001f20 <SysTick_Config>
 8001fdc:	4603      	mov	r3, r0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	d106      	bne.n	8002004 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001ff6:	4b09      	ldr	r3, [pc, #36]	@ (800201c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a08      	ldr	r2, [pc, #32]	@ (800201c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001ffc:	f043 0304 	orr.w	r3, r3, #4
 8002000:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8002002:	e005      	b.n	8002010 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002004:	4b05      	ldr	r3, [pc, #20]	@ (800201c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a04      	ldr	r2, [pc, #16]	@ (800201c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800200a:	f023 0304 	bic.w	r3, r3, #4
 800200e:	6013      	str	r3, [r2, #0]
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	e000e010 	.word	0xe000e010

08002020 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002024:	f000 f802 	bl	800202c <HAL_SYSTICK_Callback>
}
 8002028:	bf00      	nop
 800202a:	bd80      	pop	{r7, pc}

0800202c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
	...

0800203c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002048:	f7ff fa8e 	bl	8001568 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e099      	b.n	800218c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2202      	movs	r2, #2
 800205c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0201 	bic.w	r2, r2, #1
 8002076:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002078:	e00f      	b.n	800209a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800207a:	f7ff fa75 	bl	8001568 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b05      	cmp	r3, #5
 8002086:	d908      	bls.n	800209a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2220      	movs	r2, #32
 800208c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2203      	movs	r2, #3
 8002092:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e078      	b.n	800218c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1e8      	bne.n	800207a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	4b38      	ldr	r3, [pc, #224]	@ (8002194 <HAL_DMA_Init+0x158>)
 80020b4:	4013      	ands	r3, r2
 80020b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f0:	2b04      	cmp	r3, #4
 80020f2:	d107      	bne.n	8002104 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fc:	4313      	orrs	r3, r2
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	4313      	orrs	r3, r2
 8002102:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	f023 0307 	bic.w	r3, r3, #7
 800211a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	4313      	orrs	r3, r2
 8002124:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800212a:	2b04      	cmp	r3, #4
 800212c:	d117      	bne.n	800215e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	4313      	orrs	r3, r2
 8002136:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00e      	beq.n	800215e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 f907 	bl	8002354 <DMA_CheckFifoParam>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d008      	beq.n	800215e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2240      	movs	r2, #64	@ 0x40
 8002150:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800215a:	2301      	movs	r3, #1
 800215c:	e016      	b.n	800218c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f8be 	bl	80022e8 <DMA_CalcBaseAndBitshift>
 800216c:	4603      	mov	r3, r0
 800216e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002174:	223f      	movs	r2, #63	@ 0x3f
 8002176:	409a      	lsls	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	f010803f 	.word	0xf010803f

08002198 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
 80021a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021a6:	2300      	movs	r3, #0
 80021a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d101      	bne.n	80021be <HAL_DMA_Start_IT+0x26>
 80021ba:	2302      	movs	r3, #2
 80021bc:	e040      	b.n	8002240 <HAL_DMA_Start_IT+0xa8>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d12f      	bne.n	8002232 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2202      	movs	r2, #2
 80021d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	68b9      	ldr	r1, [r7, #8]
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f000 f850 	bl	800228c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f0:	223f      	movs	r2, #63	@ 0x3f
 80021f2:	409a      	lsls	r2, r3
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 0216 	orr.w	r2, r2, #22
 8002206:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220c:	2b00      	cmp	r3, #0
 800220e:	d007      	beq.n	8002220 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 0208 	orr.w	r2, r2, #8
 800221e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f042 0201 	orr.w	r2, r2, #1
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	e005      	b.n	800223e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800223a:	2302      	movs	r3, #2
 800223c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800223e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d004      	beq.n	8002266 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2280      	movs	r2, #128	@ 0x80
 8002260:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e00c      	b.n	8002280 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2205      	movs	r2, #5
 800226a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0201 	bic.w	r2, r2, #1
 800227c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
 8002298:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80022a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	2b40      	cmp	r3, #64	@ 0x40
 80022b8:	d108      	bne.n	80022cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022ca:	e007      	b.n	80022dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	60da      	str	r2, [r3, #12]
}
 80022dc:	bf00      	nop
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	3b10      	subs	r3, #16
 80022f8:	4a14      	ldr	r2, [pc, #80]	@ (800234c <DMA_CalcBaseAndBitshift+0x64>)
 80022fa:	fba2 2303 	umull	r2, r3, r2, r3
 80022fe:	091b      	lsrs	r3, r3, #4
 8002300:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002302:	4a13      	ldr	r2, [pc, #76]	@ (8002350 <DMA_CalcBaseAndBitshift+0x68>)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4413      	add	r3, r2
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	461a      	mov	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2b03      	cmp	r3, #3
 8002314:	d909      	bls.n	800232a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800231e:	f023 0303 	bic.w	r3, r3, #3
 8002322:	1d1a      	adds	r2, r3, #4
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	659a      	str	r2, [r3, #88]	@ 0x58
 8002328:	e007      	b.n	800233a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002332:	f023 0303 	bic.w	r3, r3, #3
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800233e:	4618      	mov	r0, r3
 8002340:	3714      	adds	r7, #20
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	aaaaaaab 	.word	0xaaaaaaab
 8002350:	08005ccc 	.word	0x08005ccc

08002354 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800235c:	2300      	movs	r3, #0
 800235e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002364:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d11f      	bne.n	80023ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	2b03      	cmp	r3, #3
 8002372:	d856      	bhi.n	8002422 <DMA_CheckFifoParam+0xce>
 8002374:	a201      	add	r2, pc, #4	@ (adr r2, 800237c <DMA_CheckFifoParam+0x28>)
 8002376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800237a:	bf00      	nop
 800237c:	0800238d 	.word	0x0800238d
 8002380:	0800239f 	.word	0x0800239f
 8002384:	0800238d 	.word	0x0800238d
 8002388:	08002423 	.word	0x08002423
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002390:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d046      	beq.n	8002426 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800239c:	e043      	b.n	8002426 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023a6:	d140      	bne.n	800242a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ac:	e03d      	b.n	800242a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023b6:	d121      	bne.n	80023fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	d837      	bhi.n	800242e <DMA_CheckFifoParam+0xda>
 80023be:	a201      	add	r2, pc, #4	@ (adr r2, 80023c4 <DMA_CheckFifoParam+0x70>)
 80023c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c4:	080023d5 	.word	0x080023d5
 80023c8:	080023db 	.word	0x080023db
 80023cc:	080023d5 	.word	0x080023d5
 80023d0:	080023ed 	.word	0x080023ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	73fb      	strb	r3, [r7, #15]
      break;
 80023d8:	e030      	b.n	800243c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d025      	beq.n	8002432 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ea:	e022      	b.n	8002432 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023f4:	d11f      	bne.n	8002436 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023fa:	e01c      	b.n	8002436 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d903      	bls.n	800240a <DMA_CheckFifoParam+0xb6>
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2b03      	cmp	r3, #3
 8002406:	d003      	beq.n	8002410 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002408:	e018      	b.n	800243c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	73fb      	strb	r3, [r7, #15]
      break;
 800240e:	e015      	b.n	800243c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002414:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00e      	beq.n	800243a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	73fb      	strb	r3, [r7, #15]
      break;
 8002420:	e00b      	b.n	800243a <DMA_CheckFifoParam+0xe6>
      break;
 8002422:	bf00      	nop
 8002424:	e00a      	b.n	800243c <DMA_CheckFifoParam+0xe8>
      break;
 8002426:	bf00      	nop
 8002428:	e008      	b.n	800243c <DMA_CheckFifoParam+0xe8>
      break;
 800242a:	bf00      	nop
 800242c:	e006      	b.n	800243c <DMA_CheckFifoParam+0xe8>
      break;
 800242e:	bf00      	nop
 8002430:	e004      	b.n	800243c <DMA_CheckFifoParam+0xe8>
      break;
 8002432:	bf00      	nop
 8002434:	e002      	b.n	800243c <DMA_CheckFifoParam+0xe8>
      break;   
 8002436:	bf00      	nop
 8002438:	e000      	b.n	800243c <DMA_CheckFifoParam+0xe8>
      break;
 800243a:	bf00      	nop
    }
  } 
  
  return status; 
 800243c:	7bfb      	ldrb	r3, [r7, #15]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3714      	adds	r7, #20
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop

0800244c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800244c:	b480      	push	{r7}
 800244e:	b089      	sub	sp, #36	@ 0x24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800245a:	2300      	movs	r3, #0
 800245c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800245e:	2300      	movs	r3, #0
 8002460:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
 8002466:	e165      	b.n	8002734 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002468:	2201      	movs	r2, #1
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	4013      	ands	r3, r2
 800247a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	429a      	cmp	r2, r3
 8002482:	f040 8154 	bne.w	800272e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	2b01      	cmp	r3, #1
 8002490:	d005      	beq.n	800249e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800249a:	2b02      	cmp	r3, #2
 800249c:	d130      	bne.n	8002500 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	2203      	movs	r2, #3
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43db      	mvns	r3, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4013      	ands	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	68da      	ldr	r2, [r3, #12]
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024d4:	2201      	movs	r2, #1
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	f003 0201 	and.w	r2, r3, #1
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	2b03      	cmp	r3, #3
 800250a:	d017      	beq.n	800253c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	2203      	movs	r2, #3
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 0303 	and.w	r3, r3, #3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d123      	bne.n	8002590 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	08da      	lsrs	r2, r3, #3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3208      	adds	r2, #8
 8002550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002554:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	220f      	movs	r2, #15
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	691a      	ldr	r2, [r3, #16]
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	08da      	lsrs	r2, r3, #3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3208      	adds	r2, #8
 800258a:	69b9      	ldr	r1, [r7, #24]
 800258c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	2203      	movs	r2, #3
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f003 0203 	and.w	r2, r3, #3
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 80ae 	beq.w	800272e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	4b5d      	ldr	r3, [pc, #372]	@ (800274c <HAL_GPIO_Init+0x300>)
 80025d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025da:	4a5c      	ldr	r2, [pc, #368]	@ (800274c <HAL_GPIO_Init+0x300>)
 80025dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80025e2:	4b5a      	ldr	r3, [pc, #360]	@ (800274c <HAL_GPIO_Init+0x300>)
 80025e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ee:	4a58      	ldr	r2, [pc, #352]	@ (8002750 <HAL_GPIO_Init+0x304>)
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	089b      	lsrs	r3, r3, #2
 80025f4:	3302      	adds	r3, #2
 80025f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	220f      	movs	r2, #15
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43db      	mvns	r3, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4013      	ands	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a4f      	ldr	r2, [pc, #316]	@ (8002754 <HAL_GPIO_Init+0x308>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d025      	beq.n	8002666 <HAL_GPIO_Init+0x21a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a4e      	ldr	r2, [pc, #312]	@ (8002758 <HAL_GPIO_Init+0x30c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d01f      	beq.n	8002662 <HAL_GPIO_Init+0x216>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a4d      	ldr	r2, [pc, #308]	@ (800275c <HAL_GPIO_Init+0x310>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d019      	beq.n	800265e <HAL_GPIO_Init+0x212>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a4c      	ldr	r2, [pc, #304]	@ (8002760 <HAL_GPIO_Init+0x314>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d013      	beq.n	800265a <HAL_GPIO_Init+0x20e>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a4b      	ldr	r2, [pc, #300]	@ (8002764 <HAL_GPIO_Init+0x318>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d00d      	beq.n	8002656 <HAL_GPIO_Init+0x20a>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a4a      	ldr	r2, [pc, #296]	@ (8002768 <HAL_GPIO_Init+0x31c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d007      	beq.n	8002652 <HAL_GPIO_Init+0x206>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a49      	ldr	r2, [pc, #292]	@ (800276c <HAL_GPIO_Init+0x320>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d101      	bne.n	800264e <HAL_GPIO_Init+0x202>
 800264a:	2306      	movs	r3, #6
 800264c:	e00c      	b.n	8002668 <HAL_GPIO_Init+0x21c>
 800264e:	2307      	movs	r3, #7
 8002650:	e00a      	b.n	8002668 <HAL_GPIO_Init+0x21c>
 8002652:	2305      	movs	r3, #5
 8002654:	e008      	b.n	8002668 <HAL_GPIO_Init+0x21c>
 8002656:	2304      	movs	r3, #4
 8002658:	e006      	b.n	8002668 <HAL_GPIO_Init+0x21c>
 800265a:	2303      	movs	r3, #3
 800265c:	e004      	b.n	8002668 <HAL_GPIO_Init+0x21c>
 800265e:	2302      	movs	r3, #2
 8002660:	e002      	b.n	8002668 <HAL_GPIO_Init+0x21c>
 8002662:	2301      	movs	r3, #1
 8002664:	e000      	b.n	8002668 <HAL_GPIO_Init+0x21c>
 8002666:	2300      	movs	r3, #0
 8002668:	69fa      	ldr	r2, [r7, #28]
 800266a:	f002 0203 	and.w	r2, r2, #3
 800266e:	0092      	lsls	r2, r2, #2
 8002670:	4093      	lsls	r3, r2
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4313      	orrs	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002678:	4935      	ldr	r1, [pc, #212]	@ (8002750 <HAL_GPIO_Init+0x304>)
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	089b      	lsrs	r3, r3, #2
 800267e:	3302      	adds	r3, #2
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002686:	4b3a      	ldr	r3, [pc, #232]	@ (8002770 <HAL_GPIO_Init+0x324>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	43db      	mvns	r3, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4013      	ands	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026aa:	4a31      	ldr	r2, [pc, #196]	@ (8002770 <HAL_GPIO_Init+0x324>)
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026b0:	4b2f      	ldr	r3, [pc, #188]	@ (8002770 <HAL_GPIO_Init+0x324>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	43db      	mvns	r3, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026d4:	4a26      	ldr	r2, [pc, #152]	@ (8002770 <HAL_GPIO_Init+0x324>)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026da:	4b25      	ldr	r3, [pc, #148]	@ (8002770 <HAL_GPIO_Init+0x324>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	43db      	mvns	r3, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4013      	ands	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002770 <HAL_GPIO_Init+0x324>)
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002704:	4b1a      	ldr	r3, [pc, #104]	@ (8002770 <HAL_GPIO_Init+0x324>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	43db      	mvns	r3, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4013      	ands	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4313      	orrs	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002728:	4a11      	ldr	r2, [pc, #68]	@ (8002770 <HAL_GPIO_Init+0x324>)
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3301      	adds	r3, #1
 8002732:	61fb      	str	r3, [r7, #28]
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	2b0f      	cmp	r3, #15
 8002738:	f67f ae96 	bls.w	8002468 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800273c:	bf00      	nop
 800273e:	bf00      	nop
 8002740:	3724      	adds	r7, #36	@ 0x24
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	40023800 	.word	0x40023800
 8002750:	40013800 	.word	0x40013800
 8002754:	40020000 	.word	0x40020000
 8002758:	40020400 	.word	0x40020400
 800275c:	40020800 	.word	0x40020800
 8002760:	40020c00 	.word	0x40020c00
 8002764:	40021000 	.word	0x40021000
 8002768:	40021400 	.word	0x40021400
 800276c:	40021800 	.word	0x40021800
 8002770:	40013c00 	.word	0x40013c00

08002774 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002786:	887a      	ldrh	r2, [r7, #2]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4013      	ands	r3, r2
 800278c:	041a      	lsls	r2, r3, #16
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	43d9      	mvns	r1, r3
 8002792:	887b      	ldrh	r3, [r7, #2]
 8002794:	400b      	ands	r3, r1
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	619a      	str	r2, [r3, #24]
}
 800279c:	bf00      	nop
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80027b2:	4b08      	ldr	r3, [pc, #32]	@ (80027d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027b4:	695a      	ldr	r2, [r3, #20]
 80027b6:	88fb      	ldrh	r3, [r7, #6]
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d006      	beq.n	80027cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027be:	4a05      	ldr	r2, [pc, #20]	@ (80027d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027c0:	88fb      	ldrh	r3, [r7, #6]
 80027c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027c4:	88fb      	ldrh	r3, [r7, #6]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 f806 	bl	80027d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80027cc:	bf00      	nop
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40013c00 	.word	0x40013c00

080027d8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
	...

080027f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e0cc      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002804:	4b68      	ldr	r3, [pc, #416]	@ (80029a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 030f 	and.w	r3, r3, #15
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d90c      	bls.n	800282c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002812:	4b65      	ldr	r3, [pc, #404]	@ (80029a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800281a:	4b63      	ldr	r3, [pc, #396]	@ (80029a8 <HAL_RCC_ClockConfig+0x1b8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d001      	beq.n	800282c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e0b8      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d020      	beq.n	800287a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	d005      	beq.n	8002850 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002844:	4b59      	ldr	r3, [pc, #356]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	4a58      	ldr	r2, [pc, #352]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800284e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0308 	and.w	r3, r3, #8
 8002858:	2b00      	cmp	r3, #0
 800285a:	d005      	beq.n	8002868 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800285c:	4b53      	ldr	r3, [pc, #332]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	4a52      	ldr	r2, [pc, #328]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002866:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002868:	4b50      	ldr	r3, [pc, #320]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	494d      	ldr	r1, [pc, #308]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002876:	4313      	orrs	r3, r2
 8002878:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d044      	beq.n	8002910 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d107      	bne.n	800289e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288e:	4b47      	ldr	r3, [pc, #284]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d119      	bne.n	80028ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e07f      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d003      	beq.n	80028ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	d107      	bne.n	80028be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ae:	4b3f      	ldr	r3, [pc, #252]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d109      	bne.n	80028ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e06f      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028be:	4b3b      	ldr	r3, [pc, #236]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e067      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ce:	4b37      	ldr	r3, [pc, #220]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f023 0203 	bic.w	r2, r3, #3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	4934      	ldr	r1, [pc, #208]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028e0:	f7fe fe42 	bl	8001568 <HAL_GetTick>
 80028e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e6:	e00a      	b.n	80028fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e8:	f7fe fe3e 	bl	8001568 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e04f      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fe:	4b2b      	ldr	r3, [pc, #172]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 020c 	and.w	r2, r3, #12
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	429a      	cmp	r2, r3
 800290e:	d1eb      	bne.n	80028e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002910:	4b25      	ldr	r3, [pc, #148]	@ (80029a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 030f 	and.w	r3, r3, #15
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	d20c      	bcs.n	8002938 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291e:	4b22      	ldr	r3, [pc, #136]	@ (80029a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002926:	4b20      	ldr	r3, [pc, #128]	@ (80029a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d001      	beq.n	8002938 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e032      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	d008      	beq.n	8002956 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002944:	4b19      	ldr	r3, [pc, #100]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	4916      	ldr	r1, [pc, #88]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	4313      	orrs	r3, r2
 8002954:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b00      	cmp	r3, #0
 8002960:	d009      	beq.n	8002976 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002962:	4b12      	ldr	r3, [pc, #72]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	490e      	ldr	r1, [pc, #56]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	4313      	orrs	r3, r2
 8002974:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002976:	f000 f855 	bl	8002a24 <HAL_RCC_GetSysClockFreq>
 800297a:	4602      	mov	r2, r0
 800297c:	4b0b      	ldr	r3, [pc, #44]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	091b      	lsrs	r3, r3, #4
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	490a      	ldr	r1, [pc, #40]	@ (80029b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002988:	5ccb      	ldrb	r3, [r1, r3]
 800298a:	fa22 f303 	lsr.w	r3, r2, r3
 800298e:	4a09      	ldr	r2, [pc, #36]	@ (80029b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002992:	4b09      	ldr	r3, [pc, #36]	@ (80029b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f7fe fda2 	bl	80014e0 <HAL_InitTick>

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40023c00 	.word	0x40023c00
 80029ac:	40023800 	.word	0x40023800
 80029b0:	08005cb4 	.word	0x08005cb4
 80029b4:	20000004 	.word	0x20000004
 80029b8:	20000008 	.word	0x20000008

080029bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029c0:	4b03      	ldr	r3, [pc, #12]	@ (80029d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80029c2:	681b      	ldr	r3, [r3, #0]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	20000004 	.word	0x20000004

080029d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029d8:	f7ff fff0 	bl	80029bc <HAL_RCC_GetHCLKFreq>
 80029dc:	4602      	mov	r2, r0
 80029de:	4b05      	ldr	r3, [pc, #20]	@ (80029f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	0a9b      	lsrs	r3, r3, #10
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	4903      	ldr	r1, [pc, #12]	@ (80029f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ea:	5ccb      	ldrb	r3, [r1, r3]
 80029ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40023800 	.word	0x40023800
 80029f8:	08005cc4 	.word	0x08005cc4

080029fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a00:	f7ff ffdc 	bl	80029bc <HAL_RCC_GetHCLKFreq>
 8002a04:	4602      	mov	r2, r0
 8002a06:	4b05      	ldr	r3, [pc, #20]	@ (8002a1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	0b5b      	lsrs	r3, r3, #13
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	4903      	ldr	r1, [pc, #12]	@ (8002a20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a12:	5ccb      	ldrb	r3, [r1, r3]
 8002a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	08005cc4 	.word	0x08005cc4

08002a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a28:	b0ae      	sub	sp, #184	@ 0xb8
 8002a2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a4a:	4bcb      	ldr	r3, [pc, #812]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
 8002a52:	2b0c      	cmp	r3, #12
 8002a54:	f200 8206 	bhi.w	8002e64 <HAL_RCC_GetSysClockFreq+0x440>
 8002a58:	a201      	add	r2, pc, #4	@ (adr r2, 8002a60 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a5e:	bf00      	nop
 8002a60:	08002a95 	.word	0x08002a95
 8002a64:	08002e65 	.word	0x08002e65
 8002a68:	08002e65 	.word	0x08002e65
 8002a6c:	08002e65 	.word	0x08002e65
 8002a70:	08002a9d 	.word	0x08002a9d
 8002a74:	08002e65 	.word	0x08002e65
 8002a78:	08002e65 	.word	0x08002e65
 8002a7c:	08002e65 	.word	0x08002e65
 8002a80:	08002aa5 	.word	0x08002aa5
 8002a84:	08002e65 	.word	0x08002e65
 8002a88:	08002e65 	.word	0x08002e65
 8002a8c:	08002e65 	.word	0x08002e65
 8002a90:	08002c95 	.word	0x08002c95
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a94:	4bb9      	ldr	r3, [pc, #740]	@ (8002d7c <HAL_RCC_GetSysClockFreq+0x358>)
 8002a96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002a9a:	e1e7      	b.n	8002e6c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a9c:	4bb8      	ldr	r3, [pc, #736]	@ (8002d80 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002a9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002aa2:	e1e3      	b.n	8002e6c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002aa4:	4bb4      	ldr	r3, [pc, #720]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x354>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002aac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ab0:	4bb1      	ldr	r3, [pc, #708]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d071      	beq.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002abc:	4bae      	ldr	r3, [pc, #696]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x354>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	099b      	lsrs	r3, r3, #6
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002ac8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002acc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ad4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002ad8:	2300      	movs	r3, #0
 8002ada:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002ade:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002ae2:	4622      	mov	r2, r4
 8002ae4:	462b      	mov	r3, r5
 8002ae6:	f04f 0000 	mov.w	r0, #0
 8002aea:	f04f 0100 	mov.w	r1, #0
 8002aee:	0159      	lsls	r1, r3, #5
 8002af0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002af4:	0150      	lsls	r0, r2, #5
 8002af6:	4602      	mov	r2, r0
 8002af8:	460b      	mov	r3, r1
 8002afa:	4621      	mov	r1, r4
 8002afc:	1a51      	subs	r1, r2, r1
 8002afe:	6439      	str	r1, [r7, #64]	@ 0x40
 8002b00:	4629      	mov	r1, r5
 8002b02:	eb63 0301 	sbc.w	r3, r3, r1
 8002b06:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b08:	f04f 0200 	mov.w	r2, #0
 8002b0c:	f04f 0300 	mov.w	r3, #0
 8002b10:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002b14:	4649      	mov	r1, r9
 8002b16:	018b      	lsls	r3, r1, #6
 8002b18:	4641      	mov	r1, r8
 8002b1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b1e:	4641      	mov	r1, r8
 8002b20:	018a      	lsls	r2, r1, #6
 8002b22:	4641      	mov	r1, r8
 8002b24:	1a51      	subs	r1, r2, r1
 8002b26:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b28:	4649      	mov	r1, r9
 8002b2a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	f04f 0300 	mov.w	r3, #0
 8002b38:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002b3c:	4649      	mov	r1, r9
 8002b3e:	00cb      	lsls	r3, r1, #3
 8002b40:	4641      	mov	r1, r8
 8002b42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b46:	4641      	mov	r1, r8
 8002b48:	00ca      	lsls	r2, r1, #3
 8002b4a:	4610      	mov	r0, r2
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4603      	mov	r3, r0
 8002b50:	4622      	mov	r2, r4
 8002b52:	189b      	adds	r3, r3, r2
 8002b54:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b56:	462b      	mov	r3, r5
 8002b58:	460a      	mov	r2, r1
 8002b5a:	eb42 0303 	adc.w	r3, r2, r3
 8002b5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b6c:	4629      	mov	r1, r5
 8002b6e:	024b      	lsls	r3, r1, #9
 8002b70:	4621      	mov	r1, r4
 8002b72:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b76:	4621      	mov	r1, r4
 8002b78:	024a      	lsls	r2, r1, #9
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b82:	2200      	movs	r2, #0
 8002b84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002b88:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002b8c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002b90:	f7fd fb96 	bl	80002c0 <__aeabi_uldivmod>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	4613      	mov	r3, r2
 8002b9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b9e:	e067      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ba0:	4b75      	ldr	r3, [pc, #468]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	099b      	lsrs	r3, r3, #6
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002bac:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002bb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002bb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bb8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002bba:	2300      	movs	r3, #0
 8002bbc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002bbe:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002bc2:	4622      	mov	r2, r4
 8002bc4:	462b      	mov	r3, r5
 8002bc6:	f04f 0000 	mov.w	r0, #0
 8002bca:	f04f 0100 	mov.w	r1, #0
 8002bce:	0159      	lsls	r1, r3, #5
 8002bd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bd4:	0150      	lsls	r0, r2, #5
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	460b      	mov	r3, r1
 8002bda:	4621      	mov	r1, r4
 8002bdc:	1a51      	subs	r1, r2, r1
 8002bde:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002be0:	4629      	mov	r1, r5
 8002be2:	eb63 0301 	sbc.w	r3, r3, r1
 8002be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	f04f 0300 	mov.w	r3, #0
 8002bf0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002bf4:	4649      	mov	r1, r9
 8002bf6:	018b      	lsls	r3, r1, #6
 8002bf8:	4641      	mov	r1, r8
 8002bfa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bfe:	4641      	mov	r1, r8
 8002c00:	018a      	lsls	r2, r1, #6
 8002c02:	4641      	mov	r1, r8
 8002c04:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c08:	4649      	mov	r1, r9
 8002c0a:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c0e:	f04f 0200 	mov.w	r2, #0
 8002c12:	f04f 0300 	mov.w	r3, #0
 8002c16:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c1a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c22:	4692      	mov	sl, r2
 8002c24:	469b      	mov	fp, r3
 8002c26:	4623      	mov	r3, r4
 8002c28:	eb1a 0303 	adds.w	r3, sl, r3
 8002c2c:	623b      	str	r3, [r7, #32]
 8002c2e:	462b      	mov	r3, r5
 8002c30:	eb4b 0303 	adc.w	r3, fp, r3
 8002c34:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	f04f 0300 	mov.w	r3, #0
 8002c3e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002c42:	4629      	mov	r1, r5
 8002c44:	028b      	lsls	r3, r1, #10
 8002c46:	4621      	mov	r1, r4
 8002c48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c4c:	4621      	mov	r1, r4
 8002c4e:	028a      	lsls	r2, r1, #10
 8002c50:	4610      	mov	r0, r2
 8002c52:	4619      	mov	r1, r3
 8002c54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c58:	2200      	movs	r2, #0
 8002c5a:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c5c:	677a      	str	r2, [r7, #116]	@ 0x74
 8002c5e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002c62:	f7fd fb2d 	bl	80002c0 <__aeabi_uldivmod>
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c70:	4b41      	ldr	r3, [pc, #260]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	0c1b      	lsrs	r3, r3, #16
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002c82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c92:	e0eb      	b.n	8002e6c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c94:	4b38      	ldr	r3, [pc, #224]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ca0:	4b35      	ldr	r3, [pc, #212]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d06b      	beq.n	8002d84 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cac:	4b32      	ldr	r3, [pc, #200]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	099b      	lsrs	r3, r3, #6
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002cb6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002cb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cbe:	663b      	str	r3, [r7, #96]	@ 0x60
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	667b      	str	r3, [r7, #100]	@ 0x64
 8002cc4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002cc8:	4622      	mov	r2, r4
 8002cca:	462b      	mov	r3, r5
 8002ccc:	f04f 0000 	mov.w	r0, #0
 8002cd0:	f04f 0100 	mov.w	r1, #0
 8002cd4:	0159      	lsls	r1, r3, #5
 8002cd6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cda:	0150      	lsls	r0, r2, #5
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4621      	mov	r1, r4
 8002ce2:	1a51      	subs	r1, r2, r1
 8002ce4:	61b9      	str	r1, [r7, #24]
 8002ce6:	4629      	mov	r1, r5
 8002ce8:	eb63 0301 	sbc.w	r3, r3, r1
 8002cec:	61fb      	str	r3, [r7, #28]
 8002cee:	f04f 0200 	mov.w	r2, #0
 8002cf2:	f04f 0300 	mov.w	r3, #0
 8002cf6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002cfa:	4659      	mov	r1, fp
 8002cfc:	018b      	lsls	r3, r1, #6
 8002cfe:	4651      	mov	r1, sl
 8002d00:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d04:	4651      	mov	r1, sl
 8002d06:	018a      	lsls	r2, r1, #6
 8002d08:	4651      	mov	r1, sl
 8002d0a:	ebb2 0801 	subs.w	r8, r2, r1
 8002d0e:	4659      	mov	r1, fp
 8002d10:	eb63 0901 	sbc.w	r9, r3, r1
 8002d14:	f04f 0200 	mov.w	r2, #0
 8002d18:	f04f 0300 	mov.w	r3, #0
 8002d1c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d20:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d24:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d28:	4690      	mov	r8, r2
 8002d2a:	4699      	mov	r9, r3
 8002d2c:	4623      	mov	r3, r4
 8002d2e:	eb18 0303 	adds.w	r3, r8, r3
 8002d32:	613b      	str	r3, [r7, #16]
 8002d34:	462b      	mov	r3, r5
 8002d36:	eb49 0303 	adc.w	r3, r9, r3
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	f04f 0200 	mov.w	r2, #0
 8002d40:	f04f 0300 	mov.w	r3, #0
 8002d44:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002d48:	4629      	mov	r1, r5
 8002d4a:	024b      	lsls	r3, r1, #9
 8002d4c:	4621      	mov	r1, r4
 8002d4e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d52:	4621      	mov	r1, r4
 8002d54:	024a      	lsls	r2, r1, #9
 8002d56:	4610      	mov	r0, r2
 8002d58:	4619      	mov	r1, r3
 8002d5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d5e:	2200      	movs	r2, #0
 8002d60:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002d62:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002d64:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d68:	f7fd faaa 	bl	80002c0 <__aeabi_uldivmod>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4613      	mov	r3, r2
 8002d72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d76:	e065      	b.n	8002e44 <HAL_RCC_GetSysClockFreq+0x420>
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	00f42400 	.word	0x00f42400
 8002d80:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d84:	4b3d      	ldr	r3, [pc, #244]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x458>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	099b      	lsrs	r3, r3, #6
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	4611      	mov	r1, r2
 8002d90:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d94:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d96:	2300      	movs	r3, #0
 8002d98:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d9a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002d9e:	4642      	mov	r2, r8
 8002da0:	464b      	mov	r3, r9
 8002da2:	f04f 0000 	mov.w	r0, #0
 8002da6:	f04f 0100 	mov.w	r1, #0
 8002daa:	0159      	lsls	r1, r3, #5
 8002dac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002db0:	0150      	lsls	r0, r2, #5
 8002db2:	4602      	mov	r2, r0
 8002db4:	460b      	mov	r3, r1
 8002db6:	4641      	mov	r1, r8
 8002db8:	1a51      	subs	r1, r2, r1
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	4649      	mov	r1, r9
 8002dbe:	eb63 0301 	sbc.w	r3, r3, r1
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	f04f 0200 	mov.w	r2, #0
 8002dc8:	f04f 0300 	mov.w	r3, #0
 8002dcc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002dd0:	4659      	mov	r1, fp
 8002dd2:	018b      	lsls	r3, r1, #6
 8002dd4:	4651      	mov	r1, sl
 8002dd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dda:	4651      	mov	r1, sl
 8002ddc:	018a      	lsls	r2, r1, #6
 8002dde:	4651      	mov	r1, sl
 8002de0:	1a54      	subs	r4, r2, r1
 8002de2:	4659      	mov	r1, fp
 8002de4:	eb63 0501 	sbc.w	r5, r3, r1
 8002de8:	f04f 0200 	mov.w	r2, #0
 8002dec:	f04f 0300 	mov.w	r3, #0
 8002df0:	00eb      	lsls	r3, r5, #3
 8002df2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002df6:	00e2      	lsls	r2, r4, #3
 8002df8:	4614      	mov	r4, r2
 8002dfa:	461d      	mov	r5, r3
 8002dfc:	4643      	mov	r3, r8
 8002dfe:	18e3      	adds	r3, r4, r3
 8002e00:	603b      	str	r3, [r7, #0]
 8002e02:	464b      	mov	r3, r9
 8002e04:	eb45 0303 	adc.w	r3, r5, r3
 8002e08:	607b      	str	r3, [r7, #4]
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	f04f 0300 	mov.w	r3, #0
 8002e12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e16:	4629      	mov	r1, r5
 8002e18:	028b      	lsls	r3, r1, #10
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e20:	4621      	mov	r1, r4
 8002e22:	028a      	lsls	r2, r1, #10
 8002e24:	4610      	mov	r0, r2
 8002e26:	4619      	mov	r1, r3
 8002e28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e30:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002e32:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002e36:	f7fd fa43 	bl	80002c0 <__aeabi_uldivmod>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	4613      	mov	r3, r2
 8002e40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002e44:	4b0d      	ldr	r3, [pc, #52]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x458>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	0f1b      	lsrs	r3, r3, #28
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8002e52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002e56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e62:	e003      	b.n	8002e6c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e64:	4b06      	ldr	r3, [pc, #24]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002e66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e6a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	37b8      	adds	r7, #184	@ 0xb8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	00f42400 	.word	0x00f42400

08002e84 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e28d      	b.n	80033b2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f000 8083 	beq.w	8002faa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ea4:	4b94      	ldr	r3, [pc, #592]	@ (80030f8 <HAL_RCC_OscConfig+0x274>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 030c 	and.w	r3, r3, #12
 8002eac:	2b04      	cmp	r3, #4
 8002eae:	d019      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002eb0:	4b91      	ldr	r3, [pc, #580]	@ (80030f8 <HAL_RCC_OscConfig+0x274>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d106      	bne.n	8002eca <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ebc:	4b8e      	ldr	r3, [pc, #568]	@ (80030f8 <HAL_RCC_OscConfig+0x274>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ec4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ec8:	d00c      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eca:	4b8b      	ldr	r3, [pc, #556]	@ (80030f8 <HAL_RCC_OscConfig+0x274>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ed2:	2b0c      	cmp	r3, #12
 8002ed4:	d112      	bne.n	8002efc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ed6:	4b88      	ldr	r3, [pc, #544]	@ (80030f8 <HAL_RCC_OscConfig+0x274>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ede:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ee2:	d10b      	bne.n	8002efc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee4:	4b84      	ldr	r3, [pc, #528]	@ (80030f8 <HAL_RCC_OscConfig+0x274>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d05b      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x124>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d157      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e25a      	b.n	80033b2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f04:	d106      	bne.n	8002f14 <HAL_RCC_OscConfig+0x90>
 8002f06:	4b7c      	ldr	r3, [pc, #496]	@ (80030f8 <HAL_RCC_OscConfig+0x274>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a7b      	ldr	r2, [pc, #492]	@ (80030f8 <HAL_RCC_OscConfig+0x274>)
 8002f0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	e01d      	b.n	8002f50 <HAL_RCC_OscConfig+0xcc>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f1c:	d10c      	bne.n	8002f38 <HAL_RCC_OscConfig+0xb4>
 8002f1e:	4b76      	ldr	r3, [pc, #472]	@ (80030f8 <HAL_RCC_OscConfig+0x274>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a75      	ldr	r2, [pc, #468]	@ (80030f8 <HAL_RCC_OscConfig+0x274>)
 8002f24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	4b73      	ldr	r3, [pc, #460]	@ (80030f8 <HAL_RCC_OscConfig+0x274>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a72      	ldr	r2, [pc, #456]	@ (80030f8 <HAL_RCC_OscConfig+0x274>)
 8002f30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	e00b      	b.n	8002f50 <HAL_RCC_OscConfig+0xcc>
 8002f38:	4b6f      	ldr	r3, [pc, #444]	@ (80030f8 <HAL_RCC_OscConfig+0x274>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a6e      	ldr	r2, [pc, #440]	@ (80030f8 <HAL_RCC_OscConfig+0x274>)
 8002f3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	4b6c      	ldr	r3, [pc, #432]	@ (80030f8 <HAL_RCC_OscConfig+0x274>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a6b      	ldr	r2, [pc, #428]	@ (80030f8 <HAL_RCC_OscConfig+0x274>)
 8002f4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d013      	beq.n	8002f80 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f58:	f7fe fb06 	bl	8001568 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f60:	f7fe fb02 	bl	8001568 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b64      	cmp	r3, #100	@ 0x64
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e21f      	b.n	80033b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f72:	4b61      	ldr	r3, [pc, #388]	@ (80030f8 <HAL_RCC_OscConfig+0x274>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0f0      	beq.n	8002f60 <HAL_RCC_OscConfig+0xdc>
 8002f7e:	e014      	b.n	8002faa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f80:	f7fe faf2 	bl	8001568 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f88:	f7fe faee 	bl	8001568 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b64      	cmp	r3, #100	@ 0x64
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e20b      	b.n	80033b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f9a:	4b57      	ldr	r3, [pc, #348]	@ (80030f8 <HAL_RCC_OscConfig+0x274>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1f0      	bne.n	8002f88 <HAL_RCC_OscConfig+0x104>
 8002fa6:	e000      	b.n	8002faa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d06f      	beq.n	8003096 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002fb6:	4b50      	ldr	r3, [pc, #320]	@ (80030f8 <HAL_RCC_OscConfig+0x274>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 030c 	and.w	r3, r3, #12
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d017      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fc2:	4b4d      	ldr	r3, [pc, #308]	@ (80030f8 <HAL_RCC_OscConfig+0x274>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002fca:	2b08      	cmp	r3, #8
 8002fcc:	d105      	bne.n	8002fda <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fce:	4b4a      	ldr	r3, [pc, #296]	@ (80030f8 <HAL_RCC_OscConfig+0x274>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00b      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fda:	4b47      	ldr	r3, [pc, #284]	@ (80030f8 <HAL_RCC_OscConfig+0x274>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fe2:	2b0c      	cmp	r3, #12
 8002fe4:	d11c      	bne.n	8003020 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fe6:	4b44      	ldr	r3, [pc, #272]	@ (80030f8 <HAL_RCC_OscConfig+0x274>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d116      	bne.n	8003020 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ff2:	4b41      	ldr	r3, [pc, #260]	@ (80030f8 <HAL_RCC_OscConfig+0x274>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d005      	beq.n	800300a <HAL_RCC_OscConfig+0x186>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d001      	beq.n	800300a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e1d3      	b.n	80033b2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800300a:	4b3b      	ldr	r3, [pc, #236]	@ (80030f8 <HAL_RCC_OscConfig+0x274>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	4937      	ldr	r1, [pc, #220]	@ (80030f8 <HAL_RCC_OscConfig+0x274>)
 800301a:	4313      	orrs	r3, r2
 800301c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800301e:	e03a      	b.n	8003096 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d020      	beq.n	800306a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003028:	4b34      	ldr	r3, [pc, #208]	@ (80030fc <HAL_RCC_OscConfig+0x278>)
 800302a:	2201      	movs	r2, #1
 800302c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302e:	f7fe fa9b 	bl	8001568 <HAL_GetTick>
 8003032:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003034:	e008      	b.n	8003048 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003036:	f7fe fa97 	bl	8001568 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e1b4      	b.n	80033b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003048:	4b2b      	ldr	r3, [pc, #172]	@ (80030f8 <HAL_RCC_OscConfig+0x274>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0f0      	beq.n	8003036 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003054:	4b28      	ldr	r3, [pc, #160]	@ (80030f8 <HAL_RCC_OscConfig+0x274>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	4925      	ldr	r1, [pc, #148]	@ (80030f8 <HAL_RCC_OscConfig+0x274>)
 8003064:	4313      	orrs	r3, r2
 8003066:	600b      	str	r3, [r1, #0]
 8003068:	e015      	b.n	8003096 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800306a:	4b24      	ldr	r3, [pc, #144]	@ (80030fc <HAL_RCC_OscConfig+0x278>)
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003070:	f7fe fa7a 	bl	8001568 <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003078:	f7fe fa76 	bl	8001568 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e193      	b.n	80033b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800308a:	4b1b      	ldr	r3, [pc, #108]	@ (80030f8 <HAL_RCC_OscConfig+0x274>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1f0      	bne.n	8003078 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d036      	beq.n	8003110 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d016      	beq.n	80030d8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030aa:	4b15      	ldr	r3, [pc, #84]	@ (8003100 <HAL_RCC_OscConfig+0x27c>)
 80030ac:	2201      	movs	r2, #1
 80030ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b0:	f7fe fa5a 	bl	8001568 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030b8:	f7fe fa56 	bl	8001568 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e173      	b.n	80033b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ca:	4b0b      	ldr	r3, [pc, #44]	@ (80030f8 <HAL_RCC_OscConfig+0x274>)
 80030cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0f0      	beq.n	80030b8 <HAL_RCC_OscConfig+0x234>
 80030d6:	e01b      	b.n	8003110 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030d8:	4b09      	ldr	r3, [pc, #36]	@ (8003100 <HAL_RCC_OscConfig+0x27c>)
 80030da:	2200      	movs	r2, #0
 80030dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030de:	f7fe fa43 	bl	8001568 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e4:	e00e      	b.n	8003104 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030e6:	f7fe fa3f 	bl	8001568 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d907      	bls.n	8003104 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e15c      	b.n	80033b2 <HAL_RCC_OscConfig+0x52e>
 80030f8:	40023800 	.word	0x40023800
 80030fc:	42470000 	.word	0x42470000
 8003100:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003104:	4b8a      	ldr	r3, [pc, #552]	@ (8003330 <HAL_RCC_OscConfig+0x4ac>)
 8003106:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1ea      	bne.n	80030e6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 8097 	beq.w	800324c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800311e:	2300      	movs	r3, #0
 8003120:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003122:	4b83      	ldr	r3, [pc, #524]	@ (8003330 <HAL_RCC_OscConfig+0x4ac>)
 8003124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10f      	bne.n	800314e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800312e:	2300      	movs	r3, #0
 8003130:	60bb      	str	r3, [r7, #8]
 8003132:	4b7f      	ldr	r3, [pc, #508]	@ (8003330 <HAL_RCC_OscConfig+0x4ac>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003136:	4a7e      	ldr	r2, [pc, #504]	@ (8003330 <HAL_RCC_OscConfig+0x4ac>)
 8003138:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800313c:	6413      	str	r3, [r2, #64]	@ 0x40
 800313e:	4b7c      	ldr	r3, [pc, #496]	@ (8003330 <HAL_RCC_OscConfig+0x4ac>)
 8003140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003142:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003146:	60bb      	str	r3, [r7, #8]
 8003148:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800314a:	2301      	movs	r3, #1
 800314c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314e:	4b79      	ldr	r3, [pc, #484]	@ (8003334 <HAL_RCC_OscConfig+0x4b0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003156:	2b00      	cmp	r3, #0
 8003158:	d118      	bne.n	800318c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800315a:	4b76      	ldr	r3, [pc, #472]	@ (8003334 <HAL_RCC_OscConfig+0x4b0>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a75      	ldr	r2, [pc, #468]	@ (8003334 <HAL_RCC_OscConfig+0x4b0>)
 8003160:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003164:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003166:	f7fe f9ff 	bl	8001568 <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800316c:	e008      	b.n	8003180 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800316e:	f7fe f9fb 	bl	8001568 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e118      	b.n	80033b2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003180:	4b6c      	ldr	r3, [pc, #432]	@ (8003334 <HAL_RCC_OscConfig+0x4b0>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0f0      	beq.n	800316e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d106      	bne.n	80031a2 <HAL_RCC_OscConfig+0x31e>
 8003194:	4b66      	ldr	r3, [pc, #408]	@ (8003330 <HAL_RCC_OscConfig+0x4ac>)
 8003196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003198:	4a65      	ldr	r2, [pc, #404]	@ (8003330 <HAL_RCC_OscConfig+0x4ac>)
 800319a:	f043 0301 	orr.w	r3, r3, #1
 800319e:	6713      	str	r3, [r2, #112]	@ 0x70
 80031a0:	e01c      	b.n	80031dc <HAL_RCC_OscConfig+0x358>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	2b05      	cmp	r3, #5
 80031a8:	d10c      	bne.n	80031c4 <HAL_RCC_OscConfig+0x340>
 80031aa:	4b61      	ldr	r3, [pc, #388]	@ (8003330 <HAL_RCC_OscConfig+0x4ac>)
 80031ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ae:	4a60      	ldr	r2, [pc, #384]	@ (8003330 <HAL_RCC_OscConfig+0x4ac>)
 80031b0:	f043 0304 	orr.w	r3, r3, #4
 80031b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80031b6:	4b5e      	ldr	r3, [pc, #376]	@ (8003330 <HAL_RCC_OscConfig+0x4ac>)
 80031b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ba:	4a5d      	ldr	r2, [pc, #372]	@ (8003330 <HAL_RCC_OscConfig+0x4ac>)
 80031bc:	f043 0301 	orr.w	r3, r3, #1
 80031c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80031c2:	e00b      	b.n	80031dc <HAL_RCC_OscConfig+0x358>
 80031c4:	4b5a      	ldr	r3, [pc, #360]	@ (8003330 <HAL_RCC_OscConfig+0x4ac>)
 80031c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c8:	4a59      	ldr	r2, [pc, #356]	@ (8003330 <HAL_RCC_OscConfig+0x4ac>)
 80031ca:	f023 0301 	bic.w	r3, r3, #1
 80031ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80031d0:	4b57      	ldr	r3, [pc, #348]	@ (8003330 <HAL_RCC_OscConfig+0x4ac>)
 80031d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031d4:	4a56      	ldr	r2, [pc, #344]	@ (8003330 <HAL_RCC_OscConfig+0x4ac>)
 80031d6:	f023 0304 	bic.w	r3, r3, #4
 80031da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d015      	beq.n	8003210 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e4:	f7fe f9c0 	bl	8001568 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ea:	e00a      	b.n	8003202 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031ec:	f7fe f9bc 	bl	8001568 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e0d7      	b.n	80033b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003202:	4b4b      	ldr	r3, [pc, #300]	@ (8003330 <HAL_RCC_OscConfig+0x4ac>)
 8003204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0ee      	beq.n	80031ec <HAL_RCC_OscConfig+0x368>
 800320e:	e014      	b.n	800323a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003210:	f7fe f9aa 	bl	8001568 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003216:	e00a      	b.n	800322e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003218:	f7fe f9a6 	bl	8001568 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003226:	4293      	cmp	r3, r2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e0c1      	b.n	80033b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800322e:	4b40      	ldr	r3, [pc, #256]	@ (8003330 <HAL_RCC_OscConfig+0x4ac>)
 8003230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1ee      	bne.n	8003218 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800323a:	7dfb      	ldrb	r3, [r7, #23]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d105      	bne.n	800324c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003240:	4b3b      	ldr	r3, [pc, #236]	@ (8003330 <HAL_RCC_OscConfig+0x4ac>)
 8003242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003244:	4a3a      	ldr	r2, [pc, #232]	@ (8003330 <HAL_RCC_OscConfig+0x4ac>)
 8003246:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800324a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 80ad 	beq.w	80033b0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003256:	4b36      	ldr	r3, [pc, #216]	@ (8003330 <HAL_RCC_OscConfig+0x4ac>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 030c 	and.w	r3, r3, #12
 800325e:	2b08      	cmp	r3, #8
 8003260:	d060      	beq.n	8003324 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	2b02      	cmp	r3, #2
 8003268:	d145      	bne.n	80032f6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800326a:	4b33      	ldr	r3, [pc, #204]	@ (8003338 <HAL_RCC_OscConfig+0x4b4>)
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003270:	f7fe f97a 	bl	8001568 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003278:	f7fe f976 	bl	8001568 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e093      	b.n	80033b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800328a:	4b29      	ldr	r3, [pc, #164]	@ (8003330 <HAL_RCC_OscConfig+0x4ac>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f0      	bne.n	8003278 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69da      	ldr	r2, [r3, #28]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a4:	019b      	lsls	r3, r3, #6
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ac:	085b      	lsrs	r3, r3, #1
 80032ae:	3b01      	subs	r3, #1
 80032b0:	041b      	lsls	r3, r3, #16
 80032b2:	431a      	orrs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b8:	061b      	lsls	r3, r3, #24
 80032ba:	431a      	orrs	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c0:	071b      	lsls	r3, r3, #28
 80032c2:	491b      	ldr	r1, [pc, #108]	@ (8003330 <HAL_RCC_OscConfig+0x4ac>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003338 <HAL_RCC_OscConfig+0x4b4>)
 80032ca:	2201      	movs	r2, #1
 80032cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ce:	f7fe f94b 	bl	8001568 <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032d6:	f7fe f947 	bl	8001568 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e064      	b.n	80033b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e8:	4b11      	ldr	r3, [pc, #68]	@ (8003330 <HAL_RCC_OscConfig+0x4ac>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0f0      	beq.n	80032d6 <HAL_RCC_OscConfig+0x452>
 80032f4:	e05c      	b.n	80033b0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f6:	4b10      	ldr	r3, [pc, #64]	@ (8003338 <HAL_RCC_OscConfig+0x4b4>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fc:	f7fe f934 	bl	8001568 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003304:	f7fe f930 	bl	8001568 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e04d      	b.n	80033b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003316:	4b06      	ldr	r3, [pc, #24]	@ (8003330 <HAL_RCC_OscConfig+0x4ac>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f0      	bne.n	8003304 <HAL_RCC_OscConfig+0x480>
 8003322:	e045      	b.n	80033b0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d107      	bne.n	800333c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e040      	b.n	80033b2 <HAL_RCC_OscConfig+0x52e>
 8003330:	40023800 	.word	0x40023800
 8003334:	40007000 	.word	0x40007000
 8003338:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800333c:	4b1f      	ldr	r3, [pc, #124]	@ (80033bc <HAL_RCC_OscConfig+0x538>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d030      	beq.n	80033ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003354:	429a      	cmp	r2, r3
 8003356:	d129      	bne.n	80033ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003362:	429a      	cmp	r2, r3
 8003364:	d122      	bne.n	80033ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800336c:	4013      	ands	r3, r2
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003372:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003374:	4293      	cmp	r3, r2
 8003376:	d119      	bne.n	80033ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003382:	085b      	lsrs	r3, r3, #1
 8003384:	3b01      	subs	r3, #1
 8003386:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003388:	429a      	cmp	r2, r3
 800338a:	d10f      	bne.n	80033ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003396:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003398:	429a      	cmp	r2, r3
 800339a:	d107      	bne.n	80033ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d001      	beq.n	80033b0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e000      	b.n	80033b2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3718      	adds	r7, #24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40023800 	.word	0x40023800

080033c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e041      	b.n	8003456 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d106      	bne.n	80033ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7fd fef2 	bl	80011d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2202      	movs	r2, #2
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3304      	adds	r3, #4
 80033fc:	4619      	mov	r1, r3
 80033fe:	4610      	mov	r0, r2
 8003400:	f000 ff26 	bl	8004250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
	...

08003460 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b01      	cmp	r3, #1
 8003472:	d001      	beq.n	8003478 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e04e      	b.n	8003516 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68da      	ldr	r2, [r3, #12]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 0201 	orr.w	r2, r2, #1
 800348e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a23      	ldr	r2, [pc, #140]	@ (8003524 <HAL_TIM_Base_Start_IT+0xc4>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d022      	beq.n	80034e0 <HAL_TIM_Base_Start_IT+0x80>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034a2:	d01d      	beq.n	80034e0 <HAL_TIM_Base_Start_IT+0x80>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a1f      	ldr	r2, [pc, #124]	@ (8003528 <HAL_TIM_Base_Start_IT+0xc8>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d018      	beq.n	80034e0 <HAL_TIM_Base_Start_IT+0x80>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a1e      	ldr	r2, [pc, #120]	@ (800352c <HAL_TIM_Base_Start_IT+0xcc>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d013      	beq.n	80034e0 <HAL_TIM_Base_Start_IT+0x80>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a1c      	ldr	r2, [pc, #112]	@ (8003530 <HAL_TIM_Base_Start_IT+0xd0>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d00e      	beq.n	80034e0 <HAL_TIM_Base_Start_IT+0x80>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003534 <HAL_TIM_Base_Start_IT+0xd4>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d009      	beq.n	80034e0 <HAL_TIM_Base_Start_IT+0x80>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a19      	ldr	r2, [pc, #100]	@ (8003538 <HAL_TIM_Base_Start_IT+0xd8>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d004      	beq.n	80034e0 <HAL_TIM_Base_Start_IT+0x80>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a18      	ldr	r2, [pc, #96]	@ (800353c <HAL_TIM_Base_Start_IT+0xdc>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d111      	bne.n	8003504 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2b06      	cmp	r3, #6
 80034f0:	d010      	beq.n	8003514 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f042 0201 	orr.w	r2, r2, #1
 8003500:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003502:	e007      	b.n	8003514 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0201 	orr.w	r2, r2, #1
 8003512:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40010000 	.word	0x40010000
 8003528:	40000400 	.word	0x40000400
 800352c:	40000800 	.word	0x40000800
 8003530:	40000c00 	.word	0x40000c00
 8003534:	40010400 	.word	0x40010400
 8003538:	40014000 	.word	0x40014000
 800353c:	40001800 	.word	0x40001800

08003540 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e041      	b.n	80035d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d106      	bne.n	800356c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f839 	bl	80035de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2202      	movs	r2, #2
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3304      	adds	r3, #4
 800357c:	4619      	mov	r1, r3
 800357e:	4610      	mov	r0, r2
 8003580:	f000 fe66 	bl	8004250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
	...

080035f4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003602:	2300      	movs	r3, #0
 8003604:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d109      	bne.n	8003620 <HAL_TIM_PWM_Start_DMA+0x2c>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	bf0c      	ite	eq
 8003618:	2301      	moveq	r3, #1
 800361a:	2300      	movne	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	e022      	b.n	8003666 <HAL_TIM_PWM_Start_DMA+0x72>
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	2b04      	cmp	r3, #4
 8003624:	d109      	bne.n	800363a <HAL_TIM_PWM_Start_DMA+0x46>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	bf0c      	ite	eq
 8003632:	2301      	moveq	r3, #1
 8003634:	2300      	movne	r3, #0
 8003636:	b2db      	uxtb	r3, r3
 8003638:	e015      	b.n	8003666 <HAL_TIM_PWM_Start_DMA+0x72>
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	2b08      	cmp	r3, #8
 800363e:	d109      	bne.n	8003654 <HAL_TIM_PWM_Start_DMA+0x60>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	bf0c      	ite	eq
 800364c:	2301      	moveq	r3, #1
 800364e:	2300      	movne	r3, #0
 8003650:	b2db      	uxtb	r3, r3
 8003652:	e008      	b.n	8003666 <HAL_TIM_PWM_Start_DMA+0x72>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b02      	cmp	r3, #2
 800365e:	bf0c      	ite	eq
 8003660:	2301      	moveq	r3, #1
 8003662:	2300      	movne	r3, #0
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800366a:	2302      	movs	r3, #2
 800366c:	e171      	b.n	8003952 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d109      	bne.n	8003688 <HAL_TIM_PWM_Start_DMA+0x94>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b01      	cmp	r3, #1
 800367e:	bf0c      	ite	eq
 8003680:	2301      	moveq	r3, #1
 8003682:	2300      	movne	r3, #0
 8003684:	b2db      	uxtb	r3, r3
 8003686:	e022      	b.n	80036ce <HAL_TIM_PWM_Start_DMA+0xda>
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	2b04      	cmp	r3, #4
 800368c:	d109      	bne.n	80036a2 <HAL_TIM_PWM_Start_DMA+0xae>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b01      	cmp	r3, #1
 8003698:	bf0c      	ite	eq
 800369a:	2301      	moveq	r3, #1
 800369c:	2300      	movne	r3, #0
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	e015      	b.n	80036ce <HAL_TIM_PWM_Start_DMA+0xda>
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	2b08      	cmp	r3, #8
 80036a6:	d109      	bne.n	80036bc <HAL_TIM_PWM_Start_DMA+0xc8>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	bf0c      	ite	eq
 80036b4:	2301      	moveq	r3, #1
 80036b6:	2300      	movne	r3, #0
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	e008      	b.n	80036ce <HAL_TIM_PWM_Start_DMA+0xda>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	bf0c      	ite	eq
 80036c8:	2301      	moveq	r3, #1
 80036ca:	2300      	movne	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d024      	beq.n	800371c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d104      	bne.n	80036e2 <HAL_TIM_PWM_Start_DMA+0xee>
 80036d8:	887b      	ldrh	r3, [r7, #2]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e137      	b.n	8003952 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d104      	bne.n	80036f2 <HAL_TIM_PWM_Start_DMA+0xfe>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036f0:	e016      	b.n	8003720 <HAL_TIM_PWM_Start_DMA+0x12c>
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	2b04      	cmp	r3, #4
 80036f6:	d104      	bne.n	8003702 <HAL_TIM_PWM_Start_DMA+0x10e>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2202      	movs	r2, #2
 80036fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003700:	e00e      	b.n	8003720 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	2b08      	cmp	r3, #8
 8003706:	d104      	bne.n	8003712 <HAL_TIM_PWM_Start_DMA+0x11e>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003710:	e006      	b.n	8003720 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2202      	movs	r2, #2
 8003716:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800371a:	e001      	b.n	8003720 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e118      	b.n	8003952 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	2b0c      	cmp	r3, #12
 8003724:	f200 80ae 	bhi.w	8003884 <HAL_TIM_PWM_Start_DMA+0x290>
 8003728:	a201      	add	r2, pc, #4	@ (adr r2, 8003730 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800372a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372e:	bf00      	nop
 8003730:	08003765 	.word	0x08003765
 8003734:	08003885 	.word	0x08003885
 8003738:	08003885 	.word	0x08003885
 800373c:	08003885 	.word	0x08003885
 8003740:	080037ad 	.word	0x080037ad
 8003744:	08003885 	.word	0x08003885
 8003748:	08003885 	.word	0x08003885
 800374c:	08003885 	.word	0x08003885
 8003750:	080037f5 	.word	0x080037f5
 8003754:	08003885 	.word	0x08003885
 8003758:	08003885 	.word	0x08003885
 800375c:	08003885 	.word	0x08003885
 8003760:	0800383d 	.word	0x0800383d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003768:	4a7c      	ldr	r2, [pc, #496]	@ (800395c <HAL_TIM_PWM_Start_DMA+0x368>)
 800376a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003770:	4a7b      	ldr	r2, [pc, #492]	@ (8003960 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003772:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003778:	4a7a      	ldr	r2, [pc, #488]	@ (8003964 <HAL_TIM_PWM_Start_DMA+0x370>)
 800377a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	3334      	adds	r3, #52	@ 0x34
 8003788:	461a      	mov	r2, r3
 800378a:	887b      	ldrh	r3, [r7, #2]
 800378c:	f7fe fd04 	bl	8002198 <HAL_DMA_Start_IT>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e0db      	b.n	8003952 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68da      	ldr	r2, [r3, #12]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037a8:	60da      	str	r2, [r3, #12]
      break;
 80037aa:	e06e      	b.n	800388a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b0:	4a6a      	ldr	r2, [pc, #424]	@ (800395c <HAL_TIM_PWM_Start_DMA+0x368>)
 80037b2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b8:	4a69      	ldr	r2, [pc, #420]	@ (8003960 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80037ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c0:	4a68      	ldr	r2, [pc, #416]	@ (8003964 <HAL_TIM_PWM_Start_DMA+0x370>)
 80037c2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80037c8:	6879      	ldr	r1, [r7, #4]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	3338      	adds	r3, #56	@ 0x38
 80037d0:	461a      	mov	r2, r3
 80037d2:	887b      	ldrh	r3, [r7, #2]
 80037d4:	f7fe fce0 	bl	8002198 <HAL_DMA_Start_IT>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e0b7      	b.n	8003952 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80037f0:	60da      	str	r2, [r3, #12]
      break;
 80037f2:	e04a      	b.n	800388a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f8:	4a58      	ldr	r2, [pc, #352]	@ (800395c <HAL_TIM_PWM_Start_DMA+0x368>)
 80037fa:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003800:	4a57      	ldr	r2, [pc, #348]	@ (8003960 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003802:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003808:	4a56      	ldr	r2, [pc, #344]	@ (8003964 <HAL_TIM_PWM_Start_DMA+0x370>)
 800380a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	333c      	adds	r3, #60	@ 0x3c
 8003818:	461a      	mov	r2, r3
 800381a:	887b      	ldrh	r3, [r7, #2]
 800381c:	f7fe fcbc 	bl	8002198 <HAL_DMA_Start_IT>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e093      	b.n	8003952 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68da      	ldr	r2, [r3, #12]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003838:	60da      	str	r2, [r3, #12]
      break;
 800383a:	e026      	b.n	800388a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003840:	4a46      	ldr	r2, [pc, #280]	@ (800395c <HAL_TIM_PWM_Start_DMA+0x368>)
 8003842:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003848:	4a45      	ldr	r2, [pc, #276]	@ (8003960 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800384a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003850:	4a44      	ldr	r2, [pc, #272]	@ (8003964 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003852:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003858:	6879      	ldr	r1, [r7, #4]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	3340      	adds	r3, #64	@ 0x40
 8003860:	461a      	mov	r2, r3
 8003862:	887b      	ldrh	r3, [r7, #2]
 8003864:	f7fe fc98 	bl	8002198 <HAL_DMA_Start_IT>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e06f      	b.n	8003952 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68da      	ldr	r2, [r3, #12]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003880:	60da      	str	r2, [r3, #12]
      break;
 8003882:	e002      	b.n	800388a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	75fb      	strb	r3, [r7, #23]
      break;
 8003888:	bf00      	nop
  }

  if (status == HAL_OK)
 800388a:	7dfb      	ldrb	r3, [r7, #23]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d15f      	bne.n	8003950 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2201      	movs	r2, #1
 8003896:	68b9      	ldr	r1, [r7, #8]
 8003898:	4618      	mov	r0, r3
 800389a:	f000 ffc3 	bl	8004824 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a31      	ldr	r2, [pc, #196]	@ (8003968 <HAL_TIM_PWM_Start_DMA+0x374>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d004      	beq.n	80038b2 <HAL_TIM_PWM_Start_DMA+0x2be>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a2f      	ldr	r2, [pc, #188]	@ (800396c <HAL_TIM_PWM_Start_DMA+0x378>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d101      	bne.n	80038b6 <HAL_TIM_PWM_Start_DMA+0x2c2>
 80038b2:	2301      	movs	r3, #1
 80038b4:	e000      	b.n	80038b8 <HAL_TIM_PWM_Start_DMA+0x2c4>
 80038b6:	2300      	movs	r3, #0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d007      	beq.n	80038cc <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038ca:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a25      	ldr	r2, [pc, #148]	@ (8003968 <HAL_TIM_PWM_Start_DMA+0x374>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d022      	beq.n	800391c <HAL_TIM_PWM_Start_DMA+0x328>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038de:	d01d      	beq.n	800391c <HAL_TIM_PWM_Start_DMA+0x328>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a22      	ldr	r2, [pc, #136]	@ (8003970 <HAL_TIM_PWM_Start_DMA+0x37c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d018      	beq.n	800391c <HAL_TIM_PWM_Start_DMA+0x328>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a21      	ldr	r2, [pc, #132]	@ (8003974 <HAL_TIM_PWM_Start_DMA+0x380>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d013      	beq.n	800391c <HAL_TIM_PWM_Start_DMA+0x328>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a1f      	ldr	r2, [pc, #124]	@ (8003978 <HAL_TIM_PWM_Start_DMA+0x384>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d00e      	beq.n	800391c <HAL_TIM_PWM_Start_DMA+0x328>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a1a      	ldr	r2, [pc, #104]	@ (800396c <HAL_TIM_PWM_Start_DMA+0x378>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d009      	beq.n	800391c <HAL_TIM_PWM_Start_DMA+0x328>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a1b      	ldr	r2, [pc, #108]	@ (800397c <HAL_TIM_PWM_Start_DMA+0x388>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d004      	beq.n	800391c <HAL_TIM_PWM_Start_DMA+0x328>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a1a      	ldr	r2, [pc, #104]	@ (8003980 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d111      	bne.n	8003940 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 0307 	and.w	r3, r3, #7
 8003926:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	2b06      	cmp	r3, #6
 800392c:	d010      	beq.n	8003950 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f042 0201 	orr.w	r2, r2, #1
 800393c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800393e:	e007      	b.n	8003950 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f042 0201 	orr.w	r2, r2, #1
 800394e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003950:	7dfb      	ldrb	r3, [r7, #23]
}
 8003952:	4618      	mov	r0, r3
 8003954:	3718      	adds	r7, #24
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	08004141 	.word	0x08004141
 8003960:	080041e9 	.word	0x080041e9
 8003964:	080040af 	.word	0x080040af
 8003968:	40010000 	.word	0x40010000
 800396c:	40010400 	.word	0x40010400
 8003970:	40000400 	.word	0x40000400
 8003974:	40000800 	.word	0x40000800
 8003978:	40000c00 	.word	0x40000c00
 800397c:	40014000 	.word	0x40014000
 8003980:	40001800 	.word	0x40001800

08003984 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800398e:	2300      	movs	r3, #0
 8003990:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b0c      	cmp	r3, #12
 8003996:	d855      	bhi.n	8003a44 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003998:	a201      	add	r2, pc, #4	@ (adr r2, 80039a0 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800399a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399e:	bf00      	nop
 80039a0:	080039d5 	.word	0x080039d5
 80039a4:	08003a45 	.word	0x08003a45
 80039a8:	08003a45 	.word	0x08003a45
 80039ac:	08003a45 	.word	0x08003a45
 80039b0:	080039f1 	.word	0x080039f1
 80039b4:	08003a45 	.word	0x08003a45
 80039b8:	08003a45 	.word	0x08003a45
 80039bc:	08003a45 	.word	0x08003a45
 80039c0:	08003a0d 	.word	0x08003a0d
 80039c4:	08003a45 	.word	0x08003a45
 80039c8:	08003a45 	.word	0x08003a45
 80039cc:	08003a45 	.word	0x08003a45
 80039d0:	08003a29 	.word	0x08003a29
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68da      	ldr	r2, [r3, #12]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80039e2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7fe fc2d 	bl	8002248 <HAL_DMA_Abort_IT>
      break;
 80039ee:	e02c      	b.n	8003a4a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68da      	ldr	r2, [r3, #12]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039fe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7fe fc1f 	bl	8002248 <HAL_DMA_Abort_IT>
      break;
 8003a0a:	e01e      	b.n	8003a4a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68da      	ldr	r2, [r3, #12]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a1a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fe fc11 	bl	8002248 <HAL_DMA_Abort_IT>
      break;
 8003a26:	e010      	b.n	8003a4a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68da      	ldr	r2, [r3, #12]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003a36:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7fe fc03 	bl	8002248 <HAL_DMA_Abort_IT>
      break;
 8003a42:	e002      	b.n	8003a4a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	73fb      	strb	r3, [r7, #15]
      break;
 8003a48:	bf00      	nop
  }

  if (status == HAL_OK)
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d161      	bne.n	8003b14 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2200      	movs	r2, #0
 8003a56:	6839      	ldr	r1, [r7, #0]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f000 fee3 	bl	8004824 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a2f      	ldr	r2, [pc, #188]	@ (8003b20 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d004      	beq.n	8003a72 <HAL_TIM_PWM_Stop_DMA+0xee>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a2d      	ldr	r2, [pc, #180]	@ (8003b24 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d101      	bne.n	8003a76 <HAL_TIM_PWM_Stop_DMA+0xf2>
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8003a76:	2300      	movs	r3, #0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d017      	beq.n	8003aac <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6a1a      	ldr	r2, [r3, #32]
 8003a82:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003a86:	4013      	ands	r3, r2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10f      	bne.n	8003aac <HAL_TIM_PWM_Stop_DMA+0x128>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6a1a      	ldr	r2, [r3, #32]
 8003a92:	f240 4344 	movw	r3, #1092	@ 0x444
 8003a96:	4013      	ands	r3, r2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d107      	bne.n	8003aac <HAL_TIM_PWM_Stop_DMA+0x128>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003aaa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6a1a      	ldr	r2, [r3, #32]
 8003ab2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d10f      	bne.n	8003adc <HAL_TIM_PWM_Stop_DMA+0x158>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6a1a      	ldr	r2, [r3, #32]
 8003ac2:	f240 4344 	movw	r3, #1092	@ 0x444
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d107      	bne.n	8003adc <HAL_TIM_PWM_Stop_DMA+0x158>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0201 	bic.w	r2, r2, #1
 8003ada:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d104      	bne.n	8003aec <HAL_TIM_PWM_Stop_DMA+0x168>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003aea:	e013      	b.n	8003b14 <HAL_TIM_PWM_Stop_DMA+0x190>
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	2b04      	cmp	r3, #4
 8003af0:	d104      	bne.n	8003afc <HAL_TIM_PWM_Stop_DMA+0x178>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003afa:	e00b      	b.n	8003b14 <HAL_TIM_PWM_Stop_DMA+0x190>
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	2b08      	cmp	r3, #8
 8003b00:	d104      	bne.n	8003b0c <HAL_TIM_PWM_Stop_DMA+0x188>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b0a:	e003      	b.n	8003b14 <HAL_TIM_PWM_Stop_DMA+0x190>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	40010000 	.word	0x40010000
 8003b24:	40010400 	.word	0x40010400

08003b28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d122      	bne.n	8003b84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d11b      	bne.n	8003b84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f06f 0202 	mvn.w	r2, #2
 8003b54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 fa77 	bl	800405e <HAL_TIM_IC_CaptureCallback>
 8003b70:	e005      	b.n	8003b7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 fa69 	bl	800404a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7fc fd57 	bl	800062c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f003 0304 	and.w	r3, r3, #4
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d122      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d11b      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f06f 0204 	mvn.w	r2, #4
 8003ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2202      	movs	r2, #2
 8003bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 fa4d 	bl	800405e <HAL_TIM_IC_CaptureCallback>
 8003bc4:	e005      	b.n	8003bd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 fa3f 	bl	800404a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7fc fd2d 	bl	800062c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	f003 0308 	and.w	r3, r3, #8
 8003be2:	2b08      	cmp	r3, #8
 8003be4:	d122      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	d11b      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0208 	mvn.w	r2, #8
 8003bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2204      	movs	r2, #4
 8003c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 fa23 	bl	800405e <HAL_TIM_IC_CaptureCallback>
 8003c18:	e005      	b.n	8003c26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 fa15 	bl	800404a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f7fc fd03 	bl	800062c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	f003 0310 	and.w	r3, r3, #16
 8003c36:	2b10      	cmp	r3, #16
 8003c38:	d122      	bne.n	8003c80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f003 0310 	and.w	r3, r3, #16
 8003c44:	2b10      	cmp	r3, #16
 8003c46:	d11b      	bne.n	8003c80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f06f 0210 	mvn.w	r2, #16
 8003c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2208      	movs	r2, #8
 8003c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f9f9 	bl	800405e <HAL_TIM_IC_CaptureCallback>
 8003c6c:	e005      	b.n	8003c7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f9eb 	bl	800404a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f7fc fcd9 	bl	800062c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d10e      	bne.n	8003cac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d107      	bne.n	8003cac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f06f 0201 	mvn.w	r2, #1
 8003ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7fd f92c 	bl	8000f04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cb6:	2b80      	cmp	r3, #128	@ 0x80
 8003cb8:	d10e      	bne.n	8003cd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cc4:	2b80      	cmp	r3, #128	@ 0x80
 8003cc6:	d107      	bne.n	8003cd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 fea4 	bl	8004a20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce2:	2b40      	cmp	r3, #64	@ 0x40
 8003ce4:	d10e      	bne.n	8003d04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf0:	2b40      	cmp	r3, #64	@ 0x40
 8003cf2:	d107      	bne.n	8003d04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f9c1 	bl	8004086 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	f003 0320 	and.w	r3, r3, #32
 8003d0e:	2b20      	cmp	r3, #32
 8003d10:	d10e      	bne.n	8003d30 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	f003 0320 	and.w	r3, r3, #32
 8003d1c:	2b20      	cmp	r3, #32
 8003d1e:	d107      	bne.n	8003d30 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f06f 0220 	mvn.w	r2, #32
 8003d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 fe6e 	bl	8004a0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d30:	bf00      	nop
 8003d32:	3708      	adds	r7, #8
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d44:	2300      	movs	r3, #0
 8003d46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d101      	bne.n	8003d56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d52:	2302      	movs	r3, #2
 8003d54:	e0ae      	b.n	8003eb4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b0c      	cmp	r3, #12
 8003d62:	f200 809f 	bhi.w	8003ea4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d66:	a201      	add	r2, pc, #4	@ (adr r2, 8003d6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6c:	08003da1 	.word	0x08003da1
 8003d70:	08003ea5 	.word	0x08003ea5
 8003d74:	08003ea5 	.word	0x08003ea5
 8003d78:	08003ea5 	.word	0x08003ea5
 8003d7c:	08003de1 	.word	0x08003de1
 8003d80:	08003ea5 	.word	0x08003ea5
 8003d84:	08003ea5 	.word	0x08003ea5
 8003d88:	08003ea5 	.word	0x08003ea5
 8003d8c:	08003e23 	.word	0x08003e23
 8003d90:	08003ea5 	.word	0x08003ea5
 8003d94:	08003ea5 	.word	0x08003ea5
 8003d98:	08003ea5 	.word	0x08003ea5
 8003d9c:	08003e63 	.word	0x08003e63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68b9      	ldr	r1, [r7, #8]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 faf2 	bl	8004390 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	699a      	ldr	r2, [r3, #24]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0208 	orr.w	r2, r2, #8
 8003dba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	699a      	ldr	r2, [r3, #24]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0204 	bic.w	r2, r2, #4
 8003dca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6999      	ldr	r1, [r3, #24]
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	691a      	ldr	r2, [r3, #16]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	619a      	str	r2, [r3, #24]
      break;
 8003dde:	e064      	b.n	8003eaa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68b9      	ldr	r1, [r7, #8]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 fb42 	bl	8004470 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	699a      	ldr	r2, [r3, #24]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	699a      	ldr	r2, [r3, #24]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6999      	ldr	r1, [r3, #24]
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	021a      	lsls	r2, r3, #8
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	619a      	str	r2, [r3, #24]
      break;
 8003e20:	e043      	b.n	8003eaa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68b9      	ldr	r1, [r7, #8]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 fb97 	bl	800455c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	69da      	ldr	r2, [r3, #28]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f042 0208 	orr.w	r2, r2, #8
 8003e3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	69da      	ldr	r2, [r3, #28]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 0204 	bic.w	r2, r2, #4
 8003e4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	69d9      	ldr	r1, [r3, #28]
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	691a      	ldr	r2, [r3, #16]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	61da      	str	r2, [r3, #28]
      break;
 8003e60:	e023      	b.n	8003eaa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68b9      	ldr	r1, [r7, #8]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 fbeb 	bl	8004644 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	69da      	ldr	r2, [r3, #28]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	69da      	ldr	r2, [r3, #28]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	69d9      	ldr	r1, [r3, #28]
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	021a      	lsls	r2, r3, #8
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	61da      	str	r2, [r3, #28]
      break;
 8003ea2:	e002      	b.n	8003eaa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ea8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3718      	adds	r7, #24
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d101      	bne.n	8003ed8 <HAL_TIM_ConfigClockSource+0x1c>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	e0b4      	b.n	8004042 <HAL_TIM_ConfigClockSource+0x186>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003ef6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003efe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68ba      	ldr	r2, [r7, #8]
 8003f06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f10:	d03e      	beq.n	8003f90 <HAL_TIM_ConfigClockSource+0xd4>
 8003f12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f16:	f200 8087 	bhi.w	8004028 <HAL_TIM_ConfigClockSource+0x16c>
 8003f1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f1e:	f000 8086 	beq.w	800402e <HAL_TIM_ConfigClockSource+0x172>
 8003f22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f26:	d87f      	bhi.n	8004028 <HAL_TIM_ConfigClockSource+0x16c>
 8003f28:	2b70      	cmp	r3, #112	@ 0x70
 8003f2a:	d01a      	beq.n	8003f62 <HAL_TIM_ConfigClockSource+0xa6>
 8003f2c:	2b70      	cmp	r3, #112	@ 0x70
 8003f2e:	d87b      	bhi.n	8004028 <HAL_TIM_ConfigClockSource+0x16c>
 8003f30:	2b60      	cmp	r3, #96	@ 0x60
 8003f32:	d050      	beq.n	8003fd6 <HAL_TIM_ConfigClockSource+0x11a>
 8003f34:	2b60      	cmp	r3, #96	@ 0x60
 8003f36:	d877      	bhi.n	8004028 <HAL_TIM_ConfigClockSource+0x16c>
 8003f38:	2b50      	cmp	r3, #80	@ 0x50
 8003f3a:	d03c      	beq.n	8003fb6 <HAL_TIM_ConfigClockSource+0xfa>
 8003f3c:	2b50      	cmp	r3, #80	@ 0x50
 8003f3e:	d873      	bhi.n	8004028 <HAL_TIM_ConfigClockSource+0x16c>
 8003f40:	2b40      	cmp	r3, #64	@ 0x40
 8003f42:	d058      	beq.n	8003ff6 <HAL_TIM_ConfigClockSource+0x13a>
 8003f44:	2b40      	cmp	r3, #64	@ 0x40
 8003f46:	d86f      	bhi.n	8004028 <HAL_TIM_ConfigClockSource+0x16c>
 8003f48:	2b30      	cmp	r3, #48	@ 0x30
 8003f4a:	d064      	beq.n	8004016 <HAL_TIM_ConfigClockSource+0x15a>
 8003f4c:	2b30      	cmp	r3, #48	@ 0x30
 8003f4e:	d86b      	bhi.n	8004028 <HAL_TIM_ConfigClockSource+0x16c>
 8003f50:	2b20      	cmp	r3, #32
 8003f52:	d060      	beq.n	8004016 <HAL_TIM_ConfigClockSource+0x15a>
 8003f54:	2b20      	cmp	r3, #32
 8003f56:	d867      	bhi.n	8004028 <HAL_TIM_ConfigClockSource+0x16c>
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d05c      	beq.n	8004016 <HAL_TIM_ConfigClockSource+0x15a>
 8003f5c:	2b10      	cmp	r3, #16
 8003f5e:	d05a      	beq.n	8004016 <HAL_TIM_ConfigClockSource+0x15a>
 8003f60:	e062      	b.n	8004028 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6818      	ldr	r0, [r3, #0]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	6899      	ldr	r1, [r3, #8]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	f000 fc37 	bl	80047e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	609a      	str	r2, [r3, #8]
      break;
 8003f8e:	e04f      	b.n	8004030 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6818      	ldr	r0, [r3, #0]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	6899      	ldr	r1, [r3, #8]
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	f000 fc20 	bl	80047e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689a      	ldr	r2, [r3, #8]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003fb2:	609a      	str	r2, [r3, #8]
      break;
 8003fb4:	e03c      	b.n	8004030 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6818      	ldr	r0, [r3, #0]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	6859      	ldr	r1, [r3, #4]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	f000 fb94 	bl	80046f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2150      	movs	r1, #80	@ 0x50
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 fbed 	bl	80047ae <TIM_ITRx_SetConfig>
      break;
 8003fd4:	e02c      	b.n	8004030 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6818      	ldr	r0, [r3, #0]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	6859      	ldr	r1, [r3, #4]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	f000 fbb3 	bl	800474e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2160      	movs	r1, #96	@ 0x60
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 fbdd 	bl	80047ae <TIM_ITRx_SetConfig>
      break;
 8003ff4:	e01c      	b.n	8004030 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6818      	ldr	r0, [r3, #0]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	6859      	ldr	r1, [r3, #4]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	461a      	mov	r2, r3
 8004004:	f000 fb74 	bl	80046f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2140      	movs	r1, #64	@ 0x40
 800400e:	4618      	mov	r0, r3
 8004010:	f000 fbcd 	bl	80047ae <TIM_ITRx_SetConfig>
      break;
 8004014:	e00c      	b.n	8004030 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4619      	mov	r1, r3
 8004020:	4610      	mov	r0, r2
 8004022:	f000 fbc4 	bl	80047ae <TIM_ITRx_SetConfig>
      break;
 8004026:	e003      	b.n	8004030 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	73fb      	strb	r3, [r7, #15]
      break;
 800402c:	e000      	b.n	8004030 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800402e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004040:	7bfb      	ldrb	r3, [r7, #15]
}
 8004042:	4618      	mov	r0, r3
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800405e:	b480      	push	{r7}
 8004060:	b083      	sub	sp, #12
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004066:	bf00      	nop
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004072:	b480      	push	{r7}
 8004074:	b083      	sub	sp, #12
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800407a:	bf00      	nop
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004086:	b480      	push	{r7}
 8004088:	b083      	sub	sp, #12
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800408e:	bf00      	nop
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800409a:	b480      	push	{r7}
 800409c:	b083      	sub	sp, #12
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80040a2:	bf00      	nop
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b084      	sub	sp, #16
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ba:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d107      	bne.n	80040d6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2201      	movs	r2, #1
 80040ca:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040d4:	e02a      	b.n	800412c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d107      	bne.n	80040f0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2202      	movs	r2, #2
 80040e4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040ee:	e01d      	b.n	800412c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d107      	bne.n	800410a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2204      	movs	r2, #4
 80040fe:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004108:	e010      	b.n	800412c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	429a      	cmp	r2, r3
 8004112:	d107      	bne.n	8004124 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2208      	movs	r2, #8
 8004118:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004122:	e003      	b.n	800412c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f7ff ffb4 	bl	800409a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	771a      	strb	r2, [r3, #28]
}
 8004138:	bf00      	nop
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800414c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	429a      	cmp	r2, r3
 8004156:	d10b      	bne.n	8004170 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2201      	movs	r2, #1
 800415c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d136      	bne.n	80041d4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800416e:	e031      	b.n	80041d4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	429a      	cmp	r2, r3
 8004178:	d10b      	bne.n	8004192 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2202      	movs	r2, #2
 800417e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d125      	bne.n	80041d4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004190:	e020      	b.n	80041d4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	429a      	cmp	r2, r3
 800419a:	d10b      	bne.n	80041b4 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2204      	movs	r2, #4
 80041a0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d114      	bne.n	80041d4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041b2:	e00f      	b.n	80041d4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d10a      	bne.n	80041d4 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2208      	movs	r2, #8
 80041c2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d103      	bne.n	80041d4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f7fc fa29 	bl	800062c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	771a      	strb	r2, [r3, #28]
}
 80041e0:	bf00      	nop
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d103      	bne.n	8004208 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2201      	movs	r2, #1
 8004204:	771a      	strb	r2, [r3, #28]
 8004206:	e019      	b.n	800423c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	429a      	cmp	r2, r3
 8004210:	d103      	bne.n	800421a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2202      	movs	r2, #2
 8004216:	771a      	strb	r2, [r3, #28]
 8004218:	e010      	b.n	800423c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	429a      	cmp	r2, r3
 8004222:	d103      	bne.n	800422c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2204      	movs	r2, #4
 8004228:	771a      	strb	r2, [r3, #28]
 800422a:	e007      	b.n	800423c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	429a      	cmp	r2, r3
 8004234:	d102      	bne.n	800423c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2208      	movs	r2, #8
 800423a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f7ff ff18 	bl	8004072 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	771a      	strb	r2, [r3, #28]
}
 8004248:	bf00      	nop
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a40      	ldr	r2, [pc, #256]	@ (8004364 <TIM_Base_SetConfig+0x114>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d013      	beq.n	8004290 <TIM_Base_SetConfig+0x40>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800426e:	d00f      	beq.n	8004290 <TIM_Base_SetConfig+0x40>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a3d      	ldr	r2, [pc, #244]	@ (8004368 <TIM_Base_SetConfig+0x118>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d00b      	beq.n	8004290 <TIM_Base_SetConfig+0x40>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a3c      	ldr	r2, [pc, #240]	@ (800436c <TIM_Base_SetConfig+0x11c>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d007      	beq.n	8004290 <TIM_Base_SetConfig+0x40>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a3b      	ldr	r2, [pc, #236]	@ (8004370 <TIM_Base_SetConfig+0x120>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d003      	beq.n	8004290 <TIM_Base_SetConfig+0x40>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a3a      	ldr	r2, [pc, #232]	@ (8004374 <TIM_Base_SetConfig+0x124>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d108      	bne.n	80042a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	4313      	orrs	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a2f      	ldr	r2, [pc, #188]	@ (8004364 <TIM_Base_SetConfig+0x114>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d02b      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042b0:	d027      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a2c      	ldr	r2, [pc, #176]	@ (8004368 <TIM_Base_SetConfig+0x118>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d023      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a2b      	ldr	r2, [pc, #172]	@ (800436c <TIM_Base_SetConfig+0x11c>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d01f      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a2a      	ldr	r2, [pc, #168]	@ (8004370 <TIM_Base_SetConfig+0x120>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d01b      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a29      	ldr	r2, [pc, #164]	@ (8004374 <TIM_Base_SetConfig+0x124>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d017      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a28      	ldr	r2, [pc, #160]	@ (8004378 <TIM_Base_SetConfig+0x128>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d013      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a27      	ldr	r2, [pc, #156]	@ (800437c <TIM_Base_SetConfig+0x12c>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d00f      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a26      	ldr	r2, [pc, #152]	@ (8004380 <TIM_Base_SetConfig+0x130>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d00b      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a25      	ldr	r2, [pc, #148]	@ (8004384 <TIM_Base_SetConfig+0x134>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d007      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a24      	ldr	r2, [pc, #144]	@ (8004388 <TIM_Base_SetConfig+0x138>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d003      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a23      	ldr	r2, [pc, #140]	@ (800438c <TIM_Base_SetConfig+0x13c>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d108      	bne.n	8004314 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	4313      	orrs	r3, r2
 8004312:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	4313      	orrs	r3, r2
 8004320:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a0a      	ldr	r2, [pc, #40]	@ (8004364 <TIM_Base_SetConfig+0x114>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d003      	beq.n	8004348 <TIM_Base_SetConfig+0xf8>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a0c      	ldr	r2, [pc, #48]	@ (8004374 <TIM_Base_SetConfig+0x124>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d103      	bne.n	8004350 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	691a      	ldr	r2, [r3, #16]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	615a      	str	r2, [r3, #20]
}
 8004356:	bf00      	nop
 8004358:	3714      	adds	r7, #20
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	40010000 	.word	0x40010000
 8004368:	40000400 	.word	0x40000400
 800436c:	40000800 	.word	0x40000800
 8004370:	40000c00 	.word	0x40000c00
 8004374:	40010400 	.word	0x40010400
 8004378:	40014000 	.word	0x40014000
 800437c:	40014400 	.word	0x40014400
 8004380:	40014800 	.word	0x40014800
 8004384:	40001800 	.word	0x40001800
 8004388:	40001c00 	.word	0x40001c00
 800438c:	40002000 	.word	0x40002000

08004390 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004390:	b480      	push	{r7}
 8004392:	b087      	sub	sp, #28
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	f023 0201 	bic.w	r2, r3, #1
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f023 0303 	bic.w	r3, r3, #3
 80043c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f023 0302 	bic.w	r3, r3, #2
 80043d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a20      	ldr	r2, [pc, #128]	@ (8004468 <TIM_OC1_SetConfig+0xd8>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d003      	beq.n	80043f4 <TIM_OC1_SetConfig+0x64>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a1f      	ldr	r2, [pc, #124]	@ (800446c <TIM_OC1_SetConfig+0xdc>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d10c      	bne.n	800440e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f023 0308 	bic.w	r3, r3, #8
 80043fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	4313      	orrs	r3, r2
 8004404:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f023 0304 	bic.w	r3, r3, #4
 800440c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a15      	ldr	r2, [pc, #84]	@ (8004468 <TIM_OC1_SetConfig+0xd8>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d003      	beq.n	800441e <TIM_OC1_SetConfig+0x8e>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a14      	ldr	r2, [pc, #80]	@ (800446c <TIM_OC1_SetConfig+0xdc>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d111      	bne.n	8004442 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004424:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800442c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	4313      	orrs	r3, r2
 8004436:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	4313      	orrs	r3, r2
 8004440:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	621a      	str	r2, [r3, #32]
}
 800445c:	bf00      	nop
 800445e:	371c      	adds	r7, #28
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr
 8004468:	40010000 	.word	0x40010000
 800446c:	40010400 	.word	0x40010400

08004470 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004470:	b480      	push	{r7}
 8004472:	b087      	sub	sp, #28
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	f023 0210 	bic.w	r2, r3, #16
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800449e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	021b      	lsls	r3, r3, #8
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	f023 0320 	bic.w	r3, r3, #32
 80044ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	011b      	lsls	r3, r3, #4
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a22      	ldr	r2, [pc, #136]	@ (8004554 <TIM_OC2_SetConfig+0xe4>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d003      	beq.n	80044d8 <TIM_OC2_SetConfig+0x68>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a21      	ldr	r2, [pc, #132]	@ (8004558 <TIM_OC2_SetConfig+0xe8>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d10d      	bne.n	80044f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	011b      	lsls	r3, r3, #4
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a17      	ldr	r2, [pc, #92]	@ (8004554 <TIM_OC2_SetConfig+0xe4>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d003      	beq.n	8004504 <TIM_OC2_SetConfig+0x94>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a16      	ldr	r2, [pc, #88]	@ (8004558 <TIM_OC2_SetConfig+0xe8>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d113      	bne.n	800452c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800450a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004512:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	4313      	orrs	r3, r2
 800451e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	4313      	orrs	r3, r2
 800452a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	621a      	str	r2, [r3, #32]
}
 8004546:	bf00      	nop
 8004548:	371c      	adds	r7, #28
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	40010000 	.word	0x40010000
 8004558:	40010400 	.word	0x40010400

0800455c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800458a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f023 0303 	bic.w	r3, r3, #3
 8004592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	4313      	orrs	r3, r2
 800459c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80045a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	021b      	lsls	r3, r3, #8
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a21      	ldr	r2, [pc, #132]	@ (800463c <TIM_OC3_SetConfig+0xe0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d003      	beq.n	80045c2 <TIM_OC3_SetConfig+0x66>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a20      	ldr	r2, [pc, #128]	@ (8004640 <TIM_OC3_SetConfig+0xe4>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d10d      	bne.n	80045de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80045c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	021b      	lsls	r3, r3, #8
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80045dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a16      	ldr	r2, [pc, #88]	@ (800463c <TIM_OC3_SetConfig+0xe0>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d003      	beq.n	80045ee <TIM_OC3_SetConfig+0x92>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a15      	ldr	r2, [pc, #84]	@ (8004640 <TIM_OC3_SetConfig+0xe4>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d113      	bne.n	8004616 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80045fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	011b      	lsls	r3, r3, #4
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	4313      	orrs	r3, r2
 8004608:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	4313      	orrs	r3, r2
 8004614:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	621a      	str	r2, [r3, #32]
}
 8004630:	bf00      	nop
 8004632:	371c      	adds	r7, #28
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	40010000 	.word	0x40010000
 8004640:	40010400 	.word	0x40010400

08004644 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004644:	b480      	push	{r7}
 8004646:	b087      	sub	sp, #28
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800467a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	021b      	lsls	r3, r3, #8
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	4313      	orrs	r3, r2
 8004686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800468e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	031b      	lsls	r3, r3, #12
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	4313      	orrs	r3, r2
 800469a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a12      	ldr	r2, [pc, #72]	@ (80046e8 <TIM_OC4_SetConfig+0xa4>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d003      	beq.n	80046ac <TIM_OC4_SetConfig+0x68>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a11      	ldr	r2, [pc, #68]	@ (80046ec <TIM_OC4_SetConfig+0xa8>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d109      	bne.n	80046c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	019b      	lsls	r3, r3, #6
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	4313      	orrs	r3, r2
 80046be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685a      	ldr	r2, [r3, #4]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	621a      	str	r2, [r3, #32]
}
 80046da:	bf00      	nop
 80046dc:	371c      	adds	r7, #28
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	40010000 	.word	0x40010000
 80046ec:	40010400 	.word	0x40010400

080046f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b087      	sub	sp, #28
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	f023 0201 	bic.w	r2, r3, #1
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800471a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	011b      	lsls	r3, r3, #4
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	4313      	orrs	r3, r2
 8004724:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	f023 030a 	bic.w	r3, r3, #10
 800472c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	4313      	orrs	r3, r2
 8004734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	621a      	str	r2, [r3, #32]
}
 8004742:	bf00      	nop
 8004744:	371c      	adds	r7, #28
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800474e:	b480      	push	{r7}
 8004750:	b087      	sub	sp, #28
 8004752:	af00      	add	r7, sp, #0
 8004754:	60f8      	str	r0, [r7, #12]
 8004756:	60b9      	str	r1, [r7, #8]
 8004758:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	f023 0210 	bic.w	r2, r3, #16
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004778:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	031b      	lsls	r3, r3, #12
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	4313      	orrs	r3, r2
 8004782:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800478a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	4313      	orrs	r3, r2
 8004794:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	621a      	str	r2, [r3, #32]
}
 80047a2:	bf00      	nop
 80047a4:	371c      	adds	r7, #28
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b085      	sub	sp, #20
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
 80047b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	f043 0307 	orr.w	r3, r3, #7
 80047d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	609a      	str	r2, [r3, #8]
}
 80047d8:	bf00      	nop
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
 80047f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80047fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	021a      	lsls	r2, r3, #8
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	431a      	orrs	r2, r3
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	4313      	orrs	r3, r2
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	4313      	orrs	r3, r2
 8004810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	609a      	str	r2, [r3, #8]
}
 8004818:	bf00      	nop
 800481a:	371c      	adds	r7, #28
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004824:	b480      	push	{r7}
 8004826:	b087      	sub	sp, #28
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	f003 031f 	and.w	r3, r3, #31
 8004836:	2201      	movs	r2, #1
 8004838:	fa02 f303 	lsl.w	r3, r2, r3
 800483c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6a1a      	ldr	r2, [r3, #32]
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	43db      	mvns	r3, r3
 8004846:	401a      	ands	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6a1a      	ldr	r2, [r3, #32]
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	f003 031f 	and.w	r3, r3, #31
 8004856:	6879      	ldr	r1, [r7, #4]
 8004858:	fa01 f303 	lsl.w	r3, r1, r3
 800485c:	431a      	orrs	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	621a      	str	r2, [r3, #32]
}
 8004862:	bf00      	nop
 8004864:	371c      	adds	r7, #28
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
	...

08004870 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004880:	2b01      	cmp	r3, #1
 8004882:	d101      	bne.n	8004888 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004884:	2302      	movs	r3, #2
 8004886:	e05a      	b.n	800493e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2202      	movs	r2, #2
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a21      	ldr	r2, [pc, #132]	@ (800494c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d022      	beq.n	8004912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048d4:	d01d      	beq.n	8004912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a1d      	ldr	r2, [pc, #116]	@ (8004950 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d018      	beq.n	8004912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a1b      	ldr	r2, [pc, #108]	@ (8004954 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d013      	beq.n	8004912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a1a      	ldr	r2, [pc, #104]	@ (8004958 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d00e      	beq.n	8004912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a18      	ldr	r2, [pc, #96]	@ (800495c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d009      	beq.n	8004912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a17      	ldr	r2, [pc, #92]	@ (8004960 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d004      	beq.n	8004912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a15      	ldr	r2, [pc, #84]	@ (8004964 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d10c      	bne.n	800492c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004918:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	4313      	orrs	r3, r2
 8004922:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	40010000 	.word	0x40010000
 8004950:	40000400 	.word	0x40000400
 8004954:	40000800 	.word	0x40000800
 8004958:	40000c00 	.word	0x40000c00
 800495c:	40010400 	.word	0x40010400
 8004960:	40014000 	.word	0x40014000
 8004964:	40001800 	.word	0x40001800

08004968 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004972:	2300      	movs	r3, #0
 8004974:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800497c:	2b01      	cmp	r3, #1
 800497e:	d101      	bne.n	8004984 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004980:	2302      	movs	r3, #2
 8004982:	e03d      	b.n	8004a00 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	4313      	orrs	r3, r2
 8004998:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	695b      	ldr	r3, [r3, #20]
 80049dc:	4313      	orrs	r3, r2
 80049de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e03f      	b.n	8004ac6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d106      	bne.n	8004a60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f7fc fc2a 	bl	80012b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2224      	movs	r2, #36	@ 0x24
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68da      	ldr	r2, [r3, #12]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f929 	bl	8004cd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	691a      	ldr	r2, [r3, #16]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	695a      	ldr	r2, [r3, #20]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68da      	ldr	r2, [r3, #12]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004aac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2220      	movs	r2, #32
 8004ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b08a      	sub	sp, #40	@ 0x28
 8004ad2:	af02      	add	r7, sp, #8
 8004ad4:	60f8      	str	r0, [r7, #12]
 8004ad6:	60b9      	str	r1, [r7, #8]
 8004ad8:	603b      	str	r3, [r7, #0]
 8004ada:	4613      	mov	r3, r2
 8004adc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b20      	cmp	r3, #32
 8004aec:	d17c      	bne.n	8004be8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d002      	beq.n	8004afa <HAL_UART_Transmit+0x2c>
 8004af4:	88fb      	ldrh	r3, [r7, #6]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e075      	b.n	8004bea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d101      	bne.n	8004b0c <HAL_UART_Transmit+0x3e>
 8004b08:	2302      	movs	r3, #2
 8004b0a:	e06e      	b.n	8004bea <HAL_UART_Transmit+0x11c>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2221      	movs	r2, #33	@ 0x21
 8004b1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b22:	f7fc fd21 	bl	8001568 <HAL_GetTick>
 8004b26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	88fa      	ldrh	r2, [r7, #6]
 8004b2c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	88fa      	ldrh	r2, [r7, #6]
 8004b32:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b3c:	d108      	bne.n	8004b50 <HAL_UART_Transmit+0x82>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d104      	bne.n	8004b50 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004b46:	2300      	movs	r3, #0
 8004b48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	61bb      	str	r3, [r7, #24]
 8004b4e:	e003      	b.n	8004b58 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b54:	2300      	movs	r3, #0
 8004b56:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8004b60:	e02a      	b.n	8004bb8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	2180      	movs	r1, #128	@ 0x80
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 f840 	bl	8004bf2 <UART_WaitOnFlagUntilTimeout>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d001      	beq.n	8004b7c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e036      	b.n	8004bea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10b      	bne.n	8004b9a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	881b      	ldrh	r3, [r3, #0]
 8004b86:	461a      	mov	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	3302      	adds	r3, #2
 8004b96:	61bb      	str	r3, [r7, #24]
 8004b98:	e007      	b.n	8004baa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	781a      	ldrb	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1cf      	bne.n	8004b62 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	2140      	movs	r1, #64	@ 0x40
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f000 f810 	bl	8004bf2 <UART_WaitOnFlagUntilTimeout>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d001      	beq.n	8004bdc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e006      	b.n	8004bea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2220      	movs	r2, #32
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004be4:	2300      	movs	r3, #0
 8004be6:	e000      	b.n	8004bea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004be8:	2302      	movs	r3, #2
  }
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3720      	adds	r7, #32
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b090      	sub	sp, #64	@ 0x40
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	60f8      	str	r0, [r7, #12]
 8004bfa:	60b9      	str	r1, [r7, #8]
 8004bfc:	603b      	str	r3, [r7, #0]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c02:	e050      	b.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0a:	d04c      	beq.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d007      	beq.n	8004c22 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c12:	f7fc fca9 	bl	8001568 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d241      	bcs.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	330c      	adds	r3, #12
 8004c28:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c2c:	e853 3f00 	ldrex	r3, [r3]
 8004c30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c34:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	330c      	adds	r3, #12
 8004c40:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004c42:	637a      	str	r2, [r7, #52]	@ 0x34
 8004c44:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c46:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004c48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c4a:	e841 2300 	strex	r3, r2, [r1]
 8004c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1e5      	bne.n	8004c22 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	3314      	adds	r3, #20
 8004c5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	e853 3f00 	ldrex	r3, [r3]
 8004c64:	613b      	str	r3, [r7, #16]
   return(result);
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	f023 0301 	bic.w	r3, r3, #1
 8004c6c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	3314      	adds	r3, #20
 8004c74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004c76:	623a      	str	r2, [r7, #32]
 8004c78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7a:	69f9      	ldr	r1, [r7, #28]
 8004c7c:	6a3a      	ldr	r2, [r7, #32]
 8004c7e:	e841 2300 	strex	r3, r2, [r1]
 8004c82:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1e5      	bne.n	8004c56 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e00f      	b.n	8004cc6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	bf0c      	ite	eq
 8004cb6:	2301      	moveq	r3, #1
 8004cb8:	2300      	movne	r3, #0
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	79fb      	ldrb	r3, [r7, #7]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d09f      	beq.n	8004c04 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3740      	adds	r7, #64	@ 0x40
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
	...

08004cd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cd4:	b0c0      	sub	sp, #256	@ 0x100
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cec:	68d9      	ldr	r1, [r3, #12]
 8004cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	ea40 0301 	orr.w	r3, r0, r1
 8004cf8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cfe:	689a      	ldr	r2, [r3, #8]
 8004d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	431a      	orrs	r2, r3
 8004d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004d28:	f021 010c 	bic.w	r1, r1, #12
 8004d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d36:	430b      	orrs	r3, r1
 8004d38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d4a:	6999      	ldr	r1, [r3, #24]
 8004d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	ea40 0301 	orr.w	r3, r0, r1
 8004d56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	4b8f      	ldr	r3, [pc, #572]	@ (8004f9c <UART_SetConfig+0x2cc>)
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d005      	beq.n	8004d70 <UART_SetConfig+0xa0>
 8004d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	4b8d      	ldr	r3, [pc, #564]	@ (8004fa0 <UART_SetConfig+0x2d0>)
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d104      	bne.n	8004d7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d70:	f7fd fe44 	bl	80029fc <HAL_RCC_GetPCLK2Freq>
 8004d74:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004d78:	e003      	b.n	8004d82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d7a:	f7fd fe2b 	bl	80029d4 <HAL_RCC_GetPCLK1Freq>
 8004d7e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d86:	69db      	ldr	r3, [r3, #28]
 8004d88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d8c:	f040 810c 	bne.w	8004fa8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d94:	2200      	movs	r2, #0
 8004d96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d9a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004d9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004da2:	4622      	mov	r2, r4
 8004da4:	462b      	mov	r3, r5
 8004da6:	1891      	adds	r1, r2, r2
 8004da8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004daa:	415b      	adcs	r3, r3
 8004dac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004dae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004db2:	4621      	mov	r1, r4
 8004db4:	eb12 0801 	adds.w	r8, r2, r1
 8004db8:	4629      	mov	r1, r5
 8004dba:	eb43 0901 	adc.w	r9, r3, r1
 8004dbe:	f04f 0200 	mov.w	r2, #0
 8004dc2:	f04f 0300 	mov.w	r3, #0
 8004dc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dd2:	4690      	mov	r8, r2
 8004dd4:	4699      	mov	r9, r3
 8004dd6:	4623      	mov	r3, r4
 8004dd8:	eb18 0303 	adds.w	r3, r8, r3
 8004ddc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004de0:	462b      	mov	r3, r5
 8004de2:	eb49 0303 	adc.w	r3, r9, r3
 8004de6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004df6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004dfa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004dfe:	460b      	mov	r3, r1
 8004e00:	18db      	adds	r3, r3, r3
 8004e02:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e04:	4613      	mov	r3, r2
 8004e06:	eb42 0303 	adc.w	r3, r2, r3
 8004e0a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004e10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004e14:	f7fb fa54 	bl	80002c0 <__aeabi_uldivmod>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	4b61      	ldr	r3, [pc, #388]	@ (8004fa4 <UART_SetConfig+0x2d4>)
 8004e1e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e22:	095b      	lsrs	r3, r3, #5
 8004e24:	011c      	lsls	r4, r3, #4
 8004e26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e30:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004e34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004e38:	4642      	mov	r2, r8
 8004e3a:	464b      	mov	r3, r9
 8004e3c:	1891      	adds	r1, r2, r2
 8004e3e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004e40:	415b      	adcs	r3, r3
 8004e42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004e48:	4641      	mov	r1, r8
 8004e4a:	eb12 0a01 	adds.w	sl, r2, r1
 8004e4e:	4649      	mov	r1, r9
 8004e50:	eb43 0b01 	adc.w	fp, r3, r1
 8004e54:	f04f 0200 	mov.w	r2, #0
 8004e58:	f04f 0300 	mov.w	r3, #0
 8004e5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e68:	4692      	mov	sl, r2
 8004e6a:	469b      	mov	fp, r3
 8004e6c:	4643      	mov	r3, r8
 8004e6e:	eb1a 0303 	adds.w	r3, sl, r3
 8004e72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e76:	464b      	mov	r3, r9
 8004e78:	eb4b 0303 	adc.w	r3, fp, r3
 8004e7c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e8c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004e90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004e94:	460b      	mov	r3, r1
 8004e96:	18db      	adds	r3, r3, r3
 8004e98:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	eb42 0303 	adc.w	r3, r2, r3
 8004ea0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ea2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004ea6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004eaa:	f7fb fa09 	bl	80002c0 <__aeabi_uldivmod>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	4611      	mov	r1, r2
 8004eb4:	4b3b      	ldr	r3, [pc, #236]	@ (8004fa4 <UART_SetConfig+0x2d4>)
 8004eb6:	fba3 2301 	umull	r2, r3, r3, r1
 8004eba:	095b      	lsrs	r3, r3, #5
 8004ebc:	2264      	movs	r2, #100	@ 0x64
 8004ebe:	fb02 f303 	mul.w	r3, r2, r3
 8004ec2:	1acb      	subs	r3, r1, r3
 8004ec4:	00db      	lsls	r3, r3, #3
 8004ec6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004eca:	4b36      	ldr	r3, [pc, #216]	@ (8004fa4 <UART_SetConfig+0x2d4>)
 8004ecc:	fba3 2302 	umull	r2, r3, r3, r2
 8004ed0:	095b      	lsrs	r3, r3, #5
 8004ed2:	005b      	lsls	r3, r3, #1
 8004ed4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004ed8:	441c      	add	r4, r3
 8004eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ee4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004ee8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004eec:	4642      	mov	r2, r8
 8004eee:	464b      	mov	r3, r9
 8004ef0:	1891      	adds	r1, r2, r2
 8004ef2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004ef4:	415b      	adcs	r3, r3
 8004ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ef8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004efc:	4641      	mov	r1, r8
 8004efe:	1851      	adds	r1, r2, r1
 8004f00:	6339      	str	r1, [r7, #48]	@ 0x30
 8004f02:	4649      	mov	r1, r9
 8004f04:	414b      	adcs	r3, r1
 8004f06:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f08:	f04f 0200 	mov.w	r2, #0
 8004f0c:	f04f 0300 	mov.w	r3, #0
 8004f10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004f14:	4659      	mov	r1, fp
 8004f16:	00cb      	lsls	r3, r1, #3
 8004f18:	4651      	mov	r1, sl
 8004f1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f1e:	4651      	mov	r1, sl
 8004f20:	00ca      	lsls	r2, r1, #3
 8004f22:	4610      	mov	r0, r2
 8004f24:	4619      	mov	r1, r3
 8004f26:	4603      	mov	r3, r0
 8004f28:	4642      	mov	r2, r8
 8004f2a:	189b      	adds	r3, r3, r2
 8004f2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f30:	464b      	mov	r3, r9
 8004f32:	460a      	mov	r2, r1
 8004f34:	eb42 0303 	adc.w	r3, r2, r3
 8004f38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004f48:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004f4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004f50:	460b      	mov	r3, r1
 8004f52:	18db      	adds	r3, r3, r3
 8004f54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f56:	4613      	mov	r3, r2
 8004f58:	eb42 0303 	adc.w	r3, r2, r3
 8004f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004f62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004f66:	f7fb f9ab 	bl	80002c0 <__aeabi_uldivmod>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8004fa4 <UART_SetConfig+0x2d4>)
 8004f70:	fba3 1302 	umull	r1, r3, r3, r2
 8004f74:	095b      	lsrs	r3, r3, #5
 8004f76:	2164      	movs	r1, #100	@ 0x64
 8004f78:	fb01 f303 	mul.w	r3, r1, r3
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	3332      	adds	r3, #50	@ 0x32
 8004f82:	4a08      	ldr	r2, [pc, #32]	@ (8004fa4 <UART_SetConfig+0x2d4>)
 8004f84:	fba2 2303 	umull	r2, r3, r2, r3
 8004f88:	095b      	lsrs	r3, r3, #5
 8004f8a:	f003 0207 	and.w	r2, r3, #7
 8004f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4422      	add	r2, r4
 8004f96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f98:	e106      	b.n	80051a8 <UART_SetConfig+0x4d8>
 8004f9a:	bf00      	nop
 8004f9c:	40011000 	.word	0x40011000
 8004fa0:	40011400 	.word	0x40011400
 8004fa4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fac:	2200      	movs	r2, #0
 8004fae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004fb2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004fb6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004fba:	4642      	mov	r2, r8
 8004fbc:	464b      	mov	r3, r9
 8004fbe:	1891      	adds	r1, r2, r2
 8004fc0:	6239      	str	r1, [r7, #32]
 8004fc2:	415b      	adcs	r3, r3
 8004fc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004fca:	4641      	mov	r1, r8
 8004fcc:	1854      	adds	r4, r2, r1
 8004fce:	4649      	mov	r1, r9
 8004fd0:	eb43 0501 	adc.w	r5, r3, r1
 8004fd4:	f04f 0200 	mov.w	r2, #0
 8004fd8:	f04f 0300 	mov.w	r3, #0
 8004fdc:	00eb      	lsls	r3, r5, #3
 8004fde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fe2:	00e2      	lsls	r2, r4, #3
 8004fe4:	4614      	mov	r4, r2
 8004fe6:	461d      	mov	r5, r3
 8004fe8:	4643      	mov	r3, r8
 8004fea:	18e3      	adds	r3, r4, r3
 8004fec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ff0:	464b      	mov	r3, r9
 8004ff2:	eb45 0303 	adc.w	r3, r5, r3
 8004ff6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005006:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800500a:	f04f 0200 	mov.w	r2, #0
 800500e:	f04f 0300 	mov.w	r3, #0
 8005012:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005016:	4629      	mov	r1, r5
 8005018:	008b      	lsls	r3, r1, #2
 800501a:	4621      	mov	r1, r4
 800501c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005020:	4621      	mov	r1, r4
 8005022:	008a      	lsls	r2, r1, #2
 8005024:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005028:	f7fb f94a 	bl	80002c0 <__aeabi_uldivmod>
 800502c:	4602      	mov	r2, r0
 800502e:	460b      	mov	r3, r1
 8005030:	4b60      	ldr	r3, [pc, #384]	@ (80051b4 <UART_SetConfig+0x4e4>)
 8005032:	fba3 2302 	umull	r2, r3, r3, r2
 8005036:	095b      	lsrs	r3, r3, #5
 8005038:	011c      	lsls	r4, r3, #4
 800503a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800503e:	2200      	movs	r2, #0
 8005040:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005044:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005048:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800504c:	4642      	mov	r2, r8
 800504e:	464b      	mov	r3, r9
 8005050:	1891      	adds	r1, r2, r2
 8005052:	61b9      	str	r1, [r7, #24]
 8005054:	415b      	adcs	r3, r3
 8005056:	61fb      	str	r3, [r7, #28]
 8005058:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800505c:	4641      	mov	r1, r8
 800505e:	1851      	adds	r1, r2, r1
 8005060:	6139      	str	r1, [r7, #16]
 8005062:	4649      	mov	r1, r9
 8005064:	414b      	adcs	r3, r1
 8005066:	617b      	str	r3, [r7, #20]
 8005068:	f04f 0200 	mov.w	r2, #0
 800506c:	f04f 0300 	mov.w	r3, #0
 8005070:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005074:	4659      	mov	r1, fp
 8005076:	00cb      	lsls	r3, r1, #3
 8005078:	4651      	mov	r1, sl
 800507a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800507e:	4651      	mov	r1, sl
 8005080:	00ca      	lsls	r2, r1, #3
 8005082:	4610      	mov	r0, r2
 8005084:	4619      	mov	r1, r3
 8005086:	4603      	mov	r3, r0
 8005088:	4642      	mov	r2, r8
 800508a:	189b      	adds	r3, r3, r2
 800508c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005090:	464b      	mov	r3, r9
 8005092:	460a      	mov	r2, r1
 8005094:	eb42 0303 	adc.w	r3, r2, r3
 8005098:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800509c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80050a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80050a8:	f04f 0200 	mov.w	r2, #0
 80050ac:	f04f 0300 	mov.w	r3, #0
 80050b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80050b4:	4649      	mov	r1, r9
 80050b6:	008b      	lsls	r3, r1, #2
 80050b8:	4641      	mov	r1, r8
 80050ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050be:	4641      	mov	r1, r8
 80050c0:	008a      	lsls	r2, r1, #2
 80050c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80050c6:	f7fb f8fb 	bl	80002c0 <__aeabi_uldivmod>
 80050ca:	4602      	mov	r2, r0
 80050cc:	460b      	mov	r3, r1
 80050ce:	4611      	mov	r1, r2
 80050d0:	4b38      	ldr	r3, [pc, #224]	@ (80051b4 <UART_SetConfig+0x4e4>)
 80050d2:	fba3 2301 	umull	r2, r3, r3, r1
 80050d6:	095b      	lsrs	r3, r3, #5
 80050d8:	2264      	movs	r2, #100	@ 0x64
 80050da:	fb02 f303 	mul.w	r3, r2, r3
 80050de:	1acb      	subs	r3, r1, r3
 80050e0:	011b      	lsls	r3, r3, #4
 80050e2:	3332      	adds	r3, #50	@ 0x32
 80050e4:	4a33      	ldr	r2, [pc, #204]	@ (80051b4 <UART_SetConfig+0x4e4>)
 80050e6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ea:	095b      	lsrs	r3, r3, #5
 80050ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050f0:	441c      	add	r4, r3
 80050f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050f6:	2200      	movs	r2, #0
 80050f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80050fa:	677a      	str	r2, [r7, #116]	@ 0x74
 80050fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005100:	4642      	mov	r2, r8
 8005102:	464b      	mov	r3, r9
 8005104:	1891      	adds	r1, r2, r2
 8005106:	60b9      	str	r1, [r7, #8]
 8005108:	415b      	adcs	r3, r3
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005110:	4641      	mov	r1, r8
 8005112:	1851      	adds	r1, r2, r1
 8005114:	6039      	str	r1, [r7, #0]
 8005116:	4649      	mov	r1, r9
 8005118:	414b      	adcs	r3, r1
 800511a:	607b      	str	r3, [r7, #4]
 800511c:	f04f 0200 	mov.w	r2, #0
 8005120:	f04f 0300 	mov.w	r3, #0
 8005124:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005128:	4659      	mov	r1, fp
 800512a:	00cb      	lsls	r3, r1, #3
 800512c:	4651      	mov	r1, sl
 800512e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005132:	4651      	mov	r1, sl
 8005134:	00ca      	lsls	r2, r1, #3
 8005136:	4610      	mov	r0, r2
 8005138:	4619      	mov	r1, r3
 800513a:	4603      	mov	r3, r0
 800513c:	4642      	mov	r2, r8
 800513e:	189b      	adds	r3, r3, r2
 8005140:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005142:	464b      	mov	r3, r9
 8005144:	460a      	mov	r2, r1
 8005146:	eb42 0303 	adc.w	r3, r2, r3
 800514a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800514c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	663b      	str	r3, [r7, #96]	@ 0x60
 8005156:	667a      	str	r2, [r7, #100]	@ 0x64
 8005158:	f04f 0200 	mov.w	r2, #0
 800515c:	f04f 0300 	mov.w	r3, #0
 8005160:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005164:	4649      	mov	r1, r9
 8005166:	008b      	lsls	r3, r1, #2
 8005168:	4641      	mov	r1, r8
 800516a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800516e:	4641      	mov	r1, r8
 8005170:	008a      	lsls	r2, r1, #2
 8005172:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005176:	f7fb f8a3 	bl	80002c0 <__aeabi_uldivmod>
 800517a:	4602      	mov	r2, r0
 800517c:	460b      	mov	r3, r1
 800517e:	4b0d      	ldr	r3, [pc, #52]	@ (80051b4 <UART_SetConfig+0x4e4>)
 8005180:	fba3 1302 	umull	r1, r3, r3, r2
 8005184:	095b      	lsrs	r3, r3, #5
 8005186:	2164      	movs	r1, #100	@ 0x64
 8005188:	fb01 f303 	mul.w	r3, r1, r3
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	011b      	lsls	r3, r3, #4
 8005190:	3332      	adds	r3, #50	@ 0x32
 8005192:	4a08      	ldr	r2, [pc, #32]	@ (80051b4 <UART_SetConfig+0x4e4>)
 8005194:	fba2 2303 	umull	r2, r3, r2, r3
 8005198:	095b      	lsrs	r3, r3, #5
 800519a:	f003 020f 	and.w	r2, r3, #15
 800519e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4422      	add	r2, r4
 80051a6:	609a      	str	r2, [r3, #8]
}
 80051a8:	bf00      	nop
 80051aa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80051ae:	46bd      	mov	sp, r7
 80051b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051b4:	51eb851f 	.word	0x51eb851f

080051b8 <siprintf>:
 80051b8:	b40e      	push	{r1, r2, r3}
 80051ba:	b500      	push	{lr}
 80051bc:	b09c      	sub	sp, #112	@ 0x70
 80051be:	ab1d      	add	r3, sp, #116	@ 0x74
 80051c0:	9002      	str	r0, [sp, #8]
 80051c2:	9006      	str	r0, [sp, #24]
 80051c4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80051c8:	4809      	ldr	r0, [pc, #36]	@ (80051f0 <siprintf+0x38>)
 80051ca:	9107      	str	r1, [sp, #28]
 80051cc:	9104      	str	r1, [sp, #16]
 80051ce:	4909      	ldr	r1, [pc, #36]	@ (80051f4 <siprintf+0x3c>)
 80051d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80051d4:	9105      	str	r1, [sp, #20]
 80051d6:	6800      	ldr	r0, [r0, #0]
 80051d8:	9301      	str	r3, [sp, #4]
 80051da:	a902      	add	r1, sp, #8
 80051dc:	f000 f994 	bl	8005508 <_svfiprintf_r>
 80051e0:	9b02      	ldr	r3, [sp, #8]
 80051e2:	2200      	movs	r2, #0
 80051e4:	701a      	strb	r2, [r3, #0]
 80051e6:	b01c      	add	sp, #112	@ 0x70
 80051e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80051ec:	b003      	add	sp, #12
 80051ee:	4770      	bx	lr
 80051f0:	20000010 	.word	0x20000010
 80051f4:	ffff0208 	.word	0xffff0208

080051f8 <memset>:
 80051f8:	4402      	add	r2, r0
 80051fa:	4603      	mov	r3, r0
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d100      	bne.n	8005202 <memset+0xa>
 8005200:	4770      	bx	lr
 8005202:	f803 1b01 	strb.w	r1, [r3], #1
 8005206:	e7f9      	b.n	80051fc <memset+0x4>

08005208 <__errno>:
 8005208:	4b01      	ldr	r3, [pc, #4]	@ (8005210 <__errno+0x8>)
 800520a:	6818      	ldr	r0, [r3, #0]
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	20000010 	.word	0x20000010

08005214 <__libc_init_array>:
 8005214:	b570      	push	{r4, r5, r6, lr}
 8005216:	4d0d      	ldr	r5, [pc, #52]	@ (800524c <__libc_init_array+0x38>)
 8005218:	4c0d      	ldr	r4, [pc, #52]	@ (8005250 <__libc_init_array+0x3c>)
 800521a:	1b64      	subs	r4, r4, r5
 800521c:	10a4      	asrs	r4, r4, #2
 800521e:	2600      	movs	r6, #0
 8005220:	42a6      	cmp	r6, r4
 8005222:	d109      	bne.n	8005238 <__libc_init_array+0x24>
 8005224:	4d0b      	ldr	r5, [pc, #44]	@ (8005254 <__libc_init_array+0x40>)
 8005226:	4c0c      	ldr	r4, [pc, #48]	@ (8005258 <__libc_init_array+0x44>)
 8005228:	f000 fc66 	bl	8005af8 <_init>
 800522c:	1b64      	subs	r4, r4, r5
 800522e:	10a4      	asrs	r4, r4, #2
 8005230:	2600      	movs	r6, #0
 8005232:	42a6      	cmp	r6, r4
 8005234:	d105      	bne.n	8005242 <__libc_init_array+0x2e>
 8005236:	bd70      	pop	{r4, r5, r6, pc}
 8005238:	f855 3b04 	ldr.w	r3, [r5], #4
 800523c:	4798      	blx	r3
 800523e:	3601      	adds	r6, #1
 8005240:	e7ee      	b.n	8005220 <__libc_init_array+0xc>
 8005242:	f855 3b04 	ldr.w	r3, [r5], #4
 8005246:	4798      	blx	r3
 8005248:	3601      	adds	r6, #1
 800524a:	e7f2      	b.n	8005232 <__libc_init_array+0x1e>
 800524c:	08005d10 	.word	0x08005d10
 8005250:	08005d10 	.word	0x08005d10
 8005254:	08005d10 	.word	0x08005d10
 8005258:	08005d14 	.word	0x08005d14

0800525c <__retarget_lock_acquire_recursive>:
 800525c:	4770      	bx	lr

0800525e <__retarget_lock_release_recursive>:
 800525e:	4770      	bx	lr

08005260 <_free_r>:
 8005260:	b538      	push	{r3, r4, r5, lr}
 8005262:	4605      	mov	r5, r0
 8005264:	2900      	cmp	r1, #0
 8005266:	d041      	beq.n	80052ec <_free_r+0x8c>
 8005268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800526c:	1f0c      	subs	r4, r1, #4
 800526e:	2b00      	cmp	r3, #0
 8005270:	bfb8      	it	lt
 8005272:	18e4      	addlt	r4, r4, r3
 8005274:	f000 f8e0 	bl	8005438 <__malloc_lock>
 8005278:	4a1d      	ldr	r2, [pc, #116]	@ (80052f0 <_free_r+0x90>)
 800527a:	6813      	ldr	r3, [r2, #0]
 800527c:	b933      	cbnz	r3, 800528c <_free_r+0x2c>
 800527e:	6063      	str	r3, [r4, #4]
 8005280:	6014      	str	r4, [r2, #0]
 8005282:	4628      	mov	r0, r5
 8005284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005288:	f000 b8dc 	b.w	8005444 <__malloc_unlock>
 800528c:	42a3      	cmp	r3, r4
 800528e:	d908      	bls.n	80052a2 <_free_r+0x42>
 8005290:	6820      	ldr	r0, [r4, #0]
 8005292:	1821      	adds	r1, r4, r0
 8005294:	428b      	cmp	r3, r1
 8005296:	bf01      	itttt	eq
 8005298:	6819      	ldreq	r1, [r3, #0]
 800529a:	685b      	ldreq	r3, [r3, #4]
 800529c:	1809      	addeq	r1, r1, r0
 800529e:	6021      	streq	r1, [r4, #0]
 80052a0:	e7ed      	b.n	800527e <_free_r+0x1e>
 80052a2:	461a      	mov	r2, r3
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	b10b      	cbz	r3, 80052ac <_free_r+0x4c>
 80052a8:	42a3      	cmp	r3, r4
 80052aa:	d9fa      	bls.n	80052a2 <_free_r+0x42>
 80052ac:	6811      	ldr	r1, [r2, #0]
 80052ae:	1850      	adds	r0, r2, r1
 80052b0:	42a0      	cmp	r0, r4
 80052b2:	d10b      	bne.n	80052cc <_free_r+0x6c>
 80052b4:	6820      	ldr	r0, [r4, #0]
 80052b6:	4401      	add	r1, r0
 80052b8:	1850      	adds	r0, r2, r1
 80052ba:	4283      	cmp	r3, r0
 80052bc:	6011      	str	r1, [r2, #0]
 80052be:	d1e0      	bne.n	8005282 <_free_r+0x22>
 80052c0:	6818      	ldr	r0, [r3, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	6053      	str	r3, [r2, #4]
 80052c6:	4408      	add	r0, r1
 80052c8:	6010      	str	r0, [r2, #0]
 80052ca:	e7da      	b.n	8005282 <_free_r+0x22>
 80052cc:	d902      	bls.n	80052d4 <_free_r+0x74>
 80052ce:	230c      	movs	r3, #12
 80052d0:	602b      	str	r3, [r5, #0]
 80052d2:	e7d6      	b.n	8005282 <_free_r+0x22>
 80052d4:	6820      	ldr	r0, [r4, #0]
 80052d6:	1821      	adds	r1, r4, r0
 80052d8:	428b      	cmp	r3, r1
 80052da:	bf04      	itt	eq
 80052dc:	6819      	ldreq	r1, [r3, #0]
 80052de:	685b      	ldreq	r3, [r3, #4]
 80052e0:	6063      	str	r3, [r4, #4]
 80052e2:	bf04      	itt	eq
 80052e4:	1809      	addeq	r1, r1, r0
 80052e6:	6021      	streq	r1, [r4, #0]
 80052e8:	6054      	str	r4, [r2, #4]
 80052ea:	e7ca      	b.n	8005282 <_free_r+0x22>
 80052ec:	bd38      	pop	{r3, r4, r5, pc}
 80052ee:	bf00      	nop
 80052f0:	200010ac 	.word	0x200010ac

080052f4 <sbrk_aligned>:
 80052f4:	b570      	push	{r4, r5, r6, lr}
 80052f6:	4e0f      	ldr	r6, [pc, #60]	@ (8005334 <sbrk_aligned+0x40>)
 80052f8:	460c      	mov	r4, r1
 80052fa:	6831      	ldr	r1, [r6, #0]
 80052fc:	4605      	mov	r5, r0
 80052fe:	b911      	cbnz	r1, 8005306 <sbrk_aligned+0x12>
 8005300:	f000 fba6 	bl	8005a50 <_sbrk_r>
 8005304:	6030      	str	r0, [r6, #0]
 8005306:	4621      	mov	r1, r4
 8005308:	4628      	mov	r0, r5
 800530a:	f000 fba1 	bl	8005a50 <_sbrk_r>
 800530e:	1c43      	adds	r3, r0, #1
 8005310:	d103      	bne.n	800531a <sbrk_aligned+0x26>
 8005312:	f04f 34ff 	mov.w	r4, #4294967295
 8005316:	4620      	mov	r0, r4
 8005318:	bd70      	pop	{r4, r5, r6, pc}
 800531a:	1cc4      	adds	r4, r0, #3
 800531c:	f024 0403 	bic.w	r4, r4, #3
 8005320:	42a0      	cmp	r0, r4
 8005322:	d0f8      	beq.n	8005316 <sbrk_aligned+0x22>
 8005324:	1a21      	subs	r1, r4, r0
 8005326:	4628      	mov	r0, r5
 8005328:	f000 fb92 	bl	8005a50 <_sbrk_r>
 800532c:	3001      	adds	r0, #1
 800532e:	d1f2      	bne.n	8005316 <sbrk_aligned+0x22>
 8005330:	e7ef      	b.n	8005312 <sbrk_aligned+0x1e>
 8005332:	bf00      	nop
 8005334:	200010a8 	.word	0x200010a8

08005338 <_malloc_r>:
 8005338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800533c:	1ccd      	adds	r5, r1, #3
 800533e:	f025 0503 	bic.w	r5, r5, #3
 8005342:	3508      	adds	r5, #8
 8005344:	2d0c      	cmp	r5, #12
 8005346:	bf38      	it	cc
 8005348:	250c      	movcc	r5, #12
 800534a:	2d00      	cmp	r5, #0
 800534c:	4606      	mov	r6, r0
 800534e:	db01      	blt.n	8005354 <_malloc_r+0x1c>
 8005350:	42a9      	cmp	r1, r5
 8005352:	d904      	bls.n	800535e <_malloc_r+0x26>
 8005354:	230c      	movs	r3, #12
 8005356:	6033      	str	r3, [r6, #0]
 8005358:	2000      	movs	r0, #0
 800535a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800535e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005434 <_malloc_r+0xfc>
 8005362:	f000 f869 	bl	8005438 <__malloc_lock>
 8005366:	f8d8 3000 	ldr.w	r3, [r8]
 800536a:	461c      	mov	r4, r3
 800536c:	bb44      	cbnz	r4, 80053c0 <_malloc_r+0x88>
 800536e:	4629      	mov	r1, r5
 8005370:	4630      	mov	r0, r6
 8005372:	f7ff ffbf 	bl	80052f4 <sbrk_aligned>
 8005376:	1c43      	adds	r3, r0, #1
 8005378:	4604      	mov	r4, r0
 800537a:	d158      	bne.n	800542e <_malloc_r+0xf6>
 800537c:	f8d8 4000 	ldr.w	r4, [r8]
 8005380:	4627      	mov	r7, r4
 8005382:	2f00      	cmp	r7, #0
 8005384:	d143      	bne.n	800540e <_malloc_r+0xd6>
 8005386:	2c00      	cmp	r4, #0
 8005388:	d04b      	beq.n	8005422 <_malloc_r+0xea>
 800538a:	6823      	ldr	r3, [r4, #0]
 800538c:	4639      	mov	r1, r7
 800538e:	4630      	mov	r0, r6
 8005390:	eb04 0903 	add.w	r9, r4, r3
 8005394:	f000 fb5c 	bl	8005a50 <_sbrk_r>
 8005398:	4581      	cmp	r9, r0
 800539a:	d142      	bne.n	8005422 <_malloc_r+0xea>
 800539c:	6821      	ldr	r1, [r4, #0]
 800539e:	1a6d      	subs	r5, r5, r1
 80053a0:	4629      	mov	r1, r5
 80053a2:	4630      	mov	r0, r6
 80053a4:	f7ff ffa6 	bl	80052f4 <sbrk_aligned>
 80053a8:	3001      	adds	r0, #1
 80053aa:	d03a      	beq.n	8005422 <_malloc_r+0xea>
 80053ac:	6823      	ldr	r3, [r4, #0]
 80053ae:	442b      	add	r3, r5
 80053b0:	6023      	str	r3, [r4, #0]
 80053b2:	f8d8 3000 	ldr.w	r3, [r8]
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	bb62      	cbnz	r2, 8005414 <_malloc_r+0xdc>
 80053ba:	f8c8 7000 	str.w	r7, [r8]
 80053be:	e00f      	b.n	80053e0 <_malloc_r+0xa8>
 80053c0:	6822      	ldr	r2, [r4, #0]
 80053c2:	1b52      	subs	r2, r2, r5
 80053c4:	d420      	bmi.n	8005408 <_malloc_r+0xd0>
 80053c6:	2a0b      	cmp	r2, #11
 80053c8:	d917      	bls.n	80053fa <_malloc_r+0xc2>
 80053ca:	1961      	adds	r1, r4, r5
 80053cc:	42a3      	cmp	r3, r4
 80053ce:	6025      	str	r5, [r4, #0]
 80053d0:	bf18      	it	ne
 80053d2:	6059      	strne	r1, [r3, #4]
 80053d4:	6863      	ldr	r3, [r4, #4]
 80053d6:	bf08      	it	eq
 80053d8:	f8c8 1000 	streq.w	r1, [r8]
 80053dc:	5162      	str	r2, [r4, r5]
 80053de:	604b      	str	r3, [r1, #4]
 80053e0:	4630      	mov	r0, r6
 80053e2:	f000 f82f 	bl	8005444 <__malloc_unlock>
 80053e6:	f104 000b 	add.w	r0, r4, #11
 80053ea:	1d23      	adds	r3, r4, #4
 80053ec:	f020 0007 	bic.w	r0, r0, #7
 80053f0:	1ac2      	subs	r2, r0, r3
 80053f2:	bf1c      	itt	ne
 80053f4:	1a1b      	subne	r3, r3, r0
 80053f6:	50a3      	strne	r3, [r4, r2]
 80053f8:	e7af      	b.n	800535a <_malloc_r+0x22>
 80053fa:	6862      	ldr	r2, [r4, #4]
 80053fc:	42a3      	cmp	r3, r4
 80053fe:	bf0c      	ite	eq
 8005400:	f8c8 2000 	streq.w	r2, [r8]
 8005404:	605a      	strne	r2, [r3, #4]
 8005406:	e7eb      	b.n	80053e0 <_malloc_r+0xa8>
 8005408:	4623      	mov	r3, r4
 800540a:	6864      	ldr	r4, [r4, #4]
 800540c:	e7ae      	b.n	800536c <_malloc_r+0x34>
 800540e:	463c      	mov	r4, r7
 8005410:	687f      	ldr	r7, [r7, #4]
 8005412:	e7b6      	b.n	8005382 <_malloc_r+0x4a>
 8005414:	461a      	mov	r2, r3
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	42a3      	cmp	r3, r4
 800541a:	d1fb      	bne.n	8005414 <_malloc_r+0xdc>
 800541c:	2300      	movs	r3, #0
 800541e:	6053      	str	r3, [r2, #4]
 8005420:	e7de      	b.n	80053e0 <_malloc_r+0xa8>
 8005422:	230c      	movs	r3, #12
 8005424:	6033      	str	r3, [r6, #0]
 8005426:	4630      	mov	r0, r6
 8005428:	f000 f80c 	bl	8005444 <__malloc_unlock>
 800542c:	e794      	b.n	8005358 <_malloc_r+0x20>
 800542e:	6005      	str	r5, [r0, #0]
 8005430:	e7d6      	b.n	80053e0 <_malloc_r+0xa8>
 8005432:	bf00      	nop
 8005434:	200010ac 	.word	0x200010ac

08005438 <__malloc_lock>:
 8005438:	4801      	ldr	r0, [pc, #4]	@ (8005440 <__malloc_lock+0x8>)
 800543a:	f7ff bf0f 	b.w	800525c <__retarget_lock_acquire_recursive>
 800543e:	bf00      	nop
 8005440:	200010a4 	.word	0x200010a4

08005444 <__malloc_unlock>:
 8005444:	4801      	ldr	r0, [pc, #4]	@ (800544c <__malloc_unlock+0x8>)
 8005446:	f7ff bf0a 	b.w	800525e <__retarget_lock_release_recursive>
 800544a:	bf00      	nop
 800544c:	200010a4 	.word	0x200010a4

08005450 <__ssputs_r>:
 8005450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005454:	688e      	ldr	r6, [r1, #8]
 8005456:	461f      	mov	r7, r3
 8005458:	42be      	cmp	r6, r7
 800545a:	680b      	ldr	r3, [r1, #0]
 800545c:	4682      	mov	sl, r0
 800545e:	460c      	mov	r4, r1
 8005460:	4690      	mov	r8, r2
 8005462:	d82d      	bhi.n	80054c0 <__ssputs_r+0x70>
 8005464:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005468:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800546c:	d026      	beq.n	80054bc <__ssputs_r+0x6c>
 800546e:	6965      	ldr	r5, [r4, #20]
 8005470:	6909      	ldr	r1, [r1, #16]
 8005472:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005476:	eba3 0901 	sub.w	r9, r3, r1
 800547a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800547e:	1c7b      	adds	r3, r7, #1
 8005480:	444b      	add	r3, r9
 8005482:	106d      	asrs	r5, r5, #1
 8005484:	429d      	cmp	r5, r3
 8005486:	bf38      	it	cc
 8005488:	461d      	movcc	r5, r3
 800548a:	0553      	lsls	r3, r2, #21
 800548c:	d527      	bpl.n	80054de <__ssputs_r+0x8e>
 800548e:	4629      	mov	r1, r5
 8005490:	f7ff ff52 	bl	8005338 <_malloc_r>
 8005494:	4606      	mov	r6, r0
 8005496:	b360      	cbz	r0, 80054f2 <__ssputs_r+0xa2>
 8005498:	6921      	ldr	r1, [r4, #16]
 800549a:	464a      	mov	r2, r9
 800549c:	f000 fae8 	bl	8005a70 <memcpy>
 80054a0:	89a3      	ldrh	r3, [r4, #12]
 80054a2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80054a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054aa:	81a3      	strh	r3, [r4, #12]
 80054ac:	6126      	str	r6, [r4, #16]
 80054ae:	6165      	str	r5, [r4, #20]
 80054b0:	444e      	add	r6, r9
 80054b2:	eba5 0509 	sub.w	r5, r5, r9
 80054b6:	6026      	str	r6, [r4, #0]
 80054b8:	60a5      	str	r5, [r4, #8]
 80054ba:	463e      	mov	r6, r7
 80054bc:	42be      	cmp	r6, r7
 80054be:	d900      	bls.n	80054c2 <__ssputs_r+0x72>
 80054c0:	463e      	mov	r6, r7
 80054c2:	6820      	ldr	r0, [r4, #0]
 80054c4:	4632      	mov	r2, r6
 80054c6:	4641      	mov	r1, r8
 80054c8:	f000 faa8 	bl	8005a1c <memmove>
 80054cc:	68a3      	ldr	r3, [r4, #8]
 80054ce:	1b9b      	subs	r3, r3, r6
 80054d0:	60a3      	str	r3, [r4, #8]
 80054d2:	6823      	ldr	r3, [r4, #0]
 80054d4:	4433      	add	r3, r6
 80054d6:	6023      	str	r3, [r4, #0]
 80054d8:	2000      	movs	r0, #0
 80054da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054de:	462a      	mov	r2, r5
 80054e0:	f000 fad4 	bl	8005a8c <_realloc_r>
 80054e4:	4606      	mov	r6, r0
 80054e6:	2800      	cmp	r0, #0
 80054e8:	d1e0      	bne.n	80054ac <__ssputs_r+0x5c>
 80054ea:	6921      	ldr	r1, [r4, #16]
 80054ec:	4650      	mov	r0, sl
 80054ee:	f7ff feb7 	bl	8005260 <_free_r>
 80054f2:	230c      	movs	r3, #12
 80054f4:	f8ca 3000 	str.w	r3, [sl]
 80054f8:	89a3      	ldrh	r3, [r4, #12]
 80054fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054fe:	81a3      	strh	r3, [r4, #12]
 8005500:	f04f 30ff 	mov.w	r0, #4294967295
 8005504:	e7e9      	b.n	80054da <__ssputs_r+0x8a>
	...

08005508 <_svfiprintf_r>:
 8005508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800550c:	4698      	mov	r8, r3
 800550e:	898b      	ldrh	r3, [r1, #12]
 8005510:	061b      	lsls	r3, r3, #24
 8005512:	b09d      	sub	sp, #116	@ 0x74
 8005514:	4607      	mov	r7, r0
 8005516:	460d      	mov	r5, r1
 8005518:	4614      	mov	r4, r2
 800551a:	d510      	bpl.n	800553e <_svfiprintf_r+0x36>
 800551c:	690b      	ldr	r3, [r1, #16]
 800551e:	b973      	cbnz	r3, 800553e <_svfiprintf_r+0x36>
 8005520:	2140      	movs	r1, #64	@ 0x40
 8005522:	f7ff ff09 	bl	8005338 <_malloc_r>
 8005526:	6028      	str	r0, [r5, #0]
 8005528:	6128      	str	r0, [r5, #16]
 800552a:	b930      	cbnz	r0, 800553a <_svfiprintf_r+0x32>
 800552c:	230c      	movs	r3, #12
 800552e:	603b      	str	r3, [r7, #0]
 8005530:	f04f 30ff 	mov.w	r0, #4294967295
 8005534:	b01d      	add	sp, #116	@ 0x74
 8005536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800553a:	2340      	movs	r3, #64	@ 0x40
 800553c:	616b      	str	r3, [r5, #20]
 800553e:	2300      	movs	r3, #0
 8005540:	9309      	str	r3, [sp, #36]	@ 0x24
 8005542:	2320      	movs	r3, #32
 8005544:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005548:	f8cd 800c 	str.w	r8, [sp, #12]
 800554c:	2330      	movs	r3, #48	@ 0x30
 800554e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80056ec <_svfiprintf_r+0x1e4>
 8005552:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005556:	f04f 0901 	mov.w	r9, #1
 800555a:	4623      	mov	r3, r4
 800555c:	469a      	mov	sl, r3
 800555e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005562:	b10a      	cbz	r2, 8005568 <_svfiprintf_r+0x60>
 8005564:	2a25      	cmp	r2, #37	@ 0x25
 8005566:	d1f9      	bne.n	800555c <_svfiprintf_r+0x54>
 8005568:	ebba 0b04 	subs.w	fp, sl, r4
 800556c:	d00b      	beq.n	8005586 <_svfiprintf_r+0x7e>
 800556e:	465b      	mov	r3, fp
 8005570:	4622      	mov	r2, r4
 8005572:	4629      	mov	r1, r5
 8005574:	4638      	mov	r0, r7
 8005576:	f7ff ff6b 	bl	8005450 <__ssputs_r>
 800557a:	3001      	adds	r0, #1
 800557c:	f000 80a7 	beq.w	80056ce <_svfiprintf_r+0x1c6>
 8005580:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005582:	445a      	add	r2, fp
 8005584:	9209      	str	r2, [sp, #36]	@ 0x24
 8005586:	f89a 3000 	ldrb.w	r3, [sl]
 800558a:	2b00      	cmp	r3, #0
 800558c:	f000 809f 	beq.w	80056ce <_svfiprintf_r+0x1c6>
 8005590:	2300      	movs	r3, #0
 8005592:	f04f 32ff 	mov.w	r2, #4294967295
 8005596:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800559a:	f10a 0a01 	add.w	sl, sl, #1
 800559e:	9304      	str	r3, [sp, #16]
 80055a0:	9307      	str	r3, [sp, #28]
 80055a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80055a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80055a8:	4654      	mov	r4, sl
 80055aa:	2205      	movs	r2, #5
 80055ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055b0:	484e      	ldr	r0, [pc, #312]	@ (80056ec <_svfiprintf_r+0x1e4>)
 80055b2:	f7fa fe35 	bl	8000220 <memchr>
 80055b6:	9a04      	ldr	r2, [sp, #16]
 80055b8:	b9d8      	cbnz	r0, 80055f2 <_svfiprintf_r+0xea>
 80055ba:	06d0      	lsls	r0, r2, #27
 80055bc:	bf44      	itt	mi
 80055be:	2320      	movmi	r3, #32
 80055c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80055c4:	0711      	lsls	r1, r2, #28
 80055c6:	bf44      	itt	mi
 80055c8:	232b      	movmi	r3, #43	@ 0x2b
 80055ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80055ce:	f89a 3000 	ldrb.w	r3, [sl]
 80055d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80055d4:	d015      	beq.n	8005602 <_svfiprintf_r+0xfa>
 80055d6:	9a07      	ldr	r2, [sp, #28]
 80055d8:	4654      	mov	r4, sl
 80055da:	2000      	movs	r0, #0
 80055dc:	f04f 0c0a 	mov.w	ip, #10
 80055e0:	4621      	mov	r1, r4
 80055e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055e6:	3b30      	subs	r3, #48	@ 0x30
 80055e8:	2b09      	cmp	r3, #9
 80055ea:	d94b      	bls.n	8005684 <_svfiprintf_r+0x17c>
 80055ec:	b1b0      	cbz	r0, 800561c <_svfiprintf_r+0x114>
 80055ee:	9207      	str	r2, [sp, #28]
 80055f0:	e014      	b.n	800561c <_svfiprintf_r+0x114>
 80055f2:	eba0 0308 	sub.w	r3, r0, r8
 80055f6:	fa09 f303 	lsl.w	r3, r9, r3
 80055fa:	4313      	orrs	r3, r2
 80055fc:	9304      	str	r3, [sp, #16]
 80055fe:	46a2      	mov	sl, r4
 8005600:	e7d2      	b.n	80055a8 <_svfiprintf_r+0xa0>
 8005602:	9b03      	ldr	r3, [sp, #12]
 8005604:	1d19      	adds	r1, r3, #4
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	9103      	str	r1, [sp, #12]
 800560a:	2b00      	cmp	r3, #0
 800560c:	bfbb      	ittet	lt
 800560e:	425b      	neglt	r3, r3
 8005610:	f042 0202 	orrlt.w	r2, r2, #2
 8005614:	9307      	strge	r3, [sp, #28]
 8005616:	9307      	strlt	r3, [sp, #28]
 8005618:	bfb8      	it	lt
 800561a:	9204      	strlt	r2, [sp, #16]
 800561c:	7823      	ldrb	r3, [r4, #0]
 800561e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005620:	d10a      	bne.n	8005638 <_svfiprintf_r+0x130>
 8005622:	7863      	ldrb	r3, [r4, #1]
 8005624:	2b2a      	cmp	r3, #42	@ 0x2a
 8005626:	d132      	bne.n	800568e <_svfiprintf_r+0x186>
 8005628:	9b03      	ldr	r3, [sp, #12]
 800562a:	1d1a      	adds	r2, r3, #4
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	9203      	str	r2, [sp, #12]
 8005630:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005634:	3402      	adds	r4, #2
 8005636:	9305      	str	r3, [sp, #20]
 8005638:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80056fc <_svfiprintf_r+0x1f4>
 800563c:	7821      	ldrb	r1, [r4, #0]
 800563e:	2203      	movs	r2, #3
 8005640:	4650      	mov	r0, sl
 8005642:	f7fa fded 	bl	8000220 <memchr>
 8005646:	b138      	cbz	r0, 8005658 <_svfiprintf_r+0x150>
 8005648:	9b04      	ldr	r3, [sp, #16]
 800564a:	eba0 000a 	sub.w	r0, r0, sl
 800564e:	2240      	movs	r2, #64	@ 0x40
 8005650:	4082      	lsls	r2, r0
 8005652:	4313      	orrs	r3, r2
 8005654:	3401      	adds	r4, #1
 8005656:	9304      	str	r3, [sp, #16]
 8005658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800565c:	4824      	ldr	r0, [pc, #144]	@ (80056f0 <_svfiprintf_r+0x1e8>)
 800565e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005662:	2206      	movs	r2, #6
 8005664:	f7fa fddc 	bl	8000220 <memchr>
 8005668:	2800      	cmp	r0, #0
 800566a:	d036      	beq.n	80056da <_svfiprintf_r+0x1d2>
 800566c:	4b21      	ldr	r3, [pc, #132]	@ (80056f4 <_svfiprintf_r+0x1ec>)
 800566e:	bb1b      	cbnz	r3, 80056b8 <_svfiprintf_r+0x1b0>
 8005670:	9b03      	ldr	r3, [sp, #12]
 8005672:	3307      	adds	r3, #7
 8005674:	f023 0307 	bic.w	r3, r3, #7
 8005678:	3308      	adds	r3, #8
 800567a:	9303      	str	r3, [sp, #12]
 800567c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800567e:	4433      	add	r3, r6
 8005680:	9309      	str	r3, [sp, #36]	@ 0x24
 8005682:	e76a      	b.n	800555a <_svfiprintf_r+0x52>
 8005684:	fb0c 3202 	mla	r2, ip, r2, r3
 8005688:	460c      	mov	r4, r1
 800568a:	2001      	movs	r0, #1
 800568c:	e7a8      	b.n	80055e0 <_svfiprintf_r+0xd8>
 800568e:	2300      	movs	r3, #0
 8005690:	3401      	adds	r4, #1
 8005692:	9305      	str	r3, [sp, #20]
 8005694:	4619      	mov	r1, r3
 8005696:	f04f 0c0a 	mov.w	ip, #10
 800569a:	4620      	mov	r0, r4
 800569c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056a0:	3a30      	subs	r2, #48	@ 0x30
 80056a2:	2a09      	cmp	r2, #9
 80056a4:	d903      	bls.n	80056ae <_svfiprintf_r+0x1a6>
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d0c6      	beq.n	8005638 <_svfiprintf_r+0x130>
 80056aa:	9105      	str	r1, [sp, #20]
 80056ac:	e7c4      	b.n	8005638 <_svfiprintf_r+0x130>
 80056ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80056b2:	4604      	mov	r4, r0
 80056b4:	2301      	movs	r3, #1
 80056b6:	e7f0      	b.n	800569a <_svfiprintf_r+0x192>
 80056b8:	ab03      	add	r3, sp, #12
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	462a      	mov	r2, r5
 80056be:	4b0e      	ldr	r3, [pc, #56]	@ (80056f8 <_svfiprintf_r+0x1f0>)
 80056c0:	a904      	add	r1, sp, #16
 80056c2:	4638      	mov	r0, r7
 80056c4:	f3af 8000 	nop.w
 80056c8:	1c42      	adds	r2, r0, #1
 80056ca:	4606      	mov	r6, r0
 80056cc:	d1d6      	bne.n	800567c <_svfiprintf_r+0x174>
 80056ce:	89ab      	ldrh	r3, [r5, #12]
 80056d0:	065b      	lsls	r3, r3, #25
 80056d2:	f53f af2d 	bmi.w	8005530 <_svfiprintf_r+0x28>
 80056d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80056d8:	e72c      	b.n	8005534 <_svfiprintf_r+0x2c>
 80056da:	ab03      	add	r3, sp, #12
 80056dc:	9300      	str	r3, [sp, #0]
 80056de:	462a      	mov	r2, r5
 80056e0:	4b05      	ldr	r3, [pc, #20]	@ (80056f8 <_svfiprintf_r+0x1f0>)
 80056e2:	a904      	add	r1, sp, #16
 80056e4:	4638      	mov	r0, r7
 80056e6:	f000 f879 	bl	80057dc <_printf_i>
 80056ea:	e7ed      	b.n	80056c8 <_svfiprintf_r+0x1c0>
 80056ec:	08005cd4 	.word	0x08005cd4
 80056f0:	08005cde 	.word	0x08005cde
 80056f4:	00000000 	.word	0x00000000
 80056f8:	08005451 	.word	0x08005451
 80056fc:	08005cda 	.word	0x08005cda

08005700 <_printf_common>:
 8005700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005704:	4616      	mov	r6, r2
 8005706:	4698      	mov	r8, r3
 8005708:	688a      	ldr	r2, [r1, #8]
 800570a:	690b      	ldr	r3, [r1, #16]
 800570c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005710:	4293      	cmp	r3, r2
 8005712:	bfb8      	it	lt
 8005714:	4613      	movlt	r3, r2
 8005716:	6033      	str	r3, [r6, #0]
 8005718:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800571c:	4607      	mov	r7, r0
 800571e:	460c      	mov	r4, r1
 8005720:	b10a      	cbz	r2, 8005726 <_printf_common+0x26>
 8005722:	3301      	adds	r3, #1
 8005724:	6033      	str	r3, [r6, #0]
 8005726:	6823      	ldr	r3, [r4, #0]
 8005728:	0699      	lsls	r1, r3, #26
 800572a:	bf42      	ittt	mi
 800572c:	6833      	ldrmi	r3, [r6, #0]
 800572e:	3302      	addmi	r3, #2
 8005730:	6033      	strmi	r3, [r6, #0]
 8005732:	6825      	ldr	r5, [r4, #0]
 8005734:	f015 0506 	ands.w	r5, r5, #6
 8005738:	d106      	bne.n	8005748 <_printf_common+0x48>
 800573a:	f104 0a19 	add.w	sl, r4, #25
 800573e:	68e3      	ldr	r3, [r4, #12]
 8005740:	6832      	ldr	r2, [r6, #0]
 8005742:	1a9b      	subs	r3, r3, r2
 8005744:	42ab      	cmp	r3, r5
 8005746:	dc26      	bgt.n	8005796 <_printf_common+0x96>
 8005748:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800574c:	6822      	ldr	r2, [r4, #0]
 800574e:	3b00      	subs	r3, #0
 8005750:	bf18      	it	ne
 8005752:	2301      	movne	r3, #1
 8005754:	0692      	lsls	r2, r2, #26
 8005756:	d42b      	bmi.n	80057b0 <_printf_common+0xb0>
 8005758:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800575c:	4641      	mov	r1, r8
 800575e:	4638      	mov	r0, r7
 8005760:	47c8      	blx	r9
 8005762:	3001      	adds	r0, #1
 8005764:	d01e      	beq.n	80057a4 <_printf_common+0xa4>
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	6922      	ldr	r2, [r4, #16]
 800576a:	f003 0306 	and.w	r3, r3, #6
 800576e:	2b04      	cmp	r3, #4
 8005770:	bf02      	ittt	eq
 8005772:	68e5      	ldreq	r5, [r4, #12]
 8005774:	6833      	ldreq	r3, [r6, #0]
 8005776:	1aed      	subeq	r5, r5, r3
 8005778:	68a3      	ldr	r3, [r4, #8]
 800577a:	bf0c      	ite	eq
 800577c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005780:	2500      	movne	r5, #0
 8005782:	4293      	cmp	r3, r2
 8005784:	bfc4      	itt	gt
 8005786:	1a9b      	subgt	r3, r3, r2
 8005788:	18ed      	addgt	r5, r5, r3
 800578a:	2600      	movs	r6, #0
 800578c:	341a      	adds	r4, #26
 800578e:	42b5      	cmp	r5, r6
 8005790:	d11a      	bne.n	80057c8 <_printf_common+0xc8>
 8005792:	2000      	movs	r0, #0
 8005794:	e008      	b.n	80057a8 <_printf_common+0xa8>
 8005796:	2301      	movs	r3, #1
 8005798:	4652      	mov	r2, sl
 800579a:	4641      	mov	r1, r8
 800579c:	4638      	mov	r0, r7
 800579e:	47c8      	blx	r9
 80057a0:	3001      	adds	r0, #1
 80057a2:	d103      	bne.n	80057ac <_printf_common+0xac>
 80057a4:	f04f 30ff 	mov.w	r0, #4294967295
 80057a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057ac:	3501      	adds	r5, #1
 80057ae:	e7c6      	b.n	800573e <_printf_common+0x3e>
 80057b0:	18e1      	adds	r1, r4, r3
 80057b2:	1c5a      	adds	r2, r3, #1
 80057b4:	2030      	movs	r0, #48	@ 0x30
 80057b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80057ba:	4422      	add	r2, r4
 80057bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80057c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80057c4:	3302      	adds	r3, #2
 80057c6:	e7c7      	b.n	8005758 <_printf_common+0x58>
 80057c8:	2301      	movs	r3, #1
 80057ca:	4622      	mov	r2, r4
 80057cc:	4641      	mov	r1, r8
 80057ce:	4638      	mov	r0, r7
 80057d0:	47c8      	blx	r9
 80057d2:	3001      	adds	r0, #1
 80057d4:	d0e6      	beq.n	80057a4 <_printf_common+0xa4>
 80057d6:	3601      	adds	r6, #1
 80057d8:	e7d9      	b.n	800578e <_printf_common+0x8e>
	...

080057dc <_printf_i>:
 80057dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057e0:	7e0f      	ldrb	r7, [r1, #24]
 80057e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80057e4:	2f78      	cmp	r7, #120	@ 0x78
 80057e6:	4691      	mov	r9, r2
 80057e8:	4680      	mov	r8, r0
 80057ea:	460c      	mov	r4, r1
 80057ec:	469a      	mov	sl, r3
 80057ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80057f2:	d807      	bhi.n	8005804 <_printf_i+0x28>
 80057f4:	2f62      	cmp	r7, #98	@ 0x62
 80057f6:	d80a      	bhi.n	800580e <_printf_i+0x32>
 80057f8:	2f00      	cmp	r7, #0
 80057fa:	f000 80d2 	beq.w	80059a2 <_printf_i+0x1c6>
 80057fe:	2f58      	cmp	r7, #88	@ 0x58
 8005800:	f000 80b9 	beq.w	8005976 <_printf_i+0x19a>
 8005804:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005808:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800580c:	e03a      	b.n	8005884 <_printf_i+0xa8>
 800580e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005812:	2b15      	cmp	r3, #21
 8005814:	d8f6      	bhi.n	8005804 <_printf_i+0x28>
 8005816:	a101      	add	r1, pc, #4	@ (adr r1, 800581c <_printf_i+0x40>)
 8005818:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800581c:	08005875 	.word	0x08005875
 8005820:	08005889 	.word	0x08005889
 8005824:	08005805 	.word	0x08005805
 8005828:	08005805 	.word	0x08005805
 800582c:	08005805 	.word	0x08005805
 8005830:	08005805 	.word	0x08005805
 8005834:	08005889 	.word	0x08005889
 8005838:	08005805 	.word	0x08005805
 800583c:	08005805 	.word	0x08005805
 8005840:	08005805 	.word	0x08005805
 8005844:	08005805 	.word	0x08005805
 8005848:	08005989 	.word	0x08005989
 800584c:	080058b3 	.word	0x080058b3
 8005850:	08005943 	.word	0x08005943
 8005854:	08005805 	.word	0x08005805
 8005858:	08005805 	.word	0x08005805
 800585c:	080059ab 	.word	0x080059ab
 8005860:	08005805 	.word	0x08005805
 8005864:	080058b3 	.word	0x080058b3
 8005868:	08005805 	.word	0x08005805
 800586c:	08005805 	.word	0x08005805
 8005870:	0800594b 	.word	0x0800594b
 8005874:	6833      	ldr	r3, [r6, #0]
 8005876:	1d1a      	adds	r2, r3, #4
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6032      	str	r2, [r6, #0]
 800587c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005880:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005884:	2301      	movs	r3, #1
 8005886:	e09d      	b.n	80059c4 <_printf_i+0x1e8>
 8005888:	6833      	ldr	r3, [r6, #0]
 800588a:	6820      	ldr	r0, [r4, #0]
 800588c:	1d19      	adds	r1, r3, #4
 800588e:	6031      	str	r1, [r6, #0]
 8005890:	0606      	lsls	r6, r0, #24
 8005892:	d501      	bpl.n	8005898 <_printf_i+0xbc>
 8005894:	681d      	ldr	r5, [r3, #0]
 8005896:	e003      	b.n	80058a0 <_printf_i+0xc4>
 8005898:	0645      	lsls	r5, r0, #25
 800589a:	d5fb      	bpl.n	8005894 <_printf_i+0xb8>
 800589c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80058a0:	2d00      	cmp	r5, #0
 80058a2:	da03      	bge.n	80058ac <_printf_i+0xd0>
 80058a4:	232d      	movs	r3, #45	@ 0x2d
 80058a6:	426d      	negs	r5, r5
 80058a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058ac:	4859      	ldr	r0, [pc, #356]	@ (8005a14 <_printf_i+0x238>)
 80058ae:	230a      	movs	r3, #10
 80058b0:	e011      	b.n	80058d6 <_printf_i+0xfa>
 80058b2:	6821      	ldr	r1, [r4, #0]
 80058b4:	6833      	ldr	r3, [r6, #0]
 80058b6:	0608      	lsls	r0, r1, #24
 80058b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80058bc:	d402      	bmi.n	80058c4 <_printf_i+0xe8>
 80058be:	0649      	lsls	r1, r1, #25
 80058c0:	bf48      	it	mi
 80058c2:	b2ad      	uxthmi	r5, r5
 80058c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80058c6:	4853      	ldr	r0, [pc, #332]	@ (8005a14 <_printf_i+0x238>)
 80058c8:	6033      	str	r3, [r6, #0]
 80058ca:	bf14      	ite	ne
 80058cc:	230a      	movne	r3, #10
 80058ce:	2308      	moveq	r3, #8
 80058d0:	2100      	movs	r1, #0
 80058d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80058d6:	6866      	ldr	r6, [r4, #4]
 80058d8:	60a6      	str	r6, [r4, #8]
 80058da:	2e00      	cmp	r6, #0
 80058dc:	bfa2      	ittt	ge
 80058de:	6821      	ldrge	r1, [r4, #0]
 80058e0:	f021 0104 	bicge.w	r1, r1, #4
 80058e4:	6021      	strge	r1, [r4, #0]
 80058e6:	b90d      	cbnz	r5, 80058ec <_printf_i+0x110>
 80058e8:	2e00      	cmp	r6, #0
 80058ea:	d04b      	beq.n	8005984 <_printf_i+0x1a8>
 80058ec:	4616      	mov	r6, r2
 80058ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80058f2:	fb03 5711 	mls	r7, r3, r1, r5
 80058f6:	5dc7      	ldrb	r7, [r0, r7]
 80058f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80058fc:	462f      	mov	r7, r5
 80058fe:	42bb      	cmp	r3, r7
 8005900:	460d      	mov	r5, r1
 8005902:	d9f4      	bls.n	80058ee <_printf_i+0x112>
 8005904:	2b08      	cmp	r3, #8
 8005906:	d10b      	bne.n	8005920 <_printf_i+0x144>
 8005908:	6823      	ldr	r3, [r4, #0]
 800590a:	07df      	lsls	r7, r3, #31
 800590c:	d508      	bpl.n	8005920 <_printf_i+0x144>
 800590e:	6923      	ldr	r3, [r4, #16]
 8005910:	6861      	ldr	r1, [r4, #4]
 8005912:	4299      	cmp	r1, r3
 8005914:	bfde      	ittt	le
 8005916:	2330      	movle	r3, #48	@ 0x30
 8005918:	f806 3c01 	strble.w	r3, [r6, #-1]
 800591c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005920:	1b92      	subs	r2, r2, r6
 8005922:	6122      	str	r2, [r4, #16]
 8005924:	f8cd a000 	str.w	sl, [sp]
 8005928:	464b      	mov	r3, r9
 800592a:	aa03      	add	r2, sp, #12
 800592c:	4621      	mov	r1, r4
 800592e:	4640      	mov	r0, r8
 8005930:	f7ff fee6 	bl	8005700 <_printf_common>
 8005934:	3001      	adds	r0, #1
 8005936:	d14a      	bne.n	80059ce <_printf_i+0x1f2>
 8005938:	f04f 30ff 	mov.w	r0, #4294967295
 800593c:	b004      	add	sp, #16
 800593e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	f043 0320 	orr.w	r3, r3, #32
 8005948:	6023      	str	r3, [r4, #0]
 800594a:	4833      	ldr	r0, [pc, #204]	@ (8005a18 <_printf_i+0x23c>)
 800594c:	2778      	movs	r7, #120	@ 0x78
 800594e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	6831      	ldr	r1, [r6, #0]
 8005956:	061f      	lsls	r7, r3, #24
 8005958:	f851 5b04 	ldr.w	r5, [r1], #4
 800595c:	d402      	bmi.n	8005964 <_printf_i+0x188>
 800595e:	065f      	lsls	r7, r3, #25
 8005960:	bf48      	it	mi
 8005962:	b2ad      	uxthmi	r5, r5
 8005964:	6031      	str	r1, [r6, #0]
 8005966:	07d9      	lsls	r1, r3, #31
 8005968:	bf44      	itt	mi
 800596a:	f043 0320 	orrmi.w	r3, r3, #32
 800596e:	6023      	strmi	r3, [r4, #0]
 8005970:	b11d      	cbz	r5, 800597a <_printf_i+0x19e>
 8005972:	2310      	movs	r3, #16
 8005974:	e7ac      	b.n	80058d0 <_printf_i+0xf4>
 8005976:	4827      	ldr	r0, [pc, #156]	@ (8005a14 <_printf_i+0x238>)
 8005978:	e7e9      	b.n	800594e <_printf_i+0x172>
 800597a:	6823      	ldr	r3, [r4, #0]
 800597c:	f023 0320 	bic.w	r3, r3, #32
 8005980:	6023      	str	r3, [r4, #0]
 8005982:	e7f6      	b.n	8005972 <_printf_i+0x196>
 8005984:	4616      	mov	r6, r2
 8005986:	e7bd      	b.n	8005904 <_printf_i+0x128>
 8005988:	6833      	ldr	r3, [r6, #0]
 800598a:	6825      	ldr	r5, [r4, #0]
 800598c:	6961      	ldr	r1, [r4, #20]
 800598e:	1d18      	adds	r0, r3, #4
 8005990:	6030      	str	r0, [r6, #0]
 8005992:	062e      	lsls	r6, r5, #24
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	d501      	bpl.n	800599c <_printf_i+0x1c0>
 8005998:	6019      	str	r1, [r3, #0]
 800599a:	e002      	b.n	80059a2 <_printf_i+0x1c6>
 800599c:	0668      	lsls	r0, r5, #25
 800599e:	d5fb      	bpl.n	8005998 <_printf_i+0x1bc>
 80059a0:	8019      	strh	r1, [r3, #0]
 80059a2:	2300      	movs	r3, #0
 80059a4:	6123      	str	r3, [r4, #16]
 80059a6:	4616      	mov	r6, r2
 80059a8:	e7bc      	b.n	8005924 <_printf_i+0x148>
 80059aa:	6833      	ldr	r3, [r6, #0]
 80059ac:	1d1a      	adds	r2, r3, #4
 80059ae:	6032      	str	r2, [r6, #0]
 80059b0:	681e      	ldr	r6, [r3, #0]
 80059b2:	6862      	ldr	r2, [r4, #4]
 80059b4:	2100      	movs	r1, #0
 80059b6:	4630      	mov	r0, r6
 80059b8:	f7fa fc32 	bl	8000220 <memchr>
 80059bc:	b108      	cbz	r0, 80059c2 <_printf_i+0x1e6>
 80059be:	1b80      	subs	r0, r0, r6
 80059c0:	6060      	str	r0, [r4, #4]
 80059c2:	6863      	ldr	r3, [r4, #4]
 80059c4:	6123      	str	r3, [r4, #16]
 80059c6:	2300      	movs	r3, #0
 80059c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059cc:	e7aa      	b.n	8005924 <_printf_i+0x148>
 80059ce:	6923      	ldr	r3, [r4, #16]
 80059d0:	4632      	mov	r2, r6
 80059d2:	4649      	mov	r1, r9
 80059d4:	4640      	mov	r0, r8
 80059d6:	47d0      	blx	sl
 80059d8:	3001      	adds	r0, #1
 80059da:	d0ad      	beq.n	8005938 <_printf_i+0x15c>
 80059dc:	6823      	ldr	r3, [r4, #0]
 80059de:	079b      	lsls	r3, r3, #30
 80059e0:	d413      	bmi.n	8005a0a <_printf_i+0x22e>
 80059e2:	68e0      	ldr	r0, [r4, #12]
 80059e4:	9b03      	ldr	r3, [sp, #12]
 80059e6:	4298      	cmp	r0, r3
 80059e8:	bfb8      	it	lt
 80059ea:	4618      	movlt	r0, r3
 80059ec:	e7a6      	b.n	800593c <_printf_i+0x160>
 80059ee:	2301      	movs	r3, #1
 80059f0:	4632      	mov	r2, r6
 80059f2:	4649      	mov	r1, r9
 80059f4:	4640      	mov	r0, r8
 80059f6:	47d0      	blx	sl
 80059f8:	3001      	adds	r0, #1
 80059fa:	d09d      	beq.n	8005938 <_printf_i+0x15c>
 80059fc:	3501      	adds	r5, #1
 80059fe:	68e3      	ldr	r3, [r4, #12]
 8005a00:	9903      	ldr	r1, [sp, #12]
 8005a02:	1a5b      	subs	r3, r3, r1
 8005a04:	42ab      	cmp	r3, r5
 8005a06:	dcf2      	bgt.n	80059ee <_printf_i+0x212>
 8005a08:	e7eb      	b.n	80059e2 <_printf_i+0x206>
 8005a0a:	2500      	movs	r5, #0
 8005a0c:	f104 0619 	add.w	r6, r4, #25
 8005a10:	e7f5      	b.n	80059fe <_printf_i+0x222>
 8005a12:	bf00      	nop
 8005a14:	08005ce5 	.word	0x08005ce5
 8005a18:	08005cf6 	.word	0x08005cf6

08005a1c <memmove>:
 8005a1c:	4288      	cmp	r0, r1
 8005a1e:	b510      	push	{r4, lr}
 8005a20:	eb01 0402 	add.w	r4, r1, r2
 8005a24:	d902      	bls.n	8005a2c <memmove+0x10>
 8005a26:	4284      	cmp	r4, r0
 8005a28:	4623      	mov	r3, r4
 8005a2a:	d807      	bhi.n	8005a3c <memmove+0x20>
 8005a2c:	1e43      	subs	r3, r0, #1
 8005a2e:	42a1      	cmp	r1, r4
 8005a30:	d008      	beq.n	8005a44 <memmove+0x28>
 8005a32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a3a:	e7f8      	b.n	8005a2e <memmove+0x12>
 8005a3c:	4402      	add	r2, r0
 8005a3e:	4601      	mov	r1, r0
 8005a40:	428a      	cmp	r2, r1
 8005a42:	d100      	bne.n	8005a46 <memmove+0x2a>
 8005a44:	bd10      	pop	{r4, pc}
 8005a46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a4e:	e7f7      	b.n	8005a40 <memmove+0x24>

08005a50 <_sbrk_r>:
 8005a50:	b538      	push	{r3, r4, r5, lr}
 8005a52:	4d06      	ldr	r5, [pc, #24]	@ (8005a6c <_sbrk_r+0x1c>)
 8005a54:	2300      	movs	r3, #0
 8005a56:	4604      	mov	r4, r0
 8005a58:	4608      	mov	r0, r1
 8005a5a:	602b      	str	r3, [r5, #0]
 8005a5c:	f7fb fcac 	bl	80013b8 <_sbrk>
 8005a60:	1c43      	adds	r3, r0, #1
 8005a62:	d102      	bne.n	8005a6a <_sbrk_r+0x1a>
 8005a64:	682b      	ldr	r3, [r5, #0]
 8005a66:	b103      	cbz	r3, 8005a6a <_sbrk_r+0x1a>
 8005a68:	6023      	str	r3, [r4, #0]
 8005a6a:	bd38      	pop	{r3, r4, r5, pc}
 8005a6c:	200010a0 	.word	0x200010a0

08005a70 <memcpy>:
 8005a70:	440a      	add	r2, r1
 8005a72:	4291      	cmp	r1, r2
 8005a74:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a78:	d100      	bne.n	8005a7c <memcpy+0xc>
 8005a7a:	4770      	bx	lr
 8005a7c:	b510      	push	{r4, lr}
 8005a7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a86:	4291      	cmp	r1, r2
 8005a88:	d1f9      	bne.n	8005a7e <memcpy+0xe>
 8005a8a:	bd10      	pop	{r4, pc}

08005a8c <_realloc_r>:
 8005a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a90:	4680      	mov	r8, r0
 8005a92:	4615      	mov	r5, r2
 8005a94:	460c      	mov	r4, r1
 8005a96:	b921      	cbnz	r1, 8005aa2 <_realloc_r+0x16>
 8005a98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a9c:	4611      	mov	r1, r2
 8005a9e:	f7ff bc4b 	b.w	8005338 <_malloc_r>
 8005aa2:	b92a      	cbnz	r2, 8005ab0 <_realloc_r+0x24>
 8005aa4:	f7ff fbdc 	bl	8005260 <_free_r>
 8005aa8:	2400      	movs	r4, #0
 8005aaa:	4620      	mov	r0, r4
 8005aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ab0:	f000 f81a 	bl	8005ae8 <_malloc_usable_size_r>
 8005ab4:	4285      	cmp	r5, r0
 8005ab6:	4606      	mov	r6, r0
 8005ab8:	d802      	bhi.n	8005ac0 <_realloc_r+0x34>
 8005aba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005abe:	d8f4      	bhi.n	8005aaa <_realloc_r+0x1e>
 8005ac0:	4629      	mov	r1, r5
 8005ac2:	4640      	mov	r0, r8
 8005ac4:	f7ff fc38 	bl	8005338 <_malloc_r>
 8005ac8:	4607      	mov	r7, r0
 8005aca:	2800      	cmp	r0, #0
 8005acc:	d0ec      	beq.n	8005aa8 <_realloc_r+0x1c>
 8005ace:	42b5      	cmp	r5, r6
 8005ad0:	462a      	mov	r2, r5
 8005ad2:	4621      	mov	r1, r4
 8005ad4:	bf28      	it	cs
 8005ad6:	4632      	movcs	r2, r6
 8005ad8:	f7ff ffca 	bl	8005a70 <memcpy>
 8005adc:	4621      	mov	r1, r4
 8005ade:	4640      	mov	r0, r8
 8005ae0:	f7ff fbbe 	bl	8005260 <_free_r>
 8005ae4:	463c      	mov	r4, r7
 8005ae6:	e7e0      	b.n	8005aaa <_realloc_r+0x1e>

08005ae8 <_malloc_usable_size_r>:
 8005ae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005aec:	1f18      	subs	r0, r3, #4
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	bfbc      	itt	lt
 8005af2:	580b      	ldrlt	r3, [r1, r0]
 8005af4:	18c0      	addlt	r0, r0, r3
 8005af6:	4770      	bx	lr

08005af8 <_init>:
 8005af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005afa:	bf00      	nop
 8005afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005afe:	bc08      	pop	{r3}
 8005b00:	469e      	mov	lr, r3
 8005b02:	4770      	bx	lr

08005b04 <_fini>:
 8005b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b06:	bf00      	nop
 8005b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b0a:	bc08      	pop	{r3}
 8005b0c:	469e      	mov	lr, r3
 8005b0e:	4770      	bx	lr
