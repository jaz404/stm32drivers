
TUT_WS2812_B.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003958  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003b1c  08003b1c  00004b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b34  08003b34  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b34  08003b34  00004b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b3c  08003b3c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b3c  08003b3c  00004b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b40  08003b40  00004b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003b44  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e34  2000000c  08003b50  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e40  08003b50  00005e40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ec4  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b30  00000000  00000000  0000ef00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  00010a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000848  00000000  00000000  000114e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000214da  00000000  00000000  00011d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc2e  00000000  00000000  00033202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd9cd  00000000  00000000  0003fe30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010d7fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cac  00000000  00000000  0010d840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001104ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003b04 	.word	0x08003b04

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003b04 	.word	0x08003b04

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <HAL_TIM_PWM_PulseFinishedCallback>:
uint8_t LED_Mod[MAX_LED][4];  // for brightness

int datasentflag=0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80004fc:	2100      	movs	r1, #0
 80004fe:	4805      	ldr	r0, [pc, #20]	@ (8000514 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000500:	f002 fbc4 	bl	8002c8c <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 8000504:	4b04      	ldr	r3, [pc, #16]	@ (8000518 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000506:	2201      	movs	r2, #1
 8000508:	601a      	str	r2, [r3, #0]
}
 800050a:	bf00      	nop
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000028 	.word	0x20000028
 8000518:	200001d0 	.word	0x200001d0

0800051c <Set_LED>:

void Set_LED(int LEDnum, int Red, int Green, int Blue)
{
 800051c:	b480      	push	{r7}
 800051e:	b089      	sub	sp, #36	@ 0x24
 8000520:	af00      	add	r7, sp, #0
 8000522:	6178      	str	r0, [r7, #20]
 8000524:	6139      	str	r1, [r7, #16]
 8000526:	60fa      	str	r2, [r7, #12]
 8000528:	60bb      	str	r3, [r7, #8]
    float brightness_scale = 0.4f;  // 40% brightness
 800052a:	4b25      	ldr	r3, [pc, #148]	@ (80005c0 <Set_LED+0xa4>)
 800052c:	61fb      	str	r3, [r7, #28]

    LED_Data[LEDnum][0] = LEDnum;
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	b2d9      	uxtb	r1, r3
 8000532:	4a24      	ldr	r2, [pc, #144]	@ (80005c4 <Set_LED+0xa8>)
 8000534:	697b      	ldr	r3, [r7, #20]
 8000536:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
    LED_Data[LEDnum][1] = (int)(Green * brightness_scale);
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	ee07 3a90 	vmov	s15, r3
 8000540:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000544:	edd7 7a07 	vldr	s15, [r7, #28]
 8000548:	ee67 7a27 	vmul.f32	s15, s14, s15
 800054c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000550:	edc7 7a01 	vstr	s15, [r7, #4]
 8000554:	7939      	ldrb	r1, [r7, #4]
 8000556:	4a1b      	ldr	r2, [pc, #108]	@ (80005c4 <Set_LED+0xa8>)
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	4413      	add	r3, r2
 800055e:	460a      	mov	r2, r1
 8000560:	705a      	strb	r2, [r3, #1]
    LED_Data[LEDnum][2] = (int)(Red * brightness_scale);
 8000562:	693b      	ldr	r3, [r7, #16]
 8000564:	ee07 3a90 	vmov	s15, r3
 8000568:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800056c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000574:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000578:	edc7 7a01 	vstr	s15, [r7, #4]
 800057c:	7939      	ldrb	r1, [r7, #4]
 800057e:	4a11      	ldr	r2, [pc, #68]	@ (80005c4 <Set_LED+0xa8>)
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	4413      	add	r3, r2
 8000586:	460a      	mov	r2, r1
 8000588:	709a      	strb	r2, [r3, #2]
    LED_Data[LEDnum][3] = (int)(Blue * brightness_scale);
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	ee07 3a90 	vmov	s15, r3
 8000590:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000594:	edd7 7a07 	vldr	s15, [r7, #28]
 8000598:	ee67 7a27 	vmul.f32	s15, s14, s15
 800059c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005a0:	edc7 7a01 	vstr	s15, [r7, #4]
 80005a4:	7939      	ldrb	r1, [r7, #4]
 80005a6:	4a07      	ldr	r2, [pc, #28]	@ (80005c4 <Set_LED+0xa8>)
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	4413      	add	r3, r2
 80005ae:	460a      	mov	r2, r1
 80005b0:	70da      	strb	r2, [r3, #3]
}
 80005b2:	bf00      	nop
 80005b4:	3724      	adds	r7, #36	@ 0x24
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	3ecccccd 	.word	0x3ecccccd
 80005c4:	200000d0 	.word	0x200000d0

080005c8 <Set_Brightness>:


#define PI 3.14159265

void Set_Brightness (int brightness)  // 0-45
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
		}
	}

#endif

}
 80005d0:	bf00      	nop
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <WS2812_Send>:

uint16_t pwmData[(24*MAX_LED)+50];

void WS2812_Send (void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 80005e6:	2300      	movs	r3, #0
 80005e8:	613b      	str	r3, [r7, #16]
 80005ea:	e036      	b.n	800065a <WS2812_Send+0x7e>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 80005ec:	4a2e      	ldr	r2, [pc, #184]	@ (80006a8 <WS2812_Send+0xcc>)
 80005ee:	693b      	ldr	r3, [r7, #16]
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	4413      	add	r3, r2
 80005f4:	785b      	ldrb	r3, [r3, #1]
 80005f6:	041a      	lsls	r2, r3, #16
 80005f8:	492b      	ldr	r1, [pc, #172]	@ (80006a8 <WS2812_Send+0xcc>)
 80005fa:	693b      	ldr	r3, [r7, #16]
 80005fc:	009b      	lsls	r3, r3, #2
 80005fe:	440b      	add	r3, r1
 8000600:	789b      	ldrb	r3, [r3, #2]
 8000602:	021b      	lsls	r3, r3, #8
 8000604:	431a      	orrs	r2, r3
 8000606:	4928      	ldr	r1, [pc, #160]	@ (80006a8 <WS2812_Send+0xcc>)
 8000608:	693b      	ldr	r3, [r7, #16]
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	440b      	add	r3, r1
 800060e:	78db      	ldrb	r3, [r3, #3]
 8000610:	4313      	orrs	r3, r2
 8000612:	607b      	str	r3, [r7, #4]
#endif

		for (int i=23; i>=0; i--)
 8000614:	2317      	movs	r3, #23
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	e019      	b.n	800064e <WS2812_Send+0x72>
//				pwmData[indx] = 60;  // 2/3 of 90
//			}
//
//			else pwmData[indx] = 30;  // 1/3 of 90

			if (color & (1 << i))
 800061a:	2201      	movs	r2, #1
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	fa02 f303 	lsl.w	r3, r2, r3
 8000622:	461a      	mov	r2, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4013      	ands	r3, r2
 8000628:	2b00      	cmp	r3, #0
 800062a:	d005      	beq.n	8000638 <WS2812_Send+0x5c>
			    pwmData[indx] = 42;  // 2/3 of 63
 800062c:	4a1f      	ldr	r2, [pc, #124]	@ (80006ac <WS2812_Send+0xd0>)
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	212a      	movs	r1, #42	@ 0x2a
 8000632:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000636:	e004      	b.n	8000642 <WS2812_Send+0x66>
			else
			    pwmData[indx] = 21;  // 1/3 of 63
 8000638:	4a1c      	ldr	r2, [pc, #112]	@ (80006ac <WS2812_Send+0xd0>)
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	2115      	movs	r1, #21
 800063e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]


			indx++;
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	3301      	adds	r3, #1
 8000646:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	3b01      	subs	r3, #1
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	2b00      	cmp	r3, #0
 8000652:	dae2      	bge.n	800061a <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 8000654:	693b      	ldr	r3, [r7, #16]
 8000656:	3301      	adds	r3, #1
 8000658:	613b      	str	r3, [r7, #16]
 800065a:	693b      	ldr	r3, [r7, #16]
 800065c:	2b3f      	cmp	r3, #63	@ 0x3f
 800065e:	ddc5      	ble.n	80005ec <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<50; i++)
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	e00a      	b.n	800067c <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 8000666:	4a11      	ldr	r2, [pc, #68]	@ (80006ac <WS2812_Send+0xd0>)
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	2100      	movs	r1, #0
 800066c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	3301      	adds	r3, #1
 8000674:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	3301      	adds	r3, #1
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	2b31      	cmp	r3, #49	@ 0x31
 8000680:	ddf1      	ble.n	8000666 <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	b29b      	uxth	r3, r3
 8000686:	4a09      	ldr	r2, [pc, #36]	@ (80006ac <WS2812_Send+0xd0>)
 8000688:	2100      	movs	r1, #0
 800068a:	4809      	ldr	r0, [pc, #36]	@ (80006b0 <WS2812_Send+0xd4>)
 800068c:	f002 f93e 	bl	800290c <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 8000690:	bf00      	nop
 8000692:	4b08      	ldr	r3, [pc, #32]	@ (80006b4 <WS2812_Send+0xd8>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d0fb      	beq.n	8000692 <WS2812_Send+0xb6>
	datasentflag = 0;
 800069a:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <WS2812_Send+0xd8>)
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
}
 80006a0:	bf00      	nop
 80006a2:	3718      	adds	r7, #24
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	200000d0 	.word	0x200000d0
 80006ac:	200001d4 	.word	0x200001d4
 80006b0:	20000028 	.word	0x20000028
 80006b4:	200001d0 	.word	0x200001d0

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006be:	f000 fbfb 	bl	8000eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c2:	f000 f973 	bl	80009ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c6:	f000 fa9d 	bl	8000c04 <MX_GPIO_Init>
  MX_DMA_Init();
 80006ca:	f000 fa7b 	bl	8000bc4 <MX_DMA_Init>
  MX_TIM1_Init();
 80006ce:	f000 f9d9 	bl	8000a84 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  Set_LED(0, 255, 0, 0);
 80006d2:	2300      	movs	r3, #0
 80006d4:	2200      	movs	r2, #0
 80006d6:	21ff      	movs	r1, #255	@ 0xff
 80006d8:	2000      	movs	r0, #0
 80006da:	f7ff ff1f 	bl	800051c <Set_LED>
//  Set_LED(5, 102, 0, 235);
//  Set_LED(6, 47, 38, 77);
//
//  Set_LED(7, 255, 200, 0);

  Set_Brightness(10);
 80006de:	200a      	movs	r0, #10
 80006e0:	f7ff ff72 	bl	80005c8 <Set_Brightness>
  WS2812_Send();
 80006e4:	f7ff ff7a 	bl	80005dc <WS2812_Send>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t fsm_state = 0;        // Start from state 0
 80006e8:	2300      	movs	r3, #0
 80006ea:	73fb      	strb	r3, [r7, #15]
  uint16_t led_count = 64;     // Total number of LEDs
 80006ec:	2340      	movs	r3, #64	@ 0x40
 80006ee:	80fb      	strh	r3, [r7, #6]
  uint32_t last_change_time = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60bb      	str	r3, [r7, #8]
  uint32_t state_duration_ms = 5000;  // 5 seconds per state
 80006f4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80006f8:	603b      	str	r3, [r7, #0]

  while (1) {
      Set_LEDs_ByState(fsm_state, led_count);
 80006fa:	88fa      	ldrh	r2, [r7, #6]
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	4611      	mov	r1, r2
 8000700:	4618      	mov	r0, r3
 8000702:	f000 f829 	bl	8000758 <Set_LEDs_ByState>
      effStep++;
 8000706:	4b12      	ldr	r3, [pc, #72]	@ (8000750 <main+0x98>)
 8000708:	881b      	ldrh	r3, [r3, #0]
 800070a:	3301      	adds	r3, #1
 800070c:	b29a      	uxth	r2, r3
 800070e:	4b10      	ldr	r3, [pc, #64]	@ (8000750 <main+0x98>)
 8000710:	801a      	strh	r2, [r3, #0]

      // Change state every 5 seconds
      if (HAL_GetTick() - last_change_time >= state_duration_ms) {
 8000712:	f000 fc37 	bl	8000f84 <HAL_GetTick>
 8000716:	4602      	mov	r2, r0
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	1ad3      	subs	r3, r2, r3
 800071c:	683a      	ldr	r2, [r7, #0]
 800071e:	429a      	cmp	r2, r3
 8000720:	d811      	bhi.n	8000746 <main+0x8e>
          fsm_state = (fsm_state + 1) % 7;  // Cycle 0→1→...→6→0
 8000722:	7bfb      	ldrb	r3, [r7, #15]
 8000724:	1c5a      	adds	r2, r3, #1
 8000726:	4b0b      	ldr	r3, [pc, #44]	@ (8000754 <main+0x9c>)
 8000728:	fb83 1302 	smull	r1, r3, r3, r2
 800072c:	4413      	add	r3, r2
 800072e:	1099      	asrs	r1, r3, #2
 8000730:	17d3      	asrs	r3, r2, #31
 8000732:	1ac9      	subs	r1, r1, r3
 8000734:	460b      	mov	r3, r1
 8000736:	00db      	lsls	r3, r3, #3
 8000738:	1a5b      	subs	r3, r3, r1
 800073a:	1ad1      	subs	r1, r2, r3
 800073c:	460b      	mov	r3, r1
 800073e:	73fb      	strb	r3, [r7, #15]
          last_change_time = HAL_GetTick();
 8000740:	f000 fc20 	bl	8000f84 <HAL_GetTick>
 8000744:	60b8      	str	r0, [r7, #8]
      }

      HAL_Delay(30);
 8000746:	201e      	movs	r0, #30
 8000748:	f000 fc28 	bl	8000f9c <HAL_Delay>
      Set_LEDs_ByState(fsm_state, led_count);
 800074c:	e7d5      	b.n	80006fa <main+0x42>
 800074e:	bf00      	nop
 8000750:	20000e38 	.word	0x20000e38
 8000754:	92492493 	.word	0x92492493

08000758 <Set_LEDs_ByState>:
        } else {
            return (y * width) + (width - 1 - x);
        }
    }
}
void Set_LEDs_ByState(uint8_t state, uint16_t led_count) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	460a      	mov	r2, r1
 8000762:	71fb      	strb	r3, [r7, #7]
 8000764:	4613      	mov	r3, r2
 8000766:	80bb      	strh	r3, [r7, #4]
    uint8_t trail_len = led_count / 2;  // Half-strip trail
 8000768:	88bb      	ldrh	r3, [r7, #4]
 800076a:	085b      	lsrs	r3, r3, #1
 800076c:	b29b      	uxth	r3, r3
 800076e:	767b      	strb	r3, [r7, #25]
    uint16_t head = effStep % led_count;
 8000770:	4b8c      	ldr	r3, [pc, #560]	@ (80009a4 <Set_LEDs_ByState+0x24c>)
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	88ba      	ldrh	r2, [r7, #4]
 8000776:	fbb3 f1f2 	udiv	r1, r3, r2
 800077a:	fb01 f202 	mul.w	r2, r1, r2
 800077e:	1a9b      	subs	r3, r3, r2
 8000780:	82fb      	strh	r3, [r7, #22]

    for (uint16_t i = 0; i < led_count; i++) {
 8000782:	2300      	movs	r3, #0
 8000784:	83fb      	strh	r3, [r7, #30]
 8000786:	e102      	b.n	800098e <Set_LEDs_ByState+0x236>
        uint16_t distance = (i + led_count - head) % led_count;
 8000788:	8bfa      	ldrh	r2, [r7, #30]
 800078a:	88bb      	ldrh	r3, [r7, #4]
 800078c:	441a      	add	r2, r3
 800078e:	8afb      	ldrh	r3, [r7, #22]
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	88ba      	ldrh	r2, [r7, #4]
 8000794:	fb93 f1f2 	sdiv	r1, r3, r2
 8000798:	fb01 f202 	mul.w	r2, r1, r2
 800079c:	1a9b      	subs	r3, r3, r2
 800079e:	82bb      	strh	r3, [r7, #20]

        switch (state) {
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	2b06      	cmp	r3, #6
 80007a4:	f200 80f0 	bhi.w	8000988 <Set_LEDs_ByState+0x230>
 80007a8:	a201      	add	r2, pc, #4	@ (adr r2, 80007b0 <Set_LEDs_ByState+0x58>)
 80007aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ae:	bf00      	nop
 80007b0:	080007cd 	.word	0x080007cd
 80007b4:	080007f3 	.word	0x080007f3
 80007b8:	08000819 	.word	0x08000819
 80007bc:	0800083f 	.word	0x0800083f
 80007c0:	0800084d 	.word	0x0800084d
 80007c4:	080008d7 	.word	0x080008d7
 80007c8:	0800093d 	.word	0x0800093d
            case 0:  // Red trail
                if (distance < trail_len)
 80007cc:	7e7b      	ldrb	r3, [r7, #25]
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	8aba      	ldrh	r2, [r7, #20]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d206      	bcs.n	80007e4 <Set_LEDs_ByState+0x8c>
                    Set_LED(i, 255, 0, 0);
 80007d6:	8bf8      	ldrh	r0, [r7, #30]
 80007d8:	2300      	movs	r3, #0
 80007da:	2200      	movs	r2, #0
 80007dc:	21ff      	movs	r1, #255	@ 0xff
 80007de:	f7ff fe9d 	bl	800051c <Set_LED>
                else
                    Set_LED(i, 0, 0, 0);
                break;
 80007e2:	e0d1      	b.n	8000988 <Set_LEDs_ByState+0x230>
                    Set_LED(i, 0, 0, 0);
 80007e4:	8bf8      	ldrh	r0, [r7, #30]
 80007e6:	2300      	movs	r3, #0
 80007e8:	2200      	movs	r2, #0
 80007ea:	2100      	movs	r1, #0
 80007ec:	f7ff fe96 	bl	800051c <Set_LED>
                break;
 80007f0:	e0ca      	b.n	8000988 <Set_LEDs_ByState+0x230>

            case 1:  // Green trail
                if (distance < trail_len)
 80007f2:	7e7b      	ldrb	r3, [r7, #25]
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	8aba      	ldrh	r2, [r7, #20]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d206      	bcs.n	800080a <Set_LEDs_ByState+0xb2>
                    Set_LED(i, 0, 255, 0);
 80007fc:	8bf8      	ldrh	r0, [r7, #30]
 80007fe:	2300      	movs	r3, #0
 8000800:	22ff      	movs	r2, #255	@ 0xff
 8000802:	2100      	movs	r1, #0
 8000804:	f7ff fe8a 	bl	800051c <Set_LED>
                else
                    Set_LED(i, 0, 0, 0);
                break;
 8000808:	e0be      	b.n	8000988 <Set_LEDs_ByState+0x230>
                    Set_LED(i, 0, 0, 0);
 800080a:	8bf8      	ldrh	r0, [r7, #30]
 800080c:	2300      	movs	r3, #0
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	f7ff fe83 	bl	800051c <Set_LED>
                break;
 8000816:	e0b7      	b.n	8000988 <Set_LEDs_ByState+0x230>

            case 2:  // Blue trail
                if (distance < trail_len)
 8000818:	7e7b      	ldrb	r3, [r7, #25]
 800081a:	b29b      	uxth	r3, r3
 800081c:	8aba      	ldrh	r2, [r7, #20]
 800081e:	429a      	cmp	r2, r3
 8000820:	d206      	bcs.n	8000830 <Set_LEDs_ByState+0xd8>
                    Set_LED(i, 0, 0, 255);
 8000822:	8bf8      	ldrh	r0, [r7, #30]
 8000824:	23ff      	movs	r3, #255	@ 0xff
 8000826:	2200      	movs	r2, #0
 8000828:	2100      	movs	r1, #0
 800082a:	f7ff fe77 	bl	800051c <Set_LED>
                else
                    Set_LED(i, 0, 0, 0);
                break;
 800082e:	e0ab      	b.n	8000988 <Set_LEDs_ByState+0x230>
                    Set_LED(i, 0, 0, 0);
 8000830:	8bf8      	ldrh	r0, [r7, #30]
 8000832:	2300      	movs	r3, #0
 8000834:	2200      	movs	r2, #0
 8000836:	2100      	movs	r1, #0
 8000838:	f7ff fe70 	bl	800051c <Set_LED>
                break;
 800083c:	e0a4      	b.n	8000988 <Set_LEDs_ByState+0x230>

            case 3:  // Skip (off)
                Set_LED(i, 0, 0, 0);
 800083e:	8bf8      	ldrh	r0, [r7, #30]
 8000840:	2300      	movs	r3, #0
 8000842:	2200      	movs	r2, #0
 8000844:	2100      	movs	r1, #0
 8000846:	f7ff fe69 	bl	800051c <Set_LED>
                break;
 800084a:	e09d      	b.n	8000988 <Set_LEDs_ByState+0x230>

            case 4:  // Moving split: half blue, half yellow — full strip lit, no gaps
            {
                uint16_t half = led_count / 2;
 800084c:	88bb      	ldrh	r3, [r7, #4]
 800084e:	085b      	lsrs	r3, r3, #1
 8000850:	827b      	strh	r3, [r7, #18]
                uint16_t start = effStep % led_count;
 8000852:	4b54      	ldr	r3, [pc, #336]	@ (80009a4 <Set_LEDs_ByState+0x24c>)
 8000854:	881b      	ldrh	r3, [r3, #0]
 8000856:	88ba      	ldrh	r2, [r7, #4]
 8000858:	fbb3 f1f2 	udiv	r1, r3, r2
 800085c:	fb01 f202 	mul.w	r2, r1, r2
 8000860:	1a9b      	subs	r3, r3, r2
 8000862:	823b      	strh	r3, [r7, #16]

                for (uint16_t j = 0; j < half; j++) {
 8000864:	2300      	movs	r3, #0
 8000866:	83bb      	strh	r3, [r7, #28]
 8000868:	e012      	b.n	8000890 <Set_LEDs_ByState+0x138>
                    uint16_t idx = (start + j) % led_count;
 800086a:	8a3a      	ldrh	r2, [r7, #16]
 800086c:	8bbb      	ldrh	r3, [r7, #28]
 800086e:	4413      	add	r3, r2
 8000870:	88ba      	ldrh	r2, [r7, #4]
 8000872:	fb93 f1f2 	sdiv	r1, r3, r2
 8000876:	fb01 f202 	mul.w	r2, r1, r2
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	81bb      	strh	r3, [r7, #12]
                    Set_LED(idx, 0, 0, 255);  // Blue
 800087e:	89b8      	ldrh	r0, [r7, #12]
 8000880:	23ff      	movs	r3, #255	@ 0xff
 8000882:	2200      	movs	r2, #0
 8000884:	2100      	movs	r1, #0
 8000886:	f7ff fe49 	bl	800051c <Set_LED>
                for (uint16_t j = 0; j < half; j++) {
 800088a:	8bbb      	ldrh	r3, [r7, #28]
 800088c:	3301      	adds	r3, #1
 800088e:	83bb      	strh	r3, [r7, #28]
 8000890:	8bba      	ldrh	r2, [r7, #28]
 8000892:	8a7b      	ldrh	r3, [r7, #18]
 8000894:	429a      	cmp	r2, r3
 8000896:	d3e8      	bcc.n	800086a <Set_LEDs_ByState+0x112>
                }

                for (uint16_t j = 0; j < half; j++) {
 8000898:	2300      	movs	r3, #0
 800089a:	837b      	strh	r3, [r7, #26]
 800089c:	e014      	b.n	80008c8 <Set_LEDs_ByState+0x170>
                    uint16_t idx = (start + j + half) % led_count;
 800089e:	8a3a      	ldrh	r2, [r7, #16]
 80008a0:	8b7b      	ldrh	r3, [r7, #26]
 80008a2:	441a      	add	r2, r3
 80008a4:	8a7b      	ldrh	r3, [r7, #18]
 80008a6:	4413      	add	r3, r2
 80008a8:	88ba      	ldrh	r2, [r7, #4]
 80008aa:	fb93 f1f2 	sdiv	r1, r3, r2
 80008ae:	fb01 f202 	mul.w	r2, r1, r2
 80008b2:	1a9b      	subs	r3, r3, r2
 80008b4:	81fb      	strh	r3, [r7, #14]
                    Set_LED(idx, 255, 255, 0);  // Yellow
 80008b6:	89f8      	ldrh	r0, [r7, #14]
 80008b8:	2300      	movs	r3, #0
 80008ba:	22ff      	movs	r2, #255	@ 0xff
 80008bc:	21ff      	movs	r1, #255	@ 0xff
 80008be:	f7ff fe2d 	bl	800051c <Set_LED>
                for (uint16_t j = 0; j < half; j++) {
 80008c2:	8b7b      	ldrh	r3, [r7, #26]
 80008c4:	3301      	adds	r3, #1
 80008c6:	837b      	strh	r3, [r7, #26]
 80008c8:	8b7a      	ldrh	r2, [r7, #26]
 80008ca:	8a7b      	ldrh	r3, [r7, #18]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d3e6      	bcc.n	800089e <Set_LEDs_ByState+0x146>
                }

                WS2812_Send();
 80008d0:	f7ff fe84 	bl	80005dc <WS2812_Send>
                break;
 80008d4:	e058      	b.n	8000988 <Set_LEDs_ByState+0x230>
            }


            case 5:  // Blinking blue/yellow trail (on for 20 steps, off for 20 steps)
                if ((effStep / 20) % 2 == 0) {
 80008d6:	4b33      	ldr	r3, [pc, #204]	@ (80009a4 <Set_LEDs_ByState+0x24c>)
 80008d8:	881b      	ldrh	r3, [r3, #0]
 80008da:	4a33      	ldr	r2, [pc, #204]	@ (80009a8 <Set_LEDs_ByState+0x250>)
 80008dc:	fba2 2303 	umull	r2, r3, r2, r3
 80008e0:	091b      	lsrs	r3, r3, #4
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	f003 0301 	and.w	r3, r3, #1
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d11f      	bne.n	800092e <Set_LEDs_ByState+0x1d6>
                    if (distance < trail_len) {
 80008ee:	7e7b      	ldrb	r3, [r7, #25]
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	8aba      	ldrh	r2, [r7, #20]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d213      	bcs.n	8000920 <Set_LEDs_ByState+0x1c8>
                        if (i < led_count / 2)
 80008f8:	88bb      	ldrh	r3, [r7, #4]
 80008fa:	085b      	lsrs	r3, r3, #1
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	8bfa      	ldrh	r2, [r7, #30]
 8000900:	429a      	cmp	r2, r3
 8000902:	d206      	bcs.n	8000912 <Set_LEDs_ByState+0x1ba>
                            Set_LED(i, 0, 0, 255);   // Blue
 8000904:	8bf8      	ldrh	r0, [r7, #30]
 8000906:	23ff      	movs	r3, #255	@ 0xff
 8000908:	2200      	movs	r2, #0
 800090a:	2100      	movs	r1, #0
 800090c:	f7ff fe06 	bl	800051c <Set_LED>
                        Set_LED(i, 0, 0, 0);
                    }
                } else {
                    Set_LED(i, 0, 0, 0);  // Blink off
                }
                break;
 8000910:	e03a      	b.n	8000988 <Set_LEDs_ByState+0x230>
                            Set_LED(i, 255, 255, 0); // Yellow
 8000912:	8bf8      	ldrh	r0, [r7, #30]
 8000914:	2300      	movs	r3, #0
 8000916:	22ff      	movs	r2, #255	@ 0xff
 8000918:	21ff      	movs	r1, #255	@ 0xff
 800091a:	f7ff fdff 	bl	800051c <Set_LED>
                break;
 800091e:	e033      	b.n	8000988 <Set_LEDs_ByState+0x230>
                        Set_LED(i, 0, 0, 0);
 8000920:	8bf8      	ldrh	r0, [r7, #30]
 8000922:	2300      	movs	r3, #0
 8000924:	2200      	movs	r2, #0
 8000926:	2100      	movs	r1, #0
 8000928:	f7ff fdf8 	bl	800051c <Set_LED>
                break;
 800092c:	e02c      	b.n	8000988 <Set_LEDs_ByState+0x230>
                    Set_LED(i, 0, 0, 0);  // Blink off
 800092e:	8bf8      	ldrh	r0, [r7, #30]
 8000930:	2300      	movs	r3, #0
 8000932:	2200      	movs	r2, #0
 8000934:	2100      	movs	r1, #0
 8000936:	f7ff fdf1 	bl	800051c <Set_LED>
                break;
 800093a:	e025      	b.n	8000988 <Set_LEDs_ByState+0x230>

            case 6:  // Blinking yellow trail
                if ((effStep / 20) % 2 == 0) {
 800093c:	4b19      	ldr	r3, [pc, #100]	@ (80009a4 <Set_LEDs_ByState+0x24c>)
 800093e:	881b      	ldrh	r3, [r3, #0]
 8000940:	4a19      	ldr	r2, [pc, #100]	@ (80009a8 <Set_LEDs_ByState+0x250>)
 8000942:	fba2 2303 	umull	r2, r3, r2, r3
 8000946:	091b      	lsrs	r3, r3, #4
 8000948:	b29b      	uxth	r3, r3
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	b29b      	uxth	r3, r3
 8000950:	2b00      	cmp	r3, #0
 8000952:	d112      	bne.n	800097a <Set_LEDs_ByState+0x222>
                    if (distance < trail_len)
 8000954:	7e7b      	ldrb	r3, [r7, #25]
 8000956:	b29b      	uxth	r3, r3
 8000958:	8aba      	ldrh	r2, [r7, #20]
 800095a:	429a      	cmp	r2, r3
 800095c:	d206      	bcs.n	800096c <Set_LEDs_ByState+0x214>
                        Set_LED(i, 255, 255, 0);  // Yellow
 800095e:	8bf8      	ldrh	r0, [r7, #30]
 8000960:	2300      	movs	r3, #0
 8000962:	22ff      	movs	r2, #255	@ 0xff
 8000964:	21ff      	movs	r1, #255	@ 0xff
 8000966:	f7ff fdd9 	bl	800051c <Set_LED>
                    else
                        Set_LED(i, 0, 0, 0);
                } else {
                    Set_LED(i, 0, 0, 0);  // Blink off
                }
                break;
 800096a:	e00c      	b.n	8000986 <Set_LEDs_ByState+0x22e>
                        Set_LED(i, 0, 0, 0);
 800096c:	8bf8      	ldrh	r0, [r7, #30]
 800096e:	2300      	movs	r3, #0
 8000970:	2200      	movs	r2, #0
 8000972:	2100      	movs	r1, #0
 8000974:	f7ff fdd2 	bl	800051c <Set_LED>
                break;
 8000978:	e005      	b.n	8000986 <Set_LEDs_ByState+0x22e>
                    Set_LED(i, 0, 0, 0);  // Blink off
 800097a:	8bf8      	ldrh	r0, [r7, #30]
 800097c:	2300      	movs	r3, #0
 800097e:	2200      	movs	r2, #0
 8000980:	2100      	movs	r1, #0
 8000982:	f7ff fdcb 	bl	800051c <Set_LED>
                break;
 8000986:	bf00      	nop
    for (uint16_t i = 0; i < led_count; i++) {
 8000988:	8bfb      	ldrh	r3, [r7, #30]
 800098a:	3301      	adds	r3, #1
 800098c:	83fb      	strh	r3, [r7, #30]
 800098e:	8bfa      	ldrh	r2, [r7, #30]
 8000990:	88bb      	ldrh	r3, [r7, #4]
 8000992:	429a      	cmp	r2, r3
 8000994:	f4ff aef8 	bcc.w	8000788 <Set_LEDs_ByState+0x30>
        }
    }

    WS2812_Send();
 8000998:	f7ff fe20 	bl	80005dc <WS2812_Send>
}
 800099c:	bf00      	nop
 800099e:	3720      	adds	r7, #32
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000e38 	.word	0x20000e38
 80009a8:	cccccccd 	.word	0xcccccccd

080009ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b094      	sub	sp, #80	@ 0x50
 80009b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	2234      	movs	r2, #52	@ 0x34
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f003 f876 	bl	8003aac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c0:	f107 0308 	add.w	r3, r7, #8
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d0:	2300      	movs	r3, #0
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	4b29      	ldr	r3, [pc, #164]	@ (8000a7c <SystemClock_Config+0xd0>)
 80009d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d8:	4a28      	ldr	r2, [pc, #160]	@ (8000a7c <SystemClock_Config+0xd0>)
 80009da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009de:	6413      	str	r3, [r2, #64]	@ 0x40
 80009e0:	4b26      	ldr	r3, [pc, #152]	@ (8000a7c <SystemClock_Config+0xd0>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009ec:	2300      	movs	r3, #0
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	4b23      	ldr	r3, [pc, #140]	@ (8000a80 <SystemClock_Config+0xd4>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009f8:	4a21      	ldr	r2, [pc, #132]	@ (8000a80 <SystemClock_Config+0xd4>)
 80009fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009fe:	6013      	str	r3, [r2, #0]
 8000a00:	4b1f      	ldr	r3, [pc, #124]	@ (8000a80 <SystemClock_Config+0xd4>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a10:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000a14:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a16:	2302      	movs	r3, #2
 8000a18:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a1a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a20:	2304      	movs	r3, #4
 8000a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50; // 72 before
 8000a24:	2332      	movs	r3, #50	@ 0x32
 8000a26:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a30:	2302      	movs	r3, #2
 8000a32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f001 fc21 	bl	8002280 <HAL_RCC_OscConfig>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a44:	f000 f906 	bl	8000c54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a48:	230f      	movs	r3, #15
 8000a4a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a58:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) // flashlatency 2 before
 8000a5e:	f107 0308 	add.w	r3, r7, #8
 8000a62:	2101      	movs	r1, #1
 8000a64:	4618      	mov	r0, r3
 8000a66:	f001 f8f5 	bl	8001c54 <HAL_RCC_ClockConfig>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000a70:	f000 f8f0 	bl	8000c54 <Error_Handler>
  }
}
 8000a74:	bf00      	nop
 8000a76:	3750      	adds	r7, #80	@ 0x50
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40007000 	.word	0x40007000

08000a84 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b096      	sub	sp, #88	@ 0x58
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a8a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a98:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aa2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]
 8000ab2:	615a      	str	r2, [r3, #20]
 8000ab4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	2220      	movs	r2, #32
 8000aba:	2100      	movs	r1, #0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f002 fff5 	bl	8003aac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ac2:	4b3e      	ldr	r3, [pc, #248]	@ (8000bbc <MX_TIM1_Init+0x138>)
 8000ac4:	4a3e      	ldr	r2, [pc, #248]	@ (8000bc0 <MX_TIM1_Init+0x13c>)
 8000ac6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ac8:	4b3c      	ldr	r3, [pc, #240]	@ (8000bbc <MX_TIM1_Init+0x138>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ace:	4b3b      	ldr	r3, [pc, #236]	@ (8000bbc <MX_TIM1_Init+0x138>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
//  htim1.Init.Period = 90-1;
  htim1.Init.Period = 63 - 1;  // 62 ticks
 8000ad4:	4b39      	ldr	r3, [pc, #228]	@ (8000bbc <MX_TIM1_Init+0x138>)
 8000ad6:	223e      	movs	r2, #62	@ 0x3e
 8000ad8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ada:	4b38      	ldr	r3, [pc, #224]	@ (8000bbc <MX_TIM1_Init+0x138>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ae0:	4b36      	ldr	r3, [pc, #216]	@ (8000bbc <MX_TIM1_Init+0x138>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae6:	4b35      	ldr	r3, [pc, #212]	@ (8000bbc <MX_TIM1_Init+0x138>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000aec:	4833      	ldr	r0, [pc, #204]	@ (8000bbc <MX_TIM1_Init+0x138>)
 8000aee:	f001 fe65 	bl	80027bc <HAL_TIM_Base_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000af8:	f000 f8ac 	bl	8000c54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000afc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b00:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b02:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b06:	4619      	mov	r1, r3
 8000b08:	482c      	ldr	r0, [pc, #176]	@ (8000bbc <MX_TIM1_Init+0x138>)
 8000b0a:	f002 fa47 	bl	8002f9c <HAL_TIM_ConfigClockSource>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000b14:	f000 f89e 	bl	8000c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b18:	4828      	ldr	r0, [pc, #160]	@ (8000bbc <MX_TIM1_Init+0x138>)
 8000b1a:	f001 fe9e 	bl	800285a <HAL_TIM_PWM_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000b24:	f000 f896 	bl	8000c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b30:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b34:	4619      	mov	r1, r3
 8000b36:	4821      	ldr	r0, [pc, #132]	@ (8000bbc <MX_TIM1_Init+0x138>)
 8000b38:	f002 feea 	bl	8003910 <HAL_TIMEx_MasterConfigSynchronization>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000b42:	f000 f887 	bl	8000c54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b46:	2360      	movs	r3, #96	@ 0x60
 8000b48:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b52:	2300      	movs	r3, #0
 8000b54:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b66:	2200      	movs	r2, #0
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4814      	ldr	r0, [pc, #80]	@ (8000bbc <MX_TIM1_Init+0x138>)
 8000b6c:	f002 f958 	bl	8002e20 <HAL_TIM_PWM_ConfigChannel>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000b76:	f000 f86d 	bl	8000c54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b8e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b92:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4807      	ldr	r0, [pc, #28]	@ (8000bbc <MX_TIM1_Init+0x138>)
 8000b9e:	f002 ff33 	bl	8003a08 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000ba8:	f000 f854 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bac:	4803      	ldr	r0, [pc, #12]	@ (8000bbc <MX_TIM1_Init+0x138>)
 8000bae:	f000 f8d3 	bl	8000d58 <HAL_TIM_MspPostInit>

}
 8000bb2:	bf00      	nop
 8000bb4:	3758      	adds	r7, #88	@ 0x58
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000028 	.word	0x20000028
 8000bc0:	40010000 	.word	0x40010000

08000bc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <MX_DMA_Init+0x3c>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	4a0b      	ldr	r2, [pc, #44]	@ (8000c00 <MX_DMA_Init+0x3c>)
 8000bd4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bda:	4b09      	ldr	r3, [pc, #36]	@ (8000c00 <MX_DMA_Init+0x3c>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2100      	movs	r1, #0
 8000bea:	2039      	movs	r0, #57	@ 0x39
 8000bec:	f000 fad5 	bl	800119a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000bf0:	2039      	movs	r0, #57	@ 0x39
 8000bf2:	f000 faee 	bl	80011d2 <HAL_NVIC_EnableIRQ>

}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40023800 	.word	0x40023800

08000c04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	4b10      	ldr	r3, [pc, #64]	@ (8000c50 <MX_GPIO_Init+0x4c>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	4a0f      	ldr	r2, [pc, #60]	@ (8000c50 <MX_GPIO_Init+0x4c>)
 8000c14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c50 <MX_GPIO_Init+0x4c>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	603b      	str	r3, [r7, #0]
 8000c2a:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <MX_GPIO_Init+0x4c>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	4a08      	ldr	r2, [pc, #32]	@ (8000c50 <MX_GPIO_Init+0x4c>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c36:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <MX_GPIO_Init+0x4c>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]

}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	40023800 	.word	0x40023800

08000c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c58:	b672      	cpsid	i
}
 8000c5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <Error_Handler+0x8>

08000c60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	4b10      	ldr	r3, [pc, #64]	@ (8000cac <HAL_MspInit+0x4c>)
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c6e:	4a0f      	ldr	r2, [pc, #60]	@ (8000cac <HAL_MspInit+0x4c>)
 8000c70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c74:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c76:	4b0d      	ldr	r3, [pc, #52]	@ (8000cac <HAL_MspInit+0x4c>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	603b      	str	r3, [r7, #0]
 8000c86:	4b09      	ldr	r3, [pc, #36]	@ (8000cac <HAL_MspInit+0x4c>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8a:	4a08      	ldr	r2, [pc, #32]	@ (8000cac <HAL_MspInit+0x4c>)
 8000c8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c92:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <HAL_MspInit+0x4c>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c9a:	603b      	str	r3, [r7, #0]
 8000c9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	40023800 	.word	0x40023800

08000cb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a22      	ldr	r2, [pc, #136]	@ (8000d48 <HAL_TIM_Base_MspInit+0x98>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d13d      	bne.n	8000d3e <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	4b21      	ldr	r3, [pc, #132]	@ (8000d4c <HAL_TIM_Base_MspInit+0x9c>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cca:	4a20      	ldr	r2, [pc, #128]	@ (8000d4c <HAL_TIM_Base_MspInit+0x9c>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d4c <HAL_TIM_Base_MspInit+0x9c>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8000cde:	4b1c      	ldr	r3, [pc, #112]	@ (8000d50 <HAL_TIM_Base_MspInit+0xa0>)
 8000ce0:	4a1c      	ldr	r2, [pc, #112]	@ (8000d54 <HAL_TIM_Base_MspInit+0xa4>)
 8000ce2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8000ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d50 <HAL_TIM_Base_MspInit+0xa0>)
 8000ce6:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8000cea:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cec:	4b18      	ldr	r3, [pc, #96]	@ (8000d50 <HAL_TIM_Base_MspInit+0xa0>)
 8000cee:	2240      	movs	r2, #64	@ 0x40
 8000cf0:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cf2:	4b17      	ldr	r3, [pc, #92]	@ (8000d50 <HAL_TIM_Base_MspInit+0xa0>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000cf8:	4b15      	ldr	r3, [pc, #84]	@ (8000d50 <HAL_TIM_Base_MspInit+0xa0>)
 8000cfa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cfe:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d00:	4b13      	ldr	r3, [pc, #76]	@ (8000d50 <HAL_TIM_Base_MspInit+0xa0>)
 8000d02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d06:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d08:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <HAL_TIM_Base_MspInit+0xa0>)
 8000d0a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d0e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000d10:	4b0f      	ldr	r3, [pc, #60]	@ (8000d50 <HAL_TIM_Base_MspInit+0xa0>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000d16:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <HAL_TIM_Base_MspInit+0xa0>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <HAL_TIM_Base_MspInit+0xa0>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000d22:	480b      	ldr	r0, [pc, #44]	@ (8000d50 <HAL_TIM_Base_MspInit+0xa0>)
 8000d24:	f000 fa70 	bl	8001208 <HAL_DMA_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8000d2e:	f7ff ff91 	bl	8000c54 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a06      	ldr	r2, [pc, #24]	@ (8000d50 <HAL_TIM_Base_MspInit+0xa0>)
 8000d36:	625a      	str	r2, [r3, #36]	@ 0x24
 8000d38:	4a05      	ldr	r2, [pc, #20]	@ (8000d50 <HAL_TIM_Base_MspInit+0xa0>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d3e:	bf00      	nop
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40010000 	.word	0x40010000
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	20000070 	.word	0x20000070
 8000d54:	40026428 	.word	0x40026428

08000d58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a12      	ldr	r2, [pc, #72]	@ (8000dc0 <HAL_TIM_MspPostInit+0x68>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d11e      	bne.n	8000db8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60bb      	str	r3, [r7, #8]
 8000d7e:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <HAL_TIM_MspPostInit+0x6c>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	4a10      	ldr	r2, [pc, #64]	@ (8000dc4 <HAL_TIM_MspPostInit+0x6c>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc4 <HAL_TIM_MspPostInit+0x6c>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d9a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000da8:	2301      	movs	r3, #1
 8000daa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	f107 030c 	add.w	r3, r7, #12
 8000db0:	4619      	mov	r1, r3
 8000db2:	4805      	ldr	r0, [pc, #20]	@ (8000dc8 <HAL_TIM_MspPostInit+0x70>)
 8000db4:	f000 fdba 	bl	800192c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000db8:	bf00      	nop
 8000dba:	3720      	adds	r7, #32
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40010000 	.word	0x40010000
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40020000 	.word	0x40020000

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <NMI_Handler+0x4>

08000dd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <HardFault_Handler+0x4>

08000ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de0:	bf00      	nop
 8000de2:	e7fd      	b.n	8000de0 <MemManage_Handler+0x4>

08000de4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <BusFault_Handler+0x4>

08000dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <UsageFault_Handler+0x4>

08000df4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e22:	f000 f89b 	bl	8000f5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000e30:	4802      	ldr	r0, [pc, #8]	@ (8000e3c <DMA2_Stream1_IRQHandler+0x10>)
 8000e32:	f000 fb11 	bl	8001458 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000070 	.word	0x20000070

08000e40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e44:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <SystemInit+0x20>)
 8000e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e4a:	4a05      	ldr	r2, [pc, #20]	@ (8000e60 <SystemInit+0x20>)
 8000e4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e68:	480d      	ldr	r0, [pc, #52]	@ (8000ea0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e6a:	490e      	ldr	r1, [pc, #56]	@ (8000ea4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e6c:	4a0e      	ldr	r2, [pc, #56]	@ (8000ea8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e70:	e002      	b.n	8000e78 <LoopCopyDataInit>

08000e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e76:	3304      	adds	r3, #4

08000e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e7c:	d3f9      	bcc.n	8000e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7e:	4a0b      	ldr	r2, [pc, #44]	@ (8000eac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e80:	4c0b      	ldr	r4, [pc, #44]	@ (8000eb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e84:	e001      	b.n	8000e8a <LoopFillZerobss>

08000e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e88:	3204      	adds	r2, #4

08000e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e8c:	d3fb      	bcc.n	8000e86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e8e:	f7ff ffd7 	bl	8000e40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e92:	f002 fe13 	bl	8003abc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e96:	f7ff fc0f 	bl	80006b8 <main>
  bx  lr    
 8000e9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ea8:	08003b44 	.word	0x08003b44
  ldr r2, =_sbss
 8000eac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000eb0:	20000e40 	.word	0x20000e40

08000eb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb4:	e7fe      	b.n	8000eb4 <ADC_IRQHandler>
	...

08000eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef8 <HAL_Init+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef8 <HAL_Init+0x40>)
 8000ec2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ec6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef8 <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef8 <HAL_Init+0x40>)
 8000ece:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed4:	4b08      	ldr	r3, [pc, #32]	@ (8000ef8 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a07      	ldr	r2, [pc, #28]	@ (8000ef8 <HAL_Init+0x40>)
 8000eda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee0:	2003      	movs	r0, #3
 8000ee2:	f000 f94f 	bl	8001184 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f000 f808 	bl	8000efc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eec:	f7ff feb8 	bl	8000c60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40023c00 	.word	0x40023c00

08000efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f04:	4b12      	ldr	r3, [pc, #72]	@ (8000f50 <HAL_InitTick+0x54>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4b12      	ldr	r3, [pc, #72]	@ (8000f54 <HAL_InitTick+0x58>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 f967 	bl	80011ee <HAL_SYSTICK_Config>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e00e      	b.n	8000f48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b0f      	cmp	r3, #15
 8000f2e:	d80a      	bhi.n	8000f46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f30:	2200      	movs	r2, #0
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295
 8000f38:	f000 f92f 	bl	800119a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f3c:	4a06      	ldr	r2, [pc, #24]	@ (8000f58 <HAL_InitTick+0x5c>)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f42:	2300      	movs	r3, #0
 8000f44:	e000      	b.n	8000f48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000000 	.word	0x20000000
 8000f54:	20000008 	.word	0x20000008
 8000f58:	20000004 	.word	0x20000004

08000f5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f60:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <HAL_IncTick+0x20>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <HAL_IncTick+0x24>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	4a04      	ldr	r2, [pc, #16]	@ (8000f80 <HAL_IncTick+0x24>)
 8000f6e:	6013      	str	r3, [r2, #0]
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20000008 	.word	0x20000008
 8000f80:	20000e3c 	.word	0x20000e3c

08000f84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return uwTick;
 8000f88:	4b03      	ldr	r3, [pc, #12]	@ (8000f98 <HAL_GetTick+0x14>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20000e3c 	.word	0x20000e3c

08000f9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa4:	f7ff ffee 	bl	8000f84 <HAL_GetTick>
 8000fa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb4:	d005      	beq.n	8000fc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe0 <HAL_Delay+0x44>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fc2:	bf00      	nop
 8000fc4:	f7ff ffde 	bl	8000f84 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d8f7      	bhi.n	8000fc4 <HAL_Delay+0x28>
  {
  }
}
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000008 	.word	0x20000008

08000fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8001028 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001000:	4013      	ands	r3, r2
 8001002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800100c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001010:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001016:	4a04      	ldr	r2, [pc, #16]	@ (8001028 <__NVIC_SetPriorityGrouping+0x44>)
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	60d3      	str	r3, [r2, #12]
}
 800101c:	bf00      	nop
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001030:	4b04      	ldr	r3, [pc, #16]	@ (8001044 <__NVIC_GetPriorityGrouping+0x18>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	0a1b      	lsrs	r3, r3, #8
 8001036:	f003 0307 	and.w	r3, r3, #7
}
 800103a:	4618      	mov	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	2b00      	cmp	r3, #0
 8001058:	db0b      	blt.n	8001072 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	f003 021f 	and.w	r2, r3, #31
 8001060:	4907      	ldr	r1, [pc, #28]	@ (8001080 <__NVIC_EnableIRQ+0x38>)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	095b      	lsrs	r3, r3, #5
 8001068:	2001      	movs	r0, #1
 800106a:	fa00 f202 	lsl.w	r2, r0, r2
 800106e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000e100 	.word	0xe000e100

08001084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	6039      	str	r1, [r7, #0]
 800108e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001094:	2b00      	cmp	r3, #0
 8001096:	db0a      	blt.n	80010ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	b2da      	uxtb	r2, r3
 800109c:	490c      	ldr	r1, [pc, #48]	@ (80010d0 <__NVIC_SetPriority+0x4c>)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	0112      	lsls	r2, r2, #4
 80010a4:	b2d2      	uxtb	r2, r2
 80010a6:	440b      	add	r3, r1
 80010a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ac:	e00a      	b.n	80010c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4908      	ldr	r1, [pc, #32]	@ (80010d4 <__NVIC_SetPriority+0x50>)
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	f003 030f 	and.w	r3, r3, #15
 80010ba:	3b04      	subs	r3, #4
 80010bc:	0112      	lsls	r2, r2, #4
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	440b      	add	r3, r1
 80010c2:	761a      	strb	r2, [r3, #24]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000e100 	.word	0xe000e100
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d8:	b480      	push	{r7}
 80010da:	b089      	sub	sp, #36	@ 0x24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	f1c3 0307 	rsb	r3, r3, #7
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	bf28      	it	cs
 80010f6:	2304      	movcs	r3, #4
 80010f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3304      	adds	r3, #4
 80010fe:	2b06      	cmp	r3, #6
 8001100:	d902      	bls.n	8001108 <NVIC_EncodePriority+0x30>
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3b03      	subs	r3, #3
 8001106:	e000      	b.n	800110a <NVIC_EncodePriority+0x32>
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	f04f 32ff 	mov.w	r2, #4294967295
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43da      	mvns	r2, r3
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	401a      	ands	r2, r3
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001120:	f04f 31ff 	mov.w	r1, #4294967295
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	fa01 f303 	lsl.w	r3, r1, r3
 800112a:	43d9      	mvns	r1, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	4313      	orrs	r3, r2
         );
}
 8001132:	4618      	mov	r0, r3
 8001134:	3724      	adds	r7, #36	@ 0x24
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
	...

08001140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001150:	d301      	bcc.n	8001156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001152:	2301      	movs	r3, #1
 8001154:	e00f      	b.n	8001176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001156:	4a0a      	ldr	r2, [pc, #40]	@ (8001180 <SysTick_Config+0x40>)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3b01      	subs	r3, #1
 800115c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800115e:	210f      	movs	r1, #15
 8001160:	f04f 30ff 	mov.w	r0, #4294967295
 8001164:	f7ff ff8e 	bl	8001084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001168:	4b05      	ldr	r3, [pc, #20]	@ (8001180 <SysTick_Config+0x40>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800116e:	4b04      	ldr	r3, [pc, #16]	@ (8001180 <SysTick_Config+0x40>)
 8001170:	2207      	movs	r2, #7
 8001172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	e000e010 	.word	0xe000e010

08001184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff ff29 	bl	8000fe4 <__NVIC_SetPriorityGrouping>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800119a:	b580      	push	{r7, lr}
 800119c:	b086      	sub	sp, #24
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4603      	mov	r3, r0
 80011a2:	60b9      	str	r1, [r7, #8]
 80011a4:	607a      	str	r2, [r7, #4]
 80011a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ac:	f7ff ff3e 	bl	800102c <__NVIC_GetPriorityGrouping>
 80011b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	68b9      	ldr	r1, [r7, #8]
 80011b6:	6978      	ldr	r0, [r7, #20]
 80011b8:	f7ff ff8e 	bl	80010d8 <NVIC_EncodePriority>
 80011bc:	4602      	mov	r2, r0
 80011be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c2:	4611      	mov	r1, r2
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ff5d 	bl	8001084 <__NVIC_SetPriority>
}
 80011ca:	bf00      	nop
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	4603      	mov	r3, r0
 80011da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ff31 	bl	8001048 <__NVIC_EnableIRQ>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff ffa2 	bl	8001140 <SysTick_Config>
 80011fc:	4603      	mov	r3, r0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001214:	f7ff feb6 	bl	8000f84 <HAL_GetTick>
 8001218:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d101      	bne.n	8001224 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e099      	b.n	8001358 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2202      	movs	r2, #2
 8001230:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 0201 	bic.w	r2, r2, #1
 8001242:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001244:	e00f      	b.n	8001266 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001246:	f7ff fe9d 	bl	8000f84 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b05      	cmp	r3, #5
 8001252:	d908      	bls.n	8001266 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2220      	movs	r2, #32
 8001258:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2203      	movs	r2, #3
 800125e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e078      	b.n	8001358 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1e8      	bne.n	8001246 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	4b38      	ldr	r3, [pc, #224]	@ (8001360 <HAL_DMA_Init+0x158>)
 8001280:	4013      	ands	r3, r2
 8001282:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001292:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800129e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a1b      	ldr	r3, [r3, #32]
 80012b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012b2:	697a      	ldr	r2, [r7, #20]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012bc:	2b04      	cmp	r3, #4
 80012be:	d107      	bne.n	80012d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c8:	4313      	orrs	r3, r2
 80012ca:	697a      	ldr	r2, [r7, #20]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	697a      	ldr	r2, [r7, #20]
 80012d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	f023 0307 	bic.w	r3, r3, #7
 80012e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ec:	697a      	ldr	r2, [r7, #20]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	d117      	bne.n	800132a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	4313      	orrs	r3, r2
 8001302:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001308:	2b00      	cmp	r3, #0
 800130a:	d00e      	beq.n	800132a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f000 fa91 	bl	8001834 <DMA_CheckFifoParam>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d008      	beq.n	800132a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2240      	movs	r2, #64	@ 0x40
 800131c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2201      	movs	r2, #1
 8001322:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001326:	2301      	movs	r3, #1
 8001328:	e016      	b.n	8001358 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 fa48 	bl	80017c8 <DMA_CalcBaseAndBitshift>
 8001338:	4603      	mov	r3, r0
 800133a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001340:	223f      	movs	r2, #63	@ 0x3f
 8001342:	409a      	lsls	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2201      	movs	r2, #1
 8001352:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	f010803f 	.word	0xf010803f

08001364 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
 8001370:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001372:	2300      	movs	r3, #0
 8001374:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800137a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001382:	2b01      	cmp	r3, #1
 8001384:	d101      	bne.n	800138a <HAL_DMA_Start_IT+0x26>
 8001386:	2302      	movs	r3, #2
 8001388:	e040      	b.n	800140c <HAL_DMA_Start_IT+0xa8>
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2201      	movs	r2, #1
 800138e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b01      	cmp	r3, #1
 800139c:	d12f      	bne.n	80013fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2202      	movs	r2, #2
 80013a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2200      	movs	r2, #0
 80013aa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	68b9      	ldr	r1, [r7, #8]
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f000 f9da 	bl	800176c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013bc:	223f      	movs	r2, #63	@ 0x3f
 80013be:	409a      	lsls	r2, r3
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f042 0216 	orr.w	r2, r2, #22
 80013d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d007      	beq.n	80013ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f042 0208 	orr.w	r2, r2, #8
 80013ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f042 0201 	orr.w	r2, r2, #1
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	e005      	b.n	800140a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001406:	2302      	movs	r3, #2
 8001408:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800140a:	7dfb      	ldrb	r3, [r7, #23]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001422:	b2db      	uxtb	r3, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d004      	beq.n	8001432 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2280      	movs	r2, #128	@ 0x80
 800142c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e00c      	b.n	800144c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2205      	movs	r2, #5
 8001436:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f022 0201 	bic.w	r2, r2, #1
 8001448:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001460:	2300      	movs	r3, #0
 8001462:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001464:	4b8e      	ldr	r3, [pc, #568]	@ (80016a0 <HAL_DMA_IRQHandler+0x248>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a8e      	ldr	r2, [pc, #568]	@ (80016a4 <HAL_DMA_IRQHandler+0x24c>)
 800146a:	fba2 2303 	umull	r2, r3, r2, r3
 800146e:	0a9b      	lsrs	r3, r3, #10
 8001470:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001476:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001482:	2208      	movs	r2, #8
 8001484:	409a      	lsls	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4013      	ands	r3, r2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d01a      	beq.n	80014c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	2b00      	cmp	r3, #0
 800149a:	d013      	beq.n	80014c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f022 0204 	bic.w	r2, r2, #4
 80014aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014b0:	2208      	movs	r2, #8
 80014b2:	409a      	lsls	r2, r3
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014bc:	f043 0201 	orr.w	r2, r3, #1
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014c8:	2201      	movs	r2, #1
 80014ca:	409a      	lsls	r2, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4013      	ands	r3, r2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d012      	beq.n	80014fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d00b      	beq.n	80014fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014e6:	2201      	movs	r2, #1
 80014e8:	409a      	lsls	r2, r3
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014f2:	f043 0202 	orr.w	r2, r3, #2
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014fe:	2204      	movs	r2, #4
 8001500:	409a      	lsls	r2, r3
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	4013      	ands	r3, r2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d012      	beq.n	8001530 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d00b      	beq.n	8001530 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800151c:	2204      	movs	r2, #4
 800151e:	409a      	lsls	r2, r3
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001528:	f043 0204 	orr.w	r2, r3, #4
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001534:	2210      	movs	r2, #16
 8001536:	409a      	lsls	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4013      	ands	r3, r2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d043      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0308 	and.w	r3, r3, #8
 800154a:	2b00      	cmp	r3, #0
 800154c:	d03c      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001552:	2210      	movs	r2, #16
 8001554:	409a      	lsls	r2, r3
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d018      	beq.n	800159a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d108      	bne.n	8001588 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157a:	2b00      	cmp	r3, #0
 800157c:	d024      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	4798      	blx	r3
 8001586:	e01f      	b.n	80015c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800158c:	2b00      	cmp	r3, #0
 800158e:	d01b      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	4798      	blx	r3
 8001598:	e016      	b.n	80015c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d107      	bne.n	80015b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 0208 	bic.w	r2, r2, #8
 80015b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015cc:	2220      	movs	r2, #32
 80015ce:	409a      	lsls	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4013      	ands	r3, r2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 808f 	beq.w	80016f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0310 	and.w	r3, r3, #16
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f000 8087 	beq.w	80016f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ee:	2220      	movs	r2, #32
 80015f0:	409a      	lsls	r2, r3
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b05      	cmp	r3, #5
 8001600:	d136      	bne.n	8001670 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 0216 	bic.w	r2, r2, #22
 8001610:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	695a      	ldr	r2, [r3, #20]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001620:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001626:	2b00      	cmp	r3, #0
 8001628:	d103      	bne.n	8001632 <HAL_DMA_IRQHandler+0x1da>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800162e:	2b00      	cmp	r3, #0
 8001630:	d007      	beq.n	8001642 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 0208 	bic.w	r2, r2, #8
 8001640:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001646:	223f      	movs	r2, #63	@ 0x3f
 8001648:	409a      	lsls	r2, r3
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2201      	movs	r2, #1
 800165a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        if(hdma->XferAbortCallback != NULL)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001662:	2b00      	cmp	r3, #0
 8001664:	d07e      	beq.n	8001764 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	4798      	blx	r3
        }
        return;
 800166e:	e079      	b.n	8001764 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d01d      	beq.n	80016ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d10d      	bne.n	80016a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001690:	2b00      	cmp	r3, #0
 8001692:	d031      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	4798      	blx	r3
 800169c:	e02c      	b.n	80016f8 <HAL_DMA_IRQHandler+0x2a0>
 800169e:	bf00      	nop
 80016a0:	20000000 	.word	0x20000000
 80016a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d023      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	4798      	blx	r3
 80016b8:	e01e      	b.n	80016f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d10f      	bne.n	80016e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 0210 	bic.w	r2, r2, #16
 80016d6:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d003      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d032      	beq.n	8001766 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	2b00      	cmp	r3, #0
 800170a:	d022      	beq.n	8001752 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2205      	movs	r2, #5
 8001710:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 0201 	bic.w	r2, r2, #1
 8001722:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	3301      	adds	r3, #1
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	429a      	cmp	r2, r3
 800172e:	d307      	bcc.n	8001740 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f2      	bne.n	8001724 <HAL_DMA_IRQHandler+0x2cc>
 800173e:	e000      	b.n	8001742 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001740:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2201      	movs	r2, #1
 800174e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001756:	2b00      	cmp	r3, #0
 8001758:	d005      	beq.n	8001766 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	4798      	blx	r3
 8001762:	e000      	b.n	8001766 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001764:	bf00      	nop
    }
  }
}
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
 8001778:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001788:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	2b40      	cmp	r3, #64	@ 0x40
 8001798:	d108      	bne.n	80017ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80017aa:	e007      	b.n	80017bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68ba      	ldr	r2, [r7, #8]
 80017b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	60da      	str	r2, [r3, #12]
}
 80017bc:	bf00      	nop
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	3b10      	subs	r3, #16
 80017d8:	4a14      	ldr	r2, [pc, #80]	@ (800182c <DMA_CalcBaseAndBitshift+0x64>)
 80017da:	fba2 2303 	umull	r2, r3, r2, r3
 80017de:	091b      	lsrs	r3, r3, #4
 80017e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017e2:	4a13      	ldr	r2, [pc, #76]	@ (8001830 <DMA_CalcBaseAndBitshift+0x68>)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4413      	add	r3, r2
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	461a      	mov	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	d909      	bls.n	800180a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80017fe:	f023 0303 	bic.w	r3, r3, #3
 8001802:	1d1a      	adds	r2, r3, #4
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	659a      	str	r2, [r3, #88]	@ 0x58
 8001808:	e007      	b.n	800181a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001812:	f023 0303 	bic.w	r3, r3, #3
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800181e:	4618      	mov	r0, r3
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	aaaaaaab 	.word	0xaaaaaaab
 8001830:	08003b2c 	.word	0x08003b2c

08001834 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800183c:	2300      	movs	r3, #0
 800183e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001844:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d11f      	bne.n	800188e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	2b03      	cmp	r3, #3
 8001852:	d856      	bhi.n	8001902 <DMA_CheckFifoParam+0xce>
 8001854:	a201      	add	r2, pc, #4	@ (adr r2, 800185c <DMA_CheckFifoParam+0x28>)
 8001856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800185a:	bf00      	nop
 800185c:	0800186d 	.word	0x0800186d
 8001860:	0800187f 	.word	0x0800187f
 8001864:	0800186d 	.word	0x0800186d
 8001868:	08001903 	.word	0x08001903
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001870:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d046      	beq.n	8001906 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800187c:	e043      	b.n	8001906 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001882:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001886:	d140      	bne.n	800190a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800188c:	e03d      	b.n	800190a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001896:	d121      	bne.n	80018dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	2b03      	cmp	r3, #3
 800189c:	d837      	bhi.n	800190e <DMA_CheckFifoParam+0xda>
 800189e:	a201      	add	r2, pc, #4	@ (adr r2, 80018a4 <DMA_CheckFifoParam+0x70>)
 80018a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a4:	080018b5 	.word	0x080018b5
 80018a8:	080018bb 	.word	0x080018bb
 80018ac:	080018b5 	.word	0x080018b5
 80018b0:	080018cd 	.word	0x080018cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	73fb      	strb	r3, [r7, #15]
      break;
 80018b8:	e030      	b.n	800191c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d025      	beq.n	8001912 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018ca:	e022      	b.n	8001912 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80018d4:	d11f      	bne.n	8001916 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80018da:	e01c      	b.n	8001916 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d903      	bls.n	80018ea <DMA_CheckFifoParam+0xb6>
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	2b03      	cmp	r3, #3
 80018e6:	d003      	beq.n	80018f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80018e8:	e018      	b.n	800191c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	73fb      	strb	r3, [r7, #15]
      break;
 80018ee:	e015      	b.n	800191c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d00e      	beq.n	800191a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	73fb      	strb	r3, [r7, #15]
      break;
 8001900:	e00b      	b.n	800191a <DMA_CheckFifoParam+0xe6>
      break;
 8001902:	bf00      	nop
 8001904:	e00a      	b.n	800191c <DMA_CheckFifoParam+0xe8>
      break;
 8001906:	bf00      	nop
 8001908:	e008      	b.n	800191c <DMA_CheckFifoParam+0xe8>
      break;
 800190a:	bf00      	nop
 800190c:	e006      	b.n	800191c <DMA_CheckFifoParam+0xe8>
      break;
 800190e:	bf00      	nop
 8001910:	e004      	b.n	800191c <DMA_CheckFifoParam+0xe8>
      break;
 8001912:	bf00      	nop
 8001914:	e002      	b.n	800191c <DMA_CheckFifoParam+0xe8>
      break;   
 8001916:	bf00      	nop
 8001918:	e000      	b.n	800191c <DMA_CheckFifoParam+0xe8>
      break;
 800191a:	bf00      	nop
    }
  } 
  
  return status; 
 800191c:	7bfb      	ldrb	r3, [r7, #15]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop

0800192c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800192c:	b480      	push	{r7}
 800192e:	b089      	sub	sp, #36	@ 0x24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800193a:	2300      	movs	r3, #0
 800193c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800193e:	2300      	movs	r3, #0
 8001940:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
 8001946:	e165      	b.n	8001c14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001948:	2201      	movs	r2, #1
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	4013      	ands	r3, r2
 800195a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	429a      	cmp	r2, r3
 8001962:	f040 8154 	bne.w	8001c0e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	2b01      	cmp	r3, #1
 8001970:	d005      	beq.n	800197e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800197a:	2b02      	cmp	r3, #2
 800197c:	d130      	bne.n	80019e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	2203      	movs	r2, #3
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43db      	mvns	r3, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4013      	ands	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	68da      	ldr	r2, [r3, #12]
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019b4:	2201      	movs	r2, #1
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	091b      	lsrs	r3, r3, #4
 80019ca:	f003 0201 	and.w	r2, r3, #1
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 0303 	and.w	r3, r3, #3
 80019e8:	2b03      	cmp	r3, #3
 80019ea:	d017      	beq.n	8001a1c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	2203      	movs	r2, #3
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4013      	ands	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d123      	bne.n	8001a70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	08da      	lsrs	r2, r3, #3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3208      	adds	r2, #8
 8001a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	220f      	movs	r2, #15
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	691a      	ldr	r2, [r3, #16]
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	08da      	lsrs	r2, r3, #3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	3208      	adds	r2, #8
 8001a6a:	69b9      	ldr	r1, [r7, #24]
 8001a6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 0203 	and.w	r2, r3, #3
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f000 80ae 	beq.w	8001c0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	4b5d      	ldr	r3, [pc, #372]	@ (8001c2c <HAL_GPIO_Init+0x300>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aba:	4a5c      	ldr	r2, [pc, #368]	@ (8001c2c <HAL_GPIO_Init+0x300>)
 8001abc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ac0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ac2:	4b5a      	ldr	r3, [pc, #360]	@ (8001c2c <HAL_GPIO_Init+0x300>)
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ace:	4a58      	ldr	r2, [pc, #352]	@ (8001c30 <HAL_GPIO_Init+0x304>)
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	089b      	lsrs	r3, r3, #2
 8001ad4:	3302      	adds	r3, #2
 8001ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	220f      	movs	r2, #15
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4013      	ands	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a4f      	ldr	r2, [pc, #316]	@ (8001c34 <HAL_GPIO_Init+0x308>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d025      	beq.n	8001b46 <HAL_GPIO_Init+0x21a>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a4e      	ldr	r2, [pc, #312]	@ (8001c38 <HAL_GPIO_Init+0x30c>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d01f      	beq.n	8001b42 <HAL_GPIO_Init+0x216>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a4d      	ldr	r2, [pc, #308]	@ (8001c3c <HAL_GPIO_Init+0x310>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d019      	beq.n	8001b3e <HAL_GPIO_Init+0x212>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a4c      	ldr	r2, [pc, #304]	@ (8001c40 <HAL_GPIO_Init+0x314>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d013      	beq.n	8001b3a <HAL_GPIO_Init+0x20e>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a4b      	ldr	r2, [pc, #300]	@ (8001c44 <HAL_GPIO_Init+0x318>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d00d      	beq.n	8001b36 <HAL_GPIO_Init+0x20a>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a4a      	ldr	r2, [pc, #296]	@ (8001c48 <HAL_GPIO_Init+0x31c>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d007      	beq.n	8001b32 <HAL_GPIO_Init+0x206>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a49      	ldr	r2, [pc, #292]	@ (8001c4c <HAL_GPIO_Init+0x320>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d101      	bne.n	8001b2e <HAL_GPIO_Init+0x202>
 8001b2a:	2306      	movs	r3, #6
 8001b2c:	e00c      	b.n	8001b48 <HAL_GPIO_Init+0x21c>
 8001b2e:	2307      	movs	r3, #7
 8001b30:	e00a      	b.n	8001b48 <HAL_GPIO_Init+0x21c>
 8001b32:	2305      	movs	r3, #5
 8001b34:	e008      	b.n	8001b48 <HAL_GPIO_Init+0x21c>
 8001b36:	2304      	movs	r3, #4
 8001b38:	e006      	b.n	8001b48 <HAL_GPIO_Init+0x21c>
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e004      	b.n	8001b48 <HAL_GPIO_Init+0x21c>
 8001b3e:	2302      	movs	r3, #2
 8001b40:	e002      	b.n	8001b48 <HAL_GPIO_Init+0x21c>
 8001b42:	2301      	movs	r3, #1
 8001b44:	e000      	b.n	8001b48 <HAL_GPIO_Init+0x21c>
 8001b46:	2300      	movs	r3, #0
 8001b48:	69fa      	ldr	r2, [r7, #28]
 8001b4a:	f002 0203 	and.w	r2, r2, #3
 8001b4e:	0092      	lsls	r2, r2, #2
 8001b50:	4093      	lsls	r3, r2
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b58:	4935      	ldr	r1, [pc, #212]	@ (8001c30 <HAL_GPIO_Init+0x304>)
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	089b      	lsrs	r3, r3, #2
 8001b5e:	3302      	adds	r3, #2
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b66:	4b3a      	ldr	r3, [pc, #232]	@ (8001c50 <HAL_GPIO_Init+0x324>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4013      	ands	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b8a:	4a31      	ldr	r2, [pc, #196]	@ (8001c50 <HAL_GPIO_Init+0x324>)
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b90:	4b2f      	ldr	r3, [pc, #188]	@ (8001c50 <HAL_GPIO_Init+0x324>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d003      	beq.n	8001bb4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bb4:	4a26      	ldr	r2, [pc, #152]	@ (8001c50 <HAL_GPIO_Init+0x324>)
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bba:	4b25      	ldr	r3, [pc, #148]	@ (8001c50 <HAL_GPIO_Init+0x324>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bde:	4a1c      	ldr	r2, [pc, #112]	@ (8001c50 <HAL_GPIO_Init+0x324>)
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001be4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c50 <HAL_GPIO_Init+0x324>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d003      	beq.n	8001c08 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c08:	4a11      	ldr	r2, [pc, #68]	@ (8001c50 <HAL_GPIO_Init+0x324>)
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3301      	adds	r3, #1
 8001c12:	61fb      	str	r3, [r7, #28]
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	2b0f      	cmp	r3, #15
 8001c18:	f67f ae96 	bls.w	8001948 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c1c:	bf00      	nop
 8001c1e:	bf00      	nop
 8001c20:	3724      	adds	r7, #36	@ 0x24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40013800 	.word	0x40013800
 8001c34:	40020000 	.word	0x40020000
 8001c38:	40020400 	.word	0x40020400
 8001c3c:	40020800 	.word	0x40020800
 8001c40:	40020c00 	.word	0x40020c00
 8001c44:	40021000 	.word	0x40021000
 8001c48:	40021400 	.word	0x40021400
 8001c4c:	40021800 	.word	0x40021800
 8001c50:	40013c00 	.word	0x40013c00

08001c54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d101      	bne.n	8001c68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e0cc      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c68:	4b68      	ldr	r3, [pc, #416]	@ (8001e0c <HAL_RCC_ClockConfig+0x1b8>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 030f 	and.w	r3, r3, #15
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d90c      	bls.n	8001c90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c76:	4b65      	ldr	r3, [pc, #404]	@ (8001e0c <HAL_RCC_ClockConfig+0x1b8>)
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	b2d2      	uxtb	r2, r2
 8001c7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7e:	4b63      	ldr	r3, [pc, #396]	@ (8001e0c <HAL_RCC_ClockConfig+0x1b8>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d001      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e0b8      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d020      	beq.n	8001cde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d005      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ca8:	4b59      	ldr	r3, [pc, #356]	@ (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	4a58      	ldr	r2, [pc, #352]	@ (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001cae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001cb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0308 	and.w	r3, r3, #8
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d005      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cc0:	4b53      	ldr	r3, [pc, #332]	@ (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	4a52      	ldr	r2, [pc, #328]	@ (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001cca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ccc:	4b50      	ldr	r3, [pc, #320]	@ (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	494d      	ldr	r1, [pc, #308]	@ (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d044      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d107      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf2:	4b47      	ldr	r3, [pc, #284]	@ (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d119      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e07f      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d003      	beq.n	8001d12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	d107      	bne.n	8001d22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d12:	4b3f      	ldr	r3, [pc, #252]	@ (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d109      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e06f      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d22:	4b3b      	ldr	r3, [pc, #236]	@ (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e067      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d32:	4b37      	ldr	r3, [pc, #220]	@ (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f023 0203 	bic.w	r2, r3, #3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	4934      	ldr	r1, [pc, #208]	@ (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d44:	f7ff f91e 	bl	8000f84 <HAL_GetTick>
 8001d48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4a:	e00a      	b.n	8001d62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d4c:	f7ff f91a 	bl	8000f84 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e04f      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d62:	4b2b      	ldr	r3, [pc, #172]	@ (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 020c 	and.w	r2, r3, #12
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d1eb      	bne.n	8001d4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d74:	4b25      	ldr	r3, [pc, #148]	@ (8001e0c <HAL_RCC_ClockConfig+0x1b8>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 030f 	and.w	r3, r3, #15
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d20c      	bcs.n	8001d9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d82:	4b22      	ldr	r3, [pc, #136]	@ (8001e0c <HAL_RCC_ClockConfig+0x1b8>)
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8a:	4b20      	ldr	r3, [pc, #128]	@ (8001e0c <HAL_RCC_ClockConfig+0x1b8>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d001      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e032      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d008      	beq.n	8001dba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001da8:	4b19      	ldr	r3, [pc, #100]	@ (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	4916      	ldr	r1, [pc, #88]	@ (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0308 	and.w	r3, r3, #8
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d009      	beq.n	8001dda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dc6:	4b12      	ldr	r3, [pc, #72]	@ (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	490e      	ldr	r1, [pc, #56]	@ (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dda:	f000 f821 	bl	8001e20 <HAL_RCC_GetSysClockFreq>
 8001dde:	4602      	mov	r2, r0
 8001de0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	091b      	lsrs	r3, r3, #4
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	490a      	ldr	r1, [pc, #40]	@ (8001e14 <HAL_RCC_ClockConfig+0x1c0>)
 8001dec:	5ccb      	ldrb	r3, [r1, r3]
 8001dee:	fa22 f303 	lsr.w	r3, r2, r3
 8001df2:	4a09      	ldr	r2, [pc, #36]	@ (8001e18 <HAL_RCC_ClockConfig+0x1c4>)
 8001df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001df6:	4b09      	ldr	r3, [pc, #36]	@ (8001e1c <HAL_RCC_ClockConfig+0x1c8>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff f87e 	bl	8000efc <HAL_InitTick>

  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40023c00 	.word	0x40023c00
 8001e10:	40023800 	.word	0x40023800
 8001e14:	08003b1c 	.word	0x08003b1c
 8001e18:	20000000 	.word	0x20000000
 8001e1c:	20000004 	.word	0x20000004

08001e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e24:	b0ae      	sub	sp, #184	@ 0xb8
 8001e26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e46:	4bcb      	ldr	r3, [pc, #812]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
 8001e4e:	2b0c      	cmp	r3, #12
 8001e50:	f200 8206 	bhi.w	8002260 <HAL_RCC_GetSysClockFreq+0x440>
 8001e54:	a201      	add	r2, pc, #4	@ (adr r2, 8001e5c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e5a:	bf00      	nop
 8001e5c:	08001e91 	.word	0x08001e91
 8001e60:	08002261 	.word	0x08002261
 8001e64:	08002261 	.word	0x08002261
 8001e68:	08002261 	.word	0x08002261
 8001e6c:	08001e99 	.word	0x08001e99
 8001e70:	08002261 	.word	0x08002261
 8001e74:	08002261 	.word	0x08002261
 8001e78:	08002261 	.word	0x08002261
 8001e7c:	08001ea1 	.word	0x08001ea1
 8001e80:	08002261 	.word	0x08002261
 8001e84:	08002261 	.word	0x08002261
 8001e88:	08002261 	.word	0x08002261
 8001e8c:	08002091 	.word	0x08002091
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e90:	4bb9      	ldr	r3, [pc, #740]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x358>)
 8001e92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8001e96:	e1e7      	b.n	8002268 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e98:	4bb8      	ldr	r3, [pc, #736]	@ (800217c <HAL_RCC_GetSysClockFreq+0x35c>)
 8001e9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001e9e:	e1e3      	b.n	8002268 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ea0:	4bb4      	ldr	r3, [pc, #720]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ea8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001eac:	4bb1      	ldr	r3, [pc, #708]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x354>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d071      	beq.n	8001f9c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eb8:	4bae      	ldr	r3, [pc, #696]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x354>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	099b      	lsrs	r3, r3, #6
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001ec4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001ec8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ed0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001eda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001ede:	4622      	mov	r2, r4
 8001ee0:	462b      	mov	r3, r5
 8001ee2:	f04f 0000 	mov.w	r0, #0
 8001ee6:	f04f 0100 	mov.w	r1, #0
 8001eea:	0159      	lsls	r1, r3, #5
 8001eec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ef0:	0150      	lsls	r0, r2, #5
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	4621      	mov	r1, r4
 8001ef8:	1a51      	subs	r1, r2, r1
 8001efa:	6439      	str	r1, [r7, #64]	@ 0x40
 8001efc:	4629      	mov	r1, r5
 8001efe:	eb63 0301 	sbc.w	r3, r3, r1
 8001f02:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f04:	f04f 0200 	mov.w	r2, #0
 8001f08:	f04f 0300 	mov.w	r3, #0
 8001f0c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001f10:	4649      	mov	r1, r9
 8001f12:	018b      	lsls	r3, r1, #6
 8001f14:	4641      	mov	r1, r8
 8001f16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f1a:	4641      	mov	r1, r8
 8001f1c:	018a      	lsls	r2, r1, #6
 8001f1e:	4641      	mov	r1, r8
 8001f20:	1a51      	subs	r1, r2, r1
 8001f22:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001f24:	4649      	mov	r1, r9
 8001f26:	eb63 0301 	sbc.w	r3, r3, r1
 8001f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	f04f 0300 	mov.w	r3, #0
 8001f34:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001f38:	4649      	mov	r1, r9
 8001f3a:	00cb      	lsls	r3, r1, #3
 8001f3c:	4641      	mov	r1, r8
 8001f3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f42:	4641      	mov	r1, r8
 8001f44:	00ca      	lsls	r2, r1, #3
 8001f46:	4610      	mov	r0, r2
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	4622      	mov	r2, r4
 8001f4e:	189b      	adds	r3, r3, r2
 8001f50:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f52:	462b      	mov	r3, r5
 8001f54:	460a      	mov	r2, r1
 8001f56:	eb42 0303 	adc.w	r3, r2, r3
 8001f5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	f04f 0300 	mov.w	r3, #0
 8001f64:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001f68:	4629      	mov	r1, r5
 8001f6a:	024b      	lsls	r3, r1, #9
 8001f6c:	4621      	mov	r1, r4
 8001f6e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f72:	4621      	mov	r1, r4
 8001f74:	024a      	lsls	r2, r1, #9
 8001f76:	4610      	mov	r0, r2
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001f84:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001f88:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001f8c:	f7fe f93a 	bl	8000204 <__aeabi_uldivmod>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4613      	mov	r3, r2
 8001f96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001f9a:	e067      	b.n	800206c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f9c:	4b75      	ldr	r3, [pc, #468]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	099b      	lsrs	r3, r3, #6
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001fa8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001fac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fb4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001fba:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001fbe:	4622      	mov	r2, r4
 8001fc0:	462b      	mov	r3, r5
 8001fc2:	f04f 0000 	mov.w	r0, #0
 8001fc6:	f04f 0100 	mov.w	r1, #0
 8001fca:	0159      	lsls	r1, r3, #5
 8001fcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fd0:	0150      	lsls	r0, r2, #5
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	4621      	mov	r1, r4
 8001fd8:	1a51      	subs	r1, r2, r1
 8001fda:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001fdc:	4629      	mov	r1, r5
 8001fde:	eb63 0301 	sbc.w	r3, r3, r1
 8001fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fe4:	f04f 0200 	mov.w	r2, #0
 8001fe8:	f04f 0300 	mov.w	r3, #0
 8001fec:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001ff0:	4649      	mov	r1, r9
 8001ff2:	018b      	lsls	r3, r1, #6
 8001ff4:	4641      	mov	r1, r8
 8001ff6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ffa:	4641      	mov	r1, r8
 8001ffc:	018a      	lsls	r2, r1, #6
 8001ffe:	4641      	mov	r1, r8
 8002000:	ebb2 0a01 	subs.w	sl, r2, r1
 8002004:	4649      	mov	r1, r9
 8002006:	eb63 0b01 	sbc.w	fp, r3, r1
 800200a:	f04f 0200 	mov.w	r2, #0
 800200e:	f04f 0300 	mov.w	r3, #0
 8002012:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002016:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800201a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800201e:	4692      	mov	sl, r2
 8002020:	469b      	mov	fp, r3
 8002022:	4623      	mov	r3, r4
 8002024:	eb1a 0303 	adds.w	r3, sl, r3
 8002028:	623b      	str	r3, [r7, #32]
 800202a:	462b      	mov	r3, r5
 800202c:	eb4b 0303 	adc.w	r3, fp, r3
 8002030:	627b      	str	r3, [r7, #36]	@ 0x24
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	f04f 0300 	mov.w	r3, #0
 800203a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800203e:	4629      	mov	r1, r5
 8002040:	028b      	lsls	r3, r1, #10
 8002042:	4621      	mov	r1, r4
 8002044:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002048:	4621      	mov	r1, r4
 800204a:	028a      	lsls	r2, r1, #10
 800204c:	4610      	mov	r0, r2
 800204e:	4619      	mov	r1, r3
 8002050:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002054:	2200      	movs	r2, #0
 8002056:	673b      	str	r3, [r7, #112]	@ 0x70
 8002058:	677a      	str	r2, [r7, #116]	@ 0x74
 800205a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800205e:	f7fe f8d1 	bl	8000204 <__aeabi_uldivmod>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	4613      	mov	r3, r2
 8002068:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800206c:	4b41      	ldr	r3, [pc, #260]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x354>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	0c1b      	lsrs	r3, r3, #16
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	3301      	adds	r3, #1
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800207e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002082:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002086:	fbb2 f3f3 	udiv	r3, r2, r3
 800208a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800208e:	e0eb      	b.n	8002268 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002090:	4b38      	ldr	r3, [pc, #224]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x354>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002098:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800209c:	4b35      	ldr	r3, [pc, #212]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x354>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d06b      	beq.n	8002180 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020a8:	4b32      	ldr	r3, [pc, #200]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x354>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	099b      	lsrs	r3, r3, #6
 80020ae:	2200      	movs	r2, #0
 80020b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80020b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80020b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80020bc:	2300      	movs	r3, #0
 80020be:	667b      	str	r3, [r7, #100]	@ 0x64
 80020c0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80020c4:	4622      	mov	r2, r4
 80020c6:	462b      	mov	r3, r5
 80020c8:	f04f 0000 	mov.w	r0, #0
 80020cc:	f04f 0100 	mov.w	r1, #0
 80020d0:	0159      	lsls	r1, r3, #5
 80020d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020d6:	0150      	lsls	r0, r2, #5
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4621      	mov	r1, r4
 80020de:	1a51      	subs	r1, r2, r1
 80020e0:	61b9      	str	r1, [r7, #24]
 80020e2:	4629      	mov	r1, r5
 80020e4:	eb63 0301 	sbc.w	r3, r3, r1
 80020e8:	61fb      	str	r3, [r7, #28]
 80020ea:	f04f 0200 	mov.w	r2, #0
 80020ee:	f04f 0300 	mov.w	r3, #0
 80020f2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80020f6:	4659      	mov	r1, fp
 80020f8:	018b      	lsls	r3, r1, #6
 80020fa:	4651      	mov	r1, sl
 80020fc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002100:	4651      	mov	r1, sl
 8002102:	018a      	lsls	r2, r1, #6
 8002104:	4651      	mov	r1, sl
 8002106:	ebb2 0801 	subs.w	r8, r2, r1
 800210a:	4659      	mov	r1, fp
 800210c:	eb63 0901 	sbc.w	r9, r3, r1
 8002110:	f04f 0200 	mov.w	r2, #0
 8002114:	f04f 0300 	mov.w	r3, #0
 8002118:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800211c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002120:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002124:	4690      	mov	r8, r2
 8002126:	4699      	mov	r9, r3
 8002128:	4623      	mov	r3, r4
 800212a:	eb18 0303 	adds.w	r3, r8, r3
 800212e:	613b      	str	r3, [r7, #16]
 8002130:	462b      	mov	r3, r5
 8002132:	eb49 0303 	adc.w	r3, r9, r3
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	f04f 0200 	mov.w	r2, #0
 800213c:	f04f 0300 	mov.w	r3, #0
 8002140:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002144:	4629      	mov	r1, r5
 8002146:	024b      	lsls	r3, r1, #9
 8002148:	4621      	mov	r1, r4
 800214a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800214e:	4621      	mov	r1, r4
 8002150:	024a      	lsls	r2, r1, #9
 8002152:	4610      	mov	r0, r2
 8002154:	4619      	mov	r1, r3
 8002156:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800215a:	2200      	movs	r2, #0
 800215c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800215e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002160:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002164:	f7fe f84e 	bl	8000204 <__aeabi_uldivmod>
 8002168:	4602      	mov	r2, r0
 800216a:	460b      	mov	r3, r1
 800216c:	4613      	mov	r3, r2
 800216e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002172:	e065      	b.n	8002240 <HAL_RCC_GetSysClockFreq+0x420>
 8002174:	40023800 	.word	0x40023800
 8002178:	00f42400 	.word	0x00f42400
 800217c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002180:	4b3d      	ldr	r3, [pc, #244]	@ (8002278 <HAL_RCC_GetSysClockFreq+0x458>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	099b      	lsrs	r3, r3, #6
 8002186:	2200      	movs	r2, #0
 8002188:	4618      	mov	r0, r3
 800218a:	4611      	mov	r1, r2
 800218c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002190:	653b      	str	r3, [r7, #80]	@ 0x50
 8002192:	2300      	movs	r3, #0
 8002194:	657b      	str	r3, [r7, #84]	@ 0x54
 8002196:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800219a:	4642      	mov	r2, r8
 800219c:	464b      	mov	r3, r9
 800219e:	f04f 0000 	mov.w	r0, #0
 80021a2:	f04f 0100 	mov.w	r1, #0
 80021a6:	0159      	lsls	r1, r3, #5
 80021a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021ac:	0150      	lsls	r0, r2, #5
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	4641      	mov	r1, r8
 80021b4:	1a51      	subs	r1, r2, r1
 80021b6:	60b9      	str	r1, [r7, #8]
 80021b8:	4649      	mov	r1, r9
 80021ba:	eb63 0301 	sbc.w	r3, r3, r1
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	f04f 0300 	mov.w	r3, #0
 80021c8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80021cc:	4659      	mov	r1, fp
 80021ce:	018b      	lsls	r3, r1, #6
 80021d0:	4651      	mov	r1, sl
 80021d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021d6:	4651      	mov	r1, sl
 80021d8:	018a      	lsls	r2, r1, #6
 80021da:	4651      	mov	r1, sl
 80021dc:	1a54      	subs	r4, r2, r1
 80021de:	4659      	mov	r1, fp
 80021e0:	eb63 0501 	sbc.w	r5, r3, r1
 80021e4:	f04f 0200 	mov.w	r2, #0
 80021e8:	f04f 0300 	mov.w	r3, #0
 80021ec:	00eb      	lsls	r3, r5, #3
 80021ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021f2:	00e2      	lsls	r2, r4, #3
 80021f4:	4614      	mov	r4, r2
 80021f6:	461d      	mov	r5, r3
 80021f8:	4643      	mov	r3, r8
 80021fa:	18e3      	adds	r3, r4, r3
 80021fc:	603b      	str	r3, [r7, #0]
 80021fe:	464b      	mov	r3, r9
 8002200:	eb45 0303 	adc.w	r3, r5, r3
 8002204:	607b      	str	r3, [r7, #4]
 8002206:	f04f 0200 	mov.w	r2, #0
 800220a:	f04f 0300 	mov.w	r3, #0
 800220e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002212:	4629      	mov	r1, r5
 8002214:	028b      	lsls	r3, r1, #10
 8002216:	4621      	mov	r1, r4
 8002218:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800221c:	4621      	mov	r1, r4
 800221e:	028a      	lsls	r2, r1, #10
 8002220:	4610      	mov	r0, r2
 8002222:	4619      	mov	r1, r3
 8002224:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002228:	2200      	movs	r2, #0
 800222a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800222c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800222e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002232:	f7fd ffe7 	bl	8000204 <__aeabi_uldivmod>
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	4613      	mov	r3, r2
 800223c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002240:	4b0d      	ldr	r3, [pc, #52]	@ (8002278 <HAL_RCC_GetSysClockFreq+0x458>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	0f1b      	lsrs	r3, r3, #28
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800224e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002252:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002256:	fbb2 f3f3 	udiv	r3, r2, r3
 800225a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800225e:	e003      	b.n	8002268 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002260:	4b06      	ldr	r3, [pc, #24]	@ (800227c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002262:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002266:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002268:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800226c:	4618      	mov	r0, r3
 800226e:	37b8      	adds	r7, #184	@ 0xb8
 8002270:	46bd      	mov	sp, r7
 8002272:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002276:	bf00      	nop
 8002278:	40023800 	.word	0x40023800
 800227c:	00f42400 	.word	0x00f42400

08002280 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e28d      	b.n	80027ae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 8083 	beq.w	80023a6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022a0:	4b94      	ldr	r3, [pc, #592]	@ (80024f4 <HAL_RCC_OscConfig+0x274>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 030c 	and.w	r3, r3, #12
 80022a8:	2b04      	cmp	r3, #4
 80022aa:	d019      	beq.n	80022e0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022ac:	4b91      	ldr	r3, [pc, #580]	@ (80024f4 <HAL_RCC_OscConfig+0x274>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022b4:	2b08      	cmp	r3, #8
 80022b6:	d106      	bne.n	80022c6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022b8:	4b8e      	ldr	r3, [pc, #568]	@ (80024f4 <HAL_RCC_OscConfig+0x274>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022c4:	d00c      	beq.n	80022e0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022c6:	4b8b      	ldr	r3, [pc, #556]	@ (80024f4 <HAL_RCC_OscConfig+0x274>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022ce:	2b0c      	cmp	r3, #12
 80022d0:	d112      	bne.n	80022f8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022d2:	4b88      	ldr	r3, [pc, #544]	@ (80024f4 <HAL_RCC_OscConfig+0x274>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022de:	d10b      	bne.n	80022f8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e0:	4b84      	ldr	r3, [pc, #528]	@ (80024f4 <HAL_RCC_OscConfig+0x274>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d05b      	beq.n	80023a4 <HAL_RCC_OscConfig+0x124>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d157      	bne.n	80023a4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e25a      	b.n	80027ae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002300:	d106      	bne.n	8002310 <HAL_RCC_OscConfig+0x90>
 8002302:	4b7c      	ldr	r3, [pc, #496]	@ (80024f4 <HAL_RCC_OscConfig+0x274>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a7b      	ldr	r2, [pc, #492]	@ (80024f4 <HAL_RCC_OscConfig+0x274>)
 8002308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	e01d      	b.n	800234c <HAL_RCC_OscConfig+0xcc>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002318:	d10c      	bne.n	8002334 <HAL_RCC_OscConfig+0xb4>
 800231a:	4b76      	ldr	r3, [pc, #472]	@ (80024f4 <HAL_RCC_OscConfig+0x274>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a75      	ldr	r2, [pc, #468]	@ (80024f4 <HAL_RCC_OscConfig+0x274>)
 8002320:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	4b73      	ldr	r3, [pc, #460]	@ (80024f4 <HAL_RCC_OscConfig+0x274>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a72      	ldr	r2, [pc, #456]	@ (80024f4 <HAL_RCC_OscConfig+0x274>)
 800232c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	e00b      	b.n	800234c <HAL_RCC_OscConfig+0xcc>
 8002334:	4b6f      	ldr	r3, [pc, #444]	@ (80024f4 <HAL_RCC_OscConfig+0x274>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a6e      	ldr	r2, [pc, #440]	@ (80024f4 <HAL_RCC_OscConfig+0x274>)
 800233a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	4b6c      	ldr	r3, [pc, #432]	@ (80024f4 <HAL_RCC_OscConfig+0x274>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a6b      	ldr	r2, [pc, #428]	@ (80024f4 <HAL_RCC_OscConfig+0x274>)
 8002346:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800234a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d013      	beq.n	800237c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002354:	f7fe fe16 	bl	8000f84 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800235c:	f7fe fe12 	bl	8000f84 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b64      	cmp	r3, #100	@ 0x64
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e21f      	b.n	80027ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236e:	4b61      	ldr	r3, [pc, #388]	@ (80024f4 <HAL_RCC_OscConfig+0x274>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d0f0      	beq.n	800235c <HAL_RCC_OscConfig+0xdc>
 800237a:	e014      	b.n	80023a6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237c:	f7fe fe02 	bl	8000f84 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002384:	f7fe fdfe 	bl	8000f84 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b64      	cmp	r3, #100	@ 0x64
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e20b      	b.n	80027ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002396:	4b57      	ldr	r3, [pc, #348]	@ (80024f4 <HAL_RCC_OscConfig+0x274>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x104>
 80023a2:	e000      	b.n	80023a6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d06f      	beq.n	8002492 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023b2:	4b50      	ldr	r3, [pc, #320]	@ (80024f4 <HAL_RCC_OscConfig+0x274>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 030c 	and.w	r3, r3, #12
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d017      	beq.n	80023ee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023be:	4b4d      	ldr	r3, [pc, #308]	@ (80024f4 <HAL_RCC_OscConfig+0x274>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d105      	bne.n	80023d6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023ca:	4b4a      	ldr	r3, [pc, #296]	@ (80024f4 <HAL_RCC_OscConfig+0x274>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00b      	beq.n	80023ee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023d6:	4b47      	ldr	r3, [pc, #284]	@ (80024f4 <HAL_RCC_OscConfig+0x274>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023de:	2b0c      	cmp	r3, #12
 80023e0:	d11c      	bne.n	800241c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023e2:	4b44      	ldr	r3, [pc, #272]	@ (80024f4 <HAL_RCC_OscConfig+0x274>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d116      	bne.n	800241c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ee:	4b41      	ldr	r3, [pc, #260]	@ (80024f4 <HAL_RCC_OscConfig+0x274>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d005      	beq.n	8002406 <HAL_RCC_OscConfig+0x186>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d001      	beq.n	8002406 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e1d3      	b.n	80027ae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002406:	4b3b      	ldr	r3, [pc, #236]	@ (80024f4 <HAL_RCC_OscConfig+0x274>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	4937      	ldr	r1, [pc, #220]	@ (80024f4 <HAL_RCC_OscConfig+0x274>)
 8002416:	4313      	orrs	r3, r2
 8002418:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800241a:	e03a      	b.n	8002492 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d020      	beq.n	8002466 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002424:	4b34      	ldr	r3, [pc, #208]	@ (80024f8 <HAL_RCC_OscConfig+0x278>)
 8002426:	2201      	movs	r2, #1
 8002428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242a:	f7fe fdab 	bl	8000f84 <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002432:	f7fe fda7 	bl	8000f84 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e1b4      	b.n	80027ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002444:	4b2b      	ldr	r3, [pc, #172]	@ (80024f4 <HAL_RCC_OscConfig+0x274>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0f0      	beq.n	8002432 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002450:	4b28      	ldr	r3, [pc, #160]	@ (80024f4 <HAL_RCC_OscConfig+0x274>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	4925      	ldr	r1, [pc, #148]	@ (80024f4 <HAL_RCC_OscConfig+0x274>)
 8002460:	4313      	orrs	r3, r2
 8002462:	600b      	str	r3, [r1, #0]
 8002464:	e015      	b.n	8002492 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002466:	4b24      	ldr	r3, [pc, #144]	@ (80024f8 <HAL_RCC_OscConfig+0x278>)
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246c:	f7fe fd8a 	bl	8000f84 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002474:	f7fe fd86 	bl	8000f84 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e193      	b.n	80027ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002486:	4b1b      	ldr	r3, [pc, #108]	@ (80024f4 <HAL_RCC_OscConfig+0x274>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1f0      	bne.n	8002474 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	2b00      	cmp	r3, #0
 800249c:	d036      	beq.n	800250c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d016      	beq.n	80024d4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024a6:	4b15      	ldr	r3, [pc, #84]	@ (80024fc <HAL_RCC_OscConfig+0x27c>)
 80024a8:	2201      	movs	r2, #1
 80024aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ac:	f7fe fd6a 	bl	8000f84 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024b4:	f7fe fd66 	bl	8000f84 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e173      	b.n	80027ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024c6:	4b0b      	ldr	r3, [pc, #44]	@ (80024f4 <HAL_RCC_OscConfig+0x274>)
 80024c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0f0      	beq.n	80024b4 <HAL_RCC_OscConfig+0x234>
 80024d2:	e01b      	b.n	800250c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024d4:	4b09      	ldr	r3, [pc, #36]	@ (80024fc <HAL_RCC_OscConfig+0x27c>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024da:	f7fe fd53 	bl	8000f84 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e0:	e00e      	b.n	8002500 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024e2:	f7fe fd4f 	bl	8000f84 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d907      	bls.n	8002500 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e15c      	b.n	80027ae <HAL_RCC_OscConfig+0x52e>
 80024f4:	40023800 	.word	0x40023800
 80024f8:	42470000 	.word	0x42470000
 80024fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002500:	4b8a      	ldr	r3, [pc, #552]	@ (800272c <HAL_RCC_OscConfig+0x4ac>)
 8002502:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1ea      	bne.n	80024e2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 8097 	beq.w	8002648 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800251a:	2300      	movs	r3, #0
 800251c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800251e:	4b83      	ldr	r3, [pc, #524]	@ (800272c <HAL_RCC_OscConfig+0x4ac>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10f      	bne.n	800254a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	4b7f      	ldr	r3, [pc, #508]	@ (800272c <HAL_RCC_OscConfig+0x4ac>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002532:	4a7e      	ldr	r2, [pc, #504]	@ (800272c <HAL_RCC_OscConfig+0x4ac>)
 8002534:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002538:	6413      	str	r3, [r2, #64]	@ 0x40
 800253a:	4b7c      	ldr	r3, [pc, #496]	@ (800272c <HAL_RCC_OscConfig+0x4ac>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002542:	60bb      	str	r3, [r7, #8]
 8002544:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002546:	2301      	movs	r3, #1
 8002548:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800254a:	4b79      	ldr	r3, [pc, #484]	@ (8002730 <HAL_RCC_OscConfig+0x4b0>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002552:	2b00      	cmp	r3, #0
 8002554:	d118      	bne.n	8002588 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002556:	4b76      	ldr	r3, [pc, #472]	@ (8002730 <HAL_RCC_OscConfig+0x4b0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a75      	ldr	r2, [pc, #468]	@ (8002730 <HAL_RCC_OscConfig+0x4b0>)
 800255c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002560:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002562:	f7fe fd0f 	bl	8000f84 <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800256a:	f7fe fd0b 	bl	8000f84 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e118      	b.n	80027ae <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257c:	4b6c      	ldr	r3, [pc, #432]	@ (8002730 <HAL_RCC_OscConfig+0x4b0>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0f0      	beq.n	800256a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d106      	bne.n	800259e <HAL_RCC_OscConfig+0x31e>
 8002590:	4b66      	ldr	r3, [pc, #408]	@ (800272c <HAL_RCC_OscConfig+0x4ac>)
 8002592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002594:	4a65      	ldr	r2, [pc, #404]	@ (800272c <HAL_RCC_OscConfig+0x4ac>)
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	6713      	str	r3, [r2, #112]	@ 0x70
 800259c:	e01c      	b.n	80025d8 <HAL_RCC_OscConfig+0x358>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	2b05      	cmp	r3, #5
 80025a4:	d10c      	bne.n	80025c0 <HAL_RCC_OscConfig+0x340>
 80025a6:	4b61      	ldr	r3, [pc, #388]	@ (800272c <HAL_RCC_OscConfig+0x4ac>)
 80025a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025aa:	4a60      	ldr	r2, [pc, #384]	@ (800272c <HAL_RCC_OscConfig+0x4ac>)
 80025ac:	f043 0304 	orr.w	r3, r3, #4
 80025b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80025b2:	4b5e      	ldr	r3, [pc, #376]	@ (800272c <HAL_RCC_OscConfig+0x4ac>)
 80025b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025b6:	4a5d      	ldr	r2, [pc, #372]	@ (800272c <HAL_RCC_OscConfig+0x4ac>)
 80025b8:	f043 0301 	orr.w	r3, r3, #1
 80025bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80025be:	e00b      	b.n	80025d8 <HAL_RCC_OscConfig+0x358>
 80025c0:	4b5a      	ldr	r3, [pc, #360]	@ (800272c <HAL_RCC_OscConfig+0x4ac>)
 80025c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c4:	4a59      	ldr	r2, [pc, #356]	@ (800272c <HAL_RCC_OscConfig+0x4ac>)
 80025c6:	f023 0301 	bic.w	r3, r3, #1
 80025ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80025cc:	4b57      	ldr	r3, [pc, #348]	@ (800272c <HAL_RCC_OscConfig+0x4ac>)
 80025ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025d0:	4a56      	ldr	r2, [pc, #344]	@ (800272c <HAL_RCC_OscConfig+0x4ac>)
 80025d2:	f023 0304 	bic.w	r3, r3, #4
 80025d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d015      	beq.n	800260c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e0:	f7fe fcd0 	bl	8000f84 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e6:	e00a      	b.n	80025fe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025e8:	f7fe fccc 	bl	8000f84 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e0d7      	b.n	80027ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025fe:	4b4b      	ldr	r3, [pc, #300]	@ (800272c <HAL_RCC_OscConfig+0x4ac>)
 8002600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0ee      	beq.n	80025e8 <HAL_RCC_OscConfig+0x368>
 800260a:	e014      	b.n	8002636 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260c:	f7fe fcba 	bl	8000f84 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002612:	e00a      	b.n	800262a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002614:	f7fe fcb6 	bl	8000f84 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002622:	4293      	cmp	r3, r2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e0c1      	b.n	80027ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800262a:	4b40      	ldr	r3, [pc, #256]	@ (800272c <HAL_RCC_OscConfig+0x4ac>)
 800262c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1ee      	bne.n	8002614 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002636:	7dfb      	ldrb	r3, [r7, #23]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d105      	bne.n	8002648 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800263c:	4b3b      	ldr	r3, [pc, #236]	@ (800272c <HAL_RCC_OscConfig+0x4ac>)
 800263e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002640:	4a3a      	ldr	r2, [pc, #232]	@ (800272c <HAL_RCC_OscConfig+0x4ac>)
 8002642:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002646:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 80ad 	beq.w	80027ac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002652:	4b36      	ldr	r3, [pc, #216]	@ (800272c <HAL_RCC_OscConfig+0x4ac>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 030c 	and.w	r3, r3, #12
 800265a:	2b08      	cmp	r3, #8
 800265c:	d060      	beq.n	8002720 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	2b02      	cmp	r3, #2
 8002664:	d145      	bne.n	80026f2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002666:	4b33      	ldr	r3, [pc, #204]	@ (8002734 <HAL_RCC_OscConfig+0x4b4>)
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266c:	f7fe fc8a 	bl	8000f84 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002674:	f7fe fc86 	bl	8000f84 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e093      	b.n	80027ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002686:	4b29      	ldr	r3, [pc, #164]	@ (800272c <HAL_RCC_OscConfig+0x4ac>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f0      	bne.n	8002674 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69da      	ldr	r2, [r3, #28]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	431a      	orrs	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a0:	019b      	lsls	r3, r3, #6
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a8:	085b      	lsrs	r3, r3, #1
 80026aa:	3b01      	subs	r3, #1
 80026ac:	041b      	lsls	r3, r3, #16
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b4:	061b      	lsls	r3, r3, #24
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026bc:	071b      	lsls	r3, r3, #28
 80026be:	491b      	ldr	r1, [pc, #108]	@ (800272c <HAL_RCC_OscConfig+0x4ac>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002734 <HAL_RCC_OscConfig+0x4b4>)
 80026c6:	2201      	movs	r2, #1
 80026c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ca:	f7fe fc5b 	bl	8000f84 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026d2:	f7fe fc57 	bl	8000f84 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e064      	b.n	80027ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e4:	4b11      	ldr	r3, [pc, #68]	@ (800272c <HAL_RCC_OscConfig+0x4ac>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0f0      	beq.n	80026d2 <HAL_RCC_OscConfig+0x452>
 80026f0:	e05c      	b.n	80027ac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f2:	4b10      	ldr	r3, [pc, #64]	@ (8002734 <HAL_RCC_OscConfig+0x4b4>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f8:	f7fe fc44 	bl	8000f84 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002700:	f7fe fc40 	bl	8000f84 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e04d      	b.n	80027ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002712:	4b06      	ldr	r3, [pc, #24]	@ (800272c <HAL_RCC_OscConfig+0x4ac>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f0      	bne.n	8002700 <HAL_RCC_OscConfig+0x480>
 800271e:	e045      	b.n	80027ac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d107      	bne.n	8002738 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e040      	b.n	80027ae <HAL_RCC_OscConfig+0x52e>
 800272c:	40023800 	.word	0x40023800
 8002730:	40007000 	.word	0x40007000
 8002734:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002738:	4b1f      	ldr	r3, [pc, #124]	@ (80027b8 <HAL_RCC_OscConfig+0x538>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d030      	beq.n	80027a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002750:	429a      	cmp	r2, r3
 8002752:	d129      	bne.n	80027a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275e:	429a      	cmp	r2, r3
 8002760:	d122      	bne.n	80027a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002768:	4013      	ands	r3, r2
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800276e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002770:	4293      	cmp	r3, r2
 8002772:	d119      	bne.n	80027a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800277e:	085b      	lsrs	r3, r3, #1
 8002780:	3b01      	subs	r3, #1
 8002782:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002784:	429a      	cmp	r2, r3
 8002786:	d10f      	bne.n	80027a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002792:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002794:	429a      	cmp	r2, r3
 8002796:	d107      	bne.n	80027a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d001      	beq.n	80027ac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e000      	b.n	80027ae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40023800 	.word	0x40023800

080027bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e041      	b.n	8002852 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d106      	bne.n	80027e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7fe fa64 	bl	8000cb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2202      	movs	r2, #2
 80027ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3304      	adds	r3, #4
 80027f8:	4619      	mov	r1, r3
 80027fa:	4610      	mov	r0, r2
 80027fc:	f000 fd78 	bl	80032f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b082      	sub	sp, #8
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e041      	b.n	80028f0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	d106      	bne.n	8002886 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 f839 	bl	80028f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2202      	movs	r2, #2
 800288a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3304      	adds	r3, #4
 8002896:	4619      	mov	r1, r3
 8002898:	4610      	mov	r0, r2
 800289a:	f000 fd29 	bl	80032f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
 8002918:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d109      	bne.n	8002934 <HAL_TIM_PWM_Start_DMA+0x28>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	bf0c      	ite	eq
 800292c:	2301      	moveq	r3, #1
 800292e:	2300      	movne	r3, #0
 8002930:	b2db      	uxtb	r3, r3
 8002932:	e022      	b.n	800297a <HAL_TIM_PWM_Start_DMA+0x6e>
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2b04      	cmp	r3, #4
 8002938:	d109      	bne.n	800294e <HAL_TIM_PWM_Start_DMA+0x42>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	bf0c      	ite	eq
 8002946:	2301      	moveq	r3, #1
 8002948:	2300      	movne	r3, #0
 800294a:	b2db      	uxtb	r3, r3
 800294c:	e015      	b.n	800297a <HAL_TIM_PWM_Start_DMA+0x6e>
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	2b08      	cmp	r3, #8
 8002952:	d109      	bne.n	8002968 <HAL_TIM_PWM_Start_DMA+0x5c>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	bf0c      	ite	eq
 8002960:	2301      	moveq	r3, #1
 8002962:	2300      	movne	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	e008      	b.n	800297a <HAL_TIM_PWM_Start_DMA+0x6e>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	bf0c      	ite	eq
 8002974:	2301      	moveq	r3, #1
 8002976:	2300      	movne	r3, #0
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 800297e:	2302      	movs	r3, #2
 8002980:	e16c      	b.n	8002c5c <HAL_TIM_PWM_Start_DMA+0x350>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d109      	bne.n	800299c <HAL_TIM_PWM_Start_DMA+0x90>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b01      	cmp	r3, #1
 8002992:	bf0c      	ite	eq
 8002994:	2301      	moveq	r3, #1
 8002996:	2300      	movne	r3, #0
 8002998:	b2db      	uxtb	r3, r3
 800299a:	e022      	b.n	80029e2 <HAL_TIM_PWM_Start_DMA+0xd6>
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d109      	bne.n	80029b6 <HAL_TIM_PWM_Start_DMA+0xaa>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	bf0c      	ite	eq
 80029ae:	2301      	moveq	r3, #1
 80029b0:	2300      	movne	r3, #0
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	e015      	b.n	80029e2 <HAL_TIM_PWM_Start_DMA+0xd6>
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	d109      	bne.n	80029d0 <HAL_TIM_PWM_Start_DMA+0xc4>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	bf0c      	ite	eq
 80029c8:	2301      	moveq	r3, #1
 80029ca:	2300      	movne	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	e008      	b.n	80029e2 <HAL_TIM_PWM_Start_DMA+0xd6>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b01      	cmp	r3, #1
 80029da:	bf0c      	ite	eq
 80029dc:	2301      	moveq	r3, #1
 80029de:	2300      	movne	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d024      	beq.n	8002a30 <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d104      	bne.n	80029f6 <HAL_TIM_PWM_Start_DMA+0xea>
 80029ec:	887b      	ldrh	r3, [r7, #2]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e132      	b.n	8002c5c <HAL_TIM_PWM_Start_DMA+0x350>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d104      	bne.n	8002a06 <HAL_TIM_PWM_Start_DMA+0xfa>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2202      	movs	r2, #2
 8002a00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a04:	e016      	b.n	8002a34 <HAL_TIM_PWM_Start_DMA+0x128>
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d104      	bne.n	8002a16 <HAL_TIM_PWM_Start_DMA+0x10a>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a14:	e00e      	b.n	8002a34 <HAL_TIM_PWM_Start_DMA+0x128>
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	d104      	bne.n	8002a26 <HAL_TIM_PWM_Start_DMA+0x11a>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a24:	e006      	b.n	8002a34 <HAL_TIM_PWM_Start_DMA+0x128>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2202      	movs	r2, #2
 8002a2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002a2e:	e001      	b.n	8002a34 <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e113      	b.n	8002c5c <HAL_TIM_PWM_Start_DMA+0x350>
  }

  switch (Channel)
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	2b0c      	cmp	r3, #12
 8002a38:	f200 80ae 	bhi.w	8002b98 <HAL_TIM_PWM_Start_DMA+0x28c>
 8002a3c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a44 <HAL_TIM_PWM_Start_DMA+0x138>)
 8002a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a42:	bf00      	nop
 8002a44:	08002a79 	.word	0x08002a79
 8002a48:	08002b99 	.word	0x08002b99
 8002a4c:	08002b99 	.word	0x08002b99
 8002a50:	08002b99 	.word	0x08002b99
 8002a54:	08002ac1 	.word	0x08002ac1
 8002a58:	08002b99 	.word	0x08002b99
 8002a5c:	08002b99 	.word	0x08002b99
 8002a60:	08002b99 	.word	0x08002b99
 8002a64:	08002b09 	.word	0x08002b09
 8002a68:	08002b99 	.word	0x08002b99
 8002a6c:	08002b99 	.word	0x08002b99
 8002a70:	08002b99 	.word	0x08002b99
 8002a74:	08002b51 	.word	0x08002b51
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7c:	4a79      	ldr	r2, [pc, #484]	@ (8002c64 <HAL_TIM_PWM_Start_DMA+0x358>)
 8002a7e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a84:	4a78      	ldr	r2, [pc, #480]	@ (8002c68 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8002a86:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8c:	4a77      	ldr	r2, [pc, #476]	@ (8002c6c <HAL_TIM_PWM_Start_DMA+0x360>)
 8002a8e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	3334      	adds	r3, #52	@ 0x34
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	887b      	ldrh	r3, [r7, #2]
 8002aa0:	f7fe fc60 	bl	8001364 <HAL_DMA_Start_IT>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_TIM_PWM_Start_DMA+0x1a2>
      {
        /* Return error status */
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e0d6      	b.n	8002c5c <HAL_TIM_PWM_Start_DMA+0x350>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68da      	ldr	r2, [r3, #12]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002abc:	60da      	str	r2, [r3, #12]
      break;
 8002abe:	e06c      	b.n	8002b9a <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac4:	4a67      	ldr	r2, [pc, #412]	@ (8002c64 <HAL_TIM_PWM_Start_DMA+0x358>)
 8002ac6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002acc:	4a66      	ldr	r2, [pc, #408]	@ (8002c68 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8002ace:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad4:	4a65      	ldr	r2, [pc, #404]	@ (8002c6c <HAL_TIM_PWM_Start_DMA+0x360>)
 8002ad6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	3338      	adds	r3, #56	@ 0x38
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	887b      	ldrh	r3, [r7, #2]
 8002ae8:	f7fe fc3c 	bl	8001364 <HAL_DMA_Start_IT>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <HAL_TIM_PWM_Start_DMA+0x1ea>
      {
        /* Return error status */
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e0b2      	b.n	8002c5c <HAL_TIM_PWM_Start_DMA+0x350>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68da      	ldr	r2, [r3, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b04:	60da      	str	r2, [r3, #12]
      break;
 8002b06:	e048      	b.n	8002b9a <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b0c:	4a55      	ldr	r2, [pc, #340]	@ (8002c64 <HAL_TIM_PWM_Start_DMA+0x358>)
 8002b0e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b14:	4a54      	ldr	r2, [pc, #336]	@ (8002c68 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8002b16:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b1c:	4a53      	ldr	r2, [pc, #332]	@ (8002c6c <HAL_TIM_PWM_Start_DMA+0x360>)
 8002b1e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	333c      	adds	r3, #60	@ 0x3c
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	887b      	ldrh	r3, [r7, #2]
 8002b30:	f7fe fc18 	bl	8001364 <HAL_DMA_Start_IT>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <HAL_TIM_PWM_Start_DMA+0x232>
      {
        /* Return error status */
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e08e      	b.n	8002c5c <HAL_TIM_PWM_Start_DMA+0x350>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68da      	ldr	r2, [r3, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b4c:	60da      	str	r2, [r3, #12]
      break;
 8002b4e:	e024      	b.n	8002b9a <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b54:	4a43      	ldr	r2, [pc, #268]	@ (8002c64 <HAL_TIM_PWM_Start_DMA+0x358>)
 8002b56:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5c:	4a42      	ldr	r2, [pc, #264]	@ (8002c68 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8002b5e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b64:	4a41      	ldr	r2, [pc, #260]	@ (8002c6c <HAL_TIM_PWM_Start_DMA+0x360>)
 8002b66:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	3340      	adds	r3, #64	@ 0x40
 8002b74:	461a      	mov	r2, r3
 8002b76:	887b      	ldrh	r3, [r7, #2]
 8002b78:	f7fe fbf4 	bl	8001364 <HAL_DMA_Start_IT>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <HAL_TIM_PWM_Start_DMA+0x27a>
      {
        /* Return error status */
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e06a      	b.n	8002c5c <HAL_TIM_PWM_Start_DMA+0x350>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68da      	ldr	r2, [r3, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002b94:	60da      	str	r2, [r3, #12]
      break;
 8002b96:	e000      	b.n	8002b9a <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 8002b98:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	68b9      	ldr	r1, [r7, #8]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f000 fe8e 	bl	80038c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a30      	ldr	r2, [pc, #192]	@ (8002c70 <HAL_TIM_PWM_Start_DMA+0x364>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d004      	beq.n	8002bbc <HAL_TIM_PWM_Start_DMA+0x2b0>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a2f      	ldr	r2, [pc, #188]	@ (8002c74 <HAL_TIM_PWM_Start_DMA+0x368>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d101      	bne.n	8002bc0 <HAL_TIM_PWM_Start_DMA+0x2b4>
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e000      	b.n	8002bc2 <HAL_TIM_PWM_Start_DMA+0x2b6>
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d007      	beq.n	8002bd6 <HAL_TIM_PWM_Start_DMA+0x2ca>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002bd4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a25      	ldr	r2, [pc, #148]	@ (8002c70 <HAL_TIM_PWM_Start_DMA+0x364>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d022      	beq.n	8002c26 <HAL_TIM_PWM_Start_DMA+0x31a>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002be8:	d01d      	beq.n	8002c26 <HAL_TIM_PWM_Start_DMA+0x31a>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a22      	ldr	r2, [pc, #136]	@ (8002c78 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d018      	beq.n	8002c26 <HAL_TIM_PWM_Start_DMA+0x31a>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a20      	ldr	r2, [pc, #128]	@ (8002c7c <HAL_TIM_PWM_Start_DMA+0x370>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d013      	beq.n	8002c26 <HAL_TIM_PWM_Start_DMA+0x31a>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a1f      	ldr	r2, [pc, #124]	@ (8002c80 <HAL_TIM_PWM_Start_DMA+0x374>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d00e      	beq.n	8002c26 <HAL_TIM_PWM_Start_DMA+0x31a>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a19      	ldr	r2, [pc, #100]	@ (8002c74 <HAL_TIM_PWM_Start_DMA+0x368>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d009      	beq.n	8002c26 <HAL_TIM_PWM_Start_DMA+0x31a>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a1b      	ldr	r2, [pc, #108]	@ (8002c84 <HAL_TIM_PWM_Start_DMA+0x378>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d004      	beq.n	8002c26 <HAL_TIM_PWM_Start_DMA+0x31a>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a19      	ldr	r2, [pc, #100]	@ (8002c88 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d111      	bne.n	8002c4a <HAL_TIM_PWM_Start_DMA+0x33e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	2b06      	cmp	r3, #6
 8002c36:	d010      	beq.n	8002c5a <HAL_TIM_PWM_Start_DMA+0x34e>
    {
      __HAL_TIM_ENABLE(htim);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0201 	orr.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c48:	e007      	b.n	8002c5a <HAL_TIM_PWM_Start_DMA+0x34e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f042 0201 	orr.w	r2, r2, #1
 8002c58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	080031df 	.word	0x080031df
 8002c68:	08003287 	.word	0x08003287
 8002c6c:	0800314d 	.word	0x0800314d
 8002c70:	40010000 	.word	0x40010000
 8002c74:	40010400 	.word	0x40010400
 8002c78:	40000400 	.word	0x40000400
 8002c7c:	40000800 	.word	0x40000800
 8002c80:	40000c00 	.word	0x40000c00
 8002c84:	40014000 	.word	0x40014000
 8002c88:	40001800 	.word	0x40001800

08002c8c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2b0c      	cmp	r3, #12
 8002c9a:	d855      	bhi.n	8002d48 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8002c9c:	a201      	add	r2, pc, #4	@ (adr r2, 8002ca4 <HAL_TIM_PWM_Stop_DMA+0x18>)
 8002c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca2:	bf00      	nop
 8002ca4:	08002cd9 	.word	0x08002cd9
 8002ca8:	08002d49 	.word	0x08002d49
 8002cac:	08002d49 	.word	0x08002d49
 8002cb0:	08002d49 	.word	0x08002d49
 8002cb4:	08002cf5 	.word	0x08002cf5
 8002cb8:	08002d49 	.word	0x08002d49
 8002cbc:	08002d49 	.word	0x08002d49
 8002cc0:	08002d49 	.word	0x08002d49
 8002cc4:	08002d11 	.word	0x08002d11
 8002cc8:	08002d49 	.word	0x08002d49
 8002ccc:	08002d49 	.word	0x08002d49
 8002cd0:	08002d49 	.word	0x08002d49
 8002cd4:	08002d2d 	.word	0x08002d2d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002ce6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7fe fb91 	bl	8001414 <HAL_DMA_Abort_IT>
      break;
 8002cf2:	e02a      	b.n	8002d4a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d02:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7fe fb83 	bl	8001414 <HAL_DMA_Abort_IT>
      break;
 8002d0e:	e01c      	b.n	8002d4a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d1e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7fe fb75 	bl	8001414 <HAL_DMA_Abort_IT>
      break;
 8002d2a:	e00e      	b.n	8002d4a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68da      	ldr	r2, [r3, #12]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d3a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7fe fb67 	bl	8001414 <HAL_DMA_Abort_IT>
      break;
 8002d46:	e000      	b.n	8002d4a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8002d48:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	6839      	ldr	r1, [r7, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 fdb6 	bl	80038c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a2e      	ldr	r2, [pc, #184]	@ (8002e18 <HAL_TIM_PWM_Stop_DMA+0x18c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d004      	beq.n	8002d6c <HAL_TIM_PWM_Stop_DMA+0xe0>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a2d      	ldr	r2, [pc, #180]	@ (8002e1c <HAL_TIM_PWM_Stop_DMA+0x190>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d101      	bne.n	8002d70 <HAL_TIM_PWM_Stop_DMA+0xe4>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <HAL_TIM_PWM_Stop_DMA+0xe6>
 8002d70:	2300      	movs	r3, #0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d017      	beq.n	8002da6 <HAL_TIM_PWM_Stop_DMA+0x11a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6a1a      	ldr	r2, [r3, #32]
 8002d7c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002d80:	4013      	ands	r3, r2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10f      	bne.n	8002da6 <HAL_TIM_PWM_Stop_DMA+0x11a>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6a1a      	ldr	r2, [r3, #32]
 8002d8c:	f240 4344 	movw	r3, #1092	@ 0x444
 8002d90:	4013      	ands	r3, r2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d107      	bne.n	8002da6 <HAL_TIM_PWM_Stop_DMA+0x11a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002da4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6a1a      	ldr	r2, [r3, #32]
 8002dac:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002db0:	4013      	ands	r3, r2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10f      	bne.n	8002dd6 <HAL_TIM_PWM_Stop_DMA+0x14a>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6a1a      	ldr	r2, [r3, #32]
 8002dbc:	f240 4344 	movw	r3, #1092	@ 0x444
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d107      	bne.n	8002dd6 <HAL_TIM_PWM_Stop_DMA+0x14a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 0201 	bic.w	r2, r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d104      	bne.n	8002de6 <HAL_TIM_PWM_Stop_DMA+0x15a>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002de4:	e013      	b.n	8002e0e <HAL_TIM_PWM_Stop_DMA+0x182>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d104      	bne.n	8002df6 <HAL_TIM_PWM_Stop_DMA+0x16a>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002df4:	e00b      	b.n	8002e0e <HAL_TIM_PWM_Stop_DMA+0x182>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d104      	bne.n	8002e06 <HAL_TIM_PWM_Stop_DMA+0x17a>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e04:	e003      	b.n	8002e0e <HAL_TIM_PWM_Stop_DMA+0x182>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40010000 	.word	0x40010000
 8002e1c:	40010400 	.word	0x40010400

08002e20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d101      	bne.n	8002e3a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002e36:	2302      	movs	r3, #2
 8002e38:	e0ac      	b.n	8002f94 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b0c      	cmp	r3, #12
 8002e46:	f200 809f 	bhi.w	8002f88 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8002e50 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e50:	08002e85 	.word	0x08002e85
 8002e54:	08002f89 	.word	0x08002f89
 8002e58:	08002f89 	.word	0x08002f89
 8002e5c:	08002f89 	.word	0x08002f89
 8002e60:	08002ec5 	.word	0x08002ec5
 8002e64:	08002f89 	.word	0x08002f89
 8002e68:	08002f89 	.word	0x08002f89
 8002e6c:	08002f89 	.word	0x08002f89
 8002e70:	08002f07 	.word	0x08002f07
 8002e74:	08002f89 	.word	0x08002f89
 8002e78:	08002f89 	.word	0x08002f89
 8002e7c:	08002f89 	.word	0x08002f89
 8002e80:	08002f47 	.word	0x08002f47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68b9      	ldr	r1, [r7, #8]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 fad0 	bl	8003430 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699a      	ldr	r2, [r3, #24]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0208 	orr.w	r2, r2, #8
 8002e9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699a      	ldr	r2, [r3, #24]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0204 	bic.w	r2, r2, #4
 8002eae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6999      	ldr	r1, [r3, #24]
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	691a      	ldr	r2, [r3, #16]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	619a      	str	r2, [r3, #24]
      break;
 8002ec2:	e062      	b.n	8002f8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68b9      	ldr	r1, [r7, #8]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 fb20 	bl	8003510 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	699a      	ldr	r2, [r3, #24]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ede:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699a      	ldr	r2, [r3, #24]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6999      	ldr	r1, [r3, #24]
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	021a      	lsls	r2, r3, #8
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	619a      	str	r2, [r3, #24]
      break;
 8002f04:	e041      	b.n	8002f8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68b9      	ldr	r1, [r7, #8]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 fb75 	bl	80035fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	69da      	ldr	r2, [r3, #28]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f042 0208 	orr.w	r2, r2, #8
 8002f20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	69da      	ldr	r2, [r3, #28]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0204 	bic.w	r2, r2, #4
 8002f30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	69d9      	ldr	r1, [r3, #28]
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	691a      	ldr	r2, [r3, #16]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	61da      	str	r2, [r3, #28]
      break;
 8002f44:	e021      	b.n	8002f8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68b9      	ldr	r1, [r7, #8]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f000 fbc9 	bl	80036e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	69da      	ldr	r2, [r3, #28]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	69da      	ldr	r2, [r3, #28]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	69d9      	ldr	r1, [r3, #28]
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	021a      	lsls	r2, r3, #8
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	61da      	str	r2, [r3, #28]
      break;
 8002f86:	e000      	b.n	8002f8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002f88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d101      	bne.n	8002fb4 <HAL_TIM_ConfigClockSource+0x18>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	e0b3      	b.n	800311c <HAL_TIM_ConfigClockSource+0x180>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002fd2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002fda:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fec:	d03e      	beq.n	800306c <HAL_TIM_ConfigClockSource+0xd0>
 8002fee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ff2:	f200 8087 	bhi.w	8003104 <HAL_TIM_ConfigClockSource+0x168>
 8002ff6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ffa:	f000 8085 	beq.w	8003108 <HAL_TIM_ConfigClockSource+0x16c>
 8002ffe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003002:	d87f      	bhi.n	8003104 <HAL_TIM_ConfigClockSource+0x168>
 8003004:	2b70      	cmp	r3, #112	@ 0x70
 8003006:	d01a      	beq.n	800303e <HAL_TIM_ConfigClockSource+0xa2>
 8003008:	2b70      	cmp	r3, #112	@ 0x70
 800300a:	d87b      	bhi.n	8003104 <HAL_TIM_ConfigClockSource+0x168>
 800300c:	2b60      	cmp	r3, #96	@ 0x60
 800300e:	d050      	beq.n	80030b2 <HAL_TIM_ConfigClockSource+0x116>
 8003010:	2b60      	cmp	r3, #96	@ 0x60
 8003012:	d877      	bhi.n	8003104 <HAL_TIM_ConfigClockSource+0x168>
 8003014:	2b50      	cmp	r3, #80	@ 0x50
 8003016:	d03c      	beq.n	8003092 <HAL_TIM_ConfigClockSource+0xf6>
 8003018:	2b50      	cmp	r3, #80	@ 0x50
 800301a:	d873      	bhi.n	8003104 <HAL_TIM_ConfigClockSource+0x168>
 800301c:	2b40      	cmp	r3, #64	@ 0x40
 800301e:	d058      	beq.n	80030d2 <HAL_TIM_ConfigClockSource+0x136>
 8003020:	2b40      	cmp	r3, #64	@ 0x40
 8003022:	d86f      	bhi.n	8003104 <HAL_TIM_ConfigClockSource+0x168>
 8003024:	2b30      	cmp	r3, #48	@ 0x30
 8003026:	d064      	beq.n	80030f2 <HAL_TIM_ConfigClockSource+0x156>
 8003028:	2b30      	cmp	r3, #48	@ 0x30
 800302a:	d86b      	bhi.n	8003104 <HAL_TIM_ConfigClockSource+0x168>
 800302c:	2b20      	cmp	r3, #32
 800302e:	d060      	beq.n	80030f2 <HAL_TIM_ConfigClockSource+0x156>
 8003030:	2b20      	cmp	r3, #32
 8003032:	d867      	bhi.n	8003104 <HAL_TIM_ConfigClockSource+0x168>
 8003034:	2b00      	cmp	r3, #0
 8003036:	d05c      	beq.n	80030f2 <HAL_TIM_ConfigClockSource+0x156>
 8003038:	2b10      	cmp	r3, #16
 800303a:	d05a      	beq.n	80030f2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800303c:	e062      	b.n	8003104 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6818      	ldr	r0, [r3, #0]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	6899      	ldr	r1, [r3, #8]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f000 fc19 	bl	8003884 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003060:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	609a      	str	r2, [r3, #8]
      break;
 800306a:	e04e      	b.n	800310a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6818      	ldr	r0, [r3, #0]
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	6899      	ldr	r1, [r3, #8]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f000 fc02 	bl	8003884 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689a      	ldr	r2, [r3, #8]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800308e:	609a      	str	r2, [r3, #8]
      break;
 8003090:	e03b      	b.n	800310a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6818      	ldr	r0, [r3, #0]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	6859      	ldr	r1, [r3, #4]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	461a      	mov	r2, r3
 80030a0:	f000 fb76 	bl	8003790 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2150      	movs	r1, #80	@ 0x50
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 fbcf 	bl	800384e <TIM_ITRx_SetConfig>
      break;
 80030b0:	e02b      	b.n	800310a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6818      	ldr	r0, [r3, #0]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	6859      	ldr	r1, [r3, #4]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	461a      	mov	r2, r3
 80030c0:	f000 fb95 	bl	80037ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2160      	movs	r1, #96	@ 0x60
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 fbbf 	bl	800384e <TIM_ITRx_SetConfig>
      break;
 80030d0:	e01b      	b.n	800310a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6818      	ldr	r0, [r3, #0]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	6859      	ldr	r1, [r3, #4]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	461a      	mov	r2, r3
 80030e0:	f000 fb56 	bl	8003790 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2140      	movs	r1, #64	@ 0x40
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 fbaf 	bl	800384e <TIM_ITRx_SetConfig>
      break;
 80030f0:	e00b      	b.n	800310a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4619      	mov	r1, r3
 80030fc:	4610      	mov	r0, r2
 80030fe:	f000 fba6 	bl	800384e <TIM_ITRx_SetConfig>
        break;
 8003102:	e002      	b.n	800310a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003104:	bf00      	nop
 8003106:	e000      	b.n	800310a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003108:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003158:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	429a      	cmp	r2, r3
 8003162:	d107      	bne.n	8003174 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2201      	movs	r2, #1
 8003168:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003172:	e02a      	b.n	80031ca <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	429a      	cmp	r2, r3
 800317c:	d107      	bne.n	800318e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2202      	movs	r2, #2
 8003182:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800318c:	e01d      	b.n	80031ca <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	429a      	cmp	r2, r3
 8003196:	d107      	bne.n	80031a8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2204      	movs	r2, #4
 800319c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031a6:	e010      	b.n	80031ca <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d107      	bne.n	80031c2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2208      	movs	r2, #8
 80031b6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80031c0:	e003      	b.n	80031ca <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f7ff ffb4 	bl	8003138 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	771a      	strb	r2, [r3, #28]
}
 80031d6:	bf00      	nop
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b084      	sub	sp, #16
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ea:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d10b      	bne.n	800320e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2201      	movs	r2, #1
 80031fa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d136      	bne.n	8003272 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800320c:	e031      	b.n	8003272 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	429a      	cmp	r2, r3
 8003216:	d10b      	bne.n	8003230 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2202      	movs	r2, #2
 800321c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d125      	bne.n	8003272 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800322e:	e020      	b.n	8003272 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	429a      	cmp	r2, r3
 8003238:	d10b      	bne.n	8003252 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2204      	movs	r2, #4
 800323e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d114      	bne.n	8003272 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003250:	e00f      	b.n	8003272 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	429a      	cmp	r2, r3
 800325a:	d10a      	bne.n	8003272 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2208      	movs	r2, #8
 8003260:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d103      	bne.n	8003272 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f7fd f93e 	bl	80004f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	771a      	strb	r2, [r3, #28]
}
 800327e:	bf00      	nop
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b084      	sub	sp, #16
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003292:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	429a      	cmp	r2, r3
 800329c:	d103      	bne.n	80032a6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2201      	movs	r2, #1
 80032a2:	771a      	strb	r2, [r3, #28]
 80032a4:	e019      	b.n	80032da <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d103      	bne.n	80032b8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2202      	movs	r2, #2
 80032b4:	771a      	strb	r2, [r3, #28]
 80032b6:	e010      	b.n	80032da <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d103      	bne.n	80032ca <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2204      	movs	r2, #4
 80032c6:	771a      	strb	r2, [r3, #28]
 80032c8:	e007      	b.n	80032da <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d102      	bne.n	80032da <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2208      	movs	r2, #8
 80032d8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f7ff ff22 	bl	8003124 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	771a      	strb	r2, [r3, #28]
}
 80032e6:	bf00      	nop
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
	...

080032f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a40      	ldr	r2, [pc, #256]	@ (8003404 <TIM_Base_SetConfig+0x114>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d013      	beq.n	8003330 <TIM_Base_SetConfig+0x40>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800330e:	d00f      	beq.n	8003330 <TIM_Base_SetConfig+0x40>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a3d      	ldr	r2, [pc, #244]	@ (8003408 <TIM_Base_SetConfig+0x118>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d00b      	beq.n	8003330 <TIM_Base_SetConfig+0x40>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a3c      	ldr	r2, [pc, #240]	@ (800340c <TIM_Base_SetConfig+0x11c>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d007      	beq.n	8003330 <TIM_Base_SetConfig+0x40>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a3b      	ldr	r2, [pc, #236]	@ (8003410 <TIM_Base_SetConfig+0x120>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d003      	beq.n	8003330 <TIM_Base_SetConfig+0x40>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a3a      	ldr	r2, [pc, #232]	@ (8003414 <TIM_Base_SetConfig+0x124>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d108      	bne.n	8003342 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003336:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	4313      	orrs	r3, r2
 8003340:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a2f      	ldr	r2, [pc, #188]	@ (8003404 <TIM_Base_SetConfig+0x114>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d02b      	beq.n	80033a2 <TIM_Base_SetConfig+0xb2>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003350:	d027      	beq.n	80033a2 <TIM_Base_SetConfig+0xb2>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a2c      	ldr	r2, [pc, #176]	@ (8003408 <TIM_Base_SetConfig+0x118>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d023      	beq.n	80033a2 <TIM_Base_SetConfig+0xb2>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a2b      	ldr	r2, [pc, #172]	@ (800340c <TIM_Base_SetConfig+0x11c>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d01f      	beq.n	80033a2 <TIM_Base_SetConfig+0xb2>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a2a      	ldr	r2, [pc, #168]	@ (8003410 <TIM_Base_SetConfig+0x120>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d01b      	beq.n	80033a2 <TIM_Base_SetConfig+0xb2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a29      	ldr	r2, [pc, #164]	@ (8003414 <TIM_Base_SetConfig+0x124>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d017      	beq.n	80033a2 <TIM_Base_SetConfig+0xb2>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a28      	ldr	r2, [pc, #160]	@ (8003418 <TIM_Base_SetConfig+0x128>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d013      	beq.n	80033a2 <TIM_Base_SetConfig+0xb2>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a27      	ldr	r2, [pc, #156]	@ (800341c <TIM_Base_SetConfig+0x12c>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00f      	beq.n	80033a2 <TIM_Base_SetConfig+0xb2>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a26      	ldr	r2, [pc, #152]	@ (8003420 <TIM_Base_SetConfig+0x130>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d00b      	beq.n	80033a2 <TIM_Base_SetConfig+0xb2>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a25      	ldr	r2, [pc, #148]	@ (8003424 <TIM_Base_SetConfig+0x134>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d007      	beq.n	80033a2 <TIM_Base_SetConfig+0xb2>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a24      	ldr	r2, [pc, #144]	@ (8003428 <TIM_Base_SetConfig+0x138>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d003      	beq.n	80033a2 <TIM_Base_SetConfig+0xb2>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a23      	ldr	r2, [pc, #140]	@ (800342c <TIM_Base_SetConfig+0x13c>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d108      	bne.n	80033b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	4313      	orrs	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a0a      	ldr	r2, [pc, #40]	@ (8003404 <TIM_Base_SetConfig+0x114>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d003      	beq.n	80033e8 <TIM_Base_SetConfig+0xf8>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a0c      	ldr	r2, [pc, #48]	@ (8003414 <TIM_Base_SetConfig+0x124>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d103      	bne.n	80033f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	691a      	ldr	r2, [r3, #16]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	615a      	str	r2, [r3, #20]
}
 80033f6:	bf00      	nop
 80033f8:	3714      	adds	r7, #20
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	40010000 	.word	0x40010000
 8003408:	40000400 	.word	0x40000400
 800340c:	40000800 	.word	0x40000800
 8003410:	40000c00 	.word	0x40000c00
 8003414:	40010400 	.word	0x40010400
 8003418:	40014000 	.word	0x40014000
 800341c:	40014400 	.word	0x40014400
 8003420:	40014800 	.word	0x40014800
 8003424:	40001800 	.word	0x40001800
 8003428:	40001c00 	.word	0x40001c00
 800342c:	40002000 	.word	0x40002000

08003430 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003430:	b480      	push	{r7}
 8003432:	b087      	sub	sp, #28
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	f023 0201 	bic.w	r2, r3, #1
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800345e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f023 0303 	bic.w	r3, r3, #3
 8003466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	4313      	orrs	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f023 0302 	bic.w	r3, r3, #2
 8003478:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	4313      	orrs	r3, r2
 8003482:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a20      	ldr	r2, [pc, #128]	@ (8003508 <TIM_OC1_SetConfig+0xd8>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d003      	beq.n	8003494 <TIM_OC1_SetConfig+0x64>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a1f      	ldr	r2, [pc, #124]	@ (800350c <TIM_OC1_SetConfig+0xdc>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d10c      	bne.n	80034ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f023 0308 	bic.w	r3, r3, #8
 800349a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f023 0304 	bic.w	r3, r3, #4
 80034ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a15      	ldr	r2, [pc, #84]	@ (8003508 <TIM_OC1_SetConfig+0xd8>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d003      	beq.n	80034be <TIM_OC1_SetConfig+0x8e>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a14      	ldr	r2, [pc, #80]	@ (800350c <TIM_OC1_SetConfig+0xdc>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d111      	bne.n	80034e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80034cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	4313      	orrs	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	621a      	str	r2, [r3, #32]
}
 80034fc:	bf00      	nop
 80034fe:	371c      	adds	r7, #28
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	40010000 	.word	0x40010000
 800350c:	40010400 	.word	0x40010400

08003510 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003510:	b480      	push	{r7}
 8003512:	b087      	sub	sp, #28
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	f023 0210 	bic.w	r2, r3, #16
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800353e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003546:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	021b      	lsls	r3, r3, #8
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	4313      	orrs	r3, r2
 8003552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f023 0320 	bic.w	r3, r3, #32
 800355a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	4313      	orrs	r3, r2
 8003566:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a22      	ldr	r2, [pc, #136]	@ (80035f4 <TIM_OC2_SetConfig+0xe4>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d003      	beq.n	8003578 <TIM_OC2_SetConfig+0x68>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a21      	ldr	r2, [pc, #132]	@ (80035f8 <TIM_OC2_SetConfig+0xe8>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d10d      	bne.n	8003594 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800357e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	4313      	orrs	r3, r2
 800358a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003592:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a17      	ldr	r2, [pc, #92]	@ (80035f4 <TIM_OC2_SetConfig+0xe4>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d003      	beq.n	80035a4 <TIM_OC2_SetConfig+0x94>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a16      	ldr	r2, [pc, #88]	@ (80035f8 <TIM_OC2_SetConfig+0xe8>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d113      	bne.n	80035cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80035aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80035b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	4313      	orrs	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	621a      	str	r2, [r3, #32]
}
 80035e6:	bf00      	nop
 80035e8:	371c      	adds	r7, #28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	40010000 	.word	0x40010000
 80035f8:	40010400 	.word	0x40010400

080035fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b087      	sub	sp, #28
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800362a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f023 0303 	bic.w	r3, r3, #3
 8003632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	4313      	orrs	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003644:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	021b      	lsls	r3, r3, #8
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	4313      	orrs	r3, r2
 8003650:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a21      	ldr	r2, [pc, #132]	@ (80036dc <TIM_OC3_SetConfig+0xe0>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d003      	beq.n	8003662 <TIM_OC3_SetConfig+0x66>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a20      	ldr	r2, [pc, #128]	@ (80036e0 <TIM_OC3_SetConfig+0xe4>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d10d      	bne.n	800367e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003668:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	021b      	lsls	r3, r3, #8
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	4313      	orrs	r3, r2
 8003674:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800367c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a16      	ldr	r2, [pc, #88]	@ (80036dc <TIM_OC3_SetConfig+0xe0>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d003      	beq.n	800368e <TIM_OC3_SetConfig+0x92>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a15      	ldr	r2, [pc, #84]	@ (80036e0 <TIM_OC3_SetConfig+0xe4>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d113      	bne.n	80036b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003694:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800369c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	621a      	str	r2, [r3, #32]
}
 80036d0:	bf00      	nop
 80036d2:	371c      	adds	r7, #28
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	40010000 	.word	0x40010000
 80036e0:	40010400 	.word	0x40010400

080036e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b087      	sub	sp, #28
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800371a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	021b      	lsls	r3, r3, #8
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	4313      	orrs	r3, r2
 8003726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800372e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	031b      	lsls	r3, r3, #12
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	4313      	orrs	r3, r2
 800373a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a12      	ldr	r2, [pc, #72]	@ (8003788 <TIM_OC4_SetConfig+0xa4>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d003      	beq.n	800374c <TIM_OC4_SetConfig+0x68>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a11      	ldr	r2, [pc, #68]	@ (800378c <TIM_OC4_SetConfig+0xa8>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d109      	bne.n	8003760 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003752:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	019b      	lsls	r3, r3, #6
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	4313      	orrs	r3, r2
 800375e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	621a      	str	r2, [r3, #32]
}
 800377a:	bf00      	nop
 800377c:	371c      	adds	r7, #28
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	40010000 	.word	0x40010000
 800378c:	40010400 	.word	0x40010400

08003790 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003790:	b480      	push	{r7}
 8003792:	b087      	sub	sp, #28
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	f023 0201 	bic.w	r2, r3, #1
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	011b      	lsls	r3, r3, #4
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f023 030a 	bic.w	r3, r3, #10
 80037cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	621a      	str	r2, [r3, #32]
}
 80037e2:	bf00      	nop
 80037e4:	371c      	adds	r7, #28
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037ee:	b480      	push	{r7}
 80037f0:	b087      	sub	sp, #28
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	60f8      	str	r0, [r7, #12]
 80037f6:	60b9      	str	r1, [r7, #8]
 80037f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	f023 0210 	bic.w	r2, r3, #16
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003818:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	031b      	lsls	r3, r3, #12
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	4313      	orrs	r3, r2
 8003822:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800382a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	4313      	orrs	r3, r2
 8003834:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	621a      	str	r2, [r3, #32]
}
 8003842:	bf00      	nop
 8003844:	371c      	adds	r7, #28
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800384e:	b480      	push	{r7}
 8003850:	b085      	sub	sp, #20
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
 8003856:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003864:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	4313      	orrs	r3, r2
 800386c:	f043 0307 	orr.w	r3, r3, #7
 8003870:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	609a      	str	r2, [r3, #8]
}
 8003878:	bf00      	nop
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003884:	b480      	push	{r7}
 8003886:	b087      	sub	sp, #28
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
 8003890:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800389e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	021a      	lsls	r2, r3, #8
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	431a      	orrs	r2, r3
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	609a      	str	r2, [r3, #8]
}
 80038b8:	bf00      	nop
 80038ba:	371c      	adds	r7, #28
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b087      	sub	sp, #28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	f003 031f 	and.w	r3, r3, #31
 80038d6:	2201      	movs	r2, #1
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6a1a      	ldr	r2, [r3, #32]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	43db      	mvns	r3, r3
 80038e6:	401a      	ands	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6a1a      	ldr	r2, [r3, #32]
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	f003 031f 	and.w	r3, r3, #31
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	fa01 f303 	lsl.w	r3, r1, r3
 80038fc:	431a      	orrs	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	621a      	str	r2, [r3, #32]
}
 8003902:	bf00      	nop
 8003904:	371c      	adds	r7, #28
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
	...

08003910 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003920:	2b01      	cmp	r3, #1
 8003922:	d101      	bne.n	8003928 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003924:	2302      	movs	r3, #2
 8003926:	e05a      	b.n	80039de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2202      	movs	r2, #2
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800394e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a21      	ldr	r2, [pc, #132]	@ (80039ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d022      	beq.n	80039b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003974:	d01d      	beq.n	80039b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a1d      	ldr	r2, [pc, #116]	@ (80039f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d018      	beq.n	80039b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a1b      	ldr	r2, [pc, #108]	@ (80039f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d013      	beq.n	80039b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a1a      	ldr	r2, [pc, #104]	@ (80039f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d00e      	beq.n	80039b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a18      	ldr	r2, [pc, #96]	@ (80039fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d009      	beq.n	80039b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a17      	ldr	r2, [pc, #92]	@ (8003a00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d004      	beq.n	80039b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a15      	ldr	r2, [pc, #84]	@ (8003a04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d10c      	bne.n	80039cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	40010000 	.word	0x40010000
 80039f0:	40000400 	.word	0x40000400
 80039f4:	40000800 	.word	0x40000800
 80039f8:	40000c00 	.word	0x40000c00
 80039fc:	40010400 	.word	0x40010400
 8003a00:	40014000 	.word	0x40014000
 8003a04:	40001800 	.word	0x40001800

08003a08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d101      	bne.n	8003a24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003a20:	2302      	movs	r3, #2
 8003a22:	e03d      	b.n	8003aa0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3714      	adds	r7, #20
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <memset>:
 8003aac:	4402      	add	r2, r0
 8003aae:	4603      	mov	r3, r0
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d100      	bne.n	8003ab6 <memset+0xa>
 8003ab4:	4770      	bx	lr
 8003ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8003aba:	e7f9      	b.n	8003ab0 <memset+0x4>

08003abc <__libc_init_array>:
 8003abc:	b570      	push	{r4, r5, r6, lr}
 8003abe:	4d0d      	ldr	r5, [pc, #52]	@ (8003af4 <__libc_init_array+0x38>)
 8003ac0:	4c0d      	ldr	r4, [pc, #52]	@ (8003af8 <__libc_init_array+0x3c>)
 8003ac2:	1b64      	subs	r4, r4, r5
 8003ac4:	10a4      	asrs	r4, r4, #2
 8003ac6:	2600      	movs	r6, #0
 8003ac8:	42a6      	cmp	r6, r4
 8003aca:	d109      	bne.n	8003ae0 <__libc_init_array+0x24>
 8003acc:	4d0b      	ldr	r5, [pc, #44]	@ (8003afc <__libc_init_array+0x40>)
 8003ace:	4c0c      	ldr	r4, [pc, #48]	@ (8003b00 <__libc_init_array+0x44>)
 8003ad0:	f000 f818 	bl	8003b04 <_init>
 8003ad4:	1b64      	subs	r4, r4, r5
 8003ad6:	10a4      	asrs	r4, r4, #2
 8003ad8:	2600      	movs	r6, #0
 8003ada:	42a6      	cmp	r6, r4
 8003adc:	d105      	bne.n	8003aea <__libc_init_array+0x2e>
 8003ade:	bd70      	pop	{r4, r5, r6, pc}
 8003ae0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ae4:	4798      	blx	r3
 8003ae6:	3601      	adds	r6, #1
 8003ae8:	e7ee      	b.n	8003ac8 <__libc_init_array+0xc>
 8003aea:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aee:	4798      	blx	r3
 8003af0:	3601      	adds	r6, #1
 8003af2:	e7f2      	b.n	8003ada <__libc_init_array+0x1e>
 8003af4:	08003b3c 	.word	0x08003b3c
 8003af8:	08003b3c 	.word	0x08003b3c
 8003afc:	08003b3c 	.word	0x08003b3c
 8003b00:	08003b40 	.word	0x08003b40

08003b04 <_init>:
 8003b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b06:	bf00      	nop
 8003b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b0a:	bc08      	pop	{r3}
 8003b0c:	469e      	mov	lr, r3
 8003b0e:	4770      	bx	lr

08003b10 <_fini>:
 8003b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b12:	bf00      	nop
 8003b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b16:	bc08      	pop	{r3}
 8003b18:	469e      	mov	lr, r3
 8003b1a:	4770      	bx	lr
