
Motor_Driver_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004978  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08004b48  08004b48  00005b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c24  08004c24  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004c24  08004c24  00005c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c2c  08004c2c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c2c  08004c2c  00005c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c30  08004c30  00005c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004c34  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  2000005c  08004c90  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08004c90  000062b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd05  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021d8  00000000  00000000  00015d91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  00017f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b5e  00000000  00000000  00018e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000228e9  00000000  00000000  0001995e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000109d9  00000000  00000000  0003c247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d50b5  00000000  00000000  0004cc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00121cd5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042f8  00000000  00000000  00121d18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  00126010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004b30 	.word	0x08004b30

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08004b30 	.word	0x08004b30

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 fe40 	bl	8001274 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config_HSE(50);
 80005f4:	2032      	movs	r0, #50	@ 0x32
 80005f6:	f000 f849 	bl	800068c <SystemClock_Config_HSE>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 f9ab 	bl	8000954 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fe:	f000 f97f 	bl	8000900 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8000602:	f000 f8dd 	bl	80007c0 <MX_CAN1_Init>
  MX_DAC_Init();
 8000606:	f000 f911 	bl	800082c <MX_DAC_Init>
  MX_TIM6_Init();
 800060a:	f000 f943 	bl	8000894 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  CAN_Filter_Config();
 800060e:	f000 fa63 	bl	8000ad8 <CAN_Filter_Config>
  // Reverse PIN
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);  // Forward by default
 8000612:	2201      	movs	r2, #1
 8000614:	2120      	movs	r1, #32
 8000616:	4819      	ldr	r0, [pc, #100]	@ (800067c <main+0x90>)
 8000618:	f002 f8d6 	bl	80027c8 <HAL_GPIO_WritePin>
  CAN1_Tx();
 800061c:	f000 fa08 	bl	8000a30 <CAN1_Tx>
//   for (int i = 0; i < sizeof(dac_values)/sizeof(dac_values[0]); i++) {
//     HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_values[i]);
//     HAL_Delay(3000); // wait 3 seconds
//   }

  	if(HAL_CAN_ActivateNotification(&hcan1,CAN_IT_TX_MAILBOX_EMPTY|CAN_IT_RX_FIFO0_MSG_PENDING|CAN_IT_BUSOFF)!= HAL_OK)
 8000620:	f240 4103 	movw	r1, #1027	@ 0x403
 8000624:	4816      	ldr	r0, [pc, #88]	@ (8000680 <main+0x94>)
 8000626:	f001 facb 	bl	8001bc0 <HAL_CAN_ActivateNotification>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <main+0x48>
		{
		Error_Handler();
 8000630:	f000 fc0a 	bl	8000e48 <Error_Handler>
		}

	if( HAL_CAN_Start(&hcan1) != HAL_OK)
 8000634:	4812      	ldr	r0, [pc, #72]	@ (8000680 <main+0x94>)
 8000636:	f001 f88d 	bl	8001754 <HAL_CAN_Start>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <main+0x58>
		{
		Error_Handler();
 8000640:	f000 fc02 	bl	8000e48 <Error_Handler>
		}
	// Start the TIMER interrupt
	HAL_TIM_Base_Start_IT(&htim6);
 8000644:	480f      	ldr	r0, [pc, #60]	@ (8000684 <main+0x98>)
 8000646:	f002 ff11 	bl	800346c <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  if (crawl_mode)
 800064a:	4b0f      	ldr	r3, [pc, #60]	@ (8000688 <main+0x9c>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	b2db      	uxtb	r3, r3
 8000650:	2b00      	cmp	r3, #0
 8000652:	d0fa      	beq.n	800064a <main+0x5e>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);  // Forward
 8000654:	2201      	movs	r2, #1
 8000656:	2120      	movs	r1, #32
 8000658:	4808      	ldr	r0, [pc, #32]	@ (800067c <main+0x90>)
 800065a:	f002 f8b5 	bl	80027c8 <HAL_GPIO_WritePin>
		  HAL_Delay(3000);
 800065e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000662:	f000 fe79 	bl	8001358 <HAL_Delay>

		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);  // Reverse
 8000666:	2200      	movs	r2, #0
 8000668:	2120      	movs	r1, #32
 800066a:	4804      	ldr	r0, [pc, #16]	@ (800067c <main+0x90>)
 800066c:	f002 f8ac 	bl	80027c8 <HAL_GPIO_WritePin>
		  HAL_Delay(3000);
 8000670:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000674:	f000 fe70 	bl	8001358 <HAL_Delay>
	  if (crawl_mode)
 8000678:	e7e7      	b.n	800064a <main+0x5e>
 800067a:	bf00      	nop
 800067c:	40020000 	.word	0x40020000
 8000680:	20000078 	.word	0x20000078
 8000684:	200000b4 	.word	0x200000b4
 8000688:	20000164 	.word	0x20000164

0800068c <SystemClock_Config_HSE>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config_HSE(uint8_t clock_freq)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b096      	sub	sp, #88	@ 0x58
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
  RCC_OscInitTypeDef Osc_Init;
  RCC_ClkInitTypeDef Clock_Init;
  uint8_t flash_latency=0;
 8000696:	2300      	movs	r3, #0
 8000698:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

  Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSE ;
 800069c:	2301      	movs	r3, #1
 800069e:	61fb      	str	r3, [r7, #28]
  Osc_Init.HSEState = RCC_HSE_ON;
 80006a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006a4:	623b      	str	r3, [r7, #32]
  Osc_Init.PLL.PLLState = RCC_PLL_ON;
 80006a6:	2302      	movs	r3, #2
 80006a8:	637b      	str	r3, [r7, #52]	@ 0x34
  Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006ae:	63bb      	str	r3, [r7, #56]	@ 0x38

  switch(clock_freq) {
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	2b78      	cmp	r3, #120	@ 0x78
 80006b4:	d038      	beq.n	8000728 <SystemClock_Config_HSE+0x9c>
 80006b6:	2b78      	cmp	r3, #120	@ 0x78
 80006b8:	dc7c      	bgt.n	80007b4 <SystemClock_Config_HSE+0x128>
 80006ba:	2b32      	cmp	r3, #50	@ 0x32
 80006bc:	d002      	beq.n	80006c4 <SystemClock_Config_HSE+0x38>
 80006be:	2b54      	cmp	r3, #84	@ 0x54
 80006c0:	d019      	beq.n	80006f6 <SystemClock_Config_HSE+0x6a>
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
    flash_latency = 3;
    break;

  default:
    return ;
 80006c2:	e077      	b.n	80007b4 <SystemClock_Config_HSE+0x128>
    Osc_Init.PLL.PLLM = 4;
 80006c4:	2304      	movs	r3, #4
 80006c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    Osc_Init.PLL.PLLN = 50;
 80006c8:	2332      	movs	r3, #50	@ 0x32
 80006ca:	643b      	str	r3, [r7, #64]	@ 0x40
    Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	647b      	str	r3, [r7, #68]	@ 0x44
    Osc_Init.PLL.PLLQ = 2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	64bb      	str	r3, [r7, #72]	@ 0x48
    Osc_Init.PLL.PLLR = 2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 80006d8:	230f      	movs	r3, #15
 80006da:	60bb      	str	r3, [r7, #8]
    Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	2302      	movs	r3, #2
 80006de:	60fb      	str	r3, [r7, #12]
    Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	613b      	str	r3, [r7, #16]
    Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e8:	617b      	str	r3, [r7, #20]
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61bb      	str	r3, [r7, #24]
    flash_latency = 1;
 80006ee:	2301      	movs	r3, #1
 80006f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    break;
 80006f4:	e032      	b.n	800075c <SystemClock_Config_HSE+0xd0>
    Osc_Init.PLL.PLLM = 4;
 80006f6:	2304      	movs	r3, #4
 80006f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    Osc_Init.PLL.PLLN = 84;
 80006fa:	2354      	movs	r3, #84	@ 0x54
 80006fc:	643b      	str	r3, [r7, #64]	@ 0x40
    Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80006fe:	2302      	movs	r3, #2
 8000700:	647b      	str	r3, [r7, #68]	@ 0x44
    Osc_Init.PLL.PLLQ = 2;
 8000702:	2302      	movs	r3, #2
 8000704:	64bb      	str	r3, [r7, #72]	@ 0x48
    Osc_Init.PLL.PLLR = 2;
 8000706:	2302      	movs	r3, #2
 8000708:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 800070a:	230f      	movs	r3, #15
 800070c:	60bb      	str	r3, [r7, #8]
    Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070e:	2302      	movs	r3, #2
 8000710:	60fb      	str	r3, [r7, #12]
    Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	613b      	str	r3, [r7, #16]
    Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000716:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800071a:	617b      	str	r3, [r7, #20]
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	61bb      	str	r3, [r7, #24]
    flash_latency = 2;
 8000720:	2302      	movs	r3, #2
 8000722:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    break;
 8000726:	e019      	b.n	800075c <SystemClock_Config_HSE+0xd0>
    Osc_Init.PLL.PLLM = 4;
 8000728:	2304      	movs	r3, #4
 800072a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    Osc_Init.PLL.PLLN = 120;
 800072c:	2378      	movs	r3, #120	@ 0x78
 800072e:	643b      	str	r3, [r7, #64]	@ 0x40
    Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000730:	2302      	movs	r3, #2
 8000732:	647b      	str	r3, [r7, #68]	@ 0x44
    Osc_Init.PLL.PLLQ = 2;
 8000734:	2302      	movs	r3, #2
 8000736:	64bb      	str	r3, [r7, #72]	@ 0x48
    Osc_Init.PLL.PLLR = 2;
 8000738:	2302      	movs	r3, #2
 800073a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 800073c:	230f      	movs	r3, #15
 800073e:	60bb      	str	r3, [r7, #8]
    Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000740:	2302      	movs	r3, #2
 8000742:	60fb      	str	r3, [r7, #12]
    Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	613b      	str	r3, [r7, #16]
    Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 8000748:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800074c:	617b      	str	r3, [r7, #20]
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 800074e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000752:	61bb      	str	r3, [r7, #24]
    flash_latency = 3;
 8000754:	2303      	movs	r3, #3
 8000756:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    break;
 800075a:	bf00      	nop
  }

  if (HAL_RCC_OscConfig(&Osc_Init) != HAL_OK)
 800075c:	f107 031c 	add.w	r3, r7, #28
 8000760:	4618      	mov	r0, r3
 8000762:	f002 fb95 	bl	8002e90 <HAL_RCC_OscConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config_HSE+0xe4>
  {
    Error_Handler();
 800076c:	f000 fb6c 	bl	8000e48 <Error_Handler>
  }

  if (HAL_RCC_ClockConfig(&Clock_Init, flash_latency) != HAL_OK)
 8000770:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8000774:	f107 0308 	add.w	r3, r7, #8
 8000778:	4611      	mov	r1, r2
 800077a:	4618      	mov	r0, r3
 800077c:	f002 f83e 	bl	80027fc <HAL_RCC_ClockConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config_HSE+0xfe>
  {
    Error_Handler();
 8000786:	f000 fb5f 	bl	8000e48 <Error_Handler>
  }

  /*Configure the systick timer interrupt frequency (for every 1 ms) */
  uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 800078a:	f002 f91d 	bl	80029c8 <HAL_RCC_GetHCLKFreq>
 800078e:	6538      	str	r0, [r7, #80]	@ 0x50
  HAL_SYSTICK_Config(hclk_freq/1000);
 8000790:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000792:	4a0a      	ldr	r2, [pc, #40]	@ (80007bc <SystemClock_Config_HSE+0x130>)
 8000794:	fba2 2303 	umull	r2, r3, r2, r3
 8000798:	099b      	lsrs	r3, r3, #6
 800079a:	4618      	mov	r0, r3
 800079c:	f001 fd4d 	bl	800223a <HAL_SYSTICK_Config>

  /**Configure the Systick
  */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80007a0:	2004      	movs	r0, #4
 80007a2:	f001 fd57 	bl	8002254 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2100      	movs	r1, #0
 80007aa:	f04f 30ff 	mov.w	r0, #4294967295
 80007ae:	f001 fd1a 	bl	80021e6 <HAL_NVIC_SetPriority>
 80007b2:	e000      	b.n	80007b6 <SystemClock_Config_HSE+0x12a>
    return ;
 80007b4:	bf00      	nop
}
 80007b6:	3758      	adds	r7, #88	@ 0x58
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	10624dd3 	.word	0x10624dd3

080007c0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007c4:	4b17      	ldr	r3, [pc, #92]	@ (8000824 <MX_CAN1_Init+0x64>)
 80007c6:	4a18      	ldr	r2, [pc, #96]	@ (8000828 <MX_CAN1_Init+0x68>)
 80007c8:	601a      	str	r2, [r3, #0]
//  hcan1.Init.Prescaler = 16;
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007ca:	4b16      	ldr	r3, [pc, #88]	@ (8000824 <MX_CAN1_Init+0x64>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
//  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
//  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
//  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;

  hcan1.Init.Prescaler = 10;
 80007d0:	4b14      	ldr	r3, [pc, #80]	@ (8000824 <MX_CAN1_Init+0x64>)
 80007d2:	220a      	movs	r2, #10
 80007d4:	605a      	str	r2, [r3, #4]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007d6:	4b13      	ldr	r3, [pc, #76]	@ (8000824 <MX_CAN1_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 80007dc:	4b11      	ldr	r3, [pc, #68]	@ (8000824 <MX_CAN1_Init+0x64>)
 80007de:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80007e2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000824 <MX_CAN1_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	615a      	str	r2, [r3, #20]

  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <MX_CAN1_Init+0x64>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000824 <MX_CAN1_Init+0x64>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000824 <MX_CAN1_Init+0x64>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80007fc:	4b09      	ldr	r3, [pc, #36]	@ (8000824 <MX_CAN1_Init+0x64>)
 80007fe:	2201      	movs	r2, #1
 8000800:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000802:	4b08      	ldr	r3, [pc, #32]	@ (8000824 <MX_CAN1_Init+0x64>)
 8000804:	2200      	movs	r2, #0
 8000806:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000808:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <MX_CAN1_Init+0x64>)
 800080a:	2200      	movs	r2, #0
 800080c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	@ (8000824 <MX_CAN1_Init+0x64>)
 8000810:	f000 fdc6 	bl	80013a0 <HAL_CAN_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800081a:	f000 fb15 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000078 	.word	0x20000078
 8000828:	40006400 	.word	0x40006400

0800082c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000832:	463b      	mov	r3, r7
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800083a:	4b14      	ldr	r3, [pc, #80]	@ (800088c <MX_DAC_Init+0x60>)
 800083c:	4a14      	ldr	r2, [pc, #80]	@ (8000890 <MX_DAC_Init+0x64>)
 800083e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000840:	4812      	ldr	r0, [pc, #72]	@ (800088c <MX_DAC_Init+0x60>)
 8000842:	f001 fd30 	bl	80022a6 <HAL_DAC_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800084c:	f000 fafc 	bl	8000e48 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000850:	2300      	movs	r3, #0
 8000852:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000854:	2300      	movs	r3, #0
 8000856:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000858:	463b      	mov	r3, r7
 800085a:	2200      	movs	r2, #0
 800085c:	4619      	mov	r1, r3
 800085e:	480b      	ldr	r0, [pc, #44]	@ (800088c <MX_DAC_Init+0x60>)
 8000860:	f001 fdc4 	bl	80023ec <HAL_DAC_ConfigChannel>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800086a:	f000 faed 	bl	8000e48 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800086e:	463b      	mov	r3, r7
 8000870:	2210      	movs	r2, #16
 8000872:	4619      	mov	r1, r3
 8000874:	4805      	ldr	r0, [pc, #20]	@ (800088c <MX_DAC_Init+0x60>)
 8000876:	f001 fdb9 	bl	80023ec <HAL_DAC_ConfigChannel>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000880:	f000 fae2 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	200000a0 	.word	0x200000a0
 8000890:	40007400 	.word	0x40007400

08000894 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800089a:	463b      	mov	r3, r7
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80008a2:	4b15      	ldr	r3, [pc, #84]	@ (80008f8 <MX_TIM6_Init+0x64>)
 80008a4:	4a15      	ldr	r2, [pc, #84]	@ (80008fc <MX_TIM6_Init+0x68>)
 80008a6:	601a      	str	r2, [r3, #0]
//  htim6.Init.Prescaler = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a8:	4b13      	ldr	r3, [pc, #76]	@ (80008f8 <MX_TIM6_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
//  htim6.Init.Period = 65535;
  htim6.Init.Prescaler = 49999;  // Divides 50MHz to 1kHz
 80008ae:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <MX_TIM6_Init+0x64>)
 80008b0:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80008b4:	605a      	str	r2, [r3, #4]
  htim6.Init.Period = 4999;      // 1kHz → 5s interrupt
 80008b6:	4b10      	ldr	r3, [pc, #64]	@ (80008f8 <MX_TIM6_Init+0x64>)
 80008b8:	f241 3287 	movw	r2, #4999	@ 0x1387
 80008bc:	60da      	str	r2, [r3, #12]

  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008be:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <MX_TIM6_Init+0x64>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80008c4:	480c      	ldr	r0, [pc, #48]	@ (80008f8 <MX_TIM6_Init+0x64>)
 80008c6:	f002 fd81 	bl	80033cc <HAL_TIM_Base_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80008d0:	f000 faba 	bl	8000e48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d4:	2300      	movs	r3, #0
 80008d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d8:	2300      	movs	r3, #0
 80008da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008dc:	463b      	mov	r3, r7
 80008de:	4619      	mov	r1, r3
 80008e0:	4805      	ldr	r0, [pc, #20]	@ (80008f8 <MX_TIM6_Init+0x64>)
 80008e2:	f002 fff1 	bl	80038c8 <HAL_TIMEx_MasterConfigSynchronization>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80008ec:	f000 faac 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	200000b4 	.word	0x200000b4
 80008fc:	40001000 	.word	0x40001000

08000900 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000904:	4b11      	ldr	r3, [pc, #68]	@ (800094c <MX_USART2_UART_Init+0x4c>)
 8000906:	4a12      	ldr	r2, [pc, #72]	@ (8000950 <MX_USART2_UART_Init+0x50>)
 8000908:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800090a:	4b10      	ldr	r3, [pc, #64]	@ (800094c <MX_USART2_UART_Init+0x4c>)
 800090c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000910:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000912:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <MX_USART2_UART_Init+0x4c>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000918:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <MX_USART2_UART_Init+0x4c>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800091e:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <MX_USART2_UART_Init+0x4c>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000924:	4b09      	ldr	r3, [pc, #36]	@ (800094c <MX_USART2_UART_Init+0x4c>)
 8000926:	220c      	movs	r2, #12
 8000928:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092a:	4b08      	ldr	r3, [pc, #32]	@ (800094c <MX_USART2_UART_Init+0x4c>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000930:	4b06      	ldr	r3, [pc, #24]	@ (800094c <MX_USART2_UART_Init+0x4c>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000936:	4805      	ldr	r0, [pc, #20]	@ (800094c <MX_USART2_UART_Init+0x4c>)
 8000938:	f003 f856 	bl	80039e8 <HAL_UART_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000942:	f000 fa81 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	200000fc 	.word	0x200000fc
 8000950:	40004400 	.word	0x40004400

08000954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08a      	sub	sp, #40	@ 0x28
 8000958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
 8000968:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a24 <MX_GPIO_Init+0xd0>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a2c      	ldr	r2, [pc, #176]	@ (8000a24 <MX_GPIO_Init+0xd0>)
 8000974:	f043 0304 	orr.w	r3, r3, #4
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b2a      	ldr	r3, [pc, #168]	@ (8000a24 <MX_GPIO_Init+0xd0>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0304 	and.w	r3, r3, #4
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	4b26      	ldr	r3, [pc, #152]	@ (8000a24 <MX_GPIO_Init+0xd0>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	4a25      	ldr	r2, [pc, #148]	@ (8000a24 <MX_GPIO_Init+0xd0>)
 8000990:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000994:	6313      	str	r3, [r2, #48]	@ 0x30
 8000996:	4b23      	ldr	r3, [pc, #140]	@ (8000a24 <MX_GPIO_Init+0xd0>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a24 <MX_GPIO_Init+0xd0>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a1e      	ldr	r2, [pc, #120]	@ (8000a24 <MX_GPIO_Init+0xd0>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a24 <MX_GPIO_Init+0xd0>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	4b18      	ldr	r3, [pc, #96]	@ (8000a24 <MX_GPIO_Init+0xd0>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	4a17      	ldr	r2, [pc, #92]	@ (8000a24 <MX_GPIO_Init+0xd0>)
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ce:	4b15      	ldr	r3, [pc, #84]	@ (8000a24 <MX_GPIO_Init+0xd0>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009e0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009ea:	f107 0314 	add.w	r3, r7, #20
 80009ee:	4619      	mov	r1, r3
 80009f0:	480d      	ldr	r0, [pc, #52]	@ (8000a28 <MX_GPIO_Init+0xd4>)
 80009f2:	f001 fd55 	bl	80024a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009f6:	2320      	movs	r3, #32
 80009f8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;     // Push-pull output
 80009fa:	2301      	movs	r3, #1
 80009fc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	2300      	movs	r3, #0
 8000a04:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4807      	ldr	r0, [pc, #28]	@ (8000a2c <MX_GPIO_Init+0xd8>)
 8000a0e:	f001 fd47 	bl	80024a0 <HAL_GPIO_Init>

	/* Set default state: HIGH = Forward direction */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000a12:	2201      	movs	r2, #1
 8000a14:	2120      	movs	r1, #32
 8000a16:	4805      	ldr	r0, [pc, #20]	@ (8000a2c <MX_GPIO_Init+0xd8>)
 8000a18:	f001 fed6 	bl	80027c8 <HAL_GPIO_WritePin>
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a1c:	bf00      	nop
 8000a1e:	3728      	adds	r7, #40	@ 0x28
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020800 	.word	0x40020800
 8000a2c:	40020000 	.word	0x40020000

08000a30 <CAN1_Tx>:
/**
  * @brief  Transmit a message via CAN1.
  * @retval None
  */
void CAN1_Tx()
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b098      	sub	sp, #96	@ 0x60
 8000a34:	af00      	add	r7, sp, #0
  CAN_TxHeaderTypeDef TxHeader;
  uint32_t TxMailbox;
  uint8_t message[2];  // Two-byte message

  TxHeader.DLC = 2;  // Data length = 2 bytes
 8000a36:	2302      	movs	r3, #2
 8000a38:	65bb      	str	r3, [r7, #88]	@ 0x58
  TxHeader.StdId = 0x399;
 8000a3a:	f240 3399 	movw	r3, #921	@ 0x399
 8000a3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  TxHeader.IDE   = CAN_ID_STD;
 8000a40:	2300      	movs	r3, #0
 8000a42:	653b      	str	r3, [r7, #80]	@ 0x50
  TxHeader.RTR   = CAN_RTR_DATA;
 8000a44:	2300      	movs	r3, #0
 8000a46:	657b      	str	r3, [r7, #84]	@ 0x54

  message[0] = crawl_mode ? 1 : 0;
 8000a48:	4b1e      	ldr	r3, [pc, #120]	@ (8000ac4 <CAN1_Tx+0x94>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	bf14      	ite	ne
 8000a52:	2301      	movne	r3, #1
 8000a54:	2300      	moveq	r3, #0
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
  message[1] = (motor_speed == -1) ? 255 : (uint8_t)motor_speed;
 8000a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac8 <CAN1_Tx+0x98>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a64:	d003      	beq.n	8000a6e <CAN1_Tx+0x3e>
 8000a66:	4b18      	ldr	r3, [pc, #96]	@ (8000ac8 <CAN1_Tx+0x98>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	e000      	b.n	8000a70 <CAN1_Tx+0x40>
 8000a6e:	23ff      	movs	r3, #255	@ 0xff
 8000a70:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41

  char dbg[64];
  sprintf(dbg, "Tx: crawl=%d, speed=%d\r\n", message[0], message[1]);
 8000a74:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000a78:	461a      	mov	r2, r3
 8000a7a:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8000a7e:	4638      	mov	r0, r7
 8000a80:	4912      	ldr	r1, [pc, #72]	@ (8000acc <CAN1_Tx+0x9c>)
 8000a82:	f003 fbbd 	bl	8004200 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)dbg, strlen(dbg), HAL_MAX_DELAY);
 8000a86:	463b      	mov	r3, r7
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fbc1 	bl	8000210 <strlen>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	4639      	mov	r1, r7
 8000a94:	f04f 33ff 	mov.w	r3, #4294967295
 8000a98:	480d      	ldr	r0, [pc, #52]	@ (8000ad0 <CAN1_Tx+0xa0>)
 8000a9a:	f002 fff5 	bl	8003a88 <HAL_UART_Transmit>

  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, message, &TxMailbox) != HAL_OK)
 8000a9e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000aa2:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8000aa6:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8000aaa:	480a      	ldr	r0, [pc, #40]	@ (8000ad4 <CAN1_Tx+0xa4>)
 8000aac:	f000 fe96 	bl	80017dc <HAL_CAN_AddTxMessage>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <CAN1_Tx+0x8a>
  {
    Error_Handler();
 8000ab6:	f000 f9c7 	bl	8000e48 <Error_Handler>
  }
}
 8000aba:	bf00      	nop
 8000abc:	3760      	adds	r7, #96	@ 0x60
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000164 	.word	0x20000164
 8000ac8:	20000144 	.word	0x20000144
 8000acc:	08004b48 	.word	0x08004b48
 8000ad0:	200000fc 	.word	0x200000fc
 8000ad4:	20000078 	.word	0x20000078

08000ad8 <CAN_Filter_Config>:
/**
  * @brief  Configures the CAN filter.
  * @retval None
  */
void CAN_Filter_Config(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	@ 0x28
 8000adc:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef can1_filter_init;

  can1_filter_init.FilterActivation = ENABLE;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	623b      	str	r3, [r7, #32]
  can1_filter_init.FilterBank  = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
  can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
  // xxx xxxx xxxx
  // 100 xxxx xxxx
  // Accept only 4XX
  // id 1000 = 0x8
  // mask 1110 = 0xE
  can1_filter_init.FilterIdHigh = 0x0000;
 8000aea:	2300      	movs	r3, #0
 8000aec:	603b      	str	r3, [r7, #0]
  can1_filter_init.FilterIdLow = 0x0000;
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
  can1_filter_init.FilterMaskIdHigh = 0X0000;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60bb      	str	r3, [r7, #8]
  can1_filter_init.FilterMaskIdLow = 0x0000;
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
  can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61bb      	str	r3, [r7, #24]
  can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 8000afe:	2301      	movs	r3, #1
 8000b00:	61fb      	str	r3, [r7, #28]

  if( HAL_CAN_ConfigFilter(&hcan1,&can1_filter_init) != HAL_OK)
 8000b02:	463b      	mov	r3, r7
 8000b04:	4619      	mov	r1, r3
 8000b06:	4806      	ldr	r0, [pc, #24]	@ (8000b20 <CAN_Filter_Config+0x48>)
 8000b08:	f000 fd46 	bl	8001598 <HAL_CAN_ConfigFilter>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <CAN_Filter_Config+0x3e>
  {
    Error_Handler();
 8000b12:	f000 f999 	bl	8000e48 <Error_Handler>
  }
}
 8000b16:	bf00      	nop
 8000b18:	3728      	adds	r7, #40	@ 0x28
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000078 	.word	0x20000078

08000b24 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b090      	sub	sp, #64	@ 0x40
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  char msg[50];
  sprintf(msg,"Message Transmitted:M0\r\n");
 8000b2c:	f107 030c 	add.w	r3, r7, #12
 8000b30:	490a      	ldr	r1, [pc, #40]	@ (8000b5c <HAL_CAN_TxMailbox0CompleteCallback+0x38>)
 8000b32:	4618      	mov	r0, r3
 8000b34:	f003 fb64 	bl	8004200 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000b38:	f107 030c 	add.w	r3, r7, #12
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff fb67 	bl	8000210 <strlen>
 8000b42:	4603      	mov	r3, r0
 8000b44:	b29a      	uxth	r2, r3
 8000b46:	f107 010c 	add.w	r1, r7, #12
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4e:	4804      	ldr	r0, [pc, #16]	@ (8000b60 <HAL_CAN_TxMailbox0CompleteCallback+0x3c>)
 8000b50:	f002 ff9a 	bl	8003a88 <HAL_UART_Transmit>
}
 8000b54:	bf00      	nop
 8000b56:	3740      	adds	r7, #64	@ 0x40
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	08004b64 	.word	0x08004b64
 8000b60:	200000fc 	.word	0x200000fc

08000b64 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b090      	sub	sp, #64	@ 0x40
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  char msg[50];
  sprintf(msg,"Message Transmitted:M1\r\n");
 8000b6c:	f107 030c 	add.w	r3, r7, #12
 8000b70:	490a      	ldr	r1, [pc, #40]	@ (8000b9c <HAL_CAN_TxMailbox1CompleteCallback+0x38>)
 8000b72:	4618      	mov	r0, r3
 8000b74:	f003 fb44 	bl	8004200 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000b78:	f107 030c 	add.w	r3, r7, #12
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff fb47 	bl	8000210 <strlen>
 8000b82:	4603      	mov	r3, r0
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	f107 010c 	add.w	r1, r7, #12
 8000b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8e:	4804      	ldr	r0, [pc, #16]	@ (8000ba0 <HAL_CAN_TxMailbox1CompleteCallback+0x3c>)
 8000b90:	f002 ff7a 	bl	8003a88 <HAL_UART_Transmit>
}
 8000b94:	bf00      	nop
 8000b96:	3740      	adds	r7, #64	@ 0x40
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	08004b80 	.word	0x08004b80
 8000ba0:	200000fc 	.word	0x200000fc

08000ba4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b090      	sub	sp, #64	@ 0x40
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  char msg[50];
  sprintf(msg,"Message Transmitted:M2\r\n");
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	490a      	ldr	r1, [pc, #40]	@ (8000bdc <HAL_CAN_TxMailbox2CompleteCallback+0x38>)
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f003 fb24 	bl	8004200 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000bb8:	f107 030c 	add.w	r3, r7, #12
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff fb27 	bl	8000210 <strlen>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	b29a      	uxth	r2, r3
 8000bc6:	f107 010c 	add.w	r1, r7, #12
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295
 8000bce:	4804      	ldr	r0, [pc, #16]	@ (8000be0 <HAL_CAN_TxMailbox2CompleteCallback+0x3c>)
 8000bd0:	f002 ff5a 	bl	8003a88 <HAL_UART_Transmit>
}
 8000bd4:	bf00      	nop
 8000bd6:	3740      	adds	r7, #64	@ 0x40
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	08004b9c 	.word	0x08004b9c
 8000be0:	200000fc 	.word	0x200000fc

08000be4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b094      	sub	sp, #80	@ 0x50
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	uint8_t rcvd_msg[8];
	char dbg_rx[64];
	sprintf(dbg_rx, "Rx: ID=0x%03lX, Data[0]=%d\r\n", RxHeader.StdId, rcvd_msg[0]);
 8000bec:	4b8a      	ldr	r3, [pc, #552]	@ (8000e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000bf4:	f107 0008 	add.w	r0, r7, #8
 8000bf8:	4988      	ldr	r1, [pc, #544]	@ (8000e1c <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8000bfa:	f003 fb01 	bl	8004200 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)dbg_rx, strlen(dbg_rx), HAL_MAX_DELAY);
 8000bfe:	f107 0308 	add.w	r3, r7, #8
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fb04 	bl	8000210 <strlen>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	f107 0108 	add.w	r1, r7, #8
 8000c10:	f04f 33ff 	mov.w	r3, #4294967295
 8000c14:	4882      	ldr	r0, [pc, #520]	@ (8000e20 <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 8000c16:	f002 ff37 	bl	8003a88 <HAL_UART_Transmit>

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, rcvd_msg) != HAL_OK)
 8000c1a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000c1e:	4a7e      	ldr	r2, [pc, #504]	@ (8000e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8000c20:	2100      	movs	r1, #0
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f000 feaa 	bl	800197c <HAL_CAN_GetRxMessage>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
    {
        Error_Handler();
 8000c2e:	f000 f90b 	bl	8000e48 <Error_Handler>
    }

    if (RxHeader.StdId >= 0x301 && RxHeader.StdId <= 0x306)
 8000c32:	4b79      	ldr	r3, [pc, #484]	@ (8000e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000c3a:	d908      	bls.n	8000c4e <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
 8000c3c:	4b76      	ldr	r3, [pc, #472]	@ (8000e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f240 3206 	movw	r2, #774	@ 0x306
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d802      	bhi.n	8000c4e <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
    {
        crawl_mode = 0;
 8000c48:	4b76      	ldr	r3, [pc, #472]	@ (8000e24 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
    }


    if (RxHeader.StdId == 0x301 && RxHeader.RTR == 0)
 8000c4e:	4b72      	ldr	r3, [pc, #456]	@ (8000e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f240 3201 	movw	r2, #769	@ 0x301
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d116      	bne.n	8000c88 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>
 8000c5a:	4b6f      	ldr	r3, [pc, #444]	@ (8000e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8000c5c:	68db      	ldr	r3, [r3, #12]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d112      	bne.n	8000c88 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>
    {   // STOP
        HAL_GPIO_WritePin(REVERSE_PORT, REVERSE_PIN, GPIO_PIN_SET); // ensure forward
 8000c62:	2201      	movs	r2, #1
 8000c64:	2120      	movs	r1, #32
 8000c66:	4870      	ldr	r0, [pc, #448]	@ (8000e28 <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 8000c68:	f001 fdae 	bl	80027c8 <HAL_GPIO_WritePin>
        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2100      	movs	r1, #0
 8000c72:	486e      	ldr	r0, [pc, #440]	@ (8000e2c <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8000c74:	f001 fb90 	bl	8002398 <HAL_DAC_SetValue>
        HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000c78:	2100      	movs	r1, #0
 8000c7a:	486c      	ldr	r0, [pc, #432]	@ (8000e2c <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8000c7c:	f001 fb35 	bl	80022ea <HAL_DAC_Start>
        motor_speed = 0;
 8000c80:	4b6b      	ldr	r3, [pc, #428]	@ (8000e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	e0c3      	b.n	8000e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>
    }
    else if (RxHeader.StdId == 0x302 && RxHeader.RTR == 0)
 8000c88:	4b63      	ldr	r3, [pc, #396]	@ (8000e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f240 3202 	movw	r2, #770	@ 0x302
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d117      	bne.n	8000cc4 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>
 8000c94:	4b60      	ldr	r3, [pc, #384]	@ (8000e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d113      	bne.n	8000cc4 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>
    {   // 10%
        HAL_GPIO_WritePin(REVERSE_PORT, REVERSE_PIN, GPIO_PIN_SET); // ensure forward
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	2120      	movs	r1, #32
 8000ca0:	4861      	ldr	r0, [pc, #388]	@ (8000e28 <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 8000ca2:	f001 fd91 	bl	80027c8 <HAL_GPIO_WritePin>
        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0.10 * DAC_MAX);
 8000ca6:	f240 1399 	movw	r3, #409	@ 0x199
 8000caa:	2200      	movs	r2, #0
 8000cac:	2100      	movs	r1, #0
 8000cae:	485f      	ldr	r0, [pc, #380]	@ (8000e2c <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8000cb0:	f001 fb72 	bl	8002398 <HAL_DAC_SetValue>
        HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	485d      	ldr	r0, [pc, #372]	@ (8000e2c <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8000cb8:	f001 fb17 	bl	80022ea <HAL_DAC_Start>
        motor_speed = 10;
 8000cbc:	4b5c      	ldr	r3, [pc, #368]	@ (8000e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 8000cbe:	220a      	movs	r2, #10
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	e0a5      	b.n	8000e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>
    }
    else if (RxHeader.StdId == 0x303 && RxHeader.RTR == 0)
 8000cc4:	4b54      	ldr	r3, [pc, #336]	@ (8000e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f240 3203 	movw	r2, #771	@ 0x303
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d117      	bne.n	8000d00 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>
 8000cd0:	4b51      	ldr	r3, [pc, #324]	@ (8000e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d113      	bne.n	8000d00 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>
    {   // 30%
        HAL_GPIO_WritePin(REVERSE_PORT, REVERSE_PIN, GPIO_PIN_SET); // ensure forward
 8000cd8:	2201      	movs	r2, #1
 8000cda:	2120      	movs	r1, #32
 8000cdc:	4852      	ldr	r0, [pc, #328]	@ (8000e28 <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 8000cde:	f001 fd73 	bl	80027c8 <HAL_GPIO_WritePin>
        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0.30 * DAC_MAX);
 8000ce2:	f240 43cc 	movw	r3, #1228	@ 0x4cc
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4850      	ldr	r0, [pc, #320]	@ (8000e2c <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8000cec:	f001 fb54 	bl	8002398 <HAL_DAC_SetValue>
        HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	484e      	ldr	r0, [pc, #312]	@ (8000e2c <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8000cf4:	f001 faf9 	bl	80022ea <HAL_DAC_Start>
        motor_speed = 30;
 8000cf8:	4b4d      	ldr	r3, [pc, #308]	@ (8000e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 8000cfa:	221e      	movs	r2, #30
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	e087      	b.n	8000e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>
    }
    else if (RxHeader.StdId == 0x304 && RxHeader.RTR == 0)
 8000d00:	4b45      	ldr	r3, [pc, #276]	@ (8000e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f5b3 7f41 	cmp.w	r3, #772	@ 0x304
 8000d08:	d117      	bne.n	8000d3a <HAL_CAN_RxFifo0MsgPendingCallback+0x156>
 8000d0a:	4b43      	ldr	r3, [pc, #268]	@ (8000e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8000d0c:	68db      	ldr	r3, [r3, #12]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d113      	bne.n	8000d3a <HAL_CAN_RxFifo0MsgPendingCallback+0x156>
    {   // 50%
        HAL_GPIO_WritePin(REVERSE_PORT, REVERSE_PIN, GPIO_PIN_SET); // ensure forward
 8000d12:	2201      	movs	r2, #1
 8000d14:	2120      	movs	r1, #32
 8000d16:	4844      	ldr	r0, [pc, #272]	@ (8000e28 <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 8000d18:	f001 fd56 	bl	80027c8 <HAL_GPIO_WritePin>
        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0.50 * DAC_MAX);
 8000d1c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000d20:	2200      	movs	r2, #0
 8000d22:	2100      	movs	r1, #0
 8000d24:	4841      	ldr	r0, [pc, #260]	@ (8000e2c <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8000d26:	f001 fb37 	bl	8002398 <HAL_DAC_SetValue>
        HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	483f      	ldr	r0, [pc, #252]	@ (8000e2c <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8000d2e:	f001 fadc 	bl	80022ea <HAL_DAC_Start>
        motor_speed = 50;
 8000d32:	4b3f      	ldr	r3, [pc, #252]	@ (8000e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 8000d34:	2232      	movs	r2, #50	@ 0x32
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	e06a      	b.n	8000e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>
    }
    else if (RxHeader.StdId == 0x305 && RxHeader.RTR == 0)
 8000d3a:	4b37      	ldr	r3, [pc, #220]	@ (8000e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f240 3205 	movw	r2, #773	@ 0x305
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d117      	bne.n	8000d76 <HAL_CAN_RxFifo0MsgPendingCallback+0x192>
 8000d46:	4b34      	ldr	r3, [pc, #208]	@ (8000e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8000d48:	68db      	ldr	r3, [r3, #12]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d113      	bne.n	8000d76 <HAL_CAN_RxFifo0MsgPendingCallback+0x192>
    {   // 70%
        HAL_GPIO_WritePin(REVERSE_PORT, REVERSE_PIN, GPIO_PIN_SET); // ensure forward
 8000d4e:	2201      	movs	r2, #1
 8000d50:	2120      	movs	r1, #32
 8000d52:	4835      	ldr	r0, [pc, #212]	@ (8000e28 <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 8000d54:	f001 fd38 	bl	80027c8 <HAL_GPIO_WritePin>
        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0.70 * DAC_MAX);
 8000d58:	f640 3332 	movw	r3, #2866	@ 0xb32
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4832      	ldr	r0, [pc, #200]	@ (8000e2c <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8000d62:	f001 fb19 	bl	8002398 <HAL_DAC_SetValue>
        HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000d66:	2100      	movs	r1, #0
 8000d68:	4830      	ldr	r0, [pc, #192]	@ (8000e2c <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8000d6a:	f001 fabe 	bl	80022ea <HAL_DAC_Start>
        motor_speed = 70;
 8000d6e:	4b30      	ldr	r3, [pc, #192]	@ (8000e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 8000d70:	2246      	movs	r2, #70	@ 0x46
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	e04c      	b.n	8000e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>
    }
    else if (RxHeader.StdId == 0x306 && RxHeader.RTR == 0)
 8000d76:	4b28      	ldr	r3, [pc, #160]	@ (8000e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f240 3206 	movw	r2, #774	@ 0x306
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d117      	bne.n	8000db2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ce>
 8000d82:	4b25      	ldr	r3, [pc, #148]	@ (8000e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d113      	bne.n	8000db2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ce>
    {   // 100%
        HAL_GPIO_WritePin(REVERSE_PORT, REVERSE_PIN, GPIO_PIN_SET); // ensure forward
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	2120      	movs	r1, #32
 8000d8e:	4826      	ldr	r0, [pc, #152]	@ (8000e28 <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 8000d90:	f001 fd1a 	bl	80027c8 <HAL_GPIO_WritePin>
        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_MAX);
 8000d94:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4823      	ldr	r0, [pc, #140]	@ (8000e2c <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8000d9e:	f001 fafb 	bl	8002398 <HAL_DAC_SetValue>
        HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000da2:	2100      	movs	r1, #0
 8000da4:	4821      	ldr	r0, [pc, #132]	@ (8000e2c <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8000da6:	f001 faa0 	bl	80022ea <HAL_DAC_Start>
        motor_speed = 100;
 8000daa:	4b21      	ldr	r3, [pc, #132]	@ (8000e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 8000dac:	2264      	movs	r2, #100	@ 0x64
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	e02e      	b.n	8000e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>
    }
    else if (RxHeader.StdId == 0x3FF && RxHeader.RTR == 0)
 8000db2:	4b19      	ldr	r3, [pc, #100]	@ (8000e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d10d      	bne.n	8000dda <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>
 8000dbe:	4b16      	ldr	r3, [pc, #88]	@ (8000e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d109      	bne.n	8000dda <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>
    {   // Reverse ON
        HAL_GPIO_WritePin(REVERSE_PORT, REVERSE_PIN, GPIO_PIN_RESET); // LOW = reverse
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2120      	movs	r1, #32
 8000dca:	4817      	ldr	r0, [pc, #92]	@ (8000e28 <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 8000dcc:	f001 fcfc 	bl	80027c8 <HAL_GPIO_WritePin>
        motor_speed = -1;
 8000dd0:	4b17      	ldr	r3, [pc, #92]	@ (8000e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 8000dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	e01a      	b.n	8000e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>
//		Redundant
//    else if (RxHeader.StdId == 0x321 && RxHeader.RTR == 0)
//    {   // Reverse OFF
//        HAL_GPIO_WritePin(REVERSE_PORT, REVERSE_PIN, GPIO_PIN_SET); // HIGH = forward
//    }
    else if (RxHeader.StdId == 0x310 && RxHeader.RTR == 0)
 8000dda:	4b0f      	ldr	r3, [pc, #60]	@ (8000e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f5b3 7f44 	cmp.w	r3, #784	@ 0x310
 8000de2:	d115      	bne.n	8000e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>
 8000de4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d111      	bne.n	8000e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>
    {   // Enable crawl
        crawl_mode = 1;
 8000dec:	4b0d      	ldr	r3, [pc, #52]	@ (8000e24 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	701a      	strb	r2, [r3, #0]
        motor_speed = 20;  // example crawl speed
 8000df2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 8000df4:	2214      	movs	r2, #20
 8000df6:	601a      	str	r2, [r3, #0]
        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0.20 * DAC_MAX);
 8000df8:	f240 3333 	movw	r3, #819	@ 0x333
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2100      	movs	r1, #0
 8000e00:	480a      	ldr	r0, [pc, #40]	@ (8000e2c <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8000e02:	f001 fac9 	bl	8002398 <HAL_DAC_SetValue>
        HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000e06:	2100      	movs	r1, #0
 8000e08:	4808      	ldr	r0, [pc, #32]	@ (8000e2c <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8000e0a:	f001 fa6e 	bl	80022ea <HAL_DAC_Start>
    }
//    else if (RxHeader.StdId >= 0x301 && RxHeader.StdId <= 0x306)
//    {
//        crawl_mode = 0;  // exit crawl if another speed is commanded
//    }
}
 8000e0e:	e7ff      	b.n	8000e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>
 8000e10:	bf00      	nop
 8000e12:	3750      	adds	r7, #80	@ 0x50
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000148 	.word	0x20000148
 8000e1c:	08004bb8 	.word	0x08004bb8
 8000e20:	200000fc 	.word	0x200000fc
 8000e24:	20000164 	.word	0x20000164
 8000e28:	40020000 	.word	0x40020000
 8000e2c:	200000a0 	.word	0x200000a0
 8000e30:	20000144 	.word	0x20000144

08000e34 <HAL_TIM_PeriodElapsedCallback>:
  * We will send the heartbeat signal from this function
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{ // broadcasts heartbeat signal
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  CAN1_Tx();
 8000e3c:	f7ff fdf8 	bl	8000a30 <CAN1_Tx>
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e4c:	b672      	cpsid	i
}
 8000e4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e50:	bf00      	nop
 8000e52:	e7fd      	b.n	8000e50 <Error_Handler+0x8>

08000e54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ea0 <HAL_MspInit+0x4c>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e62:	4a0f      	ldr	r2, [pc, #60]	@ (8000ea0 <HAL_MspInit+0x4c>)
 8000e64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea0 <HAL_MspInit+0x4c>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	603b      	str	r3, [r7, #0]
 8000e7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ea0 <HAL_MspInit+0x4c>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7e:	4a08      	ldr	r2, [pc, #32]	@ (8000ea0 <HAL_MspInit+0x4c>)
 8000e80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e86:	4b06      	ldr	r3, [pc, #24]	@ (8000ea0 <HAL_MspInit+0x4c>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e8e:	603b      	str	r3, [r7, #0]
 8000e90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e92:	2007      	movs	r0, #7
 8000e94:	f001 f99c 	bl	80021d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40023800 	.word	0x40023800

08000ea4 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	@ 0x28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a29      	ldr	r2, [pc, #164]	@ (8000f68 <HAL_CAN_MspInit+0xc4>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d14c      	bne.n	8000f60 <HAL_CAN_MspInit+0xbc>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
 8000eca:	4b28      	ldr	r3, [pc, #160]	@ (8000f6c <HAL_CAN_MspInit+0xc8>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ece:	4a27      	ldr	r2, [pc, #156]	@ (8000f6c <HAL_CAN_MspInit+0xc8>)
 8000ed0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ed4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ed6:	4b25      	ldr	r3, [pc, #148]	@ (8000f6c <HAL_CAN_MspInit+0xc8>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	4b21      	ldr	r3, [pc, #132]	@ (8000f6c <HAL_CAN_MspInit+0xc8>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	4a20      	ldr	r2, [pc, #128]	@ (8000f6c <HAL_CAN_MspInit+0xc8>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f6c <HAL_CAN_MspInit+0xc8>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000efe:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000f02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f10:	2309      	movs	r3, #9
 8000f12:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4815      	ldr	r0, [pc, #84]	@ (8000f70 <HAL_CAN_MspInit+0xcc>)
 8000f1c:	f001 fac0 	bl	80024a0 <HAL_GPIO_Init>

    /* USER CODE BEGIN CAN1_MspInit 1 */
      HAL_NVIC_SetPriority(CAN1_TX_IRQn,15,0);
 8000f20:	2200      	movs	r2, #0
 8000f22:	210f      	movs	r1, #15
 8000f24:	2013      	movs	r0, #19
 8000f26:	f001 f95e 	bl	80021e6 <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(CAN1_RX0_IRQn,15,0);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	210f      	movs	r1, #15
 8000f2e:	2014      	movs	r0, #20
 8000f30:	f001 f959 	bl	80021e6 <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(CAN1_RX1_IRQn,15,0);
 8000f34:	2200      	movs	r2, #0
 8000f36:	210f      	movs	r1, #15
 8000f38:	2015      	movs	r0, #21
 8000f3a:	f001 f954 	bl	80021e6 <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(CAN1_SCE_IRQn,15,0);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	210f      	movs	r1, #15
 8000f42:	2016      	movs	r0, #22
 8000f44:	f001 f94f 	bl	80021e6 <HAL_NVIC_SetPriority>

	  HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000f48:	2013      	movs	r0, #19
 8000f4a:	f001 f968 	bl	800221e <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000f4e:	2014      	movs	r0, #20
 8000f50:	f001 f965 	bl	800221e <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000f54:	2015      	movs	r0, #21
 8000f56:	f001 f962 	bl	800221e <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000f5a:	2016      	movs	r0, #22
 8000f5c:	f001 f95f 	bl	800221e <HAL_NVIC_EnableIRQ>
    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000f60:	bf00      	nop
 8000f62:	3728      	adds	r7, #40	@ 0x28
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40006400 	.word	0x40006400
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40020000 	.word	0x40020000

08000f74 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	@ 0x28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a17      	ldr	r2, [pc, #92]	@ (8000ff0 <HAL_DAC_MspInit+0x7c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d127      	bne.n	8000fe6 <HAL_DAC_MspInit+0x72>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	4b16      	ldr	r3, [pc, #88]	@ (8000ff4 <HAL_DAC_MspInit+0x80>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9e:	4a15      	ldr	r2, [pc, #84]	@ (8000ff4 <HAL_DAC_MspInit+0x80>)
 8000fa0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000fa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fa6:	4b13      	ldr	r3, [pc, #76]	@ (8000ff4 <HAL_DAC_MspInit+0x80>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000faa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff4 <HAL_DAC_MspInit+0x80>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	4a0e      	ldr	r2, [pc, #56]	@ (8000ff4 <HAL_DAC_MspInit+0x80>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <HAL_DAC_MspInit+0x80>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000fce:	2330      	movs	r3, #48	@ 0x30
 8000fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4805      	ldr	r0, [pc, #20]	@ (8000ff8 <HAL_DAC_MspInit+0x84>)
 8000fe2:	f001 fa5d 	bl	80024a0 <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8000fe6:	bf00      	nop
 8000fe8:	3728      	adds	r7, #40	@ 0x28
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40007400 	.word	0x40007400
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40020000 	.word	0x40020000

08000ffc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a0e      	ldr	r2, [pc, #56]	@ (8001044 <HAL_TIM_Base_MspInit+0x48>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d115      	bne.n	800103a <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	4b0d      	ldr	r3, [pc, #52]	@ (8001048 <HAL_TIM_Base_MspInit+0x4c>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001016:	4a0c      	ldr	r2, [pc, #48]	@ (8001048 <HAL_TIM_Base_MspInit+0x4c>)
 8001018:	f043 0310 	orr.w	r3, r3, #16
 800101c:	6413      	str	r3, [r2, #64]	@ 0x40
 800101e:	4b0a      	ldr	r3, [pc, #40]	@ (8001048 <HAL_TIM_Base_MspInit+0x4c>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001022:	f003 0310 	and.w	r3, r3, #16
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM6_MspInit 1 */
    //1. enable the clock for the TIM6 peripheral
    //2. Enable the IRQ of TIM6
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800102a:	2036      	movs	r0, #54	@ 0x36
 800102c:	f001 f8f7 	bl	800221e <HAL_NVIC_EnableIRQ>

    //3. setup the priority for TIM6_DAC_IRQn
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn,15,0);
 8001030:	2200      	movs	r2, #0
 8001032:	210f      	movs	r1, #15
 8001034:	2036      	movs	r0, #54	@ 0x36
 8001036:	f001 f8d6 	bl	80021e6 <HAL_NVIC_SetPriority>
    /* USER CODE END TIM6_MspInit 1 */

  }

}
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40001000 	.word	0x40001000
 8001048:	40023800 	.word	0x40023800

0800104c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08a      	sub	sp, #40	@ 0x28
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a19      	ldr	r2, [pc, #100]	@ (80010d0 <HAL_UART_MspInit+0x84>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d12b      	bne.n	80010c6 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	4b18      	ldr	r3, [pc, #96]	@ (80010d4 <HAL_UART_MspInit+0x88>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001076:	4a17      	ldr	r2, [pc, #92]	@ (80010d4 <HAL_UART_MspInit+0x88>)
 8001078:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800107c:	6413      	str	r3, [r2, #64]	@ 0x40
 800107e:	4b15      	ldr	r3, [pc, #84]	@ (80010d4 <HAL_UART_MspInit+0x88>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	4b11      	ldr	r3, [pc, #68]	@ (80010d4 <HAL_UART_MspInit+0x88>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	4a10      	ldr	r2, [pc, #64]	@ (80010d4 <HAL_UART_MspInit+0x88>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6313      	str	r3, [r2, #48]	@ 0x30
 800109a:	4b0e      	ldr	r3, [pc, #56]	@ (80010d4 <HAL_UART_MspInit+0x88>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010a6:	230c      	movs	r3, #12
 80010a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	2302      	movs	r3, #2
 80010ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b2:	2303      	movs	r3, #3
 80010b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010b6:	2307      	movs	r3, #7
 80010b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	4619      	mov	r1, r3
 80010c0:	4805      	ldr	r0, [pc, #20]	@ (80010d8 <HAL_UART_MspInit+0x8c>)
 80010c2:	f001 f9ed 	bl	80024a0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80010c6:	bf00      	nop
 80010c8:	3728      	adds	r7, #40	@ 0x28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40004400 	.word	0x40004400
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40020000 	.word	0x40020000

080010dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010e0:	bf00      	nop
 80010e2:	e7fd      	b.n	80010e0 <NMI_Handler+0x4>

080010e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e8:	bf00      	nop
 80010ea:	e7fd      	b.n	80010e8 <HardFault_Handler+0x4>

080010ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f0:	bf00      	nop
 80010f2:	e7fd      	b.n	80010f0 <MemManage_Handler+0x4>

080010f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f8:	bf00      	nop
 80010fa:	e7fd      	b.n	80010f8 <BusFault_Handler+0x4>

080010fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001100:	bf00      	nop
 8001102:	e7fd      	b.n	8001100 <UsageFault_Handler+0x4>

08001104 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001132:	f000 f8f1 	bl	8001318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8001136:	f001 f8a9 	bl	800228c <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <CAN1_TX_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
  * @brief This function handles CAN_TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8001144:	4802      	ldr	r0, [pc, #8]	@ (8001150 <CAN1_TX_IRQHandler+0x10>)
 8001146:	f000 fd61 	bl	8001c0c <HAL_CAN_IRQHandler>
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000078 	.word	0x20000078

08001154 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN_RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8001158:	4802      	ldr	r0, [pc, #8]	@ (8001164 <CAN1_RX0_IRQHandler+0x10>)
 800115a:	f000 fd57 	bl	8001c0c <HAL_CAN_IRQHandler>
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000078 	.word	0x20000078

08001168 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 800116c:	4802      	ldr	r0, [pc, #8]	@ (8001178 <CAN1_SCE_IRQHandler+0x10>)
 800116e:	f000 fd4d 	bl	8001c0c <HAL_CAN_IRQHandler>
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000078 	.word	0x20000078

0800117c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim6);
 8001180:	4802      	ldr	r0, [pc, #8]	@ (800118c <TIM6_DAC_IRQHandler+0x10>)
 8001182:	f002 f9e3 	bl	800354c <HAL_TIM_IRQHandler>
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	200000b4 	.word	0x200000b4

08001190 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001198:	4a14      	ldr	r2, [pc, #80]	@ (80011ec <_sbrk+0x5c>)
 800119a:	4b15      	ldr	r3, [pc, #84]	@ (80011f0 <_sbrk+0x60>)
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011a4:	4b13      	ldr	r3, [pc, #76]	@ (80011f4 <_sbrk+0x64>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d102      	bne.n	80011b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011ac:	4b11      	ldr	r3, [pc, #68]	@ (80011f4 <_sbrk+0x64>)
 80011ae:	4a12      	ldr	r2, [pc, #72]	@ (80011f8 <_sbrk+0x68>)
 80011b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011b2:	4b10      	ldr	r3, [pc, #64]	@ (80011f4 <_sbrk+0x64>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d207      	bcs.n	80011d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011c0:	f003 f840 	bl	8004244 <__errno>
 80011c4:	4603      	mov	r3, r0
 80011c6:	220c      	movs	r2, #12
 80011c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ca:	f04f 33ff 	mov.w	r3, #4294967295
 80011ce:	e009      	b.n	80011e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011d0:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <_sbrk+0x64>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011d6:	4b07      	ldr	r3, [pc, #28]	@ (80011f4 <_sbrk+0x64>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4413      	add	r3, r2
 80011de:	4a05      	ldr	r2, [pc, #20]	@ (80011f4 <_sbrk+0x64>)
 80011e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011e2:	68fb      	ldr	r3, [r7, #12]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20020000 	.word	0x20020000
 80011f0:	00000400 	.word	0x00000400
 80011f4:	20000168 	.word	0x20000168
 80011f8:	200002b8 	.word	0x200002b8

080011fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001200:	4b06      	ldr	r3, [pc, #24]	@ (800121c <SystemInit+0x20>)
 8001202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001206:	4a05      	ldr	r2, [pc, #20]	@ (800121c <SystemInit+0x20>)
 8001208:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800120c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001220:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001258 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001224:	f7ff ffea 	bl	80011fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001228:	480c      	ldr	r0, [pc, #48]	@ (800125c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800122a:	490d      	ldr	r1, [pc, #52]	@ (8001260 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800122c:	4a0d      	ldr	r2, [pc, #52]	@ (8001264 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800122e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001230:	e002      	b.n	8001238 <LoopCopyDataInit>

08001232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001236:	3304      	adds	r3, #4

08001238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800123a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800123c:	d3f9      	bcc.n	8001232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800123e:	4a0a      	ldr	r2, [pc, #40]	@ (8001268 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001240:	4c0a      	ldr	r4, [pc, #40]	@ (800126c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001244:	e001      	b.n	800124a <LoopFillZerobss>

08001246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001248:	3204      	adds	r2, #4

0800124a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800124a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800124c:	d3fb      	bcc.n	8001246 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800124e:	f002 ffff 	bl	8004250 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001252:	f7ff f9cb 	bl	80005ec <main>
  bx  lr    
 8001256:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001258:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800125c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001260:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001264:	08004c34 	.word	0x08004c34
  ldr r2, =_sbss
 8001268:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800126c:	200002b8 	.word	0x200002b8

08001270 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001270:	e7fe      	b.n	8001270 <ADC_IRQHandler>
	...

08001274 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001278:	4b0e      	ldr	r3, [pc, #56]	@ (80012b4 <HAL_Init+0x40>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a0d      	ldr	r2, [pc, #52]	@ (80012b4 <HAL_Init+0x40>)
 800127e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001282:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001284:	4b0b      	ldr	r3, [pc, #44]	@ (80012b4 <HAL_Init+0x40>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a0a      	ldr	r2, [pc, #40]	@ (80012b4 <HAL_Init+0x40>)
 800128a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800128e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001290:	4b08      	ldr	r3, [pc, #32]	@ (80012b4 <HAL_Init+0x40>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a07      	ldr	r2, [pc, #28]	@ (80012b4 <HAL_Init+0x40>)
 8001296:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800129a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800129c:	2003      	movs	r0, #3
 800129e:	f000 ff97 	bl	80021d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012a2:	2000      	movs	r0, #0
 80012a4:	f000 f808 	bl	80012b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012a8:	f7ff fdd4 	bl	8000e54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40023c00 	.word	0x40023c00

080012b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012c0:	4b12      	ldr	r3, [pc, #72]	@ (800130c <HAL_InitTick+0x54>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4b12      	ldr	r3, [pc, #72]	@ (8001310 <HAL_InitTick+0x58>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	4619      	mov	r1, r3
 80012ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80012d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 ffaf 	bl	800223a <HAL_SYSTICK_Config>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e00e      	b.n	8001304 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b0f      	cmp	r3, #15
 80012ea:	d80a      	bhi.n	8001302 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ec:	2200      	movs	r2, #0
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	f04f 30ff 	mov.w	r0, #4294967295
 80012f4:	f000 ff77 	bl	80021e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f8:	4a06      	ldr	r2, [pc, #24]	@ (8001314 <HAL_InitTick+0x5c>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012fe:	2300      	movs	r3, #0
 8001300:	e000      	b.n	8001304 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
}
 8001304:	4618      	mov	r0, r3
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000000 	.word	0x20000000
 8001310:	20000008 	.word	0x20000008
 8001314:	20000004 	.word	0x20000004

08001318 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800131c:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <HAL_IncTick+0x20>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	461a      	mov	r2, r3
 8001322:	4b06      	ldr	r3, [pc, #24]	@ (800133c <HAL_IncTick+0x24>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4413      	add	r3, r2
 8001328:	4a04      	ldr	r2, [pc, #16]	@ (800133c <HAL_IncTick+0x24>)
 800132a:	6013      	str	r3, [r2, #0]
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	20000008 	.word	0x20000008
 800133c:	2000016c 	.word	0x2000016c

08001340 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return uwTick;
 8001344:	4b03      	ldr	r3, [pc, #12]	@ (8001354 <HAL_GetTick+0x14>)
 8001346:	681b      	ldr	r3, [r3, #0]
}
 8001348:	4618      	mov	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	2000016c 	.word	0x2000016c

08001358 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001360:	f7ff ffee 	bl	8001340 <HAL_GetTick>
 8001364:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001370:	d005      	beq.n	800137e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001372:	4b0a      	ldr	r3, [pc, #40]	@ (800139c <HAL_Delay+0x44>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	461a      	mov	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4413      	add	r3, r2
 800137c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800137e:	bf00      	nop
 8001380:	f7ff ffde 	bl	8001340 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	429a      	cmp	r2, r3
 800138e:	d8f7      	bhi.n	8001380 <HAL_Delay+0x28>
  {
  }
}
 8001390:	bf00      	nop
 8001392:	bf00      	nop
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000008 	.word	0x20000008

080013a0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e0ed      	b.n	800158e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d102      	bne.n	80013c4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff fd70 	bl	8000ea4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f042 0201 	orr.w	r2, r2, #1
 80013d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013d4:	f7ff ffb4 	bl	8001340 <HAL_GetTick>
 80013d8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013da:	e012      	b.n	8001402 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013dc:	f7ff ffb0 	bl	8001340 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b0a      	cmp	r3, #10
 80013e8:	d90b      	bls.n	8001402 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ee:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2205      	movs	r2, #5
 80013fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e0c5      	b.n	800158e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	2b00      	cmp	r3, #0
 800140e:	d0e5      	beq.n	80013dc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f022 0202 	bic.w	r2, r2, #2
 800141e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001420:	f7ff ff8e 	bl	8001340 <HAL_GetTick>
 8001424:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001426:	e012      	b.n	800144e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001428:	f7ff ff8a 	bl	8001340 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b0a      	cmp	r3, #10
 8001434:	d90b      	bls.n	800144e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800143a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2205      	movs	r2, #5
 8001446:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e09f      	b.n	800158e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1e5      	bne.n	8001428 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	7e1b      	ldrb	r3, [r3, #24]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d108      	bne.n	8001476 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	e007      	b.n	8001486 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001484:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	7e5b      	ldrb	r3, [r3, #25]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d108      	bne.n	80014a0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	e007      	b.n	80014b0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80014ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	7e9b      	ldrb	r3, [r3, #26]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d108      	bne.n	80014ca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f042 0220 	orr.w	r2, r2, #32
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	e007      	b.n	80014da <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 0220 	bic.w	r2, r2, #32
 80014d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	7edb      	ldrb	r3, [r3, #27]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d108      	bne.n	80014f4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f022 0210 	bic.w	r2, r2, #16
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	e007      	b.n	8001504 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f042 0210 	orr.w	r2, r2, #16
 8001502:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	7f1b      	ldrb	r3, [r3, #28]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d108      	bne.n	800151e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f042 0208 	orr.w	r2, r2, #8
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	e007      	b.n	800152e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f022 0208 	bic.w	r2, r2, #8
 800152c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	7f5b      	ldrb	r3, [r3, #29]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d108      	bne.n	8001548 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f042 0204 	orr.w	r2, r2, #4
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	e007      	b.n	8001558 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0204 	bic.w	r2, r2, #4
 8001556:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689a      	ldr	r2, [r3, #8]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	431a      	orrs	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	431a      	orrs	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	695b      	ldr	r3, [r3, #20]
 800156c:	ea42 0103 	orr.w	r1, r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	1e5a      	subs	r2, r3, #1
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	430a      	orrs	r2, r1
 800157c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001598:	b480      	push	{r7}
 800159a:	b087      	sub	sp, #28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015a8:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 80015aa:	7dfb      	ldrb	r3, [r7, #23]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d003      	beq.n	80015b8 <HAL_CAN_ConfigFilter+0x20>
 80015b0:	7dfb      	ldrb	r3, [r7, #23]
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	f040 80be 	bne.w	8001734 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80015b8:	4b65      	ldr	r3, [pc, #404]	@ (8001750 <HAL_CAN_ConfigFilter+0x1b8>)
 80015ba:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80015c2:	f043 0201 	orr.w	r2, r3, #1
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80015d2:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e6:	021b      	lsls	r3, r3, #8
 80015e8:	431a      	orrs	r2, r3
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	f003 031f 	and.w	r3, r3, #31
 80015f8:	2201      	movs	r2, #1
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	43db      	mvns	r3, r3
 800160a:	401a      	ands	r2, r3
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d123      	bne.n	8001662 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	43db      	mvns	r3, r3
 8001624:	401a      	ands	r2, r3
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800163c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	3248      	adds	r2, #72	@ 0x48
 8001642:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001656:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001658:	6939      	ldr	r1, [r7, #16]
 800165a:	3348      	adds	r3, #72	@ 0x48
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	440b      	add	r3, r1
 8001660:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d122      	bne.n	80016b0 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	431a      	orrs	r2, r3
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800168a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	3248      	adds	r2, #72	@ 0x48
 8001690:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016a4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016a6:	6939      	ldr	r1, [r7, #16]
 80016a8:	3348      	adds	r3, #72	@ 0x48
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	440b      	add	r3, r1
 80016ae:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d109      	bne.n	80016cc <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	401a      	ands	r2, r3
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80016ca:	e007      	b.n	80016dc <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	431a      	orrs	r2, r3
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d109      	bne.n	80016f8 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	401a      	ands	r2, r3
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80016f6:	e007      	b.n	8001708 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	431a      	orrs	r2, r3
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d107      	bne.n	8001720 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	431a      	orrs	r2, r3
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001726:	f023 0201 	bic.w	r2, r3, #1
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001730:	2300      	movs	r3, #0
 8001732:	e006      	b.n	8001742 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001738:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
  }
}
 8001742:	4618      	mov	r0, r3
 8001744:	371c      	adds	r7, #28
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40006400 	.word	0x40006400

08001754 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001762:	b2db      	uxtb	r3, r3
 8001764:	2b01      	cmp	r3, #1
 8001766:	d12e      	bne.n	80017c6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2202      	movs	r2, #2
 800176c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 0201 	bic.w	r2, r2, #1
 800177e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001780:	f7ff fdde 	bl	8001340 <HAL_GetTick>
 8001784:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001786:	e012      	b.n	80017ae <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001788:	f7ff fdda 	bl	8001340 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b0a      	cmp	r3, #10
 8001794:	d90b      	bls.n	80017ae <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800179a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2205      	movs	r2, #5
 80017a6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e012      	b.n	80017d4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1e5      	bne.n	8001788 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	e006      	b.n	80017d4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ca:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
  }
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80017dc:	b480      	push	{r7}
 80017de:	b089      	sub	sp, #36	@ 0x24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
 80017e8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017f0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80017fa:	7ffb      	ldrb	r3, [r7, #31]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d003      	beq.n	8001808 <HAL_CAN_AddTxMessage+0x2c>
 8001800:	7ffb      	ldrb	r3, [r7, #31]
 8001802:	2b02      	cmp	r3, #2
 8001804:	f040 80ad 	bne.w	8001962 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d10a      	bne.n	8001828 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001818:	2b00      	cmp	r3, #0
 800181a:	d105      	bne.n	8001828 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001822:	2b00      	cmp	r3, #0
 8001824:	f000 8095 	beq.w	8001952 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	0e1b      	lsrs	r3, r3, #24
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001832:	2201      	movs	r2, #1
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	409a      	lsls	r2, r3
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d10d      	bne.n	8001860 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800184e:	68f9      	ldr	r1, [r7, #12]
 8001850:	6809      	ldr	r1, [r1, #0]
 8001852:	431a      	orrs	r2, r3
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	3318      	adds	r3, #24
 8001858:	011b      	lsls	r3, r3, #4
 800185a:	440b      	add	r3, r1
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	e00f      	b.n	8001880 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800186a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001870:	68f9      	ldr	r1, [r7, #12]
 8001872:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001874:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	3318      	adds	r3, #24
 800187a:	011b      	lsls	r3, r3, #4
 800187c:	440b      	add	r3, r1
 800187e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6819      	ldr	r1, [r3, #0]
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	691a      	ldr	r2, [r3, #16]
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	3318      	adds	r3, #24
 800188c:	011b      	lsls	r3, r3, #4
 800188e:	440b      	add	r3, r1
 8001890:	3304      	adds	r3, #4
 8001892:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	7d1b      	ldrb	r3, [r3, #20]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d111      	bne.n	80018c0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	3318      	adds	r3, #24
 80018a4:	011b      	lsls	r3, r3, #4
 80018a6:	4413      	add	r3, r2
 80018a8:	3304      	adds	r3, #4
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68fa      	ldr	r2, [r7, #12]
 80018ae:	6811      	ldr	r1, [r2, #0]
 80018b0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	3318      	adds	r3, #24
 80018b8:	011b      	lsls	r3, r3, #4
 80018ba:	440b      	add	r3, r1
 80018bc:	3304      	adds	r3, #4
 80018be:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3307      	adds	r3, #7
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	061a      	lsls	r2, r3, #24
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3306      	adds	r3, #6
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	041b      	lsls	r3, r3, #16
 80018d0:	431a      	orrs	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3305      	adds	r3, #5
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	021b      	lsls	r3, r3, #8
 80018da:	4313      	orrs	r3, r2
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	3204      	adds	r2, #4
 80018e0:	7812      	ldrb	r2, [r2, #0]
 80018e2:	4610      	mov	r0, r2
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	6811      	ldr	r1, [r2, #0]
 80018e8:	ea43 0200 	orr.w	r2, r3, r0
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	011b      	lsls	r3, r3, #4
 80018f0:	440b      	add	r3, r1
 80018f2:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80018f6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3303      	adds	r3, #3
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	061a      	lsls	r2, r3, #24
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3302      	adds	r3, #2
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	041b      	lsls	r3, r3, #16
 8001908:	431a      	orrs	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	3301      	adds	r3, #1
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	021b      	lsls	r3, r3, #8
 8001912:	4313      	orrs	r3, r2
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	7812      	ldrb	r2, [r2, #0]
 8001918:	4610      	mov	r0, r2
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	6811      	ldr	r1, [r2, #0]
 800191e:	ea43 0200 	orr.w	r2, r3, r0
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	011b      	lsls	r3, r3, #4
 8001926:	440b      	add	r3, r1
 8001928:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800192c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	3318      	adds	r3, #24
 8001936:	011b      	lsls	r3, r3, #4
 8001938:	4413      	add	r3, r2
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	6811      	ldr	r1, [r2, #0]
 8001940:	f043 0201 	orr.w	r2, r3, #1
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	3318      	adds	r3, #24
 8001948:	011b      	lsls	r3, r3, #4
 800194a:	440b      	add	r3, r1
 800194c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800194e:	2300      	movs	r3, #0
 8001950:	e00e      	b.n	8001970 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001956:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e006      	b.n	8001970 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001966:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
  }
}
 8001970:	4618      	mov	r0, r3
 8001972:	3724      	adds	r7, #36	@ 0x24
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800197c:	b480      	push	{r7}
 800197e:	b087      	sub	sp, #28
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
 8001988:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001990:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001992:	7dfb      	ldrb	r3, [r7, #23]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d003      	beq.n	80019a0 <HAL_CAN_GetRxMessage+0x24>
 8001998:	7dfb      	ldrb	r3, [r7, #23]
 800199a:	2b02      	cmp	r3, #2
 800199c:	f040 8103 	bne.w	8001ba6 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d10e      	bne.n	80019c4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d116      	bne.n	80019e2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e0f7      	b.n	8001bb4 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	f003 0303 	and.w	r3, r3, #3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d107      	bne.n	80019e2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e0e8      	b.n	8001bb4 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	331b      	adds	r3, #27
 80019ea:	011b      	lsls	r3, r3, #4
 80019ec:	4413      	add	r3, r2
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0204 	and.w	r2, r3, #4
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d10c      	bne.n	8001a1a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	331b      	adds	r3, #27
 8001a08:	011b      	lsls	r3, r3, #4
 8001a0a:	4413      	add	r3, r2
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	0d5b      	lsrs	r3, r3, #21
 8001a10:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	e00b      	b.n	8001a32 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	331b      	adds	r3, #27
 8001a22:	011b      	lsls	r3, r3, #4
 8001a24:	4413      	add	r3, r2
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	08db      	lsrs	r3, r3, #3
 8001a2a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	331b      	adds	r3, #27
 8001a3a:	011b      	lsls	r3, r3, #4
 8001a3c:	4413      	add	r3, r2
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0202 	and.w	r2, r3, #2
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	331b      	adds	r3, #27
 8001a50:	011b      	lsls	r3, r3, #4
 8001a52:	4413      	add	r3, r2
 8001a54:	3304      	adds	r3, #4
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0308 	and.w	r3, r3, #8
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d003      	beq.n	8001a68 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2208      	movs	r2, #8
 8001a64:	611a      	str	r2, [r3, #16]
 8001a66:	e00b      	b.n	8001a80 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	331b      	adds	r3, #27
 8001a70:	011b      	lsls	r3, r3, #4
 8001a72:	4413      	add	r3, r2
 8001a74:	3304      	adds	r3, #4
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 020f 	and.w	r2, r3, #15
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	331b      	adds	r3, #27
 8001a88:	011b      	lsls	r3, r3, #4
 8001a8a:	4413      	add	r3, r2
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	0a1b      	lsrs	r3, r3, #8
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	331b      	adds	r3, #27
 8001aa0:	011b      	lsls	r3, r3, #4
 8001aa2:	4413      	add	r3, r2
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	0c1b      	lsrs	r3, r3, #16
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	011b      	lsls	r3, r3, #4
 8001ab8:	4413      	add	r3, r2
 8001aba:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	011b      	lsls	r3, r3, #4
 8001ace:	4413      	add	r3, r2
 8001ad0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	0a1a      	lsrs	r2, r3, #8
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	3301      	adds	r3, #1
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	011b      	lsls	r3, r3, #4
 8001ae8:	4413      	add	r3, r2
 8001aea:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	0c1a      	lsrs	r2, r3, #16
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	3302      	adds	r3, #2
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	011b      	lsls	r3, r3, #4
 8001b02:	4413      	add	r3, r2
 8001b04:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	0e1a      	lsrs	r2, r3, #24
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	3303      	adds	r3, #3
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	011b      	lsls	r3, r3, #4
 8001b1c:	4413      	add	r3, r2
 8001b1e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	3304      	adds	r3, #4
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	011b      	lsls	r3, r3, #4
 8001b34:	4413      	add	r3, r2
 8001b36:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	0a1a      	lsrs	r2, r3, #8
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	3305      	adds	r3, #5
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	011b      	lsls	r3, r3, #4
 8001b4e:	4413      	add	r3, r2
 8001b50:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	0c1a      	lsrs	r2, r3, #16
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	3306      	adds	r3, #6
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	011b      	lsls	r3, r3, #4
 8001b68:	4413      	add	r3, r2
 8001b6a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	0e1a      	lsrs	r2, r3, #24
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	3307      	adds	r3, #7
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d108      	bne.n	8001b92 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f042 0220 	orr.w	r2, r2, #32
 8001b8e:	60da      	str	r2, [r3, #12]
 8001b90:	e007      	b.n	8001ba2 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	691a      	ldr	r2, [r3, #16]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f042 0220 	orr.w	r2, r2, #32
 8001ba0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	e006      	b.n	8001bb4 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001baa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
  }
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	371c      	adds	r7, #28
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bd0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bd2:	7bfb      	ldrb	r3, [r7, #15]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d002      	beq.n	8001bde <HAL_CAN_ActivateNotification+0x1e>
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d109      	bne.n	8001bf2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6959      	ldr	r1, [r3, #20]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	430a      	orrs	r2, r1
 8001bec:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	e006      	b.n	8001c00 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
  }
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08a      	sub	sp, #40	@ 0x28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001c48:	6a3b      	ldr	r3, [r7, #32]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d07c      	beq.n	8001d4c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d023      	beq.n	8001ca4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2201      	movs	r2, #1
 8001c62:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7fe ff58 	bl	8000b24 <HAL_CAN_TxMailbox0CompleteCallback>
 8001c74:	e016      	b.n	8001ca4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d004      	beq.n	8001c8a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c82:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c86:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c88:	e00c      	b.n	8001ca4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	f003 0308 	and.w	r3, r3, #8
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d004      	beq.n	8001c9e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c96:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c9c:	e002      	b.n	8001ca4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f96b 	bl	8001f7a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d024      	beq.n	8001cf8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cb6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7fe ff4e 	bl	8000b64 <HAL_CAN_TxMailbox1CompleteCallback>
 8001cc8:	e016      	b.n	8001cf8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d004      	beq.n	8001cde <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001cda:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cdc:	e00c      	b.n	8001cf8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d004      	beq.n	8001cf2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cee:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cf0:	e002      	b.n	8001cf8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f94b 	bl	8001f8e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d024      	beq.n	8001d4c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001d0a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7fe ff44 	bl	8000ba4 <HAL_CAN_TxMailbox2CompleteCallback>
 8001d1c:	e016      	b.n	8001d4c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d004      	beq.n	8001d32 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d30:	e00c      	b.n	8001d4c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d004      	beq.n	8001d46 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d42:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d44:	e002      	b.n	8001d4c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f92b 	bl	8001fa2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001d4c:	6a3b      	ldr	r3, [r7, #32]
 8001d4e:	f003 0308 	and.w	r3, r3, #8
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00c      	beq.n	8001d70 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	f003 0310 	and.w	r3, r3, #16
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d007      	beq.n	8001d70 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d66:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2210      	movs	r2, #16
 8001d6e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001d70:	6a3b      	ldr	r3, [r7, #32]
 8001d72:	f003 0304 	and.w	r3, r3, #4
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00b      	beq.n	8001d92 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f003 0308 	and.w	r3, r3, #8
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d006      	beq.n	8001d92 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2208      	movs	r2, #8
 8001d8a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f912 	bl	8001fb6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001d92:	6a3b      	ldr	r3, [r7, #32]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d009      	beq.n	8001db0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d002      	beq.n	8001db0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7fe ff1a 	bl	8000be4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001db0:	6a3b      	ldr	r3, [r7, #32]
 8001db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00c      	beq.n	8001dd4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	f003 0310 	and.w	r3, r3, #16
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d007      	beq.n	8001dd4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dca:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2210      	movs	r2, #16
 8001dd2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001dd4:	6a3b      	ldr	r3, [r7, #32]
 8001dd6:	f003 0320 	and.w	r3, r3, #32
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00b      	beq.n	8001df6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	f003 0308 	and.w	r3, r3, #8
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d006      	beq.n	8001df6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2208      	movs	r2, #8
 8001dee:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f8f4 	bl	8001fde <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001df6:	6a3b      	ldr	r3, [r7, #32]
 8001df8:	f003 0310 	and.w	r3, r3, #16
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d009      	beq.n	8001e14 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d002      	beq.n	8001e14 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f8db 	bl	8001fca <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001e14:	6a3b      	ldr	r3, [r7, #32]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00b      	beq.n	8001e36 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	f003 0310 	and.w	r3, r3, #16
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d006      	beq.n	8001e36 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2210      	movs	r2, #16
 8001e2e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f8de 	bl	8001ff2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001e36:	6a3b      	ldr	r3, [r7, #32]
 8001e38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00b      	beq.n	8001e58 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d006      	beq.n	8001e58 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2208      	movs	r2, #8
 8001e50:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f8d7 	bl	8002006 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001e58:	6a3b      	ldr	r3, [r7, #32]
 8001e5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d07b      	beq.n	8001f5a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d072      	beq.n	8001f52 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e6c:	6a3b      	ldr	r3, [r7, #32]
 8001e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d008      	beq.n	8001e88 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e88:	6a3b      	ldr	r3, [r7, #32]
 8001e8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d008      	beq.n	8001ea4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9e:	f043 0302 	orr.w	r3, r3, #2
 8001ea2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ea4:	6a3b      	ldr	r3, [r7, #32]
 8001ea6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d008      	beq.n	8001ec0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eba:	f043 0304 	orr.w	r3, r3, #4
 8001ebe:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ec0:	6a3b      	ldr	r3, [r7, #32]
 8001ec2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d043      	beq.n	8001f52 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d03e      	beq.n	8001f52 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001eda:	2b60      	cmp	r3, #96	@ 0x60
 8001edc:	d02b      	beq.n	8001f36 <HAL_CAN_IRQHandler+0x32a>
 8001ede:	2b60      	cmp	r3, #96	@ 0x60
 8001ee0:	d82e      	bhi.n	8001f40 <HAL_CAN_IRQHandler+0x334>
 8001ee2:	2b50      	cmp	r3, #80	@ 0x50
 8001ee4:	d022      	beq.n	8001f2c <HAL_CAN_IRQHandler+0x320>
 8001ee6:	2b50      	cmp	r3, #80	@ 0x50
 8001ee8:	d82a      	bhi.n	8001f40 <HAL_CAN_IRQHandler+0x334>
 8001eea:	2b40      	cmp	r3, #64	@ 0x40
 8001eec:	d019      	beq.n	8001f22 <HAL_CAN_IRQHandler+0x316>
 8001eee:	2b40      	cmp	r3, #64	@ 0x40
 8001ef0:	d826      	bhi.n	8001f40 <HAL_CAN_IRQHandler+0x334>
 8001ef2:	2b30      	cmp	r3, #48	@ 0x30
 8001ef4:	d010      	beq.n	8001f18 <HAL_CAN_IRQHandler+0x30c>
 8001ef6:	2b30      	cmp	r3, #48	@ 0x30
 8001ef8:	d822      	bhi.n	8001f40 <HAL_CAN_IRQHandler+0x334>
 8001efa:	2b10      	cmp	r3, #16
 8001efc:	d002      	beq.n	8001f04 <HAL_CAN_IRQHandler+0x2f8>
 8001efe:	2b20      	cmp	r3, #32
 8001f00:	d005      	beq.n	8001f0e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001f02:	e01d      	b.n	8001f40 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f06:	f043 0308 	orr.w	r3, r3, #8
 8001f0a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f0c:	e019      	b.n	8001f42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f10:	f043 0310 	orr.w	r3, r3, #16
 8001f14:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f16:	e014      	b.n	8001f42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1a:	f043 0320 	orr.w	r3, r3, #32
 8001f1e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f20:	e00f      	b.n	8001f42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f28:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f2a:	e00a      	b.n	8001f42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f32:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f34:	e005      	b.n	8001f42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f3c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f3e:	e000      	b.n	8001f42 <HAL_CAN_IRQHandler+0x336>
            break;
 8001f40:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	699a      	ldr	r2, [r3, #24]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001f50:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2204      	movs	r2, #4
 8001f58:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d008      	beq.n	8001f72 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f66:	431a      	orrs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 f854 	bl	800201a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001f72:	bf00      	nop
 8001f74:	3728      	adds	r7, #40	@ 0x28
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
	...

08002030 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002040:	4b0c      	ldr	r3, [pc, #48]	@ (8002074 <__NVIC_SetPriorityGrouping+0x44>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800204c:	4013      	ands	r3, r2
 800204e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002058:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800205c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002062:	4a04      	ldr	r2, [pc, #16]	@ (8002074 <__NVIC_SetPriorityGrouping+0x44>)
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	60d3      	str	r3, [r2, #12]
}
 8002068:	bf00      	nop
 800206a:	3714      	adds	r7, #20
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800207c:	4b04      	ldr	r3, [pc, #16]	@ (8002090 <__NVIC_GetPriorityGrouping+0x18>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	0a1b      	lsrs	r3, r3, #8
 8002082:	f003 0307 	and.w	r3, r3, #7
}
 8002086:	4618      	mov	r0, r3
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	db0b      	blt.n	80020be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	f003 021f 	and.w	r2, r3, #31
 80020ac:	4907      	ldr	r1, [pc, #28]	@ (80020cc <__NVIC_EnableIRQ+0x38>)
 80020ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b2:	095b      	lsrs	r3, r3, #5
 80020b4:	2001      	movs	r0, #1
 80020b6:	fa00 f202 	lsl.w	r2, r0, r2
 80020ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	e000e100 	.word	0xe000e100

080020d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	6039      	str	r1, [r7, #0]
 80020da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	db0a      	blt.n	80020fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	490c      	ldr	r1, [pc, #48]	@ (800211c <__NVIC_SetPriority+0x4c>)
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	0112      	lsls	r2, r2, #4
 80020f0:	b2d2      	uxtb	r2, r2
 80020f2:	440b      	add	r3, r1
 80020f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020f8:	e00a      	b.n	8002110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	4908      	ldr	r1, [pc, #32]	@ (8002120 <__NVIC_SetPriority+0x50>)
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	3b04      	subs	r3, #4
 8002108:	0112      	lsls	r2, r2, #4
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	440b      	add	r3, r1
 800210e:	761a      	strb	r2, [r3, #24]
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	e000e100 	.word	0xe000e100
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002124:	b480      	push	{r7}
 8002126:	b089      	sub	sp, #36	@ 0x24
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	f1c3 0307 	rsb	r3, r3, #7
 800213e:	2b04      	cmp	r3, #4
 8002140:	bf28      	it	cs
 8002142:	2304      	movcs	r3, #4
 8002144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3304      	adds	r3, #4
 800214a:	2b06      	cmp	r3, #6
 800214c:	d902      	bls.n	8002154 <NVIC_EncodePriority+0x30>
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	3b03      	subs	r3, #3
 8002152:	e000      	b.n	8002156 <NVIC_EncodePriority+0x32>
 8002154:	2300      	movs	r3, #0
 8002156:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002158:	f04f 32ff 	mov.w	r2, #4294967295
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43da      	mvns	r2, r3
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	401a      	ands	r2, r3
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800216c:	f04f 31ff 	mov.w	r1, #4294967295
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	fa01 f303 	lsl.w	r3, r1, r3
 8002176:	43d9      	mvns	r1, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800217c:	4313      	orrs	r3, r2
         );
}
 800217e:	4618      	mov	r0, r3
 8002180:	3724      	adds	r7, #36	@ 0x24
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
	...

0800218c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3b01      	subs	r3, #1
 8002198:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800219c:	d301      	bcc.n	80021a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800219e:	2301      	movs	r3, #1
 80021a0:	e00f      	b.n	80021c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021a2:	4a0a      	ldr	r2, [pc, #40]	@ (80021cc <SysTick_Config+0x40>)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021aa:	210f      	movs	r1, #15
 80021ac:	f04f 30ff 	mov.w	r0, #4294967295
 80021b0:	f7ff ff8e 	bl	80020d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021b4:	4b05      	ldr	r3, [pc, #20]	@ (80021cc <SysTick_Config+0x40>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ba:	4b04      	ldr	r3, [pc, #16]	@ (80021cc <SysTick_Config+0x40>)
 80021bc:	2207      	movs	r2, #7
 80021be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	e000e010 	.word	0xe000e010

080021d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7ff ff29 	bl	8002030 <__NVIC_SetPriorityGrouping>
}
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b086      	sub	sp, #24
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	4603      	mov	r3, r0
 80021ee:	60b9      	str	r1, [r7, #8]
 80021f0:	607a      	str	r2, [r7, #4]
 80021f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021f8:	f7ff ff3e 	bl	8002078 <__NVIC_GetPriorityGrouping>
 80021fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	68b9      	ldr	r1, [r7, #8]
 8002202:	6978      	ldr	r0, [r7, #20]
 8002204:	f7ff ff8e 	bl	8002124 <NVIC_EncodePriority>
 8002208:	4602      	mov	r2, r0
 800220a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800220e:	4611      	mov	r1, r2
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff ff5d 	bl	80020d0 <__NVIC_SetPriority>
}
 8002216:	bf00      	nop
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b082      	sub	sp, #8
 8002222:	af00      	add	r7, sp, #0
 8002224:	4603      	mov	r3, r0
 8002226:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff ff31 	bl	8002094 <__NVIC_EnableIRQ>
}
 8002232:	bf00      	nop
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b082      	sub	sp, #8
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7ff ffa2 	bl	800218c <SysTick_Config>
 8002248:	4603      	mov	r3, r0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b04      	cmp	r3, #4
 8002260:	d106      	bne.n	8002270 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002262:	4b09      	ldr	r3, [pc, #36]	@ (8002288 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a08      	ldr	r2, [pc, #32]	@ (8002288 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002268:	f043 0304 	orr.w	r3, r3, #4
 800226c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800226e:	e005      	b.n	800227c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002270:	4b05      	ldr	r3, [pc, #20]	@ (8002288 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a04      	ldr	r2, [pc, #16]	@ (8002288 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002276:	f023 0304 	bic.w	r3, r3, #4
 800227a:	6013      	str	r3, [r2, #0]
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	e000e010 	.word	0xe000e010

0800228c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002290:	f000 f802 	bl	8002298 <HAL_SYSTICK_Callback>
}
 8002294:	bf00      	nop
 8002296:	bd80      	pop	{r7, pc}

08002298 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e014      	b.n	80022e2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	791b      	ldrb	r3, [r3, #4]
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d105      	bne.n	80022ce <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f7fe fe53 	bl	8000f74 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2202      	movs	r2, #2
 80022d2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
 80022f2:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e046      	b.n	800238c <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	795b      	ldrb	r3, [r3, #5]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d101      	bne.n	800230a <HAL_DAC_Start+0x20>
 8002306:	2302      	movs	r3, #2
 8002308:	e040      	b.n	800238c <HAL_DAC_Start+0xa2>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2202      	movs	r2, #2
 8002314:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6819      	ldr	r1, [r3, #0]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	f003 0310 	and.w	r3, r3, #16
 8002322:	2201      	movs	r2, #1
 8002324:	409a      	lsls	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	430a      	orrs	r2, r1
 800232c:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10f      	bne.n	8002354 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800233e:	2b3c      	cmp	r3, #60	@ 0x3c
 8002340:	d11d      	bne.n	800237e <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f042 0201 	orr.w	r2, r2, #1
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	e014      	b.n	800237e <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	f003 0310 	and.w	r3, r3, #16
 8002364:	213c      	movs	r1, #60	@ 0x3c
 8002366:	fa01 f303 	lsl.w	r3, r1, r3
 800236a:	429a      	cmp	r2, r3
 800236c:	d107      	bne.n	800237e <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f042 0202 	orr.w	r2, r2, #2
 800237c:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002398:	b480      	push	{r7}
 800239a:	b087      	sub	sp, #28
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
 80023a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e015      	b.n	80023e0 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d105      	bne.n	80023cc <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4413      	add	r3, r2
 80023c6:	3308      	adds	r3, #8
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	e004      	b.n	80023d6 <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4413      	add	r3, r2
 80023d2:	3314      	adds	r3, #20
 80023d4:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	461a      	mov	r2, r3
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	371c      	adds	r7, #28
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b089      	sub	sp, #36	@ 0x24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023f8:	2300      	movs	r3, #0
 80023fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d002      	beq.n	8002408 <HAL_DAC_ConfigChannel+0x1c>
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e042      	b.n	8002492 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	795b      	ldrb	r3, [r3, #5]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d101      	bne.n	8002418 <HAL_DAC_ConfigChannel+0x2c>
 8002414:	2302      	movs	r3, #2
 8002416:	e03c      	b.n	8002492 <HAL_DAC_ConfigChannel+0xa6>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2201      	movs	r2, #1
 800241c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2202      	movs	r2, #2
 8002422:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f003 0310 	and.w	r3, r3, #16
 8002432:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 800243a:	43db      	mvns	r3, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4013      	ands	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	4313      	orrs	r3, r2
 800244c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f003 0310 	and.w	r3, r3, #16
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6819      	ldr	r1, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f003 0310 	and.w	r3, r3, #16
 8002474:	22c0      	movs	r2, #192	@ 0xc0
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43da      	mvns	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	400a      	ands	r2, r1
 8002482:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2201      	movs	r2, #1
 8002488:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002490:	7ffb      	ldrb	r3, [r7, #31]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3724      	adds	r7, #36	@ 0x24
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b089      	sub	sp, #36	@ 0x24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
 80024ba:	e165      	b.n	8002788 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024bc:	2201      	movs	r2, #1
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	4013      	ands	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	f040 8154 	bne.w	8002782 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d005      	beq.n	80024f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d130      	bne.n	8002554 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	2203      	movs	r2, #3
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43db      	mvns	r3, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4013      	ands	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	68da      	ldr	r2, [r3, #12]
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4313      	orrs	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002528:	2201      	movs	r2, #1
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	091b      	lsrs	r3, r3, #4
 800253e:	f003 0201 	and.w	r2, r3, #1
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 0303 	and.w	r3, r3, #3
 800255c:	2b03      	cmp	r3, #3
 800255e:	d017      	beq.n	8002590 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	2203      	movs	r2, #3
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d123      	bne.n	80025e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	08da      	lsrs	r2, r3, #3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3208      	adds	r2, #8
 80025a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	220f      	movs	r2, #15
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	691a      	ldr	r2, [r3, #16]
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	08da      	lsrs	r2, r3, #3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3208      	adds	r2, #8
 80025de:	69b9      	ldr	r1, [r7, #24]
 80025e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	2203      	movs	r2, #3
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 0203 	and.w	r2, r3, #3
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 80ae 	beq.w	8002782 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	4b5d      	ldr	r3, [pc, #372]	@ (80027a0 <HAL_GPIO_Init+0x300>)
 800262c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262e:	4a5c      	ldr	r2, [pc, #368]	@ (80027a0 <HAL_GPIO_Init+0x300>)
 8002630:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002634:	6453      	str	r3, [r2, #68]	@ 0x44
 8002636:	4b5a      	ldr	r3, [pc, #360]	@ (80027a0 <HAL_GPIO_Init+0x300>)
 8002638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002642:	4a58      	ldr	r2, [pc, #352]	@ (80027a4 <HAL_GPIO_Init+0x304>)
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	089b      	lsrs	r3, r3, #2
 8002648:	3302      	adds	r3, #2
 800264a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	220f      	movs	r2, #15
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43db      	mvns	r3, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4013      	ands	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a4f      	ldr	r2, [pc, #316]	@ (80027a8 <HAL_GPIO_Init+0x308>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d025      	beq.n	80026ba <HAL_GPIO_Init+0x21a>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a4e      	ldr	r2, [pc, #312]	@ (80027ac <HAL_GPIO_Init+0x30c>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d01f      	beq.n	80026b6 <HAL_GPIO_Init+0x216>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a4d      	ldr	r2, [pc, #308]	@ (80027b0 <HAL_GPIO_Init+0x310>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d019      	beq.n	80026b2 <HAL_GPIO_Init+0x212>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a4c      	ldr	r2, [pc, #304]	@ (80027b4 <HAL_GPIO_Init+0x314>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d013      	beq.n	80026ae <HAL_GPIO_Init+0x20e>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a4b      	ldr	r2, [pc, #300]	@ (80027b8 <HAL_GPIO_Init+0x318>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d00d      	beq.n	80026aa <HAL_GPIO_Init+0x20a>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a4a      	ldr	r2, [pc, #296]	@ (80027bc <HAL_GPIO_Init+0x31c>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d007      	beq.n	80026a6 <HAL_GPIO_Init+0x206>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a49      	ldr	r2, [pc, #292]	@ (80027c0 <HAL_GPIO_Init+0x320>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d101      	bne.n	80026a2 <HAL_GPIO_Init+0x202>
 800269e:	2306      	movs	r3, #6
 80026a0:	e00c      	b.n	80026bc <HAL_GPIO_Init+0x21c>
 80026a2:	2307      	movs	r3, #7
 80026a4:	e00a      	b.n	80026bc <HAL_GPIO_Init+0x21c>
 80026a6:	2305      	movs	r3, #5
 80026a8:	e008      	b.n	80026bc <HAL_GPIO_Init+0x21c>
 80026aa:	2304      	movs	r3, #4
 80026ac:	e006      	b.n	80026bc <HAL_GPIO_Init+0x21c>
 80026ae:	2303      	movs	r3, #3
 80026b0:	e004      	b.n	80026bc <HAL_GPIO_Init+0x21c>
 80026b2:	2302      	movs	r3, #2
 80026b4:	e002      	b.n	80026bc <HAL_GPIO_Init+0x21c>
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <HAL_GPIO_Init+0x21c>
 80026ba:	2300      	movs	r3, #0
 80026bc:	69fa      	ldr	r2, [r7, #28]
 80026be:	f002 0203 	and.w	r2, r2, #3
 80026c2:	0092      	lsls	r2, r2, #2
 80026c4:	4093      	lsls	r3, r2
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026cc:	4935      	ldr	r1, [pc, #212]	@ (80027a4 <HAL_GPIO_Init+0x304>)
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	089b      	lsrs	r3, r3, #2
 80026d2:	3302      	adds	r3, #2
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026da:	4b3a      	ldr	r3, [pc, #232]	@ (80027c4 <HAL_GPIO_Init+0x324>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	43db      	mvns	r3, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4013      	ands	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026fe:	4a31      	ldr	r2, [pc, #196]	@ (80027c4 <HAL_GPIO_Init+0x324>)
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002704:	4b2f      	ldr	r3, [pc, #188]	@ (80027c4 <HAL_GPIO_Init+0x324>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	43db      	mvns	r3, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4013      	ands	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4313      	orrs	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002728:	4a26      	ldr	r2, [pc, #152]	@ (80027c4 <HAL_GPIO_Init+0x324>)
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800272e:	4b25      	ldr	r3, [pc, #148]	@ (80027c4 <HAL_GPIO_Init+0x324>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	43db      	mvns	r3, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4013      	ands	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002752:	4a1c      	ldr	r2, [pc, #112]	@ (80027c4 <HAL_GPIO_Init+0x324>)
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002758:	4b1a      	ldr	r3, [pc, #104]	@ (80027c4 <HAL_GPIO_Init+0x324>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	43db      	mvns	r3, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4013      	ands	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	4313      	orrs	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800277c:	4a11      	ldr	r2, [pc, #68]	@ (80027c4 <HAL_GPIO_Init+0x324>)
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	3301      	adds	r3, #1
 8002786:	61fb      	str	r3, [r7, #28]
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	2b0f      	cmp	r3, #15
 800278c:	f67f ae96 	bls.w	80024bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002790:	bf00      	nop
 8002792:	bf00      	nop
 8002794:	3724      	adds	r7, #36	@ 0x24
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	40023800 	.word	0x40023800
 80027a4:	40013800 	.word	0x40013800
 80027a8:	40020000 	.word	0x40020000
 80027ac:	40020400 	.word	0x40020400
 80027b0:	40020800 	.word	0x40020800
 80027b4:	40020c00 	.word	0x40020c00
 80027b8:	40021000 	.word	0x40021000
 80027bc:	40021400 	.word	0x40021400
 80027c0:	40021800 	.word	0x40021800
 80027c4:	40013c00 	.word	0x40013c00

080027c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	460b      	mov	r3, r1
 80027d2:	807b      	strh	r3, [r7, #2]
 80027d4:	4613      	mov	r3, r2
 80027d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027d8:	787b      	ldrb	r3, [r7, #1]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027de:	887a      	ldrh	r2, [r7, #2]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027e4:	e003      	b.n	80027ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027e6:	887b      	ldrh	r3, [r7, #2]
 80027e8:	041a      	lsls	r2, r3, #16
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	619a      	str	r2, [r3, #24]
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
	...

080027fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e0cc      	b.n	80029aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002810:	4b68      	ldr	r3, [pc, #416]	@ (80029b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 030f 	and.w	r3, r3, #15
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d90c      	bls.n	8002838 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281e:	4b65      	ldr	r3, [pc, #404]	@ (80029b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002826:	4b63      	ldr	r3, [pc, #396]	@ (80029b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	429a      	cmp	r2, r3
 8002832:	d001      	beq.n	8002838 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e0b8      	b.n	80029aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d020      	beq.n	8002886 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b00      	cmp	r3, #0
 800284e:	d005      	beq.n	800285c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002850:	4b59      	ldr	r3, [pc, #356]	@ (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	4a58      	ldr	r2, [pc, #352]	@ (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800285a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002868:	4b53      	ldr	r3, [pc, #332]	@ (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	4a52      	ldr	r2, [pc, #328]	@ (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002872:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002874:	4b50      	ldr	r3, [pc, #320]	@ (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	494d      	ldr	r1, [pc, #308]	@ (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002882:	4313      	orrs	r3, r2
 8002884:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d044      	beq.n	800291c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d107      	bne.n	80028aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800289a:	4b47      	ldr	r3, [pc, #284]	@ (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d119      	bne.n	80028da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e07f      	b.n	80029aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d003      	beq.n	80028ba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028b6:	2b03      	cmp	r3, #3
 80028b8:	d107      	bne.n	80028ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ba:	4b3f      	ldr	r3, [pc, #252]	@ (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d109      	bne.n	80028da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e06f      	b.n	80029aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ca:	4b3b      	ldr	r3, [pc, #236]	@ (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e067      	b.n	80029aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028da:	4b37      	ldr	r3, [pc, #220]	@ (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f023 0203 	bic.w	r2, r3, #3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	4934      	ldr	r1, [pc, #208]	@ (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028ec:	f7fe fd28 	bl	8001340 <HAL_GetTick>
 80028f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f2:	e00a      	b.n	800290a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f4:	f7fe fd24 	bl	8001340 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002902:	4293      	cmp	r3, r2
 8002904:	d901      	bls.n	800290a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e04f      	b.n	80029aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290a:	4b2b      	ldr	r3, [pc, #172]	@ (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 020c 	and.w	r2, r3, #12
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	429a      	cmp	r2, r3
 800291a:	d1eb      	bne.n	80028f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800291c:	4b25      	ldr	r3, [pc, #148]	@ (80029b4 <HAL_RCC_ClockConfig+0x1b8>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 030f 	and.w	r3, r3, #15
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	429a      	cmp	r2, r3
 8002928:	d20c      	bcs.n	8002944 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292a:	4b22      	ldr	r3, [pc, #136]	@ (80029b4 <HAL_RCC_ClockConfig+0x1b8>)
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002932:	4b20      	ldr	r3, [pc, #128]	@ (80029b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 030f 	and.w	r3, r3, #15
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	429a      	cmp	r2, r3
 800293e:	d001      	beq.n	8002944 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e032      	b.n	80029aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b00      	cmp	r3, #0
 800294e:	d008      	beq.n	8002962 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002950:	4b19      	ldr	r3, [pc, #100]	@ (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	4916      	ldr	r1, [pc, #88]	@ (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	4313      	orrs	r3, r2
 8002960:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0308 	and.w	r3, r3, #8
 800296a:	2b00      	cmp	r3, #0
 800296c:	d009      	beq.n	8002982 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800296e:	4b12      	ldr	r3, [pc, #72]	@ (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	490e      	ldr	r1, [pc, #56]	@ (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	4313      	orrs	r3, r2
 8002980:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002982:	f000 f855 	bl	8002a30 <HAL_RCC_GetSysClockFreq>
 8002986:	4602      	mov	r2, r0
 8002988:	4b0b      	ldr	r3, [pc, #44]	@ (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	091b      	lsrs	r3, r3, #4
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	490a      	ldr	r1, [pc, #40]	@ (80029bc <HAL_RCC_ClockConfig+0x1c0>)
 8002994:	5ccb      	ldrb	r3, [r1, r3]
 8002996:	fa22 f303 	lsr.w	r3, r2, r3
 800299a:	4a09      	ldr	r2, [pc, #36]	@ (80029c0 <HAL_RCC_ClockConfig+0x1c4>)
 800299c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800299e:	4b09      	ldr	r3, [pc, #36]	@ (80029c4 <HAL_RCC_ClockConfig+0x1c8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fe fc88 	bl	80012b8 <HAL_InitTick>

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40023c00 	.word	0x40023c00
 80029b8:	40023800 	.word	0x40023800
 80029bc:	08004bd8 	.word	0x08004bd8
 80029c0:	20000000 	.word	0x20000000
 80029c4:	20000004 	.word	0x20000004

080029c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029cc:	4b03      	ldr	r3, [pc, #12]	@ (80029dc <HAL_RCC_GetHCLKFreq+0x14>)
 80029ce:	681b      	ldr	r3, [r3, #0]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	20000000 	.word	0x20000000

080029e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029e4:	f7ff fff0 	bl	80029c8 <HAL_RCC_GetHCLKFreq>
 80029e8:	4602      	mov	r2, r0
 80029ea:	4b05      	ldr	r3, [pc, #20]	@ (8002a00 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	0a9b      	lsrs	r3, r3, #10
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	4903      	ldr	r1, [pc, #12]	@ (8002a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029f6:	5ccb      	ldrb	r3, [r1, r3]
 80029f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40023800 	.word	0x40023800
 8002a04:	08004be8 	.word	0x08004be8

08002a08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a0c:	f7ff ffdc 	bl	80029c8 <HAL_RCC_GetHCLKFreq>
 8002a10:	4602      	mov	r2, r0
 8002a12:	4b05      	ldr	r3, [pc, #20]	@ (8002a28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	0b5b      	lsrs	r3, r3, #13
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	4903      	ldr	r1, [pc, #12]	@ (8002a2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a1e:	5ccb      	ldrb	r3, [r1, r3]
 8002a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	08004be8 	.word	0x08004be8

08002a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a34:	b0ae      	sub	sp, #184	@ 0xb8
 8002a36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a56:	4bcb      	ldr	r3, [pc, #812]	@ (8002d84 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
 8002a5e:	2b0c      	cmp	r3, #12
 8002a60:	f200 8206 	bhi.w	8002e70 <HAL_RCC_GetSysClockFreq+0x440>
 8002a64:	a201      	add	r2, pc, #4	@ (adr r2, 8002a6c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a6a:	bf00      	nop
 8002a6c:	08002aa1 	.word	0x08002aa1
 8002a70:	08002e71 	.word	0x08002e71
 8002a74:	08002e71 	.word	0x08002e71
 8002a78:	08002e71 	.word	0x08002e71
 8002a7c:	08002aa9 	.word	0x08002aa9
 8002a80:	08002e71 	.word	0x08002e71
 8002a84:	08002e71 	.word	0x08002e71
 8002a88:	08002e71 	.word	0x08002e71
 8002a8c:	08002ab1 	.word	0x08002ab1
 8002a90:	08002e71 	.word	0x08002e71
 8002a94:	08002e71 	.word	0x08002e71
 8002a98:	08002e71 	.word	0x08002e71
 8002a9c:	08002ca1 	.word	0x08002ca1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002aa0:	4bb9      	ldr	r3, [pc, #740]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x358>)
 8002aa2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002aa6:	e1e7      	b.n	8002e78 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002aa8:	4bb8      	ldr	r3, [pc, #736]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002aaa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002aae:	e1e3      	b.n	8002e78 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ab0:	4bb4      	ldr	r3, [pc, #720]	@ (8002d84 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ab8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002abc:	4bb1      	ldr	r3, [pc, #708]	@ (8002d84 <HAL_RCC_GetSysClockFreq+0x354>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d071      	beq.n	8002bac <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ac8:	4bae      	ldr	r3, [pc, #696]	@ (8002d84 <HAL_RCC_GetSysClockFreq+0x354>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	099b      	lsrs	r3, r3, #6
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002ad4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002ad8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ae0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002aea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002aee:	4622      	mov	r2, r4
 8002af0:	462b      	mov	r3, r5
 8002af2:	f04f 0000 	mov.w	r0, #0
 8002af6:	f04f 0100 	mov.w	r1, #0
 8002afa:	0159      	lsls	r1, r3, #5
 8002afc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b00:	0150      	lsls	r0, r2, #5
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	4621      	mov	r1, r4
 8002b08:	1a51      	subs	r1, r2, r1
 8002b0a:	6439      	str	r1, [r7, #64]	@ 0x40
 8002b0c:	4629      	mov	r1, r5
 8002b0e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b12:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b14:	f04f 0200 	mov.w	r2, #0
 8002b18:	f04f 0300 	mov.w	r3, #0
 8002b1c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002b20:	4649      	mov	r1, r9
 8002b22:	018b      	lsls	r3, r1, #6
 8002b24:	4641      	mov	r1, r8
 8002b26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b2a:	4641      	mov	r1, r8
 8002b2c:	018a      	lsls	r2, r1, #6
 8002b2e:	4641      	mov	r1, r8
 8002b30:	1a51      	subs	r1, r2, r1
 8002b32:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b34:	4649      	mov	r1, r9
 8002b36:	eb63 0301 	sbc.w	r3, r3, r1
 8002b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	f04f 0300 	mov.w	r3, #0
 8002b44:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002b48:	4649      	mov	r1, r9
 8002b4a:	00cb      	lsls	r3, r1, #3
 8002b4c:	4641      	mov	r1, r8
 8002b4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b52:	4641      	mov	r1, r8
 8002b54:	00ca      	lsls	r2, r1, #3
 8002b56:	4610      	mov	r0, r2
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	4622      	mov	r2, r4
 8002b5e:	189b      	adds	r3, r3, r2
 8002b60:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b62:	462b      	mov	r3, r5
 8002b64:	460a      	mov	r2, r1
 8002b66:	eb42 0303 	adc.w	r3, r2, r3
 8002b6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b6c:	f04f 0200 	mov.w	r2, #0
 8002b70:	f04f 0300 	mov.w	r3, #0
 8002b74:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b78:	4629      	mov	r1, r5
 8002b7a:	024b      	lsls	r3, r1, #9
 8002b7c:	4621      	mov	r1, r4
 8002b7e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b82:	4621      	mov	r1, r4
 8002b84:	024a      	lsls	r2, r1, #9
 8002b86:	4610      	mov	r0, r2
 8002b88:	4619      	mov	r1, r3
 8002b8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002b94:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002b98:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002b9c:	f7fd fb90 	bl	80002c0 <__aeabi_uldivmod>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002baa:	e067      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bac:	4b75      	ldr	r3, [pc, #468]	@ (8002d84 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	099b      	lsrs	r3, r3, #6
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002bb8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002bbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bc4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002bca:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002bce:	4622      	mov	r2, r4
 8002bd0:	462b      	mov	r3, r5
 8002bd2:	f04f 0000 	mov.w	r0, #0
 8002bd6:	f04f 0100 	mov.w	r1, #0
 8002bda:	0159      	lsls	r1, r3, #5
 8002bdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002be0:	0150      	lsls	r0, r2, #5
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	4621      	mov	r1, r4
 8002be8:	1a51      	subs	r1, r2, r1
 8002bea:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002bec:	4629      	mov	r1, r5
 8002bee:	eb63 0301 	sbc.w	r3, r3, r1
 8002bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bf4:	f04f 0200 	mov.w	r2, #0
 8002bf8:	f04f 0300 	mov.w	r3, #0
 8002bfc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002c00:	4649      	mov	r1, r9
 8002c02:	018b      	lsls	r3, r1, #6
 8002c04:	4641      	mov	r1, r8
 8002c06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c0a:	4641      	mov	r1, r8
 8002c0c:	018a      	lsls	r2, r1, #6
 8002c0e:	4641      	mov	r1, r8
 8002c10:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c14:	4649      	mov	r1, r9
 8002c16:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	f04f 0300 	mov.w	r3, #0
 8002c22:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c26:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c2a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c2e:	4692      	mov	sl, r2
 8002c30:	469b      	mov	fp, r3
 8002c32:	4623      	mov	r3, r4
 8002c34:	eb1a 0303 	adds.w	r3, sl, r3
 8002c38:	623b      	str	r3, [r7, #32]
 8002c3a:	462b      	mov	r3, r5
 8002c3c:	eb4b 0303 	adc.w	r3, fp, r3
 8002c40:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	f04f 0300 	mov.w	r3, #0
 8002c4a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002c4e:	4629      	mov	r1, r5
 8002c50:	028b      	lsls	r3, r1, #10
 8002c52:	4621      	mov	r1, r4
 8002c54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c58:	4621      	mov	r1, r4
 8002c5a:	028a      	lsls	r2, r1, #10
 8002c5c:	4610      	mov	r0, r2
 8002c5e:	4619      	mov	r1, r3
 8002c60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c64:	2200      	movs	r2, #0
 8002c66:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c68:	677a      	str	r2, [r7, #116]	@ 0x74
 8002c6a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002c6e:	f7fd fb27 	bl	80002c0 <__aeabi_uldivmod>
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	4613      	mov	r3, r2
 8002c78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002c7c:	4b41      	ldr	r3, [pc, #260]	@ (8002d84 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	0c1b      	lsrs	r3, r3, #16
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	3301      	adds	r3, #1
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002c8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c9e:	e0eb      	b.n	8002e78 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ca0:	4b38      	ldr	r3, [pc, #224]	@ (8002d84 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ca8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cac:	4b35      	ldr	r3, [pc, #212]	@ (8002d84 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d06b      	beq.n	8002d90 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cb8:	4b32      	ldr	r3, [pc, #200]	@ (8002d84 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	099b      	lsrs	r3, r3, #6
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002cc2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002cc4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cca:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ccc:	2300      	movs	r3, #0
 8002cce:	667b      	str	r3, [r7, #100]	@ 0x64
 8002cd0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002cd4:	4622      	mov	r2, r4
 8002cd6:	462b      	mov	r3, r5
 8002cd8:	f04f 0000 	mov.w	r0, #0
 8002cdc:	f04f 0100 	mov.w	r1, #0
 8002ce0:	0159      	lsls	r1, r3, #5
 8002ce2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ce6:	0150      	lsls	r0, r2, #5
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	4621      	mov	r1, r4
 8002cee:	1a51      	subs	r1, r2, r1
 8002cf0:	61b9      	str	r1, [r7, #24]
 8002cf2:	4629      	mov	r1, r5
 8002cf4:	eb63 0301 	sbc.w	r3, r3, r1
 8002cf8:	61fb      	str	r3, [r7, #28]
 8002cfa:	f04f 0200 	mov.w	r2, #0
 8002cfe:	f04f 0300 	mov.w	r3, #0
 8002d02:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002d06:	4659      	mov	r1, fp
 8002d08:	018b      	lsls	r3, r1, #6
 8002d0a:	4651      	mov	r1, sl
 8002d0c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d10:	4651      	mov	r1, sl
 8002d12:	018a      	lsls	r2, r1, #6
 8002d14:	4651      	mov	r1, sl
 8002d16:	ebb2 0801 	subs.w	r8, r2, r1
 8002d1a:	4659      	mov	r1, fp
 8002d1c:	eb63 0901 	sbc.w	r9, r3, r1
 8002d20:	f04f 0200 	mov.w	r2, #0
 8002d24:	f04f 0300 	mov.w	r3, #0
 8002d28:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d2c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d30:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d34:	4690      	mov	r8, r2
 8002d36:	4699      	mov	r9, r3
 8002d38:	4623      	mov	r3, r4
 8002d3a:	eb18 0303 	adds.w	r3, r8, r3
 8002d3e:	613b      	str	r3, [r7, #16]
 8002d40:	462b      	mov	r3, r5
 8002d42:	eb49 0303 	adc.w	r3, r9, r3
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	f04f 0200 	mov.w	r2, #0
 8002d4c:	f04f 0300 	mov.w	r3, #0
 8002d50:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002d54:	4629      	mov	r1, r5
 8002d56:	024b      	lsls	r3, r1, #9
 8002d58:	4621      	mov	r1, r4
 8002d5a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d5e:	4621      	mov	r1, r4
 8002d60:	024a      	lsls	r2, r1, #9
 8002d62:	4610      	mov	r0, r2
 8002d64:	4619      	mov	r1, r3
 8002d66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002d6e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002d70:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d74:	f7fd faa4 	bl	80002c0 <__aeabi_uldivmod>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d82:	e065      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0x420>
 8002d84:	40023800 	.word	0x40023800
 8002d88:	00f42400 	.word	0x00f42400
 8002d8c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d90:	4b3d      	ldr	r3, [pc, #244]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x458>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	099b      	lsrs	r3, r3, #6
 8002d96:	2200      	movs	r2, #0
 8002d98:	4618      	mov	r0, r3
 8002d9a:	4611      	mov	r1, r2
 8002d9c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002da0:	653b      	str	r3, [r7, #80]	@ 0x50
 8002da2:	2300      	movs	r3, #0
 8002da4:	657b      	str	r3, [r7, #84]	@ 0x54
 8002da6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002daa:	4642      	mov	r2, r8
 8002dac:	464b      	mov	r3, r9
 8002dae:	f04f 0000 	mov.w	r0, #0
 8002db2:	f04f 0100 	mov.w	r1, #0
 8002db6:	0159      	lsls	r1, r3, #5
 8002db8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dbc:	0150      	lsls	r0, r2, #5
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	4641      	mov	r1, r8
 8002dc4:	1a51      	subs	r1, r2, r1
 8002dc6:	60b9      	str	r1, [r7, #8]
 8002dc8:	4649      	mov	r1, r9
 8002dca:	eb63 0301 	sbc.w	r3, r3, r1
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	f04f 0300 	mov.w	r3, #0
 8002dd8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002ddc:	4659      	mov	r1, fp
 8002dde:	018b      	lsls	r3, r1, #6
 8002de0:	4651      	mov	r1, sl
 8002de2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002de6:	4651      	mov	r1, sl
 8002de8:	018a      	lsls	r2, r1, #6
 8002dea:	4651      	mov	r1, sl
 8002dec:	1a54      	subs	r4, r2, r1
 8002dee:	4659      	mov	r1, fp
 8002df0:	eb63 0501 	sbc.w	r5, r3, r1
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	f04f 0300 	mov.w	r3, #0
 8002dfc:	00eb      	lsls	r3, r5, #3
 8002dfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e02:	00e2      	lsls	r2, r4, #3
 8002e04:	4614      	mov	r4, r2
 8002e06:	461d      	mov	r5, r3
 8002e08:	4643      	mov	r3, r8
 8002e0a:	18e3      	adds	r3, r4, r3
 8002e0c:	603b      	str	r3, [r7, #0]
 8002e0e:	464b      	mov	r3, r9
 8002e10:	eb45 0303 	adc.w	r3, r5, r3
 8002e14:	607b      	str	r3, [r7, #4]
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	f04f 0300 	mov.w	r3, #0
 8002e1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e22:	4629      	mov	r1, r5
 8002e24:	028b      	lsls	r3, r1, #10
 8002e26:	4621      	mov	r1, r4
 8002e28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e2c:	4621      	mov	r1, r4
 8002e2e:	028a      	lsls	r2, r1, #10
 8002e30:	4610      	mov	r0, r2
 8002e32:	4619      	mov	r1, r3
 8002e34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e38:	2200      	movs	r2, #0
 8002e3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e3c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002e3e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002e42:	f7fd fa3d 	bl	80002c0 <__aeabi_uldivmod>
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002e50:	4b0d      	ldr	r3, [pc, #52]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x458>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	0f1b      	lsrs	r3, r3, #28
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002e5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002e62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e6e:	e003      	b.n	8002e78 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e70:	4b06      	ldr	r3, [pc, #24]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002e72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e76:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	37b8      	adds	r7, #184	@ 0xb8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e86:	bf00      	nop
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	00f42400 	.word	0x00f42400

08002e90 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e28d      	b.n	80033be <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 8083 	beq.w	8002fb6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002eb0:	4b94      	ldr	r3, [pc, #592]	@ (8003104 <HAL_RCC_OscConfig+0x274>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 030c 	and.w	r3, r3, #12
 8002eb8:	2b04      	cmp	r3, #4
 8002eba:	d019      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002ebc:	4b91      	ldr	r3, [pc, #580]	@ (8003104 <HAL_RCC_OscConfig+0x274>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f003 030c 	and.w	r3, r3, #12
        || \
 8002ec4:	2b08      	cmp	r3, #8
 8002ec6:	d106      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002ec8:	4b8e      	ldr	r3, [pc, #568]	@ (8003104 <HAL_RCC_OscConfig+0x274>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ed0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ed4:	d00c      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ed6:	4b8b      	ldr	r3, [pc, #556]	@ (8003104 <HAL_RCC_OscConfig+0x274>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002ede:	2b0c      	cmp	r3, #12
 8002ee0:	d112      	bne.n	8002f08 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ee2:	4b88      	ldr	r3, [pc, #544]	@ (8003104 <HAL_RCC_OscConfig+0x274>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002eee:	d10b      	bne.n	8002f08 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef0:	4b84      	ldr	r3, [pc, #528]	@ (8003104 <HAL_RCC_OscConfig+0x274>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d05b      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x124>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d157      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e25a      	b.n	80033be <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f10:	d106      	bne.n	8002f20 <HAL_RCC_OscConfig+0x90>
 8002f12:	4b7c      	ldr	r3, [pc, #496]	@ (8003104 <HAL_RCC_OscConfig+0x274>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a7b      	ldr	r2, [pc, #492]	@ (8003104 <HAL_RCC_OscConfig+0x274>)
 8002f18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	e01d      	b.n	8002f5c <HAL_RCC_OscConfig+0xcc>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f28:	d10c      	bne.n	8002f44 <HAL_RCC_OscConfig+0xb4>
 8002f2a:	4b76      	ldr	r3, [pc, #472]	@ (8003104 <HAL_RCC_OscConfig+0x274>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a75      	ldr	r2, [pc, #468]	@ (8003104 <HAL_RCC_OscConfig+0x274>)
 8002f30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	4b73      	ldr	r3, [pc, #460]	@ (8003104 <HAL_RCC_OscConfig+0x274>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a72      	ldr	r2, [pc, #456]	@ (8003104 <HAL_RCC_OscConfig+0x274>)
 8002f3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	e00b      	b.n	8002f5c <HAL_RCC_OscConfig+0xcc>
 8002f44:	4b6f      	ldr	r3, [pc, #444]	@ (8003104 <HAL_RCC_OscConfig+0x274>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a6e      	ldr	r2, [pc, #440]	@ (8003104 <HAL_RCC_OscConfig+0x274>)
 8002f4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f4e:	6013      	str	r3, [r2, #0]
 8002f50:	4b6c      	ldr	r3, [pc, #432]	@ (8003104 <HAL_RCC_OscConfig+0x274>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a6b      	ldr	r2, [pc, #428]	@ (8003104 <HAL_RCC_OscConfig+0x274>)
 8002f56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d013      	beq.n	8002f8c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f64:	f7fe f9ec 	bl	8001340 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f6c:	f7fe f9e8 	bl	8001340 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b64      	cmp	r3, #100	@ 0x64
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e21f      	b.n	80033be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7e:	4b61      	ldr	r3, [pc, #388]	@ (8003104 <HAL_RCC_OscConfig+0x274>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0f0      	beq.n	8002f6c <HAL_RCC_OscConfig+0xdc>
 8002f8a:	e014      	b.n	8002fb6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8c:	f7fe f9d8 	bl	8001340 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f94:	f7fe f9d4 	bl	8001340 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b64      	cmp	r3, #100	@ 0x64
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e20b      	b.n	80033be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fa6:	4b57      	ldr	r3, [pc, #348]	@ (8003104 <HAL_RCC_OscConfig+0x274>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f0      	bne.n	8002f94 <HAL_RCC_OscConfig+0x104>
 8002fb2:	e000      	b.n	8002fb6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d06f      	beq.n	80030a2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002fc2:	4b50      	ldr	r3, [pc, #320]	@ (8003104 <HAL_RCC_OscConfig+0x274>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 030c 	and.w	r3, r3, #12
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d017      	beq.n	8002ffe <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002fce:	4b4d      	ldr	r3, [pc, #308]	@ (8003104 <HAL_RCC_OscConfig+0x274>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
        || \
 8002fd6:	2b08      	cmp	r3, #8
 8002fd8:	d105      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002fda:	4b4a      	ldr	r3, [pc, #296]	@ (8003104 <HAL_RCC_OscConfig+0x274>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00b      	beq.n	8002ffe <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fe6:	4b47      	ldr	r3, [pc, #284]	@ (8003104 <HAL_RCC_OscConfig+0x274>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002fee:	2b0c      	cmp	r3, #12
 8002ff0:	d11c      	bne.n	800302c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ff2:	4b44      	ldr	r3, [pc, #272]	@ (8003104 <HAL_RCC_OscConfig+0x274>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d116      	bne.n	800302c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ffe:	4b41      	ldr	r3, [pc, #260]	@ (8003104 <HAL_RCC_OscConfig+0x274>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d005      	beq.n	8003016 <HAL_RCC_OscConfig+0x186>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d001      	beq.n	8003016 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e1d3      	b.n	80033be <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003016:	4b3b      	ldr	r3, [pc, #236]	@ (8003104 <HAL_RCC_OscConfig+0x274>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	4937      	ldr	r1, [pc, #220]	@ (8003104 <HAL_RCC_OscConfig+0x274>)
 8003026:	4313      	orrs	r3, r2
 8003028:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800302a:	e03a      	b.n	80030a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d020      	beq.n	8003076 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003034:	4b34      	ldr	r3, [pc, #208]	@ (8003108 <HAL_RCC_OscConfig+0x278>)
 8003036:	2201      	movs	r2, #1
 8003038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303a:	f7fe f981 	bl	8001340 <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003042:	f7fe f97d 	bl	8001340 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e1b4      	b.n	80033be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003054:	4b2b      	ldr	r3, [pc, #172]	@ (8003104 <HAL_RCC_OscConfig+0x274>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0f0      	beq.n	8003042 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003060:	4b28      	ldr	r3, [pc, #160]	@ (8003104 <HAL_RCC_OscConfig+0x274>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	4925      	ldr	r1, [pc, #148]	@ (8003104 <HAL_RCC_OscConfig+0x274>)
 8003070:	4313      	orrs	r3, r2
 8003072:	600b      	str	r3, [r1, #0]
 8003074:	e015      	b.n	80030a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003076:	4b24      	ldr	r3, [pc, #144]	@ (8003108 <HAL_RCC_OscConfig+0x278>)
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307c:	f7fe f960 	bl	8001340 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003084:	f7fe f95c 	bl	8001340 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e193      	b.n	80033be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003096:	4b1b      	ldr	r3, [pc, #108]	@ (8003104 <HAL_RCC_OscConfig+0x274>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1f0      	bne.n	8003084 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0308 	and.w	r3, r3, #8
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d036      	beq.n	800311c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d016      	beq.n	80030e4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030b6:	4b15      	ldr	r3, [pc, #84]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 80030b8:	2201      	movs	r2, #1
 80030ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030bc:	f7fe f940 	bl	8001340 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030c4:	f7fe f93c 	bl	8001340 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e173      	b.n	80033be <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003104 <HAL_RCC_OscConfig+0x274>)
 80030d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d0f0      	beq.n	80030c4 <HAL_RCC_OscConfig+0x234>
 80030e2:	e01b      	b.n	800311c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030e4:	4b09      	ldr	r3, [pc, #36]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ea:	f7fe f929 	bl	8001340 <HAL_GetTick>
 80030ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f0:	e00e      	b.n	8003110 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030f2:	f7fe f925 	bl	8001340 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d907      	bls.n	8003110 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e15c      	b.n	80033be <HAL_RCC_OscConfig+0x52e>
 8003104:	40023800 	.word	0x40023800
 8003108:	42470000 	.word	0x42470000
 800310c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003110:	4b8a      	ldr	r3, [pc, #552]	@ (800333c <HAL_RCC_OscConfig+0x4ac>)
 8003112:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1ea      	bne.n	80030f2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 8097 	beq.w	8003258 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800312a:	2300      	movs	r3, #0
 800312c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800312e:	4b83      	ldr	r3, [pc, #524]	@ (800333c <HAL_RCC_OscConfig+0x4ac>)
 8003130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003132:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10f      	bne.n	800315a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800313a:	2300      	movs	r3, #0
 800313c:	60bb      	str	r3, [r7, #8]
 800313e:	4b7f      	ldr	r3, [pc, #508]	@ (800333c <HAL_RCC_OscConfig+0x4ac>)
 8003140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003142:	4a7e      	ldr	r2, [pc, #504]	@ (800333c <HAL_RCC_OscConfig+0x4ac>)
 8003144:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003148:	6413      	str	r3, [r2, #64]	@ 0x40
 800314a:	4b7c      	ldr	r3, [pc, #496]	@ (800333c <HAL_RCC_OscConfig+0x4ac>)
 800314c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003152:	60bb      	str	r3, [r7, #8]
 8003154:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003156:	2301      	movs	r3, #1
 8003158:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800315a:	4b79      	ldr	r3, [pc, #484]	@ (8003340 <HAL_RCC_OscConfig+0x4b0>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003162:	2b00      	cmp	r3, #0
 8003164:	d118      	bne.n	8003198 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003166:	4b76      	ldr	r3, [pc, #472]	@ (8003340 <HAL_RCC_OscConfig+0x4b0>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a75      	ldr	r2, [pc, #468]	@ (8003340 <HAL_RCC_OscConfig+0x4b0>)
 800316c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003170:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003172:	f7fe f8e5 	bl	8001340 <HAL_GetTick>
 8003176:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003178:	e008      	b.n	800318c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800317a:	f7fe f8e1 	bl	8001340 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b02      	cmp	r3, #2
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e118      	b.n	80033be <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318c:	4b6c      	ldr	r3, [pc, #432]	@ (8003340 <HAL_RCC_OscConfig+0x4b0>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003194:	2b00      	cmp	r3, #0
 8003196:	d0f0      	beq.n	800317a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d106      	bne.n	80031ae <HAL_RCC_OscConfig+0x31e>
 80031a0:	4b66      	ldr	r3, [pc, #408]	@ (800333c <HAL_RCC_OscConfig+0x4ac>)
 80031a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a4:	4a65      	ldr	r2, [pc, #404]	@ (800333c <HAL_RCC_OscConfig+0x4ac>)
 80031a6:	f043 0301 	orr.w	r3, r3, #1
 80031aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80031ac:	e01c      	b.n	80031e8 <HAL_RCC_OscConfig+0x358>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	2b05      	cmp	r3, #5
 80031b4:	d10c      	bne.n	80031d0 <HAL_RCC_OscConfig+0x340>
 80031b6:	4b61      	ldr	r3, [pc, #388]	@ (800333c <HAL_RCC_OscConfig+0x4ac>)
 80031b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ba:	4a60      	ldr	r2, [pc, #384]	@ (800333c <HAL_RCC_OscConfig+0x4ac>)
 80031bc:	f043 0304 	orr.w	r3, r3, #4
 80031c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80031c2:	4b5e      	ldr	r3, [pc, #376]	@ (800333c <HAL_RCC_OscConfig+0x4ac>)
 80031c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c6:	4a5d      	ldr	r2, [pc, #372]	@ (800333c <HAL_RCC_OscConfig+0x4ac>)
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80031ce:	e00b      	b.n	80031e8 <HAL_RCC_OscConfig+0x358>
 80031d0:	4b5a      	ldr	r3, [pc, #360]	@ (800333c <HAL_RCC_OscConfig+0x4ac>)
 80031d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031d4:	4a59      	ldr	r2, [pc, #356]	@ (800333c <HAL_RCC_OscConfig+0x4ac>)
 80031d6:	f023 0301 	bic.w	r3, r3, #1
 80031da:	6713      	str	r3, [r2, #112]	@ 0x70
 80031dc:	4b57      	ldr	r3, [pc, #348]	@ (800333c <HAL_RCC_OscConfig+0x4ac>)
 80031de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031e0:	4a56      	ldr	r2, [pc, #344]	@ (800333c <HAL_RCC_OscConfig+0x4ac>)
 80031e2:	f023 0304 	bic.w	r3, r3, #4
 80031e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d015      	beq.n	800321c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f0:	f7fe f8a6 	bl	8001340 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f6:	e00a      	b.n	800320e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031f8:	f7fe f8a2 	bl	8001340 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003206:	4293      	cmp	r3, r2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e0d7      	b.n	80033be <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800320e:	4b4b      	ldr	r3, [pc, #300]	@ (800333c <HAL_RCC_OscConfig+0x4ac>)
 8003210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d0ee      	beq.n	80031f8 <HAL_RCC_OscConfig+0x368>
 800321a:	e014      	b.n	8003246 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321c:	f7fe f890 	bl	8001340 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003222:	e00a      	b.n	800323a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003224:	f7fe f88c 	bl	8001340 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003232:	4293      	cmp	r3, r2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e0c1      	b.n	80033be <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800323a:	4b40      	ldr	r3, [pc, #256]	@ (800333c <HAL_RCC_OscConfig+0x4ac>)
 800323c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1ee      	bne.n	8003224 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003246:	7dfb      	ldrb	r3, [r7, #23]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d105      	bne.n	8003258 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800324c:	4b3b      	ldr	r3, [pc, #236]	@ (800333c <HAL_RCC_OscConfig+0x4ac>)
 800324e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003250:	4a3a      	ldr	r2, [pc, #232]	@ (800333c <HAL_RCC_OscConfig+0x4ac>)
 8003252:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003256:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 80ad 	beq.w	80033bc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003262:	4b36      	ldr	r3, [pc, #216]	@ (800333c <HAL_RCC_OscConfig+0x4ac>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f003 030c 	and.w	r3, r3, #12
 800326a:	2b08      	cmp	r3, #8
 800326c:	d060      	beq.n	8003330 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	2b02      	cmp	r3, #2
 8003274:	d145      	bne.n	8003302 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003276:	4b33      	ldr	r3, [pc, #204]	@ (8003344 <HAL_RCC_OscConfig+0x4b4>)
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327c:	f7fe f860 	bl	8001340 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003284:	f7fe f85c 	bl	8001340 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e093      	b.n	80033be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003296:	4b29      	ldr	r3, [pc, #164]	@ (800333c <HAL_RCC_OscConfig+0x4ac>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1f0      	bne.n	8003284 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	69da      	ldr	r2, [r3, #28]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	431a      	orrs	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b0:	019b      	lsls	r3, r3, #6
 80032b2:	431a      	orrs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b8:	085b      	lsrs	r3, r3, #1
 80032ba:	3b01      	subs	r3, #1
 80032bc:	041b      	lsls	r3, r3, #16
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c4:	061b      	lsls	r3, r3, #24
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032cc:	071b      	lsls	r3, r3, #28
 80032ce:	491b      	ldr	r1, [pc, #108]	@ (800333c <HAL_RCC_OscConfig+0x4ac>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003344 <HAL_RCC_OscConfig+0x4b4>)
 80032d6:	2201      	movs	r2, #1
 80032d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032da:	f7fe f831 	bl	8001340 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e2:	f7fe f82d 	bl	8001340 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e064      	b.n	80033be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032f4:	4b11      	ldr	r3, [pc, #68]	@ (800333c <HAL_RCC_OscConfig+0x4ac>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0f0      	beq.n	80032e2 <HAL_RCC_OscConfig+0x452>
 8003300:	e05c      	b.n	80033bc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003302:	4b10      	ldr	r3, [pc, #64]	@ (8003344 <HAL_RCC_OscConfig+0x4b4>)
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003308:	f7fe f81a 	bl	8001340 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003310:	f7fe f816 	bl	8001340 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e04d      	b.n	80033be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003322:	4b06      	ldr	r3, [pc, #24]	@ (800333c <HAL_RCC_OscConfig+0x4ac>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f0      	bne.n	8003310 <HAL_RCC_OscConfig+0x480>
 800332e:	e045      	b.n	80033bc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d107      	bne.n	8003348 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e040      	b.n	80033be <HAL_RCC_OscConfig+0x52e>
 800333c:	40023800 	.word	0x40023800
 8003340:	40007000 	.word	0x40007000
 8003344:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003348:	4b1f      	ldr	r3, [pc, #124]	@ (80033c8 <HAL_RCC_OscConfig+0x538>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d030      	beq.n	80033b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003360:	429a      	cmp	r2, r3
 8003362:	d129      	bne.n	80033b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800336e:	429a      	cmp	r2, r3
 8003370:	d122      	bne.n	80033b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003378:	4013      	ands	r3, r2
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800337e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003380:	4293      	cmp	r3, r2
 8003382:	d119      	bne.n	80033b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800338e:	085b      	lsrs	r3, r3, #1
 8003390:	3b01      	subs	r3, #1
 8003392:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003394:	429a      	cmp	r2, r3
 8003396:	d10f      	bne.n	80033b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d107      	bne.n	80033b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d001      	beq.n	80033bc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e000      	b.n	80033be <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3718      	adds	r7, #24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	40023800 	.word	0x40023800

080033cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e041      	b.n	8003462 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d106      	bne.n	80033f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7fd fe02 	bl	8000ffc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2202      	movs	r2, #2
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3304      	adds	r3, #4
 8003408:	4619      	mov	r1, r3
 800340a:	4610      	mov	r0, r2
 800340c:	f000 f9b6 	bl	800377c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
	...

0800346c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b01      	cmp	r3, #1
 800347e:	d001      	beq.n	8003484 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e04e      	b.n	8003522 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 0201 	orr.w	r2, r2, #1
 800349a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a23      	ldr	r2, [pc, #140]	@ (8003530 <HAL_TIM_Base_Start_IT+0xc4>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d022      	beq.n	80034ec <HAL_TIM_Base_Start_IT+0x80>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034ae:	d01d      	beq.n	80034ec <HAL_TIM_Base_Start_IT+0x80>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a1f      	ldr	r2, [pc, #124]	@ (8003534 <HAL_TIM_Base_Start_IT+0xc8>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d018      	beq.n	80034ec <HAL_TIM_Base_Start_IT+0x80>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a1e      	ldr	r2, [pc, #120]	@ (8003538 <HAL_TIM_Base_Start_IT+0xcc>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d013      	beq.n	80034ec <HAL_TIM_Base_Start_IT+0x80>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a1c      	ldr	r2, [pc, #112]	@ (800353c <HAL_TIM_Base_Start_IT+0xd0>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d00e      	beq.n	80034ec <HAL_TIM_Base_Start_IT+0x80>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a1b      	ldr	r2, [pc, #108]	@ (8003540 <HAL_TIM_Base_Start_IT+0xd4>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d009      	beq.n	80034ec <HAL_TIM_Base_Start_IT+0x80>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a19      	ldr	r2, [pc, #100]	@ (8003544 <HAL_TIM_Base_Start_IT+0xd8>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d004      	beq.n	80034ec <HAL_TIM_Base_Start_IT+0x80>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a18      	ldr	r2, [pc, #96]	@ (8003548 <HAL_TIM_Base_Start_IT+0xdc>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d111      	bne.n	8003510 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2b06      	cmp	r3, #6
 80034fc:	d010      	beq.n	8003520 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f042 0201 	orr.w	r2, r2, #1
 800350c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800350e:	e007      	b.n	8003520 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f042 0201 	orr.w	r2, r2, #1
 800351e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	40010000 	.word	0x40010000
 8003534:	40000400 	.word	0x40000400
 8003538:	40000800 	.word	0x40000800
 800353c:	40000c00 	.word	0x40000c00
 8003540:	40010400 	.word	0x40010400
 8003544:	40014000 	.word	0x40014000
 8003548:	40001800 	.word	0x40001800

0800354c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d020      	beq.n	80035b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d01b      	beq.n	80035b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f06f 0202 	mvn.w	r2, #2
 8003580:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	f003 0303 	and.w	r3, r3, #3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f8d2 	bl	8003740 <HAL_TIM_IC_CaptureCallback>
 800359c:	e005      	b.n	80035aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f8c4 	bl	800372c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f8d5 	bl	8003754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	f003 0304 	and.w	r3, r3, #4
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d020      	beq.n	80035fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d01b      	beq.n	80035fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f06f 0204 	mvn.w	r2, #4
 80035cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2202      	movs	r2, #2
 80035d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f8ac 	bl	8003740 <HAL_TIM_IC_CaptureCallback>
 80035e8:	e005      	b.n	80035f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f89e 	bl	800372c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 f8af 	bl	8003754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	f003 0308 	and.w	r3, r3, #8
 8003602:	2b00      	cmp	r3, #0
 8003604:	d020      	beq.n	8003648 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	2b00      	cmp	r3, #0
 800360e:	d01b      	beq.n	8003648 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f06f 0208 	mvn.w	r2, #8
 8003618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2204      	movs	r2, #4
 800361e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	f003 0303 	and.w	r3, r3, #3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f886 	bl	8003740 <HAL_TIM_IC_CaptureCallback>
 8003634:	e005      	b.n	8003642 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f878 	bl	800372c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 f889 	bl	8003754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	f003 0310 	and.w	r3, r3, #16
 800364e:	2b00      	cmp	r3, #0
 8003650:	d020      	beq.n	8003694 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f003 0310 	and.w	r3, r3, #16
 8003658:	2b00      	cmp	r3, #0
 800365a:	d01b      	beq.n	8003694 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f06f 0210 	mvn.w	r2, #16
 8003664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2208      	movs	r2, #8
 800366a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f860 	bl	8003740 <HAL_TIM_IC_CaptureCallback>
 8003680:	e005      	b.n	800368e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f852 	bl	800372c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f863 	bl	8003754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00c      	beq.n	80036b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d007      	beq.n	80036b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f06f 0201 	mvn.w	r2, #1
 80036b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7fd fbbe 	bl	8000e34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00c      	beq.n	80036dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d007      	beq.n	80036dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80036d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f97c 	bl	80039d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00c      	beq.n	8003700 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d007      	beq.n	8003700 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80036f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f834 	bl	8003768 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f003 0320 	and.w	r3, r3, #32
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00c      	beq.n	8003724 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f003 0320 	and.w	r3, r3, #32
 8003710:	2b00      	cmp	r3, #0
 8003712:	d007      	beq.n	8003724 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f06f 0220 	mvn.w	r2, #32
 800371c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 f94e 	bl	80039c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003724:	bf00      	nop
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a43      	ldr	r2, [pc, #268]	@ (800389c <TIM_Base_SetConfig+0x120>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d013      	beq.n	80037bc <TIM_Base_SetConfig+0x40>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800379a:	d00f      	beq.n	80037bc <TIM_Base_SetConfig+0x40>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a40      	ldr	r2, [pc, #256]	@ (80038a0 <TIM_Base_SetConfig+0x124>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d00b      	beq.n	80037bc <TIM_Base_SetConfig+0x40>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a3f      	ldr	r2, [pc, #252]	@ (80038a4 <TIM_Base_SetConfig+0x128>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d007      	beq.n	80037bc <TIM_Base_SetConfig+0x40>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a3e      	ldr	r2, [pc, #248]	@ (80038a8 <TIM_Base_SetConfig+0x12c>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d003      	beq.n	80037bc <TIM_Base_SetConfig+0x40>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a3d      	ldr	r2, [pc, #244]	@ (80038ac <TIM_Base_SetConfig+0x130>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d108      	bne.n	80037ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a32      	ldr	r2, [pc, #200]	@ (800389c <TIM_Base_SetConfig+0x120>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d02b      	beq.n	800382e <TIM_Base_SetConfig+0xb2>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037dc:	d027      	beq.n	800382e <TIM_Base_SetConfig+0xb2>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a2f      	ldr	r2, [pc, #188]	@ (80038a0 <TIM_Base_SetConfig+0x124>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d023      	beq.n	800382e <TIM_Base_SetConfig+0xb2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a2e      	ldr	r2, [pc, #184]	@ (80038a4 <TIM_Base_SetConfig+0x128>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d01f      	beq.n	800382e <TIM_Base_SetConfig+0xb2>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a2d      	ldr	r2, [pc, #180]	@ (80038a8 <TIM_Base_SetConfig+0x12c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d01b      	beq.n	800382e <TIM_Base_SetConfig+0xb2>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a2c      	ldr	r2, [pc, #176]	@ (80038ac <TIM_Base_SetConfig+0x130>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d017      	beq.n	800382e <TIM_Base_SetConfig+0xb2>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a2b      	ldr	r2, [pc, #172]	@ (80038b0 <TIM_Base_SetConfig+0x134>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d013      	beq.n	800382e <TIM_Base_SetConfig+0xb2>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a2a      	ldr	r2, [pc, #168]	@ (80038b4 <TIM_Base_SetConfig+0x138>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d00f      	beq.n	800382e <TIM_Base_SetConfig+0xb2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a29      	ldr	r2, [pc, #164]	@ (80038b8 <TIM_Base_SetConfig+0x13c>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d00b      	beq.n	800382e <TIM_Base_SetConfig+0xb2>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a28      	ldr	r2, [pc, #160]	@ (80038bc <TIM_Base_SetConfig+0x140>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d007      	beq.n	800382e <TIM_Base_SetConfig+0xb2>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a27      	ldr	r2, [pc, #156]	@ (80038c0 <TIM_Base_SetConfig+0x144>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d003      	beq.n	800382e <TIM_Base_SetConfig+0xb2>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a26      	ldr	r2, [pc, #152]	@ (80038c4 <TIM_Base_SetConfig+0x148>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d108      	bne.n	8003840 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	4313      	orrs	r3, r2
 800383e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	4313      	orrs	r3, r2
 800384c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a0e      	ldr	r2, [pc, #56]	@ (800389c <TIM_Base_SetConfig+0x120>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d003      	beq.n	800386e <TIM_Base_SetConfig+0xf2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a10      	ldr	r2, [pc, #64]	@ (80038ac <TIM_Base_SetConfig+0x130>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d103      	bne.n	8003876 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	691a      	ldr	r2, [r3, #16]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f043 0204 	orr.w	r2, r3, #4
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	601a      	str	r2, [r3, #0]
}
 800388e:	bf00      	nop
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	40010000 	.word	0x40010000
 80038a0:	40000400 	.word	0x40000400
 80038a4:	40000800 	.word	0x40000800
 80038a8:	40000c00 	.word	0x40000c00
 80038ac:	40010400 	.word	0x40010400
 80038b0:	40014000 	.word	0x40014000
 80038b4:	40014400 	.word	0x40014400
 80038b8:	40014800 	.word	0x40014800
 80038bc:	40001800 	.word	0x40001800
 80038c0:	40001c00 	.word	0x40001c00
 80038c4:	40002000 	.word	0x40002000

080038c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d101      	bne.n	80038e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038dc:	2302      	movs	r3, #2
 80038de:	e05a      	b.n	8003996 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2202      	movs	r2, #2
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003906:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	4313      	orrs	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a21      	ldr	r2, [pc, #132]	@ (80039a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d022      	beq.n	800396a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800392c:	d01d      	beq.n	800396a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a1d      	ldr	r2, [pc, #116]	@ (80039a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d018      	beq.n	800396a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a1b      	ldr	r2, [pc, #108]	@ (80039ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d013      	beq.n	800396a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a1a      	ldr	r2, [pc, #104]	@ (80039b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d00e      	beq.n	800396a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a18      	ldr	r2, [pc, #96]	@ (80039b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d009      	beq.n	800396a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a17      	ldr	r2, [pc, #92]	@ (80039b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d004      	beq.n	800396a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a15      	ldr	r2, [pc, #84]	@ (80039bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d10c      	bne.n	8003984 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003970:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	4313      	orrs	r3, r2
 800397a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3714      	adds	r7, #20
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	40010000 	.word	0x40010000
 80039a8:	40000400 	.word	0x40000400
 80039ac:	40000800 	.word	0x40000800
 80039b0:	40000c00 	.word	0x40000c00
 80039b4:	40010400 	.word	0x40010400
 80039b8:	40014000 	.word	0x40014000
 80039bc:	40001800 	.word	0x40001800

080039c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e042      	b.n	8003a80 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d106      	bne.n	8003a14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7fd fb1c 	bl	800104c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2224      	movs	r2, #36	@ 0x24
 8003a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f973 	bl	8003d18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	691a      	ldr	r2, [r3, #16]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695a      	ldr	r2, [r3, #20]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68da      	ldr	r2, [r3, #12]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b08a      	sub	sp, #40	@ 0x28
 8003a8c:	af02      	add	r7, sp, #8
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	4613      	mov	r3, r2
 8003a96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b20      	cmp	r3, #32
 8003aa6:	d175      	bne.n	8003b94 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d002      	beq.n	8003ab4 <HAL_UART_Transmit+0x2c>
 8003aae:	88fb      	ldrh	r3, [r7, #6]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e06e      	b.n	8003b96 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2221      	movs	r2, #33	@ 0x21
 8003ac2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ac6:	f7fd fc3b 	bl	8001340 <HAL_GetTick>
 8003aca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	88fa      	ldrh	r2, [r7, #6]
 8003ad0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	88fa      	ldrh	r2, [r7, #6]
 8003ad6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ae0:	d108      	bne.n	8003af4 <HAL_UART_Transmit+0x6c>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d104      	bne.n	8003af4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	61bb      	str	r3, [r7, #24]
 8003af2:	e003      	b.n	8003afc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003af8:	2300      	movs	r3, #0
 8003afa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003afc:	e02e      	b.n	8003b5c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	2200      	movs	r2, #0
 8003b06:	2180      	movs	r1, #128	@ 0x80
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 f848 	bl	8003b9e <UART_WaitOnFlagUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d005      	beq.n	8003b20 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2220      	movs	r2, #32
 8003b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e03a      	b.n	8003b96 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10b      	bne.n	8003b3e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	881b      	ldrh	r3, [r3, #0]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	3302      	adds	r3, #2
 8003b3a:	61bb      	str	r3, [r7, #24]
 8003b3c:	e007      	b.n	8003b4e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	781a      	ldrb	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	3b01      	subs	r3, #1
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1cb      	bne.n	8003afe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	2140      	movs	r1, #64	@ 0x40
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 f814 	bl	8003b9e <UART_WaitOnFlagUntilTimeout>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d005      	beq.n	8003b88 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e006      	b.n	8003b96 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003b90:	2300      	movs	r3, #0
 8003b92:	e000      	b.n	8003b96 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003b94:	2302      	movs	r3, #2
  }
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3720      	adds	r7, #32
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b086      	sub	sp, #24
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	60f8      	str	r0, [r7, #12]
 8003ba6:	60b9      	str	r1, [r7, #8]
 8003ba8:	603b      	str	r3, [r7, #0]
 8003baa:	4613      	mov	r3, r2
 8003bac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bae:	e03b      	b.n	8003c28 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bb0:	6a3b      	ldr	r3, [r7, #32]
 8003bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb6:	d037      	beq.n	8003c28 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bb8:	f7fd fbc2 	bl	8001340 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	6a3a      	ldr	r2, [r7, #32]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d302      	bcc.n	8003bce <UART_WaitOnFlagUntilTimeout+0x30>
 8003bc8:	6a3b      	ldr	r3, [r7, #32]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e03a      	b.n	8003c48 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d023      	beq.n	8003c28 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2b80      	cmp	r3, #128	@ 0x80
 8003be4:	d020      	beq.n	8003c28 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	2b40      	cmp	r3, #64	@ 0x40
 8003bea:	d01d      	beq.n	8003c28 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	2b08      	cmp	r3, #8
 8003bf8:	d116      	bne.n	8003c28 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	617b      	str	r3, [r7, #20]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	617b      	str	r3, [r7, #20]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	617b      	str	r3, [r7, #20]
 8003c0e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 f81d 	bl	8003c50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2208      	movs	r2, #8
 8003c1a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e00f      	b.n	8003c48 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	4013      	ands	r3, r2
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	bf0c      	ite	eq
 8003c38:	2301      	moveq	r3, #1
 8003c3a:	2300      	movne	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	461a      	mov	r2, r3
 8003c40:	79fb      	ldrb	r3, [r7, #7]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d0b4      	beq.n	8003bb0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3718      	adds	r7, #24
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b095      	sub	sp, #84	@ 0x54
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	330c      	adds	r3, #12
 8003c5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c62:	e853 3f00 	ldrex	r3, [r3]
 8003c66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	330c      	adds	r3, #12
 8003c76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c78:	643a      	str	r2, [r7, #64]	@ 0x40
 8003c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c80:	e841 2300 	strex	r3, r2, [r1]
 8003c84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1e5      	bne.n	8003c58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	3314      	adds	r3, #20
 8003c92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	e853 3f00 	ldrex	r3, [r3]
 8003c9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	f023 0301 	bic.w	r3, r3, #1
 8003ca2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	3314      	adds	r3, #20
 8003caa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cb4:	e841 2300 	strex	r3, r2, [r1]
 8003cb8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1e5      	bne.n	8003c8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d119      	bne.n	8003cfc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	330c      	adds	r3, #12
 8003cce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	e853 3f00 	ldrex	r3, [r3]
 8003cd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	f023 0310 	bic.w	r3, r3, #16
 8003cde:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	330c      	adds	r3, #12
 8003ce6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ce8:	61ba      	str	r2, [r7, #24]
 8003cea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cec:	6979      	ldr	r1, [r7, #20]
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	e841 2300 	strex	r3, r2, [r1]
 8003cf4:	613b      	str	r3, [r7, #16]
   return(result);
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1e5      	bne.n	8003cc8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003d0a:	bf00      	nop
 8003d0c:	3754      	adds	r7, #84	@ 0x54
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
	...

08003d18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d1c:	b0c0      	sub	sp, #256	@ 0x100
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d34:	68d9      	ldr	r1, [r3, #12]
 8003d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	ea40 0301 	orr.w	r3, r0, r1
 8003d40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	431a      	orrs	r2, r3
 8003d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003d70:	f021 010c 	bic.w	r1, r1, #12
 8003d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003d7e:	430b      	orrs	r3, r1
 8003d80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d92:	6999      	ldr	r1, [r3, #24]
 8003d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	ea40 0301 	orr.w	r3, r0, r1
 8003d9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	4b8f      	ldr	r3, [pc, #572]	@ (8003fe4 <UART_SetConfig+0x2cc>)
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d005      	beq.n	8003db8 <UART_SetConfig+0xa0>
 8003dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	4b8d      	ldr	r3, [pc, #564]	@ (8003fe8 <UART_SetConfig+0x2d0>)
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d104      	bne.n	8003dc2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003db8:	f7fe fe26 	bl	8002a08 <HAL_RCC_GetPCLK2Freq>
 8003dbc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003dc0:	e003      	b.n	8003dca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dc2:	f7fe fe0d 	bl	80029e0 <HAL_RCC_GetPCLK1Freq>
 8003dc6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dce:	69db      	ldr	r3, [r3, #28]
 8003dd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dd4:	f040 810c 	bne.w	8003ff0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003dd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003de2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003de6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003dea:	4622      	mov	r2, r4
 8003dec:	462b      	mov	r3, r5
 8003dee:	1891      	adds	r1, r2, r2
 8003df0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003df2:	415b      	adcs	r3, r3
 8003df4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003df6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003dfa:	4621      	mov	r1, r4
 8003dfc:	eb12 0801 	adds.w	r8, r2, r1
 8003e00:	4629      	mov	r1, r5
 8003e02:	eb43 0901 	adc.w	r9, r3, r1
 8003e06:	f04f 0200 	mov.w	r2, #0
 8003e0a:	f04f 0300 	mov.w	r3, #0
 8003e0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e1a:	4690      	mov	r8, r2
 8003e1c:	4699      	mov	r9, r3
 8003e1e:	4623      	mov	r3, r4
 8003e20:	eb18 0303 	adds.w	r3, r8, r3
 8003e24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e28:	462b      	mov	r3, r5
 8003e2a:	eb49 0303 	adc.w	r3, r9, r3
 8003e2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e3e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003e42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e46:	460b      	mov	r3, r1
 8003e48:	18db      	adds	r3, r3, r3
 8003e4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	eb42 0303 	adc.w	r3, r2, r3
 8003e52:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003e58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003e5c:	f7fc fa30 	bl	80002c0 <__aeabi_uldivmod>
 8003e60:	4602      	mov	r2, r0
 8003e62:	460b      	mov	r3, r1
 8003e64:	4b61      	ldr	r3, [pc, #388]	@ (8003fec <UART_SetConfig+0x2d4>)
 8003e66:	fba3 2302 	umull	r2, r3, r3, r2
 8003e6a:	095b      	lsrs	r3, r3, #5
 8003e6c:	011c      	lsls	r4, r3, #4
 8003e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e72:	2200      	movs	r2, #0
 8003e74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e78:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003e7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003e80:	4642      	mov	r2, r8
 8003e82:	464b      	mov	r3, r9
 8003e84:	1891      	adds	r1, r2, r2
 8003e86:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003e88:	415b      	adcs	r3, r3
 8003e8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003e90:	4641      	mov	r1, r8
 8003e92:	eb12 0a01 	adds.w	sl, r2, r1
 8003e96:	4649      	mov	r1, r9
 8003e98:	eb43 0b01 	adc.w	fp, r3, r1
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ea8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003eac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003eb0:	4692      	mov	sl, r2
 8003eb2:	469b      	mov	fp, r3
 8003eb4:	4643      	mov	r3, r8
 8003eb6:	eb1a 0303 	adds.w	r3, sl, r3
 8003eba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ebe:	464b      	mov	r3, r9
 8003ec0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ec4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ed4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003ed8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003edc:	460b      	mov	r3, r1
 8003ede:	18db      	adds	r3, r3, r3
 8003ee0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	eb42 0303 	adc.w	r3, r2, r3
 8003ee8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003eea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003eee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003ef2:	f7fc f9e5 	bl	80002c0 <__aeabi_uldivmod>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	460b      	mov	r3, r1
 8003efa:	4611      	mov	r1, r2
 8003efc:	4b3b      	ldr	r3, [pc, #236]	@ (8003fec <UART_SetConfig+0x2d4>)
 8003efe:	fba3 2301 	umull	r2, r3, r3, r1
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	2264      	movs	r2, #100	@ 0x64
 8003f06:	fb02 f303 	mul.w	r3, r2, r3
 8003f0a:	1acb      	subs	r3, r1, r3
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003f12:	4b36      	ldr	r3, [pc, #216]	@ (8003fec <UART_SetConfig+0x2d4>)
 8003f14:	fba3 2302 	umull	r2, r3, r3, r2
 8003f18:	095b      	lsrs	r3, r3, #5
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003f20:	441c      	add	r4, r3
 8003f22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f26:	2200      	movs	r2, #0
 8003f28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f2c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003f30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003f34:	4642      	mov	r2, r8
 8003f36:	464b      	mov	r3, r9
 8003f38:	1891      	adds	r1, r2, r2
 8003f3a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f3c:	415b      	adcs	r3, r3
 8003f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003f44:	4641      	mov	r1, r8
 8003f46:	1851      	adds	r1, r2, r1
 8003f48:	6339      	str	r1, [r7, #48]	@ 0x30
 8003f4a:	4649      	mov	r1, r9
 8003f4c:	414b      	adcs	r3, r1
 8003f4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003f5c:	4659      	mov	r1, fp
 8003f5e:	00cb      	lsls	r3, r1, #3
 8003f60:	4651      	mov	r1, sl
 8003f62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f66:	4651      	mov	r1, sl
 8003f68:	00ca      	lsls	r2, r1, #3
 8003f6a:	4610      	mov	r0, r2
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	4603      	mov	r3, r0
 8003f70:	4642      	mov	r2, r8
 8003f72:	189b      	adds	r3, r3, r2
 8003f74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f78:	464b      	mov	r3, r9
 8003f7a:	460a      	mov	r2, r1
 8003f7c:	eb42 0303 	adc.w	r3, r2, r3
 8003f80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f90:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003f94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f98:	460b      	mov	r3, r1
 8003f9a:	18db      	adds	r3, r3, r3
 8003f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	eb42 0303 	adc.w	r3, r2, r3
 8003fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fa6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003faa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003fae:	f7fc f987 	bl	80002c0 <__aeabi_uldivmod>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8003fec <UART_SetConfig+0x2d4>)
 8003fb8:	fba3 1302 	umull	r1, r3, r3, r2
 8003fbc:	095b      	lsrs	r3, r3, #5
 8003fbe:	2164      	movs	r1, #100	@ 0x64
 8003fc0:	fb01 f303 	mul.w	r3, r1, r3
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	3332      	adds	r3, #50	@ 0x32
 8003fca:	4a08      	ldr	r2, [pc, #32]	@ (8003fec <UART_SetConfig+0x2d4>)
 8003fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd0:	095b      	lsrs	r3, r3, #5
 8003fd2:	f003 0207 	and.w	r2, r3, #7
 8003fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4422      	add	r2, r4
 8003fde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fe0:	e106      	b.n	80041f0 <UART_SetConfig+0x4d8>
 8003fe2:	bf00      	nop
 8003fe4:	40011000 	.word	0x40011000
 8003fe8:	40011400 	.word	0x40011400
 8003fec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ff0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003ffa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003ffe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004002:	4642      	mov	r2, r8
 8004004:	464b      	mov	r3, r9
 8004006:	1891      	adds	r1, r2, r2
 8004008:	6239      	str	r1, [r7, #32]
 800400a:	415b      	adcs	r3, r3
 800400c:	627b      	str	r3, [r7, #36]	@ 0x24
 800400e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004012:	4641      	mov	r1, r8
 8004014:	1854      	adds	r4, r2, r1
 8004016:	4649      	mov	r1, r9
 8004018:	eb43 0501 	adc.w	r5, r3, r1
 800401c:	f04f 0200 	mov.w	r2, #0
 8004020:	f04f 0300 	mov.w	r3, #0
 8004024:	00eb      	lsls	r3, r5, #3
 8004026:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800402a:	00e2      	lsls	r2, r4, #3
 800402c:	4614      	mov	r4, r2
 800402e:	461d      	mov	r5, r3
 8004030:	4643      	mov	r3, r8
 8004032:	18e3      	adds	r3, r4, r3
 8004034:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004038:	464b      	mov	r3, r9
 800403a:	eb45 0303 	adc.w	r3, r5, r3
 800403e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800404e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004052:	f04f 0200 	mov.w	r2, #0
 8004056:	f04f 0300 	mov.w	r3, #0
 800405a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800405e:	4629      	mov	r1, r5
 8004060:	008b      	lsls	r3, r1, #2
 8004062:	4621      	mov	r1, r4
 8004064:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004068:	4621      	mov	r1, r4
 800406a:	008a      	lsls	r2, r1, #2
 800406c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004070:	f7fc f926 	bl	80002c0 <__aeabi_uldivmod>
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	4b60      	ldr	r3, [pc, #384]	@ (80041fc <UART_SetConfig+0x4e4>)
 800407a:	fba3 2302 	umull	r2, r3, r3, r2
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	011c      	lsls	r4, r3, #4
 8004082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004086:	2200      	movs	r2, #0
 8004088:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800408c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004090:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004094:	4642      	mov	r2, r8
 8004096:	464b      	mov	r3, r9
 8004098:	1891      	adds	r1, r2, r2
 800409a:	61b9      	str	r1, [r7, #24]
 800409c:	415b      	adcs	r3, r3
 800409e:	61fb      	str	r3, [r7, #28]
 80040a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040a4:	4641      	mov	r1, r8
 80040a6:	1851      	adds	r1, r2, r1
 80040a8:	6139      	str	r1, [r7, #16]
 80040aa:	4649      	mov	r1, r9
 80040ac:	414b      	adcs	r3, r1
 80040ae:	617b      	str	r3, [r7, #20]
 80040b0:	f04f 0200 	mov.w	r2, #0
 80040b4:	f04f 0300 	mov.w	r3, #0
 80040b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040bc:	4659      	mov	r1, fp
 80040be:	00cb      	lsls	r3, r1, #3
 80040c0:	4651      	mov	r1, sl
 80040c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040c6:	4651      	mov	r1, sl
 80040c8:	00ca      	lsls	r2, r1, #3
 80040ca:	4610      	mov	r0, r2
 80040cc:	4619      	mov	r1, r3
 80040ce:	4603      	mov	r3, r0
 80040d0:	4642      	mov	r2, r8
 80040d2:	189b      	adds	r3, r3, r2
 80040d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040d8:	464b      	mov	r3, r9
 80040da:	460a      	mov	r2, r1
 80040dc:	eb42 0303 	adc.w	r3, r2, r3
 80040e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80040e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80040f0:	f04f 0200 	mov.w	r2, #0
 80040f4:	f04f 0300 	mov.w	r3, #0
 80040f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80040fc:	4649      	mov	r1, r9
 80040fe:	008b      	lsls	r3, r1, #2
 8004100:	4641      	mov	r1, r8
 8004102:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004106:	4641      	mov	r1, r8
 8004108:	008a      	lsls	r2, r1, #2
 800410a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800410e:	f7fc f8d7 	bl	80002c0 <__aeabi_uldivmod>
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	4611      	mov	r1, r2
 8004118:	4b38      	ldr	r3, [pc, #224]	@ (80041fc <UART_SetConfig+0x4e4>)
 800411a:	fba3 2301 	umull	r2, r3, r3, r1
 800411e:	095b      	lsrs	r3, r3, #5
 8004120:	2264      	movs	r2, #100	@ 0x64
 8004122:	fb02 f303 	mul.w	r3, r2, r3
 8004126:	1acb      	subs	r3, r1, r3
 8004128:	011b      	lsls	r3, r3, #4
 800412a:	3332      	adds	r3, #50	@ 0x32
 800412c:	4a33      	ldr	r2, [pc, #204]	@ (80041fc <UART_SetConfig+0x4e4>)
 800412e:	fba2 2303 	umull	r2, r3, r2, r3
 8004132:	095b      	lsrs	r3, r3, #5
 8004134:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004138:	441c      	add	r4, r3
 800413a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800413e:	2200      	movs	r2, #0
 8004140:	673b      	str	r3, [r7, #112]	@ 0x70
 8004142:	677a      	str	r2, [r7, #116]	@ 0x74
 8004144:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004148:	4642      	mov	r2, r8
 800414a:	464b      	mov	r3, r9
 800414c:	1891      	adds	r1, r2, r2
 800414e:	60b9      	str	r1, [r7, #8]
 8004150:	415b      	adcs	r3, r3
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004158:	4641      	mov	r1, r8
 800415a:	1851      	adds	r1, r2, r1
 800415c:	6039      	str	r1, [r7, #0]
 800415e:	4649      	mov	r1, r9
 8004160:	414b      	adcs	r3, r1
 8004162:	607b      	str	r3, [r7, #4]
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	f04f 0300 	mov.w	r3, #0
 800416c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004170:	4659      	mov	r1, fp
 8004172:	00cb      	lsls	r3, r1, #3
 8004174:	4651      	mov	r1, sl
 8004176:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800417a:	4651      	mov	r1, sl
 800417c:	00ca      	lsls	r2, r1, #3
 800417e:	4610      	mov	r0, r2
 8004180:	4619      	mov	r1, r3
 8004182:	4603      	mov	r3, r0
 8004184:	4642      	mov	r2, r8
 8004186:	189b      	adds	r3, r3, r2
 8004188:	66bb      	str	r3, [r7, #104]	@ 0x68
 800418a:	464b      	mov	r3, r9
 800418c:	460a      	mov	r2, r1
 800418e:	eb42 0303 	adc.w	r3, r2, r3
 8004192:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	663b      	str	r3, [r7, #96]	@ 0x60
 800419e:	667a      	str	r2, [r7, #100]	@ 0x64
 80041a0:	f04f 0200 	mov.w	r2, #0
 80041a4:	f04f 0300 	mov.w	r3, #0
 80041a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80041ac:	4649      	mov	r1, r9
 80041ae:	008b      	lsls	r3, r1, #2
 80041b0:	4641      	mov	r1, r8
 80041b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041b6:	4641      	mov	r1, r8
 80041b8:	008a      	lsls	r2, r1, #2
 80041ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80041be:	f7fc f87f 	bl	80002c0 <__aeabi_uldivmod>
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	4b0d      	ldr	r3, [pc, #52]	@ (80041fc <UART_SetConfig+0x4e4>)
 80041c8:	fba3 1302 	umull	r1, r3, r3, r2
 80041cc:	095b      	lsrs	r3, r3, #5
 80041ce:	2164      	movs	r1, #100	@ 0x64
 80041d0:	fb01 f303 	mul.w	r3, r1, r3
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	011b      	lsls	r3, r3, #4
 80041d8:	3332      	adds	r3, #50	@ 0x32
 80041da:	4a08      	ldr	r2, [pc, #32]	@ (80041fc <UART_SetConfig+0x4e4>)
 80041dc:	fba2 2303 	umull	r2, r3, r2, r3
 80041e0:	095b      	lsrs	r3, r3, #5
 80041e2:	f003 020f 	and.w	r2, r3, #15
 80041e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4422      	add	r2, r4
 80041ee:	609a      	str	r2, [r3, #8]
}
 80041f0:	bf00      	nop
 80041f2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80041f6:	46bd      	mov	sp, r7
 80041f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041fc:	51eb851f 	.word	0x51eb851f

08004200 <siprintf>:
 8004200:	b40e      	push	{r1, r2, r3}
 8004202:	b510      	push	{r4, lr}
 8004204:	b09d      	sub	sp, #116	@ 0x74
 8004206:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004208:	9002      	str	r0, [sp, #8]
 800420a:	9006      	str	r0, [sp, #24]
 800420c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004210:	480a      	ldr	r0, [pc, #40]	@ (800423c <siprintf+0x3c>)
 8004212:	9107      	str	r1, [sp, #28]
 8004214:	9104      	str	r1, [sp, #16]
 8004216:	490a      	ldr	r1, [pc, #40]	@ (8004240 <siprintf+0x40>)
 8004218:	f853 2b04 	ldr.w	r2, [r3], #4
 800421c:	9105      	str	r1, [sp, #20]
 800421e:	2400      	movs	r4, #0
 8004220:	a902      	add	r1, sp, #8
 8004222:	6800      	ldr	r0, [r0, #0]
 8004224:	9301      	str	r3, [sp, #4]
 8004226:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004228:	f000 f98c 	bl	8004544 <_svfiprintf_r>
 800422c:	9b02      	ldr	r3, [sp, #8]
 800422e:	701c      	strb	r4, [r3, #0]
 8004230:	b01d      	add	sp, #116	@ 0x74
 8004232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004236:	b003      	add	sp, #12
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	2000000c 	.word	0x2000000c
 8004240:	ffff0208 	.word	0xffff0208

08004244 <__errno>:
 8004244:	4b01      	ldr	r3, [pc, #4]	@ (800424c <__errno+0x8>)
 8004246:	6818      	ldr	r0, [r3, #0]
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	2000000c 	.word	0x2000000c

08004250 <__libc_init_array>:
 8004250:	b570      	push	{r4, r5, r6, lr}
 8004252:	4d0d      	ldr	r5, [pc, #52]	@ (8004288 <__libc_init_array+0x38>)
 8004254:	4c0d      	ldr	r4, [pc, #52]	@ (800428c <__libc_init_array+0x3c>)
 8004256:	1b64      	subs	r4, r4, r5
 8004258:	10a4      	asrs	r4, r4, #2
 800425a:	2600      	movs	r6, #0
 800425c:	42a6      	cmp	r6, r4
 800425e:	d109      	bne.n	8004274 <__libc_init_array+0x24>
 8004260:	4d0b      	ldr	r5, [pc, #44]	@ (8004290 <__libc_init_array+0x40>)
 8004262:	4c0c      	ldr	r4, [pc, #48]	@ (8004294 <__libc_init_array+0x44>)
 8004264:	f000 fc64 	bl	8004b30 <_init>
 8004268:	1b64      	subs	r4, r4, r5
 800426a:	10a4      	asrs	r4, r4, #2
 800426c:	2600      	movs	r6, #0
 800426e:	42a6      	cmp	r6, r4
 8004270:	d105      	bne.n	800427e <__libc_init_array+0x2e>
 8004272:	bd70      	pop	{r4, r5, r6, pc}
 8004274:	f855 3b04 	ldr.w	r3, [r5], #4
 8004278:	4798      	blx	r3
 800427a:	3601      	adds	r6, #1
 800427c:	e7ee      	b.n	800425c <__libc_init_array+0xc>
 800427e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004282:	4798      	blx	r3
 8004284:	3601      	adds	r6, #1
 8004286:	e7f2      	b.n	800426e <__libc_init_array+0x1e>
 8004288:	08004c2c 	.word	0x08004c2c
 800428c:	08004c2c 	.word	0x08004c2c
 8004290:	08004c2c 	.word	0x08004c2c
 8004294:	08004c30 	.word	0x08004c30

08004298 <__retarget_lock_acquire_recursive>:
 8004298:	4770      	bx	lr

0800429a <__retarget_lock_release_recursive>:
 800429a:	4770      	bx	lr

0800429c <_free_r>:
 800429c:	b538      	push	{r3, r4, r5, lr}
 800429e:	4605      	mov	r5, r0
 80042a0:	2900      	cmp	r1, #0
 80042a2:	d041      	beq.n	8004328 <_free_r+0x8c>
 80042a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042a8:	1f0c      	subs	r4, r1, #4
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	bfb8      	it	lt
 80042ae:	18e4      	addlt	r4, r4, r3
 80042b0:	f000 f8e0 	bl	8004474 <__malloc_lock>
 80042b4:	4a1d      	ldr	r2, [pc, #116]	@ (800432c <_free_r+0x90>)
 80042b6:	6813      	ldr	r3, [r2, #0]
 80042b8:	b933      	cbnz	r3, 80042c8 <_free_r+0x2c>
 80042ba:	6063      	str	r3, [r4, #4]
 80042bc:	6014      	str	r4, [r2, #0]
 80042be:	4628      	mov	r0, r5
 80042c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042c4:	f000 b8dc 	b.w	8004480 <__malloc_unlock>
 80042c8:	42a3      	cmp	r3, r4
 80042ca:	d908      	bls.n	80042de <_free_r+0x42>
 80042cc:	6820      	ldr	r0, [r4, #0]
 80042ce:	1821      	adds	r1, r4, r0
 80042d0:	428b      	cmp	r3, r1
 80042d2:	bf01      	itttt	eq
 80042d4:	6819      	ldreq	r1, [r3, #0]
 80042d6:	685b      	ldreq	r3, [r3, #4]
 80042d8:	1809      	addeq	r1, r1, r0
 80042da:	6021      	streq	r1, [r4, #0]
 80042dc:	e7ed      	b.n	80042ba <_free_r+0x1e>
 80042de:	461a      	mov	r2, r3
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	b10b      	cbz	r3, 80042e8 <_free_r+0x4c>
 80042e4:	42a3      	cmp	r3, r4
 80042e6:	d9fa      	bls.n	80042de <_free_r+0x42>
 80042e8:	6811      	ldr	r1, [r2, #0]
 80042ea:	1850      	adds	r0, r2, r1
 80042ec:	42a0      	cmp	r0, r4
 80042ee:	d10b      	bne.n	8004308 <_free_r+0x6c>
 80042f0:	6820      	ldr	r0, [r4, #0]
 80042f2:	4401      	add	r1, r0
 80042f4:	1850      	adds	r0, r2, r1
 80042f6:	4283      	cmp	r3, r0
 80042f8:	6011      	str	r1, [r2, #0]
 80042fa:	d1e0      	bne.n	80042be <_free_r+0x22>
 80042fc:	6818      	ldr	r0, [r3, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	6053      	str	r3, [r2, #4]
 8004302:	4408      	add	r0, r1
 8004304:	6010      	str	r0, [r2, #0]
 8004306:	e7da      	b.n	80042be <_free_r+0x22>
 8004308:	d902      	bls.n	8004310 <_free_r+0x74>
 800430a:	230c      	movs	r3, #12
 800430c:	602b      	str	r3, [r5, #0]
 800430e:	e7d6      	b.n	80042be <_free_r+0x22>
 8004310:	6820      	ldr	r0, [r4, #0]
 8004312:	1821      	adds	r1, r4, r0
 8004314:	428b      	cmp	r3, r1
 8004316:	bf04      	itt	eq
 8004318:	6819      	ldreq	r1, [r3, #0]
 800431a:	685b      	ldreq	r3, [r3, #4]
 800431c:	6063      	str	r3, [r4, #4]
 800431e:	bf04      	itt	eq
 8004320:	1809      	addeq	r1, r1, r0
 8004322:	6021      	streq	r1, [r4, #0]
 8004324:	6054      	str	r4, [r2, #4]
 8004326:	e7ca      	b.n	80042be <_free_r+0x22>
 8004328:	bd38      	pop	{r3, r4, r5, pc}
 800432a:	bf00      	nop
 800432c:	200002b4 	.word	0x200002b4

08004330 <sbrk_aligned>:
 8004330:	b570      	push	{r4, r5, r6, lr}
 8004332:	4e0f      	ldr	r6, [pc, #60]	@ (8004370 <sbrk_aligned+0x40>)
 8004334:	460c      	mov	r4, r1
 8004336:	6831      	ldr	r1, [r6, #0]
 8004338:	4605      	mov	r5, r0
 800433a:	b911      	cbnz	r1, 8004342 <sbrk_aligned+0x12>
 800433c:	f000 fba4 	bl	8004a88 <_sbrk_r>
 8004340:	6030      	str	r0, [r6, #0]
 8004342:	4621      	mov	r1, r4
 8004344:	4628      	mov	r0, r5
 8004346:	f000 fb9f 	bl	8004a88 <_sbrk_r>
 800434a:	1c43      	adds	r3, r0, #1
 800434c:	d103      	bne.n	8004356 <sbrk_aligned+0x26>
 800434e:	f04f 34ff 	mov.w	r4, #4294967295
 8004352:	4620      	mov	r0, r4
 8004354:	bd70      	pop	{r4, r5, r6, pc}
 8004356:	1cc4      	adds	r4, r0, #3
 8004358:	f024 0403 	bic.w	r4, r4, #3
 800435c:	42a0      	cmp	r0, r4
 800435e:	d0f8      	beq.n	8004352 <sbrk_aligned+0x22>
 8004360:	1a21      	subs	r1, r4, r0
 8004362:	4628      	mov	r0, r5
 8004364:	f000 fb90 	bl	8004a88 <_sbrk_r>
 8004368:	3001      	adds	r0, #1
 800436a:	d1f2      	bne.n	8004352 <sbrk_aligned+0x22>
 800436c:	e7ef      	b.n	800434e <sbrk_aligned+0x1e>
 800436e:	bf00      	nop
 8004370:	200002b0 	.word	0x200002b0

08004374 <_malloc_r>:
 8004374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004378:	1ccd      	adds	r5, r1, #3
 800437a:	f025 0503 	bic.w	r5, r5, #3
 800437e:	3508      	adds	r5, #8
 8004380:	2d0c      	cmp	r5, #12
 8004382:	bf38      	it	cc
 8004384:	250c      	movcc	r5, #12
 8004386:	2d00      	cmp	r5, #0
 8004388:	4606      	mov	r6, r0
 800438a:	db01      	blt.n	8004390 <_malloc_r+0x1c>
 800438c:	42a9      	cmp	r1, r5
 800438e:	d904      	bls.n	800439a <_malloc_r+0x26>
 8004390:	230c      	movs	r3, #12
 8004392:	6033      	str	r3, [r6, #0]
 8004394:	2000      	movs	r0, #0
 8004396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800439a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004470 <_malloc_r+0xfc>
 800439e:	f000 f869 	bl	8004474 <__malloc_lock>
 80043a2:	f8d8 3000 	ldr.w	r3, [r8]
 80043a6:	461c      	mov	r4, r3
 80043a8:	bb44      	cbnz	r4, 80043fc <_malloc_r+0x88>
 80043aa:	4629      	mov	r1, r5
 80043ac:	4630      	mov	r0, r6
 80043ae:	f7ff ffbf 	bl	8004330 <sbrk_aligned>
 80043b2:	1c43      	adds	r3, r0, #1
 80043b4:	4604      	mov	r4, r0
 80043b6:	d158      	bne.n	800446a <_malloc_r+0xf6>
 80043b8:	f8d8 4000 	ldr.w	r4, [r8]
 80043bc:	4627      	mov	r7, r4
 80043be:	2f00      	cmp	r7, #0
 80043c0:	d143      	bne.n	800444a <_malloc_r+0xd6>
 80043c2:	2c00      	cmp	r4, #0
 80043c4:	d04b      	beq.n	800445e <_malloc_r+0xea>
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	4639      	mov	r1, r7
 80043ca:	4630      	mov	r0, r6
 80043cc:	eb04 0903 	add.w	r9, r4, r3
 80043d0:	f000 fb5a 	bl	8004a88 <_sbrk_r>
 80043d4:	4581      	cmp	r9, r0
 80043d6:	d142      	bne.n	800445e <_malloc_r+0xea>
 80043d8:	6821      	ldr	r1, [r4, #0]
 80043da:	1a6d      	subs	r5, r5, r1
 80043dc:	4629      	mov	r1, r5
 80043de:	4630      	mov	r0, r6
 80043e0:	f7ff ffa6 	bl	8004330 <sbrk_aligned>
 80043e4:	3001      	adds	r0, #1
 80043e6:	d03a      	beq.n	800445e <_malloc_r+0xea>
 80043e8:	6823      	ldr	r3, [r4, #0]
 80043ea:	442b      	add	r3, r5
 80043ec:	6023      	str	r3, [r4, #0]
 80043ee:	f8d8 3000 	ldr.w	r3, [r8]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	bb62      	cbnz	r2, 8004450 <_malloc_r+0xdc>
 80043f6:	f8c8 7000 	str.w	r7, [r8]
 80043fa:	e00f      	b.n	800441c <_malloc_r+0xa8>
 80043fc:	6822      	ldr	r2, [r4, #0]
 80043fe:	1b52      	subs	r2, r2, r5
 8004400:	d420      	bmi.n	8004444 <_malloc_r+0xd0>
 8004402:	2a0b      	cmp	r2, #11
 8004404:	d917      	bls.n	8004436 <_malloc_r+0xc2>
 8004406:	1961      	adds	r1, r4, r5
 8004408:	42a3      	cmp	r3, r4
 800440a:	6025      	str	r5, [r4, #0]
 800440c:	bf18      	it	ne
 800440e:	6059      	strne	r1, [r3, #4]
 8004410:	6863      	ldr	r3, [r4, #4]
 8004412:	bf08      	it	eq
 8004414:	f8c8 1000 	streq.w	r1, [r8]
 8004418:	5162      	str	r2, [r4, r5]
 800441a:	604b      	str	r3, [r1, #4]
 800441c:	4630      	mov	r0, r6
 800441e:	f000 f82f 	bl	8004480 <__malloc_unlock>
 8004422:	f104 000b 	add.w	r0, r4, #11
 8004426:	1d23      	adds	r3, r4, #4
 8004428:	f020 0007 	bic.w	r0, r0, #7
 800442c:	1ac2      	subs	r2, r0, r3
 800442e:	bf1c      	itt	ne
 8004430:	1a1b      	subne	r3, r3, r0
 8004432:	50a3      	strne	r3, [r4, r2]
 8004434:	e7af      	b.n	8004396 <_malloc_r+0x22>
 8004436:	6862      	ldr	r2, [r4, #4]
 8004438:	42a3      	cmp	r3, r4
 800443a:	bf0c      	ite	eq
 800443c:	f8c8 2000 	streq.w	r2, [r8]
 8004440:	605a      	strne	r2, [r3, #4]
 8004442:	e7eb      	b.n	800441c <_malloc_r+0xa8>
 8004444:	4623      	mov	r3, r4
 8004446:	6864      	ldr	r4, [r4, #4]
 8004448:	e7ae      	b.n	80043a8 <_malloc_r+0x34>
 800444a:	463c      	mov	r4, r7
 800444c:	687f      	ldr	r7, [r7, #4]
 800444e:	e7b6      	b.n	80043be <_malloc_r+0x4a>
 8004450:	461a      	mov	r2, r3
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	42a3      	cmp	r3, r4
 8004456:	d1fb      	bne.n	8004450 <_malloc_r+0xdc>
 8004458:	2300      	movs	r3, #0
 800445a:	6053      	str	r3, [r2, #4]
 800445c:	e7de      	b.n	800441c <_malloc_r+0xa8>
 800445e:	230c      	movs	r3, #12
 8004460:	6033      	str	r3, [r6, #0]
 8004462:	4630      	mov	r0, r6
 8004464:	f000 f80c 	bl	8004480 <__malloc_unlock>
 8004468:	e794      	b.n	8004394 <_malloc_r+0x20>
 800446a:	6005      	str	r5, [r0, #0]
 800446c:	e7d6      	b.n	800441c <_malloc_r+0xa8>
 800446e:	bf00      	nop
 8004470:	200002b4 	.word	0x200002b4

08004474 <__malloc_lock>:
 8004474:	4801      	ldr	r0, [pc, #4]	@ (800447c <__malloc_lock+0x8>)
 8004476:	f7ff bf0f 	b.w	8004298 <__retarget_lock_acquire_recursive>
 800447a:	bf00      	nop
 800447c:	200002ac 	.word	0x200002ac

08004480 <__malloc_unlock>:
 8004480:	4801      	ldr	r0, [pc, #4]	@ (8004488 <__malloc_unlock+0x8>)
 8004482:	f7ff bf0a 	b.w	800429a <__retarget_lock_release_recursive>
 8004486:	bf00      	nop
 8004488:	200002ac 	.word	0x200002ac

0800448c <__ssputs_r>:
 800448c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004490:	688e      	ldr	r6, [r1, #8]
 8004492:	461f      	mov	r7, r3
 8004494:	42be      	cmp	r6, r7
 8004496:	680b      	ldr	r3, [r1, #0]
 8004498:	4682      	mov	sl, r0
 800449a:	460c      	mov	r4, r1
 800449c:	4690      	mov	r8, r2
 800449e:	d82d      	bhi.n	80044fc <__ssputs_r+0x70>
 80044a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80044a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80044a8:	d026      	beq.n	80044f8 <__ssputs_r+0x6c>
 80044aa:	6965      	ldr	r5, [r4, #20]
 80044ac:	6909      	ldr	r1, [r1, #16]
 80044ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044b2:	eba3 0901 	sub.w	r9, r3, r1
 80044b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80044ba:	1c7b      	adds	r3, r7, #1
 80044bc:	444b      	add	r3, r9
 80044be:	106d      	asrs	r5, r5, #1
 80044c0:	429d      	cmp	r5, r3
 80044c2:	bf38      	it	cc
 80044c4:	461d      	movcc	r5, r3
 80044c6:	0553      	lsls	r3, r2, #21
 80044c8:	d527      	bpl.n	800451a <__ssputs_r+0x8e>
 80044ca:	4629      	mov	r1, r5
 80044cc:	f7ff ff52 	bl	8004374 <_malloc_r>
 80044d0:	4606      	mov	r6, r0
 80044d2:	b360      	cbz	r0, 800452e <__ssputs_r+0xa2>
 80044d4:	6921      	ldr	r1, [r4, #16]
 80044d6:	464a      	mov	r2, r9
 80044d8:	f000 fae6 	bl	8004aa8 <memcpy>
 80044dc:	89a3      	ldrh	r3, [r4, #12]
 80044de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80044e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044e6:	81a3      	strh	r3, [r4, #12]
 80044e8:	6126      	str	r6, [r4, #16]
 80044ea:	6165      	str	r5, [r4, #20]
 80044ec:	444e      	add	r6, r9
 80044ee:	eba5 0509 	sub.w	r5, r5, r9
 80044f2:	6026      	str	r6, [r4, #0]
 80044f4:	60a5      	str	r5, [r4, #8]
 80044f6:	463e      	mov	r6, r7
 80044f8:	42be      	cmp	r6, r7
 80044fa:	d900      	bls.n	80044fe <__ssputs_r+0x72>
 80044fc:	463e      	mov	r6, r7
 80044fe:	6820      	ldr	r0, [r4, #0]
 8004500:	4632      	mov	r2, r6
 8004502:	4641      	mov	r1, r8
 8004504:	f000 faa6 	bl	8004a54 <memmove>
 8004508:	68a3      	ldr	r3, [r4, #8]
 800450a:	1b9b      	subs	r3, r3, r6
 800450c:	60a3      	str	r3, [r4, #8]
 800450e:	6823      	ldr	r3, [r4, #0]
 8004510:	4433      	add	r3, r6
 8004512:	6023      	str	r3, [r4, #0]
 8004514:	2000      	movs	r0, #0
 8004516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800451a:	462a      	mov	r2, r5
 800451c:	f000 fad2 	bl	8004ac4 <_realloc_r>
 8004520:	4606      	mov	r6, r0
 8004522:	2800      	cmp	r0, #0
 8004524:	d1e0      	bne.n	80044e8 <__ssputs_r+0x5c>
 8004526:	6921      	ldr	r1, [r4, #16]
 8004528:	4650      	mov	r0, sl
 800452a:	f7ff feb7 	bl	800429c <_free_r>
 800452e:	230c      	movs	r3, #12
 8004530:	f8ca 3000 	str.w	r3, [sl]
 8004534:	89a3      	ldrh	r3, [r4, #12]
 8004536:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800453a:	81a3      	strh	r3, [r4, #12]
 800453c:	f04f 30ff 	mov.w	r0, #4294967295
 8004540:	e7e9      	b.n	8004516 <__ssputs_r+0x8a>
	...

08004544 <_svfiprintf_r>:
 8004544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004548:	4698      	mov	r8, r3
 800454a:	898b      	ldrh	r3, [r1, #12]
 800454c:	061b      	lsls	r3, r3, #24
 800454e:	b09d      	sub	sp, #116	@ 0x74
 8004550:	4607      	mov	r7, r0
 8004552:	460d      	mov	r5, r1
 8004554:	4614      	mov	r4, r2
 8004556:	d510      	bpl.n	800457a <_svfiprintf_r+0x36>
 8004558:	690b      	ldr	r3, [r1, #16]
 800455a:	b973      	cbnz	r3, 800457a <_svfiprintf_r+0x36>
 800455c:	2140      	movs	r1, #64	@ 0x40
 800455e:	f7ff ff09 	bl	8004374 <_malloc_r>
 8004562:	6028      	str	r0, [r5, #0]
 8004564:	6128      	str	r0, [r5, #16]
 8004566:	b930      	cbnz	r0, 8004576 <_svfiprintf_r+0x32>
 8004568:	230c      	movs	r3, #12
 800456a:	603b      	str	r3, [r7, #0]
 800456c:	f04f 30ff 	mov.w	r0, #4294967295
 8004570:	b01d      	add	sp, #116	@ 0x74
 8004572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004576:	2340      	movs	r3, #64	@ 0x40
 8004578:	616b      	str	r3, [r5, #20]
 800457a:	2300      	movs	r3, #0
 800457c:	9309      	str	r3, [sp, #36]	@ 0x24
 800457e:	2320      	movs	r3, #32
 8004580:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004584:	f8cd 800c 	str.w	r8, [sp, #12]
 8004588:	2330      	movs	r3, #48	@ 0x30
 800458a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004728 <_svfiprintf_r+0x1e4>
 800458e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004592:	f04f 0901 	mov.w	r9, #1
 8004596:	4623      	mov	r3, r4
 8004598:	469a      	mov	sl, r3
 800459a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800459e:	b10a      	cbz	r2, 80045a4 <_svfiprintf_r+0x60>
 80045a0:	2a25      	cmp	r2, #37	@ 0x25
 80045a2:	d1f9      	bne.n	8004598 <_svfiprintf_r+0x54>
 80045a4:	ebba 0b04 	subs.w	fp, sl, r4
 80045a8:	d00b      	beq.n	80045c2 <_svfiprintf_r+0x7e>
 80045aa:	465b      	mov	r3, fp
 80045ac:	4622      	mov	r2, r4
 80045ae:	4629      	mov	r1, r5
 80045b0:	4638      	mov	r0, r7
 80045b2:	f7ff ff6b 	bl	800448c <__ssputs_r>
 80045b6:	3001      	adds	r0, #1
 80045b8:	f000 80a7 	beq.w	800470a <_svfiprintf_r+0x1c6>
 80045bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80045be:	445a      	add	r2, fp
 80045c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80045c2:	f89a 3000 	ldrb.w	r3, [sl]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f000 809f 	beq.w	800470a <_svfiprintf_r+0x1c6>
 80045cc:	2300      	movs	r3, #0
 80045ce:	f04f 32ff 	mov.w	r2, #4294967295
 80045d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045d6:	f10a 0a01 	add.w	sl, sl, #1
 80045da:	9304      	str	r3, [sp, #16]
 80045dc:	9307      	str	r3, [sp, #28]
 80045de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80045e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80045e4:	4654      	mov	r4, sl
 80045e6:	2205      	movs	r2, #5
 80045e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045ec:	484e      	ldr	r0, [pc, #312]	@ (8004728 <_svfiprintf_r+0x1e4>)
 80045ee:	f7fb fe17 	bl	8000220 <memchr>
 80045f2:	9a04      	ldr	r2, [sp, #16]
 80045f4:	b9d8      	cbnz	r0, 800462e <_svfiprintf_r+0xea>
 80045f6:	06d0      	lsls	r0, r2, #27
 80045f8:	bf44      	itt	mi
 80045fa:	2320      	movmi	r3, #32
 80045fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004600:	0711      	lsls	r1, r2, #28
 8004602:	bf44      	itt	mi
 8004604:	232b      	movmi	r3, #43	@ 0x2b
 8004606:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800460a:	f89a 3000 	ldrb.w	r3, [sl]
 800460e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004610:	d015      	beq.n	800463e <_svfiprintf_r+0xfa>
 8004612:	9a07      	ldr	r2, [sp, #28]
 8004614:	4654      	mov	r4, sl
 8004616:	2000      	movs	r0, #0
 8004618:	f04f 0c0a 	mov.w	ip, #10
 800461c:	4621      	mov	r1, r4
 800461e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004622:	3b30      	subs	r3, #48	@ 0x30
 8004624:	2b09      	cmp	r3, #9
 8004626:	d94b      	bls.n	80046c0 <_svfiprintf_r+0x17c>
 8004628:	b1b0      	cbz	r0, 8004658 <_svfiprintf_r+0x114>
 800462a:	9207      	str	r2, [sp, #28]
 800462c:	e014      	b.n	8004658 <_svfiprintf_r+0x114>
 800462e:	eba0 0308 	sub.w	r3, r0, r8
 8004632:	fa09 f303 	lsl.w	r3, r9, r3
 8004636:	4313      	orrs	r3, r2
 8004638:	9304      	str	r3, [sp, #16]
 800463a:	46a2      	mov	sl, r4
 800463c:	e7d2      	b.n	80045e4 <_svfiprintf_r+0xa0>
 800463e:	9b03      	ldr	r3, [sp, #12]
 8004640:	1d19      	adds	r1, r3, #4
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	9103      	str	r1, [sp, #12]
 8004646:	2b00      	cmp	r3, #0
 8004648:	bfbb      	ittet	lt
 800464a:	425b      	neglt	r3, r3
 800464c:	f042 0202 	orrlt.w	r2, r2, #2
 8004650:	9307      	strge	r3, [sp, #28]
 8004652:	9307      	strlt	r3, [sp, #28]
 8004654:	bfb8      	it	lt
 8004656:	9204      	strlt	r2, [sp, #16]
 8004658:	7823      	ldrb	r3, [r4, #0]
 800465a:	2b2e      	cmp	r3, #46	@ 0x2e
 800465c:	d10a      	bne.n	8004674 <_svfiprintf_r+0x130>
 800465e:	7863      	ldrb	r3, [r4, #1]
 8004660:	2b2a      	cmp	r3, #42	@ 0x2a
 8004662:	d132      	bne.n	80046ca <_svfiprintf_r+0x186>
 8004664:	9b03      	ldr	r3, [sp, #12]
 8004666:	1d1a      	adds	r2, r3, #4
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	9203      	str	r2, [sp, #12]
 800466c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004670:	3402      	adds	r4, #2
 8004672:	9305      	str	r3, [sp, #20]
 8004674:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004738 <_svfiprintf_r+0x1f4>
 8004678:	7821      	ldrb	r1, [r4, #0]
 800467a:	2203      	movs	r2, #3
 800467c:	4650      	mov	r0, sl
 800467e:	f7fb fdcf 	bl	8000220 <memchr>
 8004682:	b138      	cbz	r0, 8004694 <_svfiprintf_r+0x150>
 8004684:	9b04      	ldr	r3, [sp, #16]
 8004686:	eba0 000a 	sub.w	r0, r0, sl
 800468a:	2240      	movs	r2, #64	@ 0x40
 800468c:	4082      	lsls	r2, r0
 800468e:	4313      	orrs	r3, r2
 8004690:	3401      	adds	r4, #1
 8004692:	9304      	str	r3, [sp, #16]
 8004694:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004698:	4824      	ldr	r0, [pc, #144]	@ (800472c <_svfiprintf_r+0x1e8>)
 800469a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800469e:	2206      	movs	r2, #6
 80046a0:	f7fb fdbe 	bl	8000220 <memchr>
 80046a4:	2800      	cmp	r0, #0
 80046a6:	d036      	beq.n	8004716 <_svfiprintf_r+0x1d2>
 80046a8:	4b21      	ldr	r3, [pc, #132]	@ (8004730 <_svfiprintf_r+0x1ec>)
 80046aa:	bb1b      	cbnz	r3, 80046f4 <_svfiprintf_r+0x1b0>
 80046ac:	9b03      	ldr	r3, [sp, #12]
 80046ae:	3307      	adds	r3, #7
 80046b0:	f023 0307 	bic.w	r3, r3, #7
 80046b4:	3308      	adds	r3, #8
 80046b6:	9303      	str	r3, [sp, #12]
 80046b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046ba:	4433      	add	r3, r6
 80046bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80046be:	e76a      	b.n	8004596 <_svfiprintf_r+0x52>
 80046c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80046c4:	460c      	mov	r4, r1
 80046c6:	2001      	movs	r0, #1
 80046c8:	e7a8      	b.n	800461c <_svfiprintf_r+0xd8>
 80046ca:	2300      	movs	r3, #0
 80046cc:	3401      	adds	r4, #1
 80046ce:	9305      	str	r3, [sp, #20]
 80046d0:	4619      	mov	r1, r3
 80046d2:	f04f 0c0a 	mov.w	ip, #10
 80046d6:	4620      	mov	r0, r4
 80046d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046dc:	3a30      	subs	r2, #48	@ 0x30
 80046de:	2a09      	cmp	r2, #9
 80046e0:	d903      	bls.n	80046ea <_svfiprintf_r+0x1a6>
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d0c6      	beq.n	8004674 <_svfiprintf_r+0x130>
 80046e6:	9105      	str	r1, [sp, #20]
 80046e8:	e7c4      	b.n	8004674 <_svfiprintf_r+0x130>
 80046ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80046ee:	4604      	mov	r4, r0
 80046f0:	2301      	movs	r3, #1
 80046f2:	e7f0      	b.n	80046d6 <_svfiprintf_r+0x192>
 80046f4:	ab03      	add	r3, sp, #12
 80046f6:	9300      	str	r3, [sp, #0]
 80046f8:	462a      	mov	r2, r5
 80046fa:	4b0e      	ldr	r3, [pc, #56]	@ (8004734 <_svfiprintf_r+0x1f0>)
 80046fc:	a904      	add	r1, sp, #16
 80046fe:	4638      	mov	r0, r7
 8004700:	f3af 8000 	nop.w
 8004704:	1c42      	adds	r2, r0, #1
 8004706:	4606      	mov	r6, r0
 8004708:	d1d6      	bne.n	80046b8 <_svfiprintf_r+0x174>
 800470a:	89ab      	ldrh	r3, [r5, #12]
 800470c:	065b      	lsls	r3, r3, #25
 800470e:	f53f af2d 	bmi.w	800456c <_svfiprintf_r+0x28>
 8004712:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004714:	e72c      	b.n	8004570 <_svfiprintf_r+0x2c>
 8004716:	ab03      	add	r3, sp, #12
 8004718:	9300      	str	r3, [sp, #0]
 800471a:	462a      	mov	r2, r5
 800471c:	4b05      	ldr	r3, [pc, #20]	@ (8004734 <_svfiprintf_r+0x1f0>)
 800471e:	a904      	add	r1, sp, #16
 8004720:	4638      	mov	r0, r7
 8004722:	f000 f879 	bl	8004818 <_printf_i>
 8004726:	e7ed      	b.n	8004704 <_svfiprintf_r+0x1c0>
 8004728:	08004bf0 	.word	0x08004bf0
 800472c:	08004bfa 	.word	0x08004bfa
 8004730:	00000000 	.word	0x00000000
 8004734:	0800448d 	.word	0x0800448d
 8004738:	08004bf6 	.word	0x08004bf6

0800473c <_printf_common>:
 800473c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004740:	4616      	mov	r6, r2
 8004742:	4698      	mov	r8, r3
 8004744:	688a      	ldr	r2, [r1, #8]
 8004746:	690b      	ldr	r3, [r1, #16]
 8004748:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800474c:	4293      	cmp	r3, r2
 800474e:	bfb8      	it	lt
 8004750:	4613      	movlt	r3, r2
 8004752:	6033      	str	r3, [r6, #0]
 8004754:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004758:	4607      	mov	r7, r0
 800475a:	460c      	mov	r4, r1
 800475c:	b10a      	cbz	r2, 8004762 <_printf_common+0x26>
 800475e:	3301      	adds	r3, #1
 8004760:	6033      	str	r3, [r6, #0]
 8004762:	6823      	ldr	r3, [r4, #0]
 8004764:	0699      	lsls	r1, r3, #26
 8004766:	bf42      	ittt	mi
 8004768:	6833      	ldrmi	r3, [r6, #0]
 800476a:	3302      	addmi	r3, #2
 800476c:	6033      	strmi	r3, [r6, #0]
 800476e:	6825      	ldr	r5, [r4, #0]
 8004770:	f015 0506 	ands.w	r5, r5, #6
 8004774:	d106      	bne.n	8004784 <_printf_common+0x48>
 8004776:	f104 0a19 	add.w	sl, r4, #25
 800477a:	68e3      	ldr	r3, [r4, #12]
 800477c:	6832      	ldr	r2, [r6, #0]
 800477e:	1a9b      	subs	r3, r3, r2
 8004780:	42ab      	cmp	r3, r5
 8004782:	dc26      	bgt.n	80047d2 <_printf_common+0x96>
 8004784:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004788:	6822      	ldr	r2, [r4, #0]
 800478a:	3b00      	subs	r3, #0
 800478c:	bf18      	it	ne
 800478e:	2301      	movne	r3, #1
 8004790:	0692      	lsls	r2, r2, #26
 8004792:	d42b      	bmi.n	80047ec <_printf_common+0xb0>
 8004794:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004798:	4641      	mov	r1, r8
 800479a:	4638      	mov	r0, r7
 800479c:	47c8      	blx	r9
 800479e:	3001      	adds	r0, #1
 80047a0:	d01e      	beq.n	80047e0 <_printf_common+0xa4>
 80047a2:	6823      	ldr	r3, [r4, #0]
 80047a4:	6922      	ldr	r2, [r4, #16]
 80047a6:	f003 0306 	and.w	r3, r3, #6
 80047aa:	2b04      	cmp	r3, #4
 80047ac:	bf02      	ittt	eq
 80047ae:	68e5      	ldreq	r5, [r4, #12]
 80047b0:	6833      	ldreq	r3, [r6, #0]
 80047b2:	1aed      	subeq	r5, r5, r3
 80047b4:	68a3      	ldr	r3, [r4, #8]
 80047b6:	bf0c      	ite	eq
 80047b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047bc:	2500      	movne	r5, #0
 80047be:	4293      	cmp	r3, r2
 80047c0:	bfc4      	itt	gt
 80047c2:	1a9b      	subgt	r3, r3, r2
 80047c4:	18ed      	addgt	r5, r5, r3
 80047c6:	2600      	movs	r6, #0
 80047c8:	341a      	adds	r4, #26
 80047ca:	42b5      	cmp	r5, r6
 80047cc:	d11a      	bne.n	8004804 <_printf_common+0xc8>
 80047ce:	2000      	movs	r0, #0
 80047d0:	e008      	b.n	80047e4 <_printf_common+0xa8>
 80047d2:	2301      	movs	r3, #1
 80047d4:	4652      	mov	r2, sl
 80047d6:	4641      	mov	r1, r8
 80047d8:	4638      	mov	r0, r7
 80047da:	47c8      	blx	r9
 80047dc:	3001      	adds	r0, #1
 80047de:	d103      	bne.n	80047e8 <_printf_common+0xac>
 80047e0:	f04f 30ff 	mov.w	r0, #4294967295
 80047e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047e8:	3501      	adds	r5, #1
 80047ea:	e7c6      	b.n	800477a <_printf_common+0x3e>
 80047ec:	18e1      	adds	r1, r4, r3
 80047ee:	1c5a      	adds	r2, r3, #1
 80047f0:	2030      	movs	r0, #48	@ 0x30
 80047f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80047f6:	4422      	add	r2, r4
 80047f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80047fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004800:	3302      	adds	r3, #2
 8004802:	e7c7      	b.n	8004794 <_printf_common+0x58>
 8004804:	2301      	movs	r3, #1
 8004806:	4622      	mov	r2, r4
 8004808:	4641      	mov	r1, r8
 800480a:	4638      	mov	r0, r7
 800480c:	47c8      	blx	r9
 800480e:	3001      	adds	r0, #1
 8004810:	d0e6      	beq.n	80047e0 <_printf_common+0xa4>
 8004812:	3601      	adds	r6, #1
 8004814:	e7d9      	b.n	80047ca <_printf_common+0x8e>
	...

08004818 <_printf_i>:
 8004818:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800481c:	7e0f      	ldrb	r7, [r1, #24]
 800481e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004820:	2f78      	cmp	r7, #120	@ 0x78
 8004822:	4691      	mov	r9, r2
 8004824:	4680      	mov	r8, r0
 8004826:	460c      	mov	r4, r1
 8004828:	469a      	mov	sl, r3
 800482a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800482e:	d807      	bhi.n	8004840 <_printf_i+0x28>
 8004830:	2f62      	cmp	r7, #98	@ 0x62
 8004832:	d80a      	bhi.n	800484a <_printf_i+0x32>
 8004834:	2f00      	cmp	r7, #0
 8004836:	f000 80d1 	beq.w	80049dc <_printf_i+0x1c4>
 800483a:	2f58      	cmp	r7, #88	@ 0x58
 800483c:	f000 80b8 	beq.w	80049b0 <_printf_i+0x198>
 8004840:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004844:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004848:	e03a      	b.n	80048c0 <_printf_i+0xa8>
 800484a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800484e:	2b15      	cmp	r3, #21
 8004850:	d8f6      	bhi.n	8004840 <_printf_i+0x28>
 8004852:	a101      	add	r1, pc, #4	@ (adr r1, 8004858 <_printf_i+0x40>)
 8004854:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004858:	080048b1 	.word	0x080048b1
 800485c:	080048c5 	.word	0x080048c5
 8004860:	08004841 	.word	0x08004841
 8004864:	08004841 	.word	0x08004841
 8004868:	08004841 	.word	0x08004841
 800486c:	08004841 	.word	0x08004841
 8004870:	080048c5 	.word	0x080048c5
 8004874:	08004841 	.word	0x08004841
 8004878:	08004841 	.word	0x08004841
 800487c:	08004841 	.word	0x08004841
 8004880:	08004841 	.word	0x08004841
 8004884:	080049c3 	.word	0x080049c3
 8004888:	080048ef 	.word	0x080048ef
 800488c:	0800497d 	.word	0x0800497d
 8004890:	08004841 	.word	0x08004841
 8004894:	08004841 	.word	0x08004841
 8004898:	080049e5 	.word	0x080049e5
 800489c:	08004841 	.word	0x08004841
 80048a0:	080048ef 	.word	0x080048ef
 80048a4:	08004841 	.word	0x08004841
 80048a8:	08004841 	.word	0x08004841
 80048ac:	08004985 	.word	0x08004985
 80048b0:	6833      	ldr	r3, [r6, #0]
 80048b2:	1d1a      	adds	r2, r3, #4
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	6032      	str	r2, [r6, #0]
 80048b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80048bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80048c0:	2301      	movs	r3, #1
 80048c2:	e09c      	b.n	80049fe <_printf_i+0x1e6>
 80048c4:	6833      	ldr	r3, [r6, #0]
 80048c6:	6820      	ldr	r0, [r4, #0]
 80048c8:	1d19      	adds	r1, r3, #4
 80048ca:	6031      	str	r1, [r6, #0]
 80048cc:	0606      	lsls	r6, r0, #24
 80048ce:	d501      	bpl.n	80048d4 <_printf_i+0xbc>
 80048d0:	681d      	ldr	r5, [r3, #0]
 80048d2:	e003      	b.n	80048dc <_printf_i+0xc4>
 80048d4:	0645      	lsls	r5, r0, #25
 80048d6:	d5fb      	bpl.n	80048d0 <_printf_i+0xb8>
 80048d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80048dc:	2d00      	cmp	r5, #0
 80048de:	da03      	bge.n	80048e8 <_printf_i+0xd0>
 80048e0:	232d      	movs	r3, #45	@ 0x2d
 80048e2:	426d      	negs	r5, r5
 80048e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048e8:	4858      	ldr	r0, [pc, #352]	@ (8004a4c <_printf_i+0x234>)
 80048ea:	230a      	movs	r3, #10
 80048ec:	e011      	b.n	8004912 <_printf_i+0xfa>
 80048ee:	6821      	ldr	r1, [r4, #0]
 80048f0:	6833      	ldr	r3, [r6, #0]
 80048f2:	0608      	lsls	r0, r1, #24
 80048f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80048f8:	d402      	bmi.n	8004900 <_printf_i+0xe8>
 80048fa:	0649      	lsls	r1, r1, #25
 80048fc:	bf48      	it	mi
 80048fe:	b2ad      	uxthmi	r5, r5
 8004900:	2f6f      	cmp	r7, #111	@ 0x6f
 8004902:	4852      	ldr	r0, [pc, #328]	@ (8004a4c <_printf_i+0x234>)
 8004904:	6033      	str	r3, [r6, #0]
 8004906:	bf14      	ite	ne
 8004908:	230a      	movne	r3, #10
 800490a:	2308      	moveq	r3, #8
 800490c:	2100      	movs	r1, #0
 800490e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004912:	6866      	ldr	r6, [r4, #4]
 8004914:	60a6      	str	r6, [r4, #8]
 8004916:	2e00      	cmp	r6, #0
 8004918:	db05      	blt.n	8004926 <_printf_i+0x10e>
 800491a:	6821      	ldr	r1, [r4, #0]
 800491c:	432e      	orrs	r6, r5
 800491e:	f021 0104 	bic.w	r1, r1, #4
 8004922:	6021      	str	r1, [r4, #0]
 8004924:	d04b      	beq.n	80049be <_printf_i+0x1a6>
 8004926:	4616      	mov	r6, r2
 8004928:	fbb5 f1f3 	udiv	r1, r5, r3
 800492c:	fb03 5711 	mls	r7, r3, r1, r5
 8004930:	5dc7      	ldrb	r7, [r0, r7]
 8004932:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004936:	462f      	mov	r7, r5
 8004938:	42bb      	cmp	r3, r7
 800493a:	460d      	mov	r5, r1
 800493c:	d9f4      	bls.n	8004928 <_printf_i+0x110>
 800493e:	2b08      	cmp	r3, #8
 8004940:	d10b      	bne.n	800495a <_printf_i+0x142>
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	07df      	lsls	r7, r3, #31
 8004946:	d508      	bpl.n	800495a <_printf_i+0x142>
 8004948:	6923      	ldr	r3, [r4, #16]
 800494a:	6861      	ldr	r1, [r4, #4]
 800494c:	4299      	cmp	r1, r3
 800494e:	bfde      	ittt	le
 8004950:	2330      	movle	r3, #48	@ 0x30
 8004952:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004956:	f106 36ff 	addle.w	r6, r6, #4294967295
 800495a:	1b92      	subs	r2, r2, r6
 800495c:	6122      	str	r2, [r4, #16]
 800495e:	f8cd a000 	str.w	sl, [sp]
 8004962:	464b      	mov	r3, r9
 8004964:	aa03      	add	r2, sp, #12
 8004966:	4621      	mov	r1, r4
 8004968:	4640      	mov	r0, r8
 800496a:	f7ff fee7 	bl	800473c <_printf_common>
 800496e:	3001      	adds	r0, #1
 8004970:	d14a      	bne.n	8004a08 <_printf_i+0x1f0>
 8004972:	f04f 30ff 	mov.w	r0, #4294967295
 8004976:	b004      	add	sp, #16
 8004978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800497c:	6823      	ldr	r3, [r4, #0]
 800497e:	f043 0320 	orr.w	r3, r3, #32
 8004982:	6023      	str	r3, [r4, #0]
 8004984:	4832      	ldr	r0, [pc, #200]	@ (8004a50 <_printf_i+0x238>)
 8004986:	2778      	movs	r7, #120	@ 0x78
 8004988:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800498c:	6823      	ldr	r3, [r4, #0]
 800498e:	6831      	ldr	r1, [r6, #0]
 8004990:	061f      	lsls	r7, r3, #24
 8004992:	f851 5b04 	ldr.w	r5, [r1], #4
 8004996:	d402      	bmi.n	800499e <_printf_i+0x186>
 8004998:	065f      	lsls	r7, r3, #25
 800499a:	bf48      	it	mi
 800499c:	b2ad      	uxthmi	r5, r5
 800499e:	6031      	str	r1, [r6, #0]
 80049a0:	07d9      	lsls	r1, r3, #31
 80049a2:	bf44      	itt	mi
 80049a4:	f043 0320 	orrmi.w	r3, r3, #32
 80049a8:	6023      	strmi	r3, [r4, #0]
 80049aa:	b11d      	cbz	r5, 80049b4 <_printf_i+0x19c>
 80049ac:	2310      	movs	r3, #16
 80049ae:	e7ad      	b.n	800490c <_printf_i+0xf4>
 80049b0:	4826      	ldr	r0, [pc, #152]	@ (8004a4c <_printf_i+0x234>)
 80049b2:	e7e9      	b.n	8004988 <_printf_i+0x170>
 80049b4:	6823      	ldr	r3, [r4, #0]
 80049b6:	f023 0320 	bic.w	r3, r3, #32
 80049ba:	6023      	str	r3, [r4, #0]
 80049bc:	e7f6      	b.n	80049ac <_printf_i+0x194>
 80049be:	4616      	mov	r6, r2
 80049c0:	e7bd      	b.n	800493e <_printf_i+0x126>
 80049c2:	6833      	ldr	r3, [r6, #0]
 80049c4:	6825      	ldr	r5, [r4, #0]
 80049c6:	6961      	ldr	r1, [r4, #20]
 80049c8:	1d18      	adds	r0, r3, #4
 80049ca:	6030      	str	r0, [r6, #0]
 80049cc:	062e      	lsls	r6, r5, #24
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	d501      	bpl.n	80049d6 <_printf_i+0x1be>
 80049d2:	6019      	str	r1, [r3, #0]
 80049d4:	e002      	b.n	80049dc <_printf_i+0x1c4>
 80049d6:	0668      	lsls	r0, r5, #25
 80049d8:	d5fb      	bpl.n	80049d2 <_printf_i+0x1ba>
 80049da:	8019      	strh	r1, [r3, #0]
 80049dc:	2300      	movs	r3, #0
 80049de:	6123      	str	r3, [r4, #16]
 80049e0:	4616      	mov	r6, r2
 80049e2:	e7bc      	b.n	800495e <_printf_i+0x146>
 80049e4:	6833      	ldr	r3, [r6, #0]
 80049e6:	1d1a      	adds	r2, r3, #4
 80049e8:	6032      	str	r2, [r6, #0]
 80049ea:	681e      	ldr	r6, [r3, #0]
 80049ec:	6862      	ldr	r2, [r4, #4]
 80049ee:	2100      	movs	r1, #0
 80049f0:	4630      	mov	r0, r6
 80049f2:	f7fb fc15 	bl	8000220 <memchr>
 80049f6:	b108      	cbz	r0, 80049fc <_printf_i+0x1e4>
 80049f8:	1b80      	subs	r0, r0, r6
 80049fa:	6060      	str	r0, [r4, #4]
 80049fc:	6863      	ldr	r3, [r4, #4]
 80049fe:	6123      	str	r3, [r4, #16]
 8004a00:	2300      	movs	r3, #0
 8004a02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a06:	e7aa      	b.n	800495e <_printf_i+0x146>
 8004a08:	6923      	ldr	r3, [r4, #16]
 8004a0a:	4632      	mov	r2, r6
 8004a0c:	4649      	mov	r1, r9
 8004a0e:	4640      	mov	r0, r8
 8004a10:	47d0      	blx	sl
 8004a12:	3001      	adds	r0, #1
 8004a14:	d0ad      	beq.n	8004972 <_printf_i+0x15a>
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	079b      	lsls	r3, r3, #30
 8004a1a:	d413      	bmi.n	8004a44 <_printf_i+0x22c>
 8004a1c:	68e0      	ldr	r0, [r4, #12]
 8004a1e:	9b03      	ldr	r3, [sp, #12]
 8004a20:	4298      	cmp	r0, r3
 8004a22:	bfb8      	it	lt
 8004a24:	4618      	movlt	r0, r3
 8004a26:	e7a6      	b.n	8004976 <_printf_i+0x15e>
 8004a28:	2301      	movs	r3, #1
 8004a2a:	4632      	mov	r2, r6
 8004a2c:	4649      	mov	r1, r9
 8004a2e:	4640      	mov	r0, r8
 8004a30:	47d0      	blx	sl
 8004a32:	3001      	adds	r0, #1
 8004a34:	d09d      	beq.n	8004972 <_printf_i+0x15a>
 8004a36:	3501      	adds	r5, #1
 8004a38:	68e3      	ldr	r3, [r4, #12]
 8004a3a:	9903      	ldr	r1, [sp, #12]
 8004a3c:	1a5b      	subs	r3, r3, r1
 8004a3e:	42ab      	cmp	r3, r5
 8004a40:	dcf2      	bgt.n	8004a28 <_printf_i+0x210>
 8004a42:	e7eb      	b.n	8004a1c <_printf_i+0x204>
 8004a44:	2500      	movs	r5, #0
 8004a46:	f104 0619 	add.w	r6, r4, #25
 8004a4a:	e7f5      	b.n	8004a38 <_printf_i+0x220>
 8004a4c:	08004c01 	.word	0x08004c01
 8004a50:	08004c12 	.word	0x08004c12

08004a54 <memmove>:
 8004a54:	4288      	cmp	r0, r1
 8004a56:	b510      	push	{r4, lr}
 8004a58:	eb01 0402 	add.w	r4, r1, r2
 8004a5c:	d902      	bls.n	8004a64 <memmove+0x10>
 8004a5e:	4284      	cmp	r4, r0
 8004a60:	4623      	mov	r3, r4
 8004a62:	d807      	bhi.n	8004a74 <memmove+0x20>
 8004a64:	1e43      	subs	r3, r0, #1
 8004a66:	42a1      	cmp	r1, r4
 8004a68:	d008      	beq.n	8004a7c <memmove+0x28>
 8004a6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a72:	e7f8      	b.n	8004a66 <memmove+0x12>
 8004a74:	4402      	add	r2, r0
 8004a76:	4601      	mov	r1, r0
 8004a78:	428a      	cmp	r2, r1
 8004a7a:	d100      	bne.n	8004a7e <memmove+0x2a>
 8004a7c:	bd10      	pop	{r4, pc}
 8004a7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a86:	e7f7      	b.n	8004a78 <memmove+0x24>

08004a88 <_sbrk_r>:
 8004a88:	b538      	push	{r3, r4, r5, lr}
 8004a8a:	4d06      	ldr	r5, [pc, #24]	@ (8004aa4 <_sbrk_r+0x1c>)
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	4604      	mov	r4, r0
 8004a90:	4608      	mov	r0, r1
 8004a92:	602b      	str	r3, [r5, #0]
 8004a94:	f7fc fb7c 	bl	8001190 <_sbrk>
 8004a98:	1c43      	adds	r3, r0, #1
 8004a9a:	d102      	bne.n	8004aa2 <_sbrk_r+0x1a>
 8004a9c:	682b      	ldr	r3, [r5, #0]
 8004a9e:	b103      	cbz	r3, 8004aa2 <_sbrk_r+0x1a>
 8004aa0:	6023      	str	r3, [r4, #0]
 8004aa2:	bd38      	pop	{r3, r4, r5, pc}
 8004aa4:	200002a8 	.word	0x200002a8

08004aa8 <memcpy>:
 8004aa8:	440a      	add	r2, r1
 8004aaa:	4291      	cmp	r1, r2
 8004aac:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ab0:	d100      	bne.n	8004ab4 <memcpy+0xc>
 8004ab2:	4770      	bx	lr
 8004ab4:	b510      	push	{r4, lr}
 8004ab6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004aba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004abe:	4291      	cmp	r1, r2
 8004ac0:	d1f9      	bne.n	8004ab6 <memcpy+0xe>
 8004ac2:	bd10      	pop	{r4, pc}

08004ac4 <_realloc_r>:
 8004ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ac8:	4607      	mov	r7, r0
 8004aca:	4614      	mov	r4, r2
 8004acc:	460d      	mov	r5, r1
 8004ace:	b921      	cbnz	r1, 8004ada <_realloc_r+0x16>
 8004ad0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ad4:	4611      	mov	r1, r2
 8004ad6:	f7ff bc4d 	b.w	8004374 <_malloc_r>
 8004ada:	b92a      	cbnz	r2, 8004ae8 <_realloc_r+0x24>
 8004adc:	f7ff fbde 	bl	800429c <_free_r>
 8004ae0:	4625      	mov	r5, r4
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ae8:	f000 f81a 	bl	8004b20 <_malloc_usable_size_r>
 8004aec:	4284      	cmp	r4, r0
 8004aee:	4606      	mov	r6, r0
 8004af0:	d802      	bhi.n	8004af8 <_realloc_r+0x34>
 8004af2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004af6:	d8f4      	bhi.n	8004ae2 <_realloc_r+0x1e>
 8004af8:	4621      	mov	r1, r4
 8004afa:	4638      	mov	r0, r7
 8004afc:	f7ff fc3a 	bl	8004374 <_malloc_r>
 8004b00:	4680      	mov	r8, r0
 8004b02:	b908      	cbnz	r0, 8004b08 <_realloc_r+0x44>
 8004b04:	4645      	mov	r5, r8
 8004b06:	e7ec      	b.n	8004ae2 <_realloc_r+0x1e>
 8004b08:	42b4      	cmp	r4, r6
 8004b0a:	4622      	mov	r2, r4
 8004b0c:	4629      	mov	r1, r5
 8004b0e:	bf28      	it	cs
 8004b10:	4632      	movcs	r2, r6
 8004b12:	f7ff ffc9 	bl	8004aa8 <memcpy>
 8004b16:	4629      	mov	r1, r5
 8004b18:	4638      	mov	r0, r7
 8004b1a:	f7ff fbbf 	bl	800429c <_free_r>
 8004b1e:	e7f1      	b.n	8004b04 <_realloc_r+0x40>

08004b20 <_malloc_usable_size_r>:
 8004b20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b24:	1f18      	subs	r0, r3, #4
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	bfbc      	itt	lt
 8004b2a:	580b      	ldrlt	r3, [r1, r0]
 8004b2c:	18c0      	addlt	r0, r0, r3
 8004b2e:	4770      	bx	lr

08004b30 <_init>:
 8004b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b32:	bf00      	nop
 8004b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b36:	bc08      	pop	{r3}
 8004b38:	469e      	mov	lr, r3
 8004b3a:	4770      	bx	lr

08004b3c <_fini>:
 8004b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b3e:	bf00      	nop
 8004b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b42:	bc08      	pop	{r3}
 8004b44:	469e      	mov	lr, r3
 8004b46:	4770      	bx	lr
